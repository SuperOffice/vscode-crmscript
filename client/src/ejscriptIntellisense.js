var ejScriptIntellisense = [
{text: "Void.AppointmentSlicer", help: "<b>AppointmentSlicer<\/b>\n\nThis class is used to slice appointments into single entities which are within a single day. This class is essential when having calender data (with entries possibly spanning several days), which you would like to display in the calender control (which only accepts data for single days).\n\nExample code:\n\nAppointmentSlicer a;\n\na.addAppointment(1, DateTime(2017, 4, 23, 8, 0, 0), DateTime(2017, 4, 23, 10, 30, 0), \"Meeting\");\nprint(a.next().toString()); \/\/ Prints true if there is a preseding appointment the same day"},
{text: "AppointmentSlicer.eof", help: "<b>Bool eof()<\/b>\n\nThis function will return true if the internal iterator is past the appointments for the chosen day, otherwise False."},
{text: "AppointmentSlicer.next", help: "<b>Bool next()<\/b>\n\nThis function moves the internal iterator to next appointment in the same day.\n\nIt returns False if eof(), otherwise True."},
{text: "AppointmentSlicer.getLoadForDay", help: "<b>Integer getLoadForDay(Date day, Time start, Time stop, Integer max)<\/b>\n\nThis function will return the accumulated load for a given day. The load is calculated by adding all the appointments for that day, cutting them at the start and stop times. Finally, the value returned is never more than max (unless max is -1, in which case there is no limit).\n\nThe start and stop limits are useful because it can be used to eliminate private appointments in the evening.\n\nThe max is good, because one normally never works more than 8 hours pr. day :)\n\nParameters:\n - day: The day to get the load for\n - start: When to start calculating.\n - stop: When to stop calculating.\n - max: The maximum time returned.\n\nReturns the calculated load for the given day"},
{text: "AppointmentSlicer.getValue", help: "<b>String getValue(String field)<\/b>\n\nReturns the value for the given field for the appointment pointed to by the internal iterator.\n\nAvailable field values are:\n - id\n - date: The date for the appointment\n - start: The time the appointment starts\n - stop\n - title\n\nParameters:\n - field: The field to get the value for"},
{text: "AppointmentSlicer.addAppointment", help: "<b>Void addAppointment(Integer id, DateTime start, DateTime end, String title)<\/b>\n\nAdds an appointment to the class.\n\nParameters:\n - id: The id of the appointment (can be retrieved later)\n - start: The start datetime\n - stop: The stop datetime\n - title: The title of the appointment"},
{text: "AppointmentSlicer.clear", help: "<b>Void clear()<\/b>\n\nClears all the added appointments from the instance."},
{text: "AppointmentSlicer.setActiveDate", help: "<b>Void setActiveDate(Date d)<\/b>\n\nSets the internal iterator to the given date.\n\n - d: The date to set the internal iterator to."},
{text: "Void.Attachment", help: "<b>Attachment<\/b>\n\nThis class is used to handle eJournal attachments.\n\nExample code:\n\nAttachment a;\n\na.load(2); \/\/ Loads attachment with id = 2\na.setValue(\"name\", \"test.txt\");\nprint(a.getValue(\"size\")); \/\/ Size in bytes\na.save();"},
{text: "Attachment.dump", help: "<b>Bool dump()<\/b>\n\nDumps the attachment file to output."},
{text: "Attachment.dump", help: "<b>Bool dump(Bool p_saveToDisk)<\/b>\n\nDumps the attachment file to output. Returns bool true if everything ok, else false.\n\nParameter:\n - Bool: If true, this will tell the browser to download the file, and not attempt to display it."},
{text: "Attachment.load", help: "<b>Bool load(Integer id)<\/b>\n\nLoad in eJournal attachment from disk.\n\nParameter:\n - Attachment id\n\nReturns true if load was successful, false if not."},
{text: "Attachment.", help: "<b>Dump(Bool)<\/b>\n\nDumps the attachment file to output.\n\nParameter:\n - Bool: If true, this will tell the browser to download the file, and not attempt to display it.\n\nReturns true if everything ok, else false."},
{text: "Attachment.save", help: "<b>Integer save()<\/b>\n\nSave the attachment to disk.\n\nReturns attachment id."},
{text: "Attachment.saveBase64", help: "<b>Integer saveBase64(String p_0)<\/b>\n\nThis function creates a filename and saves a base64 coded attachment to disk. Returns the actual number of bytes written to disk.\n\nParameter:\n - p_0: The base 64 encoded string to save."},
{text: "Attachment.getBase64", help: "<b>String getBase64()<\/b>\n\nReturns the attachment as base64 encoded string.\n\nThis can be used to load a binary attachment into a string, as base64 coded data is valid ASCII."},
{text: "Attachment.getDownloadUrl", help: "<b>String getDownloadUrl(Bool external, Bool saveToDisk)<\/b>\n\nConstruct an download url for the attachment. There are two kinds of urls first we have the kind that the customers can used they are called external. Then we have the kind the eJournal users can use and they are called internal.\n\nParameters:\n - external: Is the url to be used by a customer or an user.\n - saveToDisk: Is this a link used to hint to the web browser with http headers that the file is not to be opened, but saved to disk."},
{text: "Attachment.getRaw", help: "<b>String getRaw()<\/b>\n\nGet the whole attachment as a String without any special encoding.\n\nReturns raw attachment as a String."},
{text: "Attachment.getValue", help: "<b>String getValue(String name)<\/b>\n\nGet a value from the attachment class. Returns the value as a string.\n\nThe current implementation supports the following values as the name parameter.\n\n - id: the attachment id\n - contentType: content descriptor\n - name: the filename\n - size: size in bytes\n - key: authentication key\n - charset\n - dbiAgentId\n - dbiKey\n - dbiLastModified\n - dbiLastSyncronized\n\nParameter:\n - name: Value to receive"},
{text: "Attachment.remove", help: "<b>Void remove()<\/b>\n\nDeletes the attachment record from the database and the attachment file from disk."},
{text: "Attachment.setValue", help: "<b>Void setValue(String name, String value)<\/b>\n\nSet a value on the attachment object. Returns the value to assign.\n\nThe current implementation supports the following values for the name parameter.\n\n- id: the attachment id\n- contentType: content descriptor\n- name: the filename\n- size: size in bytes\n- key: authentication key\n- charset\n- dbiAgentId\n- dbiKey\n- dbiLastModified\n- dbiLastSyncronized\n\nParameter:\n - name: Name of the parameter to write"},
{text: "Void.Bool", help: "<b>Bool<\/b>\n\nA class for representing Booleans as objects.\nConstructor can take a Bool, and returns a Bool."},
{text: "Bool.toInteger", help: "<b>Integer toInteger()<\/b>\n\nReturns an integer representation of the bool value. False equals 0 and true equals 1."},
{text: "Bool.toString", help: "<b>String toString()<\/b>\n\nReturns a string representation of the bool, either \"true\" or \"false\"."},
{text: "Void.Byte", help: "<b>Byte<\/b>\n\nThis class represents a byte."},
{text: "Byte.toBool", help: "<b>Bool toBool()<\/b>\n\nReturns a boolean value of the Byte.\n\nIf(value != 0)\n  return true;\nelse\n  return false;"},
{text: "Byte.toInteger", help: "<b>Integer toInteger()<\/b>\n\nReturns the value of a byte as an integer."},
{text: "Byte.toHex", help: "<b>String toHex()<\/b>\n\nReturns the value of a Byte as hexadecimal representation of the byte.\n\nThe byte 10 will return \"a\", 11 will return \"b\" and so on."},
{text: "Byte.toHex", help: "<b>String toHex(Integer p_padding)<\/b>\n\nThis function will convert the current byte to a heaxadecimal representation of the byte with padding of p_padding.\n\nParameter:\n - \"p_padding\": The number of padding zeroes"},
{text: "Byte.toString", help: "<b>String toString()<\/b>\n\nReturns the value of a Byte to a string."},
{text: "Void.Cache", help: "<b>Cache<\/b>\n\n"},
{text: "Cache.eof", help: "<b>Bool eof()<\/b>\n\nThis function checks if there are no more fields in the result. The function returns true if it is at end of file\/there are no more fields to iterate through.\n\nA common usage is in the condition section in a for loop."},
{text: "Cache.first", help: "<b>Bool first()<\/b>\n\nSets the iterator variable to the first field in the fieldset.\n\nReturns false if the fieldset is empty, else false."},
{text: "Cache.next", help: "<b>Bool next()<\/b>\n\nSets the iterator to the next field.\n\nReturns false if at end of file or the fieldset is empty, else true."},
{text: "Cache.getRow", help: "<b>Map getRow()<\/b>\n\nReturns a row of fields."},
{text: "Cache.getData", help: "<b>Void getData(String p_0)<\/b>\n\nThis function will return data from a cached table.\n\nParameters:\n - p_db: The database\n - p_tableId: The table to return"},
{text: "Cache.getDataSubset", help: "<b>Void getDataSubset(String p_0, String p_1, String p_2)<\/b>\n\nThis function will return a subset of the data for a cached table based on a filter, where a field must have a given value.\n\nParameters:\n - p_db: The database\n - p_tableId: The table to return\n - p_filterField: The field to use for filtering\n - p_filterValue: The value to compare p_filterField with to include a row\n\nReturns the rows from the table where p_filterField = p_filterValue"},
{text: "Cache.sort", help: "<b>Void sort(String p_0, Bool p_1)<\/b>\n\nSorts the cached data by given field in given order.\n\nParameters:\n - p_field: The field to sort by\n - p_order: Boolean. False will sort in an ascending order, true in a descending order."},
{text: "Void.Category", help: "<b>Category<\/b>\n\nClass used for accessing and changing a ticket category.\n\nExample code:\n\nCategory c;\n\nc.load(2); \/\/Loads category with id = 2\nprint(c.getValue(\"notificationEmail\"));\nc.setValue(\"name\", \"Bob\");\nc.save();"},
{text: "Category.load", help: "<b>Bool load(Integer id)<\/b>\n\nLoad object with values from category with given id.\n\nParameter:\n - id: The id of the category to load.\n\nReturns true if the category exists, otherwise false.\n\nExample code:\n\nCategory c;\n\nc.load(2);\nprint(c.getValue(\"name\"));"},
{text: "Category.save", help: "<b>Integer save()<\/b>\n\nSaves the category and returns its id.\n\nReturns the id of the saved category."},
{text: "Category.getValue", help: "<b>String getValue(String field)<\/b>\n\nRetrieves the value of the given field in the category.\n\nAvailable fields are:\n - id: The id of the category.\n - parent: The id of the parent category.\n - name: The name of the category.\n - fullname: The full name of the category (e.g. \"Support\/Product A\/bugs\").\n - externalName: The external name of the category.\n - categoryMaster: The id of the category master.\n - children: A comma separated list of children ids.\n - notificationEmail: The value of the email Notification field\n\nParameter:\n - field: The field to get.\n\nExample code:\n\nCategory c;\n\nc.load(2);\nprint(c.getValue(\"name\"));"},
{text: "Category.setValue", help: "<b>Void setValue(String name, String value)<\/b>\n\nSets the value of the given field for the category.\n\nThe available fields are:\n - parent: The id of the parent category.\n - name: The name of the category.\n - externalName: The external name of the category.\n - categoryMaster: The id of the category master.\n - notificationEmail: The value of the email notification field\n\nParameters:\n - name: The name of the field to set.\n - value: The value to set.\n\nExample code:\n\nCategory c;\n\nc.load(2);\nc.setValue(\"name\", \"Test\");\nprint(c.getValue(\"name\"));"},
{text: "Void.Company", help: "<b>Company<\/b>\n\nClass for representing a company\n\nExample code:\n\nCompany c;\n\nc.load(2); \/\/ Loads company with id = 2\nprint(c.getValue(\"primContact\"));\nc.setValue(\"name\", \"SuperOffice\");\nBool b = c.checkFieldRights(\"contact\", \"read\");\nprint(b.toString());\nc.save();"},
{text: "Company.checkFieldRights", help: "<b>Bool checkFieldRights(String field, String fieldRight)<\/b>\n\nUse this function to see if the current user has access to the field.\n\nfieldRight might be:\n - read\n - write\n\nExample code:\n\nCompany c;\n\nc.load(3);\nBool b = c.checkFieldRights(\"contact\", \"read\");\nprint(b.toString());"},
{text: "Company.checkTableRights", help: "<b>Bool checkTableRights(String tableRight)<\/b>\n\nUse this function to see if the current user has access to this company.\n\ntableRight might be:\n- select\n- update\n- insert\n\nExample code:\n\nCompany c;\n\nc.load(3);\nBool b = c.checkTableRights(\"select\");\nprint(b.toString());"},
{text: "Company.findFromDomain", help: "<b>Bool findFromDomain(String domain)<\/b>\n\nFind and load company object given a domain.\n\nParameter:\n - domain of the company\n\nReturns a boolean of the load result, true if successfully loaded."},
{text: "Company.load", help: "<b>Bool load(Integer id)<\/b>\n\nLoad object with values from company with given id.\n\nParameter:\n - id of the company\n\nReturns a boolean of the load result, true if successfully loaded.\n\nExample code:\n\nCompany c;\n\nBool b = c.load(3);\nprint(b.toString());"},
{text: "Company.loadFromAgentAndKey", help: "<b>Bool loadFromAgentAndKey(Integer agent, String key)<\/b>\n\nLoads a company based on agent id and external key.\n\nThis function will load a company (possibly overwriting existing values) from the database, based on the agent id and external key.\n\nParameters:\n - agent: The id of the agent that \"owns\" this company.\n - key: The external key of this company.\n\nReturns true if operation was successful, false if the company does not exist."},
{text: "Company.save", help: "<b>Integer save()<\/b>\n\nSaves the object and returns its id.\n\nReturns integer of the company id."},
{text: "Company.getFormattedAddress", help: "<b>LocalizedField[][] getFormattedAddress()<\/b>\n\nGets the formatted company address.\n\nReturns a LocalizedField[][] Address."},
{text: "Company.getFormattedAddress", help: "<b>NSLocalizedField[][] getFormattedAddress()<\/b>\n\nGets the formatted company address.\n\nReturns an NSLocalizedField[][] Address."},
{text: "Company.getValue", help: "<b>String getValue(String colName)<\/b>\n\nGets a String with the value of a given column.\n\nParameter:\n - String colName\n\nPossible colNames:\n - id: Integer, The primary key (auto-incremented)\n - primContact: Integer, The id of the customer who is the primary contact for this company customer.id\n - name: String, The name of the company\n - note: String, A freetext field for various notes about this company\n - phone: String, The company's phone number\n - fax: String, The company's faxnumber\n - adr: String, The company's address\n - priority: Integer, The reference to the default priority for this company. NULL or -1 if not set. ticket_priority.id\n - deleted: Bool, A boolean telling if the company is deleted\n - language: Integer, The reference to the default customer language for this company. NULL or -1 if not set. cust_lang.id\n - ourContact: Integer, The customer's primary contact ejuser.id\n - extTable: Integer, The reference to the external table if this is a cached entry. NULL or -1 if not. ext_table.id\n - extKey: String, The primary key for the cached entry in the external datasource.\n - extLastCached: DateTime, When the cached entry was last updated.\n - domain: String, A display version of the company_domain table for this company.\n - x_* The extrafield with the given database field name.\n\nReturns a string value of the given column.\n\nExample code:\n\nCompany c;\n\nc.load(3);\nBool b = c.checkTableRights(\"select\");\nprint(b.toString());\n\nprint(c.getValue(\"name\"));"},
{text: "Company.setFormattedAddress", help: "<b>Void setFormattedAddress(LocalizedField[][] p_addr)<\/b>\n\nSets the formatted company address.\n\n\\param LocalizedField[][] Address"},
{text: "Company.setFormattedAddress", help: "<b>Void setFormattedAddress(NSLocalizedField[][] p_0)<\/b>\n\nSets the formatted address for a company\n\nParameters:\n - p_0: The new address"},
{text: "Company.setValue", help: "<b>Void setValue(String column, String value)<\/b>\n\nSets a value in a column of a company.\n\nParameters:\n - String column name\n - String value that should be stored\n\nPossible column names:\n - id: Integer, The primary key (auto-incremented)\n - primContact: Integer, The id of the customer who is the primary contact for this company customer.id\n - name: String, The name of the company\n - note: String, A freetext field for various notes about this company\n - infoText: the same as note (From 7.x)\n - phone: String, The company's phone number\n - phone\/formattedNumber: String (From 7.x)\n - fax\/formattedNumber: String (From 7.x)\n - fax: String, The company's faxnumber\n - adr: String, The company's address (From 7.x setting address with adr is no longer supported. Attempting to do so, will result in a GeneralException. Use NetServer instead)\n - priority: Integer, The reference to the default priority for this company. NULL or -1 if not set. ticket_priority.id\n - deleted: Bool, A boolean telling if the company is deleted\n - language: Integer, The reference to the default customer language for this company. NULL or -1 if not set. cust_lang.id\n - ourContact: Integer, The customer's primary contact ejuser.id\n - ourSalesContact: Integer, The sales contact for this company. (From 7.x)\n - supportAssociateId: String, Set the support associate id. Supports both integer and the username. (From 7.x)\n - primContact: Integer, The customer's primary contact customer.id\n - extTable: Integer, The reference to the external table if this is a cached entry. NULL or -1 if not. ext_table.id\n - extKey: String, The primary key for the cached entry in the external datasource.\n - extLastCached: DateTime, When the cached entry was last updated.\n - domain: String, A display version of the company_domain table for this company.\n\nExample code:\n\nCompany c;\n\nc.load(3);\nBool b = c.checkTableRights(\"select\");\nprint(b.toString());\n\nc.setValue(\"name\", \"Test\");\nprint(c.getValue(\"name\"));"},
{text: "Company.toParser", help: "<b>Void toParser(Parser parser)<\/b>\n\nThis function puts a lot of fields into the input parser.\n\nParameters:\n - Parser parser: The parser to put the field-value-pairs to.\n\nThe following fields will be loaded:\n - company.id: The id\n - company.name: The name\n - company.note: The note\n - company.domain: The domain\n - company.phone: Phone number\n - company.fax: Fax number\n - company.adr: The address\n - company.ourContact: The id of the user that is this company's contact\n - company.primaryContact.id: The id of the customer that is this company's primary contact\n - company.primaryContact.email: The email address of the customer that is this company's primary contact\n - company.extraFieldName: The name of the extrafield, (not x_fieldname)"},
{text: "Void.Customer", help: "<b>Customer<\/b>\n\nClass for representing a customer.\n\nExample code:\n\nCustomer c;\n\nc.load(2); \/\/ Loads customer with id = 2\nprint(c.getValue(\"email\")); \/\/ Returns a list of all emails\nc.setValue(\"firstname\", \"Bob\");\nc.save();"},
{text: "Customer.checkFieldRights", help: "<b>Bool checkFieldRights(String field, String fieldRight)<\/b>\n\nUse this function to see if the current user has access to the field.\n\nfieldRight might be:\n - read\n - write\n\nExample code:\n\nCustomer c;\n\nc.load(3);\nBool b = c.checkFieldRights(\"person\",\"read\");\nprint(b.toString());"},
{text: "Customer.checkTableRights", help: "<b>Bool checkTableRights(String tableRight)<\/b>\n\nUse this function to see if the current user has access to this customer.\n\ntableRight might be:\n- select\n- update\n- insert\n\nExample code:\n\nCustomer c;\n\nc.load(3);\nBool b = c.checkTableRights(\"select\");\nprint(b.toString());"},
{text: "Customer.findExternallyFromEmail", help: "<b>Bool findExternallyFromEmail(String email, Integer extTable)<\/b>\n\nFind an entry in the external database based on an email address\n\nThis function will search all external datasources for a Customer matching the given email address. If an entry is found, a proxy entry is created and saved.\n\nParameters:\n - email: The email address (\"alias@domain\").\n - extTable: is used if you only want to search one datasource\n\nReturns true if an entry is found, false if not."},
{text: "Customer.findExternallyFromEmail", help: "<b>Bool findExternallyFromEmail(String p_0)<\/b>\n\nFind an entry in the external database based on an email address\n\nThis function will search all external datasources for a Customer matching the given email address. If an entry is found, a proxy entry is created and saved.\n\nParameter:\n - email: The email address (\"alias@domain\").\n\nReturns true if an entry is found, false if not."},
{text: "Customer.findFromCellphone", help: "<b>Bool findFromCellphone(String cellphone)<\/b>\n\nFind an entry based on the cellphone\n\nThis function will try to lookup a Customer entry in the database based on the cellphone.\n\nParameter:\n - cellphone: The cellphone to lookup.\n\nReturns true if found, otherwise false."},
{text: "Customer.findFromEmail", help: "<b>Bool findFromEmail(String email)<\/b>\n\nFind a Customer instance based on the email address.\n\nThis function will try to lookup a Customer entry in the primary database based on an email address.\n\nParameter:\n - email: The address to look up. Has to be address alone (\"alias@domain\").\n\nReturns true if found, false if not found."},
{text: "Customer.load", help: "<b>Bool load(Integer id)<\/b>\n\nLoads the customer with the given id.\n\nParameter:\n - id: The id of the customer to load.\n\nReturns true if the customer exists, otherwise false.\n\nExample code:\n\nCustomer c;\n\nprint(c.load(3));"},
{text: "Customer.loadFromAgentAndKey", help: "<b>Bool loadFromAgentAndKey(Integer agent, String key)<\/b>\n\nLoads a customer based on agent id and external key.\n\nThis function will load a customer (possibly overwriting existing values) from the database, based on the agent id and external key.\n\nParameters:\n - agent: The id of the agent that \"owns\" this customer.\n - key: The external key of this customer.\n\nReturns true if operation was successful, false if the customer does not exist."},
{text: "Customer.findExternallyFromKey", help: "<b>Integer findExternallyFromKey(Integer table, String key)<\/b>\n\nFind an external entry based on it's primary key and table id.\n\nThis function will search for and possibly create a proxy entry for an external entry based on the external table (implicitly defines datasource), and the primary key.\n\nIf an proxy entry already exists, it is loaded. If not, the given external datasource is searched, and if an entry is found, a local proxy entry is created and saved.\n\nParameters:\n - table: The external table (ext_table.id).\n - key: The primary key in the external table defining the entry.\n\nReturns true if found, false if not found."},
{text: "Customer.findFromAgentAndKey", help: "<b>Integer findFromAgentAndKey(Integer agent, String key)<\/b>\n\nFinds a customer entry in the database based on the given agent id and external key.\n\nThis function will find a customer entry in the database based on an agent id and an external key.\n\nParameters:\n - agent: The agent id for the external entry. Implicitly defines the external datasource.\n - key: The primary key of the external entry.\n\nReturns the id for the customer entry in the database, or -1 if not found."},
{text: "Customer.save", help: "<b>Integer save()<\/b>\n\nSaves the customer. If id is set, then the customer will be updated, otherwise a new customer entry will be created.\n\nReturns the id of the saved customer."},
{text: "Customer.save", help: "<b>Integer save(String p_gdprSourceKey)<\/b>\n\nSaves the customer. If id is set, then the customer will be updated, otherwise a new customer entry will be created, and the source key of the StoreAndProcess consent will be set to p_gdprSourceKey.\nThese keys can be found in the consent system.\n\nReturns the id of the saved customer."},
{text: "Customer.getValue", help: "<b>String getValue(String colName)<\/b>\n\nReturns the value of the given field of the customer.\n\nThe following fields are available:\n\n - id\n - name The name of the customer.\n - firstname\n - lastname\n - phone\n - cellphone\n - note\n - username: This is the usedname used for the external web.\n - password: This is the password used for the external web.\n - email: A list of all email addresses.\n - mainEmail: The main email address.\n - language: The name, languagecode or id of the customers language.\n - deleted\n - company: The id of the related company\n - display_company: The value showing the name of the related company.\n - dbi_agent_id\n - dbi_key\n - dbi_last_modified\n - dbi_last_syncronized These values are for database integration\n - priority: The id or name of the customers priority.\n - our_contact: The username, loginname or id of the related contact (user).\n - x_*: The extrafield with the given database field name.\n[extra field] The extrafield with the given name (e.g. \"Country\").\n\nExample code:\n\nCustomer c;\n\nc.load(3);\nBool b = c.checkTableRights(\"select\");\nprint(b.toString());\n\nc.setValue(\"name\", \"Test\");\nprint(c.getValue(\"name\"));"},
{text: "Customer.makeSalutation", help: "<b>String makeSalutation()<\/b>\n\nCreate a salutation greeting the customer. Can be used in the beginning of a document or email.\n\nReturns salutation string.\n\nExample code:\n\nCustomer c;\n\nc.load(3);\nBool b = c.checkTableRights(\"select\");\nprint(b.toString());\n\nc.setValue(\"name\", \"Test\");\nc.setValue(\"salutation\", \"Welcome to SuperOffice\");\n\nc.makeSalutation();"},
{text: "Customer.addEmail", help: "<b>Void addEmail(String email, Integer externalRank, Integer extTable, Integer dbiAgentId)<\/b>\n\nVoid addEmail(String email, Integer externalRank, Integer extTable, Integer dbiAgentId)\n\nThis functions is used to add an email to a customer usually in database integrations.\n\nParameters:\n - email: Email address\n - externalRank: External sorting rank. (Can not be changed in the ejournal GUI).\n - extTable: External owner of this email address as an extTable id. (Deprecated database integration called data sources).\n - dbiAgentId: External owner of this email address an dbiAgent id."},
{text: "Customer.addEmail", help: "<b>Void addEmail(String p_email, Integer p_extTable, Integer p_dbiAgentId)<\/b>\n\nThis functions is used to add an email to a customer usually in database integrations.\n\nParameters:\n - email: Email address\n - extTable: External owner of this email address as an extTable id. (Deprecated database integration called data sources).\n - dbiAgentId: External owner of this email address an dbiAgent id."},
{text: "Customer.login", help: "<b>Void login()<\/b>\n\nCreate a valid login session for the current customer.\nUse the method getValue(\"loginSessionKey\") to get the actual session key created.\nUse the method logout() to kill the session."},
{text: "Customer.logout", help: "<b>Void logout()<\/b>\n\nLogs out a customer."},
{text: "Customer.removeEmail", help: "<b>Void removeEmail(String email)<\/b>\n\nThis function will remove the email-address from the customer. For the action to take place, you will have to save the customer-object with the function save().\n\nParameter:\n - email: The email address you want to remove from the customer."},
{text: "Customer.removeExternalEmails", help: "<b>Void removeExternalEmails(Integer p_0, Integer p_1)<\/b>\n\nRemove all external emails from a given source (extTable). This method is used with ::set() to make sure emails deleted from the external source is deleted.\n\nParameters:\n - emails from these extTables will be removed."},
{text: "Customer.setValue", help: "<b>Void setValue(String field, String value)<\/b>\n\nSets the given field with the given value. The following fields are available:\n\n - name or display_name: The name of the customer.\n - firstname\n - lastname\n - title (From 7.x)\n - mrmrs (From 7.x)\n - year_of_birth (From 7.x)\n - month_of_birth (From 7.x)\n - day_of_birth (From 7.x)\n - birth_date (From 7.x)\n - person_number (From 7.x)\n - post1 (From 7.x)\n - post2 (From 7.x)\n - post3 (From 7.x)\n - salutation (From 7.x)\n - middleName (From 7.x)\n - phone\n - direct\/formattedNumber: Same as phone(From 7.x)\n - phone\/formattedNumber:  Same as phone (From 7.x)\n - cellphone\n - mobile\/formattedNumber: Same as cellphone (From 7.x)\n - note\n - infoText: Same as note. (From 7.x)\n - username: This is the usedname used for the external web.\n - password: This is the password used for the external web.\n - email or display_email: Adds an email to the customer (does not erase existing ones).\n - company: The id of the related company\n - display_company: The value showing the name of the related company.\n - deleted\n - dbi_agent_id\n - dbi_key\n - dbi_last_modified\n - dbi_last_syncronized: These values are for database integration\n - priority or priority_id: The id or name of the customers priority.\n - language: The name, languagecode or id of the customers language.\n - ourContact: The username, loginname or id of the related contact (user).\n - x_* The extrafield with the given database field name.\n - [extra field] The extrafield with the given name (e.g. \"Country\").\n\nParameters:\n - field: The field to set.\n - value: The value to set.\n\nExample code:\n\nCustomer c;\n\nc.load(3);\nBool b = c.checkTableRights(\"select\");\nprint(b.toString());\n\nc.setValue(\"name\", \"Test\");\nprint(c.getValue(\"name\"));"},
{text: "Customer.toParser", help: "<b>Void toParser(Parser parser)<\/b>\n\nFill a Parser object with a Customer's values.\n\nThis function will fill a Parser object with a Customer's values, including\nextra fields. The fields are prefixed with \"customer.\". Note: consecutive calls to\nthis function will overwrite (rather than append) the values in the Parser instance."},
{text: "Void.Date", help: "<b>Date<\/b>\n\nA class for representing dates as objects.\nConstructor can take a Date, and returns a Date.\nThe default date is now.\n\nExample code:\n\nDate d;\n\nd.addDay(3);\nd.addMonth(2);\nd.addYear(1); \/\/ d is 1 year, 2 months and 3 days from today\nprint(d.getWeekDay().toString()); \/\/ Monday is 0\nprint(d.toString()); \/\/ yyyy-mm-dd"},
{text: "Date.isNull", help: "<b>Bool isNull()<\/b>\n\n\\return True if the Date is NULL\/NUL\/NIL\n\nA NULL\/NUL\/NIL Date is different from zero, in that it is conceptually\nwithout a value."},
{text: "Date.addDay", help: "<b>Date addDay(Integer num)<\/b>\n\nThis function will add the given number of days to currentl set date. The function returns a date object.\nThe original object will be modified, and a copy is returned.\n\nParameter:\n - num: Number of days to add\/subtract(if negative num)"},
{text: "Date.addMonth", help: "<b>Date addMonth(Integer num)<\/b>\n\nThis function will add the given number of months to the currently set date. The function will return a date object \"num\" months into the future (or past, if negative).\nThe original object will be modified, and a copy is returned.\n\nParameter:\n - num: Number of months to add\/subtract"},
{text: "Date.addYear", help: "<b>Date addYear(Integer num)<\/b>\n\nThis function will add the given number of years to the date currently set. It will return a date object \"num\" years into the future (or past, if negative).\nThe original object will be modified, and a copy is returned.\n\n - num: Number of years to add\/subtract"},
{text: "Date.getMDay", help: "<b>Integer getMDay()<\/b>\n\nThis function will return the day of month.\n\nExample:\n\nDate d;\nprint(d.toString()); 2015-07-10\n\nString s = d.getMDay().toString(); 10"},
{text: "Date.getMonth", help: "<b>Integer getMonth()<\/b>\n\nThis function will return the month as a number between 1 and 12.\n\nExample:\n\nDate d;\nprint(d.toString()); 2015-07-10\n\nString s = d.getMonth().toString();\nprint(s); 7"},
{text: "Date.getWeek", help: "<b>Integer getWeek()<\/b>\n\nThis function will return the iso week number, from 1 to 53.\n\nSee: http:\/\/en.wikipedia.org\/wiki\/ISO_8601 for datailed info on ISO week numbers.\n\nExample:\n\nDate d;\nString s = d.getWeek().toString();\nprint(s); 28"},
{text: "Date.getWeekDay", help: "<b>Integer getWeekDay()<\/b>\n\nThis function will return the ISO week day (Monday is 0).\n\nExample:\n\nDate d;\n\nString s = d.getWeekDay().toString();\nprint(s); 4"},
{text: "Date.getYear", help: "<b>Integer getYear()<\/b>\n\nThis function will return the year of this date.\n\nExample:\n\nDate d;\n\nString s = d.getYear().toString();\nprint(s); 2014"},
{text: "Date.toString", help: "<b>String toString()<\/b>\n\nThis function returns a string representation of the date, in ISO format."},
{text: "Void.DateTime", help: "<b>DateTime<\/b>\n\nA class for representing date and time as objects.\nConstructor can take a DateTime, and returns a DateTime.\nThe default datetime is now.\n\nExample code:\n\nDateTime d;\n\nd.addDay(2);\nd.addHour(5); \/\/ d is 2 days and 5 hours from now\nprint(d.getWeekDay().toString());\n\nDateTime t = DateTime(2017, 6, 27, 8, 30, 0);\n\nprint(d.diff(t).toString()); \/\/ Prints time difference in sec - negative if t is largest"},
{text: "DateTime.isNull", help: "<b>Bool isNull()<\/b>\n\nReturns true if the DateTime is NULL\/NUL\/NIL\n\nA NULL\/NUL\/NIL DateTime is different from zero, in that it is conceptually\nwithout a value."},
{text: "DateTime.getDate", help: "<b>Date getDate()<\/b>\n\nThis function returns the date-part, (day of month, month and year) of the object as a variable of type Date.\n\n\nReturns the date part of the DateTime."},
{text: "DateTime.addDay", help: "<b>DateTime addDay(Integer num)<\/b>\n\nAdds num days to the date and returns datetime object.\n\nParameter:\n - num: the number of days to add.\n\nReturns a copy of the datetime after adding the wanted days"},
{text: "DateTime.addHour", help: "<b>DateTime addHour(Integer num)<\/b>\n\nAdds num hours to the time and returns the datetime.\n\nParameter:\n - num: the number of hours to add.\n\nReturns a copy of the datetime after adding the wanted hours"},
{text: "DateTime.addMin", help: "<b>DateTime addMin(Integer num)<\/b>\n\nAdds num minutes to the time and returns the datetime.\n\nParameter:\n - num: the number of minutes to add.\n\nReturns a copy of the datetime after adding the wanted minutes"},
{text: "DateTime.addMonth", help: "<b>DateTime addMonth(Integer num)<\/b>\n\nAdds num months to the date and returns datetime object.\n\nParameter:\n - num: The number of months to add\n\nReturns a copy of the datetime after adding the wanted months."},
{text: "DateTime.addSec", help: "<b>DateTime addSec(Integer num)<\/b>\n\nAdds num seconds to the time and returns the datetime.\n\nParameter:\n - num: the number of seconds to add.\n\nReturns a copy of the datetime after adding the wanted seconds."},
{text: "DateTime.addYear", help: "<b>DateTime addYear(Integer num)<\/b>\n\nAdds num years to the date and returns datetime object.\n\nParameter:\n - num: the number of years to add.\n\nReturns a copy of the datetime after adding the wanted years."},
{text: "DateTime.moveToDayEnd", help: "<b>DateTime moveToDayEnd()<\/b>\n\nMoves the datetime to the end of the day. That is 23:59:59. Returns a reference to itself."},
{text: "DateTime.moveToDayStart", help: "<b>DateTime moveToDayStart()<\/b>\n\nMoves the datetime to the start of the day, (00:00 o'clock). Returns a reference to itself."},
{text: "DateTime.moveToHourEnd", help: "<b>DateTime moveToHourEnd()<\/b>\n\nMoves the datetime to the end of the current hour. Returns a reference to itself."},
{text: "DateTime.moveToHourStart", help: "<b>DateTime moveToHourStart()<\/b>\n\nMoves the datetime to the start of the current hour. Returns a reference to itself."},
{text: "DateTime.moveToMonthEnd", help: "<b>DateTime moveToMonthEnd()<\/b>\n\nThis method will move the current DateTime to the last second of the current month. Returns a reference to itself."},
{text: "DateTime.moveToMonthStart", help: "<b>DateTime moveToMonthStart()<\/b>\n\nThis method will move the current DateTime to the first second in the current month. Returns a reference to itself."},
{text: "DateTime.moveToQuarterEnd", help: "<b>DateTime moveToQuarterEnd()<\/b>\n\nMoves the datetime to the end of current quarter. That is 31. of Mars, 30. of June, 30 of September or 31. of December. Time is set to 23:59:59. Returns a reference to itself."},
{text: "DateTime.moveToQuarterStart", help: "<b>DateTime moveToQuarterStart()<\/b>\n\nMoves the datetime to the start of current quarter. That is 1. of January, 1. of April, 1. of july or 1. of October. Returns a reference to itself."},
{text: "DateTime.moveToWeekEnd", help: "<b>DateTime moveToWeekEnd()<\/b>\n\nThis method will move the current DateTime forward to 23:59::59 on sunday of the current week. Returns a reference to itself."},
{text: "DateTime.moveToWeekStart", help: "<b>DateTime moveToWeekStart()<\/b>\n\nThis method will move the current DateTime back to 00:00:00 on monday in the current week. Returns a reference to itself."},
{text: "DateTime.moveToYearEnd", help: "<b>DateTime moveToYearEnd()<\/b>\n\nThis method will move the current DateTime to the last second in the current year. Returns a reference to itself."},
{text: "DateTime.moveToYearStart", help: "<b>DateTime moveToYearStart()<\/b>\n\nThis method will move the current DateTime to the first second in the current year. Returns a reference to itself."},
{text: "DateTime.setUnix", help: "<b>DateTime setUnix(Integer number)<\/b>\n\nSets the datetime to the number of the seconds since 01.01.1970 00:00:00\n\nParameter:\n - number of seconds since 01.01.1970 00:00:00 you want to set the datetime"},
{text: "DateTime.diff", help: "<b>Integer diff(DateTime otherDateTime)<\/b>\n\nReturns the difference in number of seconds between the input-parameter and the object\n\nParameter:\n - otherDateTime: The datetime to subtract\n\nReturns the number of seconds between the datetime and the input datetime. The number is negative if the input datetime is the greatest."},
{text: "DateTime.getMDay", help: "<b>Integer getMDay()<\/b>\n\nReturns the day part of the DateTime (day in month) as an integer."},
{text: "DateTime.getMonth", help: "<b>Integer getMonth()<\/b>\n\nReturns the month part of the DateTime as an integer."},
{text: "DateTime.getUnix", help: "<b>Integer getUnix()<\/b>\n\nReturns the number of seconds since 01.01.1970 00:00:00"},
{text: "DateTime.getWeek", help: "<b>Integer getWeek()<\/b>\n\nReturns the iso week number, from 1 to 53.\n\nSee: http:\/\/en.wikipedia.org\/wiki\/ISO_8601 for datailed info on ISO week\nnumbers."},
{text: "DateTime.getWeekDay", help: "<b>Integer getWeekDay()<\/b>\n\nReturns the weekDay as an Integer. 0 is Monday, ... 6 is Sunday"},
{text: "DateTime.getYear", help: "<b>Integer getYear()<\/b>\n\nReturns the year part of the DateTime as an integer."},
{text: "DateTime.toString", help: "<b>String toString()<\/b>\n\nReturns a string representation of the DateTime."},
{text: "DateTime.toString", help: "<b>String toString(Integer mode, Integer language, Bool 24HourMode)<\/b>\n\nThe method will give a string representation of the DateTime object.\n\nParameters:\n - Integer representing the mode of the string representation. See below for the available modes\n - Integer the language to be used in the formatting. See below for a list of languages\n - 24HourMode if true, 24 hours mode will be used. If false, 12 hours mode will be used\n\nReturns the string representation of the DateTime object\n\nModes:\n    0: modeNewDate,          1998-01-12\n    1: modeNew2Min,          1998-01-12 11:23\n    2: modeNew2Sec,         1998-01-12 11:23:15\n    3: modeTextDate,         02. Jan 1998 (in norwegian), Jan 02. 1998 (in english)\n    4: modeText2Min,          12. Jan 1998 11:23\n    5: modeText2Sec,         12. Jan 1998 11:23:15\n    6: modeText2MinLong,   20. Aug 1998 11:23 (in norwegian), Aug. 20. 2008 11:23 (in english)\n    7: modeShort2Min,        13\/02\/1998 12:34 (in norwegian), 02\/13\/1998 12:34 (in english)\n    8: modeNumeric,           19980112112315\n    9: modeTime2Min,\t       11:23\n    10: modeTime2Sec,       11:23:15\n    11: modeCompressed,    19980112112315\n    12: modeRFC1123,         Thu, 01 Dec 94 16:00:00 GMT   (HTTP-date) NB!! toString() will not adjust to GMT, so you will have to do it yourself\n    13: modeSoap,              1998-01-12T11:23:15 SOAP standard formatting\n    14: modeRFC822,           Sun, 26 Aug 2007 08:08:21 +0200\n    15: modeDateFirst,        18.08.2004 10.17\n    16: modeSlash2Min        18\/08\/2004 10.17\n\nLanguages:\n    Norwegian = 0,\n    English = 1,\n    German = 2,\n    Swedish = 3,\n    Danish = 4,\n    Dutch = 5,"},
{text: "DateTime.toString", help: "<b>String toString(String format)<\/b>\n\nReturns a String representation of the DateTime, formatted on the form specified in the String format.\n\nThe following formats are available. Single or in composition.\n - ISOW2 returns the week number as a two-digit number\n - ISOW1 returns the week number as one ore two digits\n - ISOWY4  returns the week number as one ore two digits and the year as four digits\n - ISOWY2  returns the week number as one ore two digits and the year as two digits\n - YY4  returns the year in four digits\n - YY2  returns the year in two digits\n - MM2 returns the month in two digits\n - MM1 returns the month in one or two digits\n - DD2 returns the day of month in two digits\n - DD1 returns the day of month in one or two digits\n - WEEKDAY returns the weekday, with monday starting at 1\n - HH24 returns the hours in two digits in 24hours-mode\n - H24   returns the hours in one or two digits in 24hours-mode\n - HH12 returns the hours in two digits in 12hours-mode\n - H12 returns the hours in one or two digits in 12hours-mode\n - MI2 returns the minutes in two digits\n - SS2 returns the seconds in two digits\n - AMPM return either am or pm.\n\nParameter:\n - format: A specification of the wanted format\n\nReturns the object as as String on the wanted format"},
{text: "DateTime.toString", help: "<b>String toString(String format, String months, String weekDays)<\/b>\n\nReturns a String representation of the DateTime, formatted on the form specified in the String format.\n\nIf you do not want the name of the months and the days, use the toString()-function with only one parameter, toString(String format)\n\nThe following formats are available. Compose them as you want.\n\n - ISOW2 returns the week number as a two-digit number\n - ISOW1 returns the week number as one ore two digits\n - ISOWY4  returns the week number as one ore two digits and the year as four digits\n - ISOWY2  returns the week number as one ore two digits and the year as two digits\n - YY4  returns the year in four digits\n - YY2  returns the year in two digits\n - MM2 returns the month in two digits\n - MM1 returns the month in one or two digits\n - DD2 returns the day of month in two digits\n - DD1 returns the day of month in one or two digits\n - MONTH returns the name of month\n - WDAY returns the name of the weekday\n - HH24 returns the hours in two digits in 24hours-mode\n - H24   returns the hours in one or two digits in 24hours-mode\n - HH12 returns the hours in two digits in 12hours-mode\n - H12 returns the hours in one or two digits in 12hours-mode\n - MI2 retrurns the minutes in two digits\n - SS2 returns the seconds in two digits\n - AMPM return either am or pm.\n\nParameters:\n - format: A specification of the wanted format\n - months: A comma-separated list of the name of the 12 months in your preferred language\n - format: A  comma-separated list of the name of the 7 days.\n\nReturns a String in the wanted format."},
{text: "DateTime.getTime", help: "<b>Time getTime()<\/b>\n\nThis function returns the time-part of the datetime as a Time-object.\n\nExample:\n\nDateTime d;\n\nString s = d.getTime().toString();\nprint(s);"},
{text: "DateTime.setTime", help: "<b>Void setTime(Time theTime)<\/b>\n\nSets the time-part of the datetime\n\nParameter:\n - theTime: the time to set"},
{text: "Void.DbConverter", help: "<b>DbConverter<\/b>\n\nThis class is only allowed in a ConverterApp context. Any attempts of using this in any other contexts will yield an exception."},
{text: "DbConverter.eof", help: "<b>Bool eof()<\/b>\n\nThis function returns true if the iterator has passed the last element, and thus is at the end of the file.\n\nThe function is typically used as a condition in a for loop to iterate through all remaining elements."},
{text: "DbConverter.getRow", help: "<b>Map getRow()<\/b>\n\nReturns entire row of fields."},
{text: "DbConverter.next", help: "<b>Void next()<\/b>\n\nThis function points the iterator at the next element.\n\nThe function returns false if the iterator is at en of file, true otherwise."},
{text: "DbConverter.readBatch", help: "<b>Void readBatch(String p_0, Integer p_1, Integer p_2, Integer p_3, Integer p_4)<\/b>\n\n"},
{text: "DbConverter.setSourceConnection", help: "<b>Void setSourceConnection(String p_0, String p_1, String p_2, String p_3, String p_4)<\/b>\n\n"},
{text: "DbConverter.update", help: "<b>Void update(String p_0, Map p_1, Map p_2)<\/b>\n\nThis function will update a table row, that's already integrated with CRM. It only updates rows that aren't integrated.\n\nParameters:\n - p_0: p_table, the table\n - p_1:  p_row, the row data, converted and massaged to fit into the NetServer schema\n - p_2: p_fieldMapping"},
{text: "DbConverter.write", help: "<b>Void write(String p_0, Map p_1)<\/b>\n\nThis function will write a table row.\n\nParameters:\n\n - p_0: p_table, the table\n - p_1: p_row, the row data"},
{text: "Void.DbiControl", help: "<b>DbiControl<\/b>\n\nThis class is used for communicating with DBI agents - to share data with external systems."},
{text: "DbiControl.getObject", help: "<b>Map getObject()<\/b>\n\nWhen fetching data from external system, this function is called repedly.\n\nReturns a map of fields and values for the currently fetched object"},
{text: "DbiControl.getParameters", help: "<b>Map getParameters()<\/b>\n\nThis functions is used to retrieve parameters for a DBI setup. It can among else define parameters for limiting the data set, or whatever else you define under the \"Settings\/DBI\" section of eJournal. You will also get saved parameters - so that you can store values from one run to another.\n\nReturns a map of parameters and values."},
{text: "DbiControl.getParameter", help: "<b>String getParameter(String name)<\/b>\n\nThis function returns the value of the given parameter.\n\nParameter:\n - name: Name of the parameter you want the value of"},
{text: "DbiControl.saveParameter", help: "<b>Void saveParameter(String name, String val)<\/b>\n\nThis function saves a parameter to the object.\n\nParameter:\n - name: Name of parameter to save - saved for later retrieval by other DBI integration runs.\n - val: The value to be saved for the given parameter."},
{text: "DbiControl.sendObject", help: "<b>Void sendObject(Map values)<\/b>\n\nThis function will send an object to the external system agent, during a DBI integration session.\n\nParameter:\n - values: A string map of fields and values (properties) that defines the object in a way that is meaningful to the external agent. This may be a map of table.field_name and value, for instance, for an ODBC agent."},
{text: "DbiControl.setParameter", help: "<b>Void setParameter(String name, String val)<\/b>\n\nThis function allows you to set parameter values that is sent to the external DBI agent. The parameters set using this function is not saved for later retrieval.\n\nParameters:\n - name: The name of the parameter - for instance \"resultSet.size\"\n - val: A string representation of the value - for instance \"100\"."},
{text: "Void.DBWrite", help: "<b>DBWrite<\/b>\n\nThis class is obsolete. Use SearchEngine to insert or update data to the database. Use the class ExtraTable if you want to update ExtraTable data.\n\nClass for writing to the database."},
{text: "DBWrite.insert", help: "<b>Integer insert()<\/b>\n\nExecute insert-query with the specified columns and values.\n\n\\return The id of the inserted row."},
{text: "DBWrite.addClob", help: "<b>Void addClob(String name, String value)<\/b>\n\nAdd a CLOB column to write in the table.\n\n\\param name The name of the column.\n\\param value The value to write."},
{text: "DBWrite.addDate", help: "<b>Void addDate(String name, Date value)<\/b>\n\nAdd a Date column to write in the table.\n\n\\param name The name of the column.\n\\param value The value to write."},
{text: "DBWrite.addDateTime", help: "<b>Void addDateTime(String name, DateTime value)<\/b>\n\nAdd a DateTime column to write in the table.\n\n\\param name The name of the column.\n\\param value The value to write."},
{text: "DBWrite.addInteger", help: "<b>Void addInteger(String name, Integer value)<\/b>\n\nAdd a Integer column to write in the table.\n\n\\param name The name of the column.\n\\param value The value to write."},
{text: "DBWrite.addString", help: "<b>Void addString(String name, String value)<\/b>\n\nAdd a String column to write in the table.\n\n\\param name The name of the column.\n\\param value The value to write."},
{text: "DBWrite.addTable", help: "<b>Void addTable(String tableName)<\/b>\n\nAdds a table to be written to. Can only be one.\n\n\\param tableName The name of the table, e.g. \"ticket\"."},
{text: "DBWrite.addTime", help: "<b>Void addTime(String name, Time value)<\/b>\n\nAdd a Time column to write in the table.\n\n\\param name The name of the column.\n\\param value The value to write."},
{text: "DBWrite.addWhereId", help: "<b>Void addWhereId(Integer id)<\/b>\n\nSet the value of the id of the entry to write to.\n\n\\param id The id of the row to write to."},
{text: "DBWrite.delete", help: "<b>Void delete()<\/b>\n\nDelete the specified row in the specified table."},
{text: "DBWrite.update", help: "<b>Void update()<\/b>\n\nExecute update-query with the specified columns and values."},
{text: "Void.EabEntry", help: "<b>EabEntry<\/b>\n\nThis class enables you to read and write entries from the email address book. It is also used when you want to synchronise the address book using DBI.\n\nExample code:\n\nEabEntry e;\n\ne.load(15);\nprint(e.getValue(\"sms\"));\ne.setValue(\"name\", \"test\");\ne.save();"},
{text: "EabEntry.load", help: "<b>Bool load(Integer p_0)<\/b>\n\nLoad an entry from the address book with the specified id. Returns true if load var successful, false if not.\n\nParameter:\n - p_0: id of the entry to load.\n\nExample code:\n\nEabEntry eab;\n\nBool b = eab.load(15);\nprint(b.toString());"},
{text: "EabEntry.loadFromAgentAndKey", help: "<b>Bool loadFromAgentAndKey(Integer p_0, String p_1)<\/b>\n\nUsed in conjunction with DBI. Load an entry with the specified key from the specified agent.\n\nParameters:\n - p_0: id of the agent this eab entry belongs to\n - p_1: external key for the eab entry\n\nReturns a boolean, true if it was found else false."},
{text: "EabEntry.save", help: "<b>Integer save()<\/b>\n\nThis will save the current address book entry. If you did not load an existing entry, a new entry will be created, else it will update the loaded entry.\n\nReturns id of the saved entry."},
{text: "EabEntry.getValue", help: "<b>String getValue(String p_0)<\/b>\n\nGet the value of the given field in the EabEntry instance.\n\nThe following fields are available:\n - name\n - email\n - sms\n - folderId\n - dbi_agent_id\n - dbi_key\n - dbi_last_syncronized\n - dbi_last_modified\n - dbi_delete\n\nParameters:\n - p_0: The name of the field.\n - String: The value of the field.\n\nExample code:\n\nEabEntry eab;\n\nBool b = eab.load(15);\nprint(b.toString());\n\neab.setValue(\"name\", \"test\");\nprint(eab.getValue(\"name\"));"},
{text: "EabEntry.delete", help: "<b>Void delete()<\/b>\n\nThis method will delete the current address book entry from the database."},
{text: "EabEntry.setValue", help: "<b>Void setValue(String p_0, String p_1)<\/b>\n\nSets the value of the given field in the EabEntry instance.\n\nThe following fields are available:\n - name\n - email\n - sms\n - folderId\n - dbi_agent_id\n - dbi_key\n - dbi_last_syncronized\n - dbi_last_modified\n - dbi_delete\n\nParameters:\n - p_0: The name of the field.\n - p_1: The value to set.\n\nExample code:\n\nEabEntry eab;\n\nBool b = eab.load(15);\nprint(b.toString());\n\neab.setValue(\"name\", \"test\");\nprint(eab.getValue(\"name\"));"},
{text: "Void.Email", help: "<b>Email<\/b>\n\nClass for representing and sending emails.\n\nExample code:\n\nEmail e;\n\ne.setValue(\"from\", \"bob@example.com\");\ne.setValue(\"to\", \"allice@example.com\");\ne.setValue(\"to\", \"simon@example.com\"); \/\/ Value must be set once for each recipient\ne.setValue(\"subject\", \"test\");\ne.setValue(\"body\", \"This is a test.\");\ne.send();"},
{text: "Email.addAttachment", help: "<b>String addAttachment(Integer attachmentId, Bool inline)<\/b>\n\nAdds an attachment to the email object.\n\nattachmentId  The database id of the attachment to include\ninline Set to true if you want to show the attachment inside the mail (used mostly for images)\n\nReturns the id of the attachment relative to the email. If the inline parameter is set to true, this value can be used to inline attachments in the email body"},
{text: "Email.send", help: "<b>Void send()<\/b>\n\nSends the email."},
{text: "Email.setValue", help: "<b>Void setValue(String name, String value)<\/b>\n\nSets the value of the given field in the email instance.\n\nThe following fields are available:\n - from: The from address.\n - to: The recipient.\n - cc: The carbon copy recipient.\n - bcc: The bcc recipient.\n - sms: A cellphone number to send sms to.\n - smsFrom: The from address when sending sms.\n - subject: The subject of the email.\n - body: The plain text body of the email.\n - bodyHtml: The HTML formated body of the email.\n - ticketId: The ticketId, only used with sms.\n\nFrom version 8.1 any other header value may also be added, eg. setValue(\"X-Foo\", \"42\");\n\nFor multiple recipients, call setValue multiple times, once for each recipient.\n\nParameters:\n - name: The name of the field.\n - value: The value to set."},
{text: "Void.EventData", help: "<b>EventData<\/b>\n\nEventData gives you access to contextual information in an EventHandler, such as the name of the created company or the amount of the sale. It also has properties which will be investigated after the event handler has finished, allowing you to e.g. show a message or prevent the save of an entity.\n\nExample code:\n\n\/\/ Check if a sale has a high enough value. Return a message and block the sale for values < 100. Set for event \"Before save sale\"\n\nEventData ed = getEventData();\n\nif (ed.getInputValue(\"SaleEntity.Amount\").toInteger() < 100)\n{\n  ed.setBlockExecution(true); \/\/ Prevents save\n  ed.setMessage(\"Amount too low\");\n}"},
{text: "EventData.getBlockExecution", help: "<b>Bool getBlockExecution()<\/b>\n\nThis method returns whether current event action has been blocked (e.g. save in a \"Before save company\" event)."},
{text: "EventData.getType", help: "<b>Integer getType()<\/b>\n\nThis method returns the integer representing the event type."},
{text: "EventData.getInputValues", help: "<b>Map getInputValues()<\/b>\n\nThis method returns a Map containing all input values of the EventData object."},
{text: "EventData.getStateValues", help: "<b>Map getStateValues()<\/b>\n\nThis method returns a Map containing all state values of the EventData object (i.e. custom values)."},
{text: "EventData.getInputValue", help: "<b>String getInputValue(String inputValue)<\/b>\n\nThis method returns the value of a specified input field (e.g. \"ContactEntity.Department\")."},
{text: "EventData.getMessage", help: "<b>String getMessage()<\/b>\n\nThis method returns the message set in an EventData object."},
{text: "EventData.getNavigateTo", help: "<b>String getNavigateTo()<\/b>\n\nThis method returns the section EventData has navigated to."},
{text: "EventData.getStateValue", help: "<b>String getStateValue(String stateValue)<\/b>\n\nThis method returns the value of a specified state field (i.e. custom field)."},
{text: "EventData.setBlockExecution", help: "<b>Void setBlockExecution(Bool val)<\/b>\n\nThis method prevents current event action to be executed (e.g. save in a \"Before save company\" event)."},
{text: "EventData.setMessage", help: "<b>Void setMessage(String message)<\/b>\n\nThis method displays a dialog box containing the specified message."},
{text: "EventData.setNavigateTo", help: "<b>Void setNavigateTo(String navigateTo)<\/b>\n\nThis method navigates to the specified section (e.g. \"sale.main\")."},
{text: "EventData.setOutputValue", help: "<b>Void setOutputValue(String fieldName, String val)<\/b>\n\nThis method sets the value of a specified output field (e.g. \"ContactEntity.Department\")."},
{text: "EventData.setStateValue", help: "<b>Void setStateValue(String stateName, String val)<\/b>\n\nThis method sets a state value that can be accessed later, also by other EventData objects in the same script (i.e. custom value)."},
{text: "EventData.setValidationMessage", help: "<b>Void setValidationMessage(String message)<\/b>\n\nThis method is a shorthand for calling setBlockExecution(true) and setMessage(message). It allows you to block a save and set a response message in a single function call."},
{text: "Void.ExtraFieldsInfo", help: "<b>ExtraFieldsInfo<\/b>\n\nWith this class you can retrieve meta information about an extra field. The\nclass will only retrieve information, thus it is not possible to change an\nextra field from this class.\n\nExample code:\n\nExtraFieldsInfo e;\n\ne.getExtraFields(\"person\"); \/\/ Finds extraFields in tabel person\nprint(e.getTableName()); \/\/ Prints \"person\""},
{text: "ExtraFieldsInfo.eof", help: "<b>Bool eof()<\/b>\n\nThis function checks if there are no more fields in the result.\n\nA common usage is in the condition section in a for loop:\n\nExtraFieldsInfo efi;\n\nfor (efi.getTicketChildrenFields(); !efi.eof(); efi.next())\n{\n  \/\/ do something with information from efi\n}"},
{text: "ExtraFieldsInfo.getFlags", help: "<b>Integer getFlags()<\/b>\n\nReturns the flags for the current extra field.\n\nThese can be accessed by wrapping the returned Integer in a FHBitSet. Example:\n\n--\nFHBitSet flags;\n\nflags.set(extraField.getFlags());\n\nflags.getBitNo(17);  \/\/ returns true if the extra field cannot be empty\n--\n\nThe flags are:\n\n0  = The field is searchable\n1  = The field is public (external)\n2  = The field is viewed in new-ticket form\n3  = The field is set (datetime) when clicked\n4  = The field cannot change after being set\n5  = The field is a dropdown (extra string fields)\n6  = The field is directly readable from database\n7  = Do not HTML-escape the value when displaying field\n8  = The field is deleted\n9  = The field is the id\n10 = The field is a foreign id\n11 = The field is not writeable\n12 = Use default value for field if no value is supplied\n13 = List relations\n14 = View this field when listing rows\n15 = Hide the header for this list if there are no entries\n16 = Hide the function buttons for this relation\n17 = The field cannot be empty\n18 = The field is not shown anywhere\n19 = The field is indexed\n20 = The field is viewed in relational searches"},
{text: "ExtraFieldsInfo.getDisplayField", help: "<b>String getDisplayField()<\/b>\n\nThis function returns the display field of the current field. The display field is a format of the field that can be used to address the field in functions such as SearchEngine.\n\nExample:\n\nExtraFieldsInfo e;\n\ne.getExtraFields(\"person\");\nprint(e.getDisplayField());"},
{text: "ExtraFieldsInfo.getFieldName", help: "<b>String getFieldName()<\/b>\n\nThis function returns the field name of the current field.\n\nExample that prints all field names of extra fields:\n\nExtraFieldsInfo e;\n\ne.getExtraFields(\"person\");\n\nwhile(!e.eof()){\n  print(e.getFieldName());\n  e.next();\n}"},
{text: "ExtraFieldsInfo.getName", help: "<b>String getName()<\/b>\n\nThis function returns the descriptive name (not the database name) of the current field.\n\nExample that prints all names of extra fields:\nExtraFieldsInfo e;\n\ne.getExtraFields(\"person\");\n\nwhile(!e.eof()) {\n  print(e.getName());\n  e.next();\n}"},
{text: "ExtraFieldsInfo.getParam", help: "<b>String getParam(String p_0)<\/b>\n\nThis function returns the value of the given parameter.\n\nThe following parameters are available for the various field types:\n - Available for all types:\n     - \"defaultNow\" - use current time and date as default value\n     - \"defaultActiveUser\" - use active user as default value\n - Contact relation, Company relation, Request relation:\n     - \"targetLabel\" - header\n - Extra table relation:\n     - \"targetLabel\" - header\n     - \"useDropDown\" - choose values from list\n     - \"onlyLeafNode\"\n - Float:\n    - \"precision\" - number of decimals\n - Text long:\n    - \"option\"\n    - \"useTextArea\"\n    - \"height\"\n - Text short:\n    - \"option\"\n - Dynamic link:\n    - \"linkName\"\n    - \"linkValue\" - url\n - Timespan:\n    - \"useDays\"\n    - \"useHours\"\n    - \"useMinutes\"\n    - \"fields\" - number of fields"},
{text: "ExtraFieldsInfo.getTableName", help: "<b>String getTableName()<\/b>\n\nThis function returns the name of the table the current field belongs to.\n\nExample:\n\nExtraFieldsInfo e;\n\ne.getExtraFields(\"person\");\nprint(e.TableName());\n\nWill print \"person\"."},
{text: "ExtraFieldsInfo.getChildrenFields", help: "<b>Void getChildrenFields(Integer type, Integer extraTableTarget)<\/b>\n\nThis function loads extra fields of the type given in the first parameter. If the type is an extra table relation, the second pointer is the id of the extra table it points to.\n\nUnless type is 20 (extratable) the second parameter won't do anything.\n\nIf you want all extra fields pointing to the extra table with id 5, you'd call getChildrenFields(20, 5)\n\nIf you want all extra fields of type Dat you'd call getChildrenFields(3, 0)\n\n\nTypes can be:\n\nInteger                   =  1\nText (long)              =  2\nDate                       =  3\nDateTime                =  4\nTime                       =  5\nBool                        =  6\nTimeSpan                =  7\nText (short)              = 10\nCustomer relation     = 16\nCompany relation     = 17\nTicket relation          = 18\nUser relation            = 19\nExtra table relation   = 20\nAttachment relation  = 22\nLink                        = 23\nCategory relation     = 24\nPriority relation        = 25\nFAQ relation             = 26"},
{text: "ExtraFieldsInfo.getCompanyChildrenFields", help: "<b>Void getCompanyChildrenFields()<\/b>\n\nThis is a helper function for getting company relation fields. It is equivalent to calling getChildrenFields(17, 0)"},
{text: "ExtraFieldsInfo.getCustomerChildrenFields", help: "<b>Void getCustomerChildrenFields()<\/b>\n\nThis is a helper function for getting customer relation fields. It is equivalent to calling getChildrenFields(16, 0)"},
{text: "ExtraFieldsInfo.getExtraFields", help: "<b>Void getExtraFields(String p_0)<\/b>\n\nThis method will get extrafields related to the given table. Using this method will make it possible to access the information in the extrafields by using the other functions in the class.\n\nExample:\n\nExtraFieldsInfo e;\n\ne.getExtraFields(\"person\");"},
{text: "ExtraFieldsInfo.getTicketChildrenFields", help: "<b>Void getTicketChildrenFields()<\/b>\n\nThis is a helper function for getting ticket relation fields. It is equivalent to calling getChildrenFields(18, 0)"},
{text: "ExtraFieldsInfo.next", help: "<b>Void next()<\/b>\n\nThis function moves to the next field in the result.\n\nA common usage is in the increment section in a for loop:\n\nExtraFieldsInfo efi;\n\nfor (efi.getTicketChildrenFields(); !efi.eof(); efi.next())\n{\n  \/\/ do something with information from efi\n}"},
{text: "Void.ExtraTable", help: "<b>ExtraTable<\/b>\n\nA class to access eJournal extra tables - create, edit and delete entries.\n\nExample code:\n\nExtraTable e;\n\ne.load(2); \/\/ Loads ExtraTable with id = 2\ne.setValue(\"fieldname\", \"Test\");\ne.setValue(\"value\", \"43\");\nprint(e.getValue(\"Test\"));\ne.save();"},
{text: "ExtraTable.load", help: "<b>Bool load(Integer id)<\/b>\n\nLoads the extra table entry with the given id\n\nParameter:\n - id: Id of the extra table entry you want to load.\n\nReturns true if the entry was found and loaded.\n\nExample code:\n\nExtraTable ex;\n\nBool b = ex.load(2);\nprint(b.toString());"},
{text: "ExtraTable.loadFromAgentAndKey", help: "<b>Bool loadFromAgentAndKey(Integer agent, String key)<\/b>\n\nThis function is used for integrating data from external systems.\n\nParameters:\n - agent: Id of the agent, registered in the \"Settings\/DBI\" section of eJournal.\n - key: Id of this entry in the external system.\n\nReturns true if successful find, else false."},
{text: "ExtraTable.save", help: "<b>Integer save()<\/b>\n\nThis functions is called to save changes and new objects.\nIf the object has an id, it will be updated - otherwise it will be inserted.\n\nReturns the id of the newly saved object."},
{text: "ExtraTable.save", help: "<b>Integer save(Bool reload)<\/b>\n\nReturns the id of newly saved object.\n\nParameter:\n - reload: True if the extra table entry should be reloaded after the save"},
{text: "ExtraTable.getValue", help: "<b>String getValue(String field)<\/b>\n\nThis function returns the value of the given field for the currently loaded entry.\n\nParameter:\n - field: The name of the extra table field - e.g. \"x_myfield\"\n\nExample code:\n\nExtraTable ex;\n\nBool b = ex.load(2);\nprint(b.toString());\n\nprint(ex.getValue(\"x_table\"));"},
{text: "ExtraTable.delete", help: "<b>Void delete()<\/b>\n\nThis function deletes the loaded object."},
{text: "ExtraTable.setValue", help: "<b>Void setValue(String fieldname, String value)<\/b>\n\nThis function sets the value of a given field if it exists.\n\nParameters:\n - fieldname: Name of field to set\n - value: A string representation of the value to be assigned to the field.\n\nExample code:\n\nExtraTable ex;\n\nBool b = ex.load(2);\nprint(b.toString());\n\nex.setValue(\"name\", \"Test\");\nprint(ex.getValue(\"x_table\"));"},
{text: "Void.ExtraTableInfo", help: "<b>ExtraTableInfo<\/b>\n\nWith this class you can retrieve meta information about an extra table. The class will only retrieve information, thus it is not possible to change an extra table from this class.\n\nExample code:\n\nExtraTableInfo e;\n\ne.load(\"y_mytable\");\nprint(e.getId().toString());"},
{text: "ExtraTableInfo.getFlags", help: "<b>Integer getFlags()<\/b>\n\nWill return the flags for this extra table.\n\nAvailable flags:\nFlagHidden: 0\nFlagDeleted: 8"},
{text: "ExtraTableInfo.getId", help: "<b>Integer getId()<\/b>\n\nThis function returns the id of the extratable as an Integer"},
{text: "ExtraTableInfo.getName", help: "<b>String getName()<\/b>\n\nThis method will return the textual name of the extra table."},
{text: "ExtraTableInfo.load", help: "<b>Void load(String tableName)<\/b>\n\nThis will load the extra table with the given table name (the database name, for example y_mytable).\n\nParameter:\n - tableName: name of the table"},
{text: "Void.FHBitSet", help: "<b>FHBitSet<\/b>\n\nThis class is used to represent and manipulate a 32 bit bitset.\n\nExample code:\n\nFHBitSet fh;\n\nfh.set(43);\nfh.setBitNo(15, true);\nprintLine(fh.toLsbString()); \/\/ Prints \"00000000000000001000000000101011\"\nprintLine(fh.toInteger().toString()); \/\/ prints \"32811\""},
{text: "FHBitSet.getBitNo", help: "<b>Bool getBitNo(Integer number)<\/b>\n\nThis function returns true if a specified bit is set, false if not.\n\nParameter:\n - number: Bit number to check (0-31)"},
{text: "FHBitSet.toInteger", help: "<b>Integer toInteger()<\/b>\n\nThis function returns the bitset as an integer."},
{text: "FHBitSet.toLsbString", help: "<b>String toLsbString()<\/b>\n\nThis function returns a LSB (Least Significant Byte first) string representation of the bitset.\n\nExample:\n\nFHBitSet fh;\n\nfh.set(44);\nprint(fh.toLsbString());\n\nPrints:\n00000000000000000000000000101100"},
{text: "FHBitSet.set", help: "<b>Void set(Integer value)<\/b>\n\nThis function initializees the bitset from an integer.\n\nParameter:\n - value: This integer is used to initialize the bitset.\n\nExample:\n\nFHBitSet fh;\n\nfh.set(44);\nprint(fh.toLsbString());"},
{text: "FHBitSet.set", help: "<b>Void set(String rep)<\/b>\n\nThis function initializes the bitset from a string .This function has the same function as Void set(Integer).\n\nParameter:\n - string: e.g. \"1234\"\n\nExample:\n\nFHBitSet fh;\n\nfh.set(\"44\");\nprint(fh.toLsbString());"},
{text: "FHBitSet.setBitNo", help: "<b>Void setBitNo(Integer number, Bool val)<\/b>\n\nThis function sets a specific bit.\n\nParameters:\n - number: Index of the bit to set\n - val: Value to set this bit to - (True\/False - 1\/0)\n\nExample:\n\nFHBitSet fh;\n\nBool b = true;\nfh.set(0);\nfh.setBitNo(15, b);\nprint(fh.toLsbString());\n\nPrints:\n00000000000000001000000000000000"},
{text: "Void.File", help: "<b>File<\/b>\n\nThis represents a file.\n\nUse open before you call any other methods.\n\nExample code:\n\nFile f;\n\nf.open(\"test.txt\", \"a+\"); \/\/ Opening file appending (and creating)\nf.write(\"test\");\nf.close(); \/\/ Closing the file when done writing\n\nFile g;\n\ng.open(\"test.txt\", \"r\"); \/\/ Opening file for reading only\nprint(g.readAll());\ng.close();"},
{text: "File.eof", help: "<b>Bool eof()<\/b>\n\n\\return True if a read passed the end of file has been attempted.\n\nWhen you read lines in a loop, you can break out of the loop when this function return true."},
{text: "File.open", help: "<b>Bool open(String filename, String mode)<\/b>\n\nOpens the file to be available for other method calls.\n\nAvailable modes:\n - r or rb: Open file for reading.\n - w or wb: Truncate to zero length or create file for writing.\n - a or ab: Append; open or create file for writing at end-of-file.\n - r+ or rb+ or r+b: Open file for update (reading and writing).\n - w+ or wb+ or w+b: Truncate to zero length or create file for update.\n - a+ or ab+ or a+b: Append; open or create file for update, writing at end-of-file."},
{text: "File.open", help: "<b>Bool open(String filename, String mode, String codepage)<\/b>\n\nOpens file to be available for other method calls.\n\nParameters:\n - filename: Path to the file\n - mode: How to open the file (description below)\n - codepage: What text codepage the file is in\n\nAvailable modes:\n - r or rb: Open file for reading.\n - w or wb: Truncate to zero length or create file for writing.\n - a or ab: Append; open or create file for writing at end-of-file.\n - r+ or rb+ or r+b: Open file for update (reading and writing).\n - w+ or wb+ or w+b: Truncate to zero length or create file for update.\n - a+ or ab+ or a+b: Append; open or create file for update, writing at end-of-file.\n\nCodepage:\nDefault is ISO-8859-1 (latin-1), but UTF-8 is common for unicode text files."},
{text: "File.unlink", help: "<b>Bool unlink()<\/b>\n\nThis function will delete the file."},
{text: "File.readBinary", help: "<b>Byte[] readBinary()<\/b>\n\n\\return Reads the file and returns binary data in a Byte array"},
{text: "File.readAll", help: "<b>String readAll()<\/b>\n\n\\return All text from the file."},
{text: "File.readLine", help: "<b>String readLine()<\/b>\n\n\\return The next line from the file or a null string if no more data in the file."},
{text: "File.close", help: "<b>Void close()<\/b>\n\nThis function closes the file, the File object is then ready for open()-ing a new file"},
{text: "File.flush", help: "<b>Void flush()<\/b>\n\nFlush will empty the output buffer, writing the data to the file."},
{text: "File.rewind", help: "<b>Void rewind()<\/b>\n\nThis function will set the current file pointer to the beginning of the file."},
{text: "File.write", help: "<b>Void write(String data)<\/b>\n\n\\param Data String to write to the file\n\nThis function can be called many times, adding more and more data to the file."},
{text: "File.writeBinary", help: "<b>Void writeBinary(Byte[] data)<\/b>\n\nWrite binary data to file.\n\n\\param data Data in a Byte array that you want to write to the file."},
{text: "Void.Float", help: "<b>Float<\/b>\n\nA class for representing floating point numbers as objects.\nConstructor can take a Float, and returns a Float."},
{text: "Float.isNull", help: "<b>Bool isNull()<\/b>\n\nReturns true if the float is NULL\/NUL\/NIL\n\nA NULL\/NUL\/NIL Float is different from zero, in that it is conceptually without a value. However, when a null Float  is used naively, ejScript is usually forgiving and interprets it as zero."},
{text: "Float.abs", help: "<b>Float abs()<\/b>\n\nReturns the absolute value of the float.\n\nBoth 20.3 and -20.3 will return the float 20.3."},
{text: "Float.floor", help: "<b>Integer floor()<\/b>\n\nReturns the integer floor of the float.\n\nExample code:\n\nFloat f = Float(\"13.456\");\n\nInteger i = f.floor();\nprint(i.toString());\n\nPrints:\n\n\"13\""},
{text: "Float.round", help: "<b>Integer round()<\/b>\n\nReturns the integer round of the float\n\nExample code:\n\nFloat f = Float(\"13.79\");\n\nInteger i = f.round();\nprint(i.toString());\n\nPrints:\n\n\"14\""},
{text: "Float.toString", help: "<b>String toString(Integer decimals)<\/b>\n\nReturns a string representation of the Float, with \"decimals\" number of decimals\n\nParameter:\n - decimals: number of decimals"},
{text: "Void.GenericSearch", help: "<b>GenericSearch<\/b>\n\nThis class is obsolete.\nUse SearchEngine instead.\n\nClass for representing a generic database search.\n\nThe genericSearch is originally made for searching and fetching data from the\neJournal database. Thereby its name.\nGenericSearch is a tool for building up sql-queries, by adding fields and criterias.\nThe fields must be given on the following form:\nstarttablename.fieldname, for example \"ticket.title\"\nFor tables that have foreign keys to other tables, you can reach them with the\nfollowing notation:\nstarttablename.fieldname.fieldname\nFor example the firstname of the primary customer of a ticket is:\n\"ticket.cust_id.firstname\".\nThe company name of the primary customer of a ticket is:\n\"ticket.cust_id.company.name\".\n\nMake sure that all fields you use start with the same table, for example\nticket, or else you will recieve a big join that you probably do not want.\n\nFor many-to-many relations there is a special notation:\ntable1.(table2->field2a).field2b Where field2a is field in table2 that has a\nforeign key to table1.\nAn example:\n\"ticket.(ticket_customers->ticket_id).cust_id\"\n\nGenericSearch extends theSearchEngine class with options for how to list fields. Displayfields, datafields, idfields.\nGenericSearch has less functionality for adding criterias than SearcjEngine"},
{text: "GenericSearch.eof", help: "<b>Bool eof()<\/b>\n\nReturns true if the resultpointer has reached the end of result set, or false otherwise."},
{text: "GenericSearch.first", help: "<b>Bool first()<\/b>\n\nSet the resultpointer to point at the first row in the resultset\n\n\\return false if the resultset is empty, else true"},
{text: "GenericSearch.next", help: "<b>Bool next()<\/b>\n\nSets the resultset pointer to next row, returns true if there was a next row or false otherwise.\n\n\\return false if the pointer has reached the last resultset, else true"},
{text: "GenericSearch.countRows", help: "<b>Integer countRows()<\/b>\n\nReturns the number of rows in the resultset\n\n\\return the number of rows in the resultset"},
{text: "GenericSearch.get", help: "<b>String get(Integer field, Integer fieldMask)<\/b>\n\nGet the value of the field accoring to the wanted fieldMask\n\n\\param field The number of the field to select\n\\param fieldMask Possible values:\n1: Id of the table\n2: Data value\n4: Display value\n8: Search value\n16: Sort value\n\\return The value of the field"},
{text: "GenericSearch.get", help: "<b>String get(String field, Integer fieldMask)<\/b>\n\nString get(String field, Integer fieldMask)\n\nGet the value of the field accoring to the wanted fieldMask\n\n\\param field The name of the field to select\n\\param fieldMask Possible values:\n1: Id of the table\n2: Data value\n4: Display value\n8: Search value\n16: Sort value\n\\return The value of the field"},
{text: "GenericSearch.addComparison", help: "<b>Void addComparison(String field1, String compOperator, String field2, String rowOperator, Integer concatLevel)<\/b>\n\nAdds a criteria between two database-fields to the database query\n\n\n\\param field1 The field to compare with field2\n\\param compOperator Comparison operator. Possible values:\nOperatorEquals, OperatorNotEquals, OperatorLt, OperatorLte, OperatorGt,\nOperatorGte, OperatorLike, OperatorNotLike, OperatorContains,\nOperatorBeginsWith, OperatorEndsWith, OperatorIn, OperatorNotIn,\nOperatorIs, OperatorOracleLeftJoin, OperatorIsNot\n\\param field2 The field to compare with field1\n\\param rowOperator Operator for composing this criteria with a following\ncriteria\nPossible values\nOperatorAnd, OperatorOr, OperatorNotAnd, OperatorNotOr\n\\param concatLevel A number. All criterias with the same number will be placed\ninside the same brackets"},
{text: "GenericSearch.addCriteria", help: "<b>Void addCriteria(String field, String operator, String value, String andOr, Integer concatLevel)<\/b>\n\nAdd search criteria to the search.\nThe concatLevel which specifies how this criteria will be concatenated with the rest of the query (parenthesis level).\nA higher concatLevel gives a \"(\", and a lower concatlevel gives a \")\".\n\n\\param field The name of the field to select\n\\param operator The operator for the criteria, possible values:\n  \"OperatorNone\",\n  \"OperatorAnd\",\n  \"OperatorOr\",\n  \"OperatorNotAnd\",\n  \"OperatorNotOr\",\n  \"OperatorLike\",\n  \"OperatorNotLike\",\n  \"OperatorContains\",\n  \"OperatorBeginsWith\",\n  \"OperatorEndsWith\",\n  \"OperatorEquals\",\n  \"OperatorNotEquals\",\n  \"OperatorGt\",\n  \"OperatorLt\",\n  \"OperatorGte\",\n  \"OperatorLte\",\n  \"OperatorIn\",\n  \"OperatorNotIn\",\n  \"OperatorIs\",\n  \"OperatorOracleLeftJoin\",\n  \"OperatorIsNot\",\n\\param value The value to compare with the field\n\\param andOr The operator which combine this criteria with the following criteria\n  Possible values:\n  OperatorAnd, OperatorOr, OperatorNotAnd, OperatorNotOr\n\\param concatLevel A number to use for combining criterias inside brackets. If the criterias has the same concatLevel, the end up inside the same brackets"},
{text: "GenericSearch.addField", help: "<b>Void addField(String field)<\/b>\n\nAdds a field to be selected to the database-query\n\n\\param field The field to be selected"},
{text: "GenericSearch.addField", help: "<b>Void addField(String field, Integer fieldMask)<\/b>\n\nAdd a field to the search with a fieldmask\n\n\\param field The name of the field to select\n\\param fieldMask Possible values:\n  1: Id of the table\n  2: Data value\n  4: Display value\n  8: Search value\n  16: Sort value"},
{text: "GenericSearch.addOrder", help: "<b>Void addOrder(String field, Bool asc)<\/b>\n\nAdd order on specified field, desc\/asc as specified by the Bool.\n\n\\param field The field that will be sorted\n\\param asc The direction of the sort, true if ascending, false if descending"},
{text: "GenericSearch.execute", help: "<b>Void execute()<\/b>\n\nExecute the query."},
{text: "GenericSearch.setLanguage", help: "<b>Void setLanguage(Integer languageId)<\/b>\n\nSet what language to use when showing display fields.\n\nAt the time of writing the following values are defined:\n\nNorwegian = 0\nEnglish = 1\nGerman = 2\nSwedish = 3\nDanish = 4\nDutch = 5\n\n\\param languageId What language to use."},
{text: "GenericSearch.setLimit", help: "<b>Void setLimit(Integer limit)<\/b>\n\nSet a limit of the number of rows that will be returned in the resultset\n\n\\param limit The maximum number of rows to be returned in the resultset"},
{text: "Void.HtmlElement", help: "<b>HtmlElement<\/b>\n\nClass for representing HTML elements"},
{text: "HtmlElement.isEmpty", help: "<b>Bool isEmpty()<\/b>\n\nReturns true if the htmlelement says it is empty.\n\nWhat this actually means varies from element type to element type. A list element should be empty if it has no rows, but a code element should be empty if it contains no text - so if a code element is used to create an empty table it will not be an empty element."},
{text: "HtmlElement.toBool", help: "<b>Bool toBool()<\/b>\n\nReturns the value of the element as a Bool."},
{text: "HtmlElement.getNextTabIndex", help: "<b>Integer getNextTabIndex()<\/b>\n\nThis function returns the next valid tab index number.\n\nIncrements the index counter and returns."},
{text: "HtmlElement.toInteger", help: "<b>Integer toInteger()<\/b>\n\nReturns the element value as an integer."},
{text: "HtmlElement.getFieldValue", help: "<b>String getFieldValue(String field)<\/b>\n\nReturns the value of a given field.\n\nParameter:\n - String field name"},
{text: "HtmlElement.getTabIndexString", help: "<b>String getTabIndexString()<\/b>\n\nReturns the html tab index string of the element\n\nThe tab index determines the sequence of entering fields with the tab\/shift-tab keys."},
{text: "HtmlElement.getTabIndexString", help: "<b>String getTabIndexString(Bool noId)<\/b>\n\nThis function returns the html tab index string of the element.\n\nParameter:\n - bool: Do not add element id to the string if it is the first element.\n\nThe tab index determines the sequence of entering fields with the tab\/shift-tab keys.\nA spesial id is added for the first element"},
{text: "HtmlElement.getTypeName", help: "<b>String getTypeName()<\/b>\n\nReturns the type name of the HtmlElement.\n\nFor instance:\nHtmlAnchorLine, HtmlGrid etc."},
{text: "HtmlElement.toString", help: "<b>String toString()<\/b>\n\nReturns the value of the element as a String."},
{text: "HtmlElement.clearValue", help: "<b>Void clearValue()<\/b>\n\nThis will clear any selected values from elements that support this property."},
{text: "HtmlElement.setDisabled", help: "<b>Void setDisabled(Bool disable)<\/b>\n\nThis function is used to decide whether the element should be invisible or not.\n\nParameter:\n - disable: True if the element should be invisible"},
{text: "HtmlElement.setErrorMessage", help: "<b>Void setErrorMessage(String errormessage)<\/b>\n\nSets an error message above the HtmlElement if the form is posted.\n\nParameter:\n - String: the error message"},
{text: "HtmlElement.setFieldValue", help: "<b>Void setFieldValue(String name, Map map)<\/b>\n\nSets field values on an element.\n\nParameter:\n - String: name of the field\n - Map of values"},
{text: "HtmlElement.setFromCgi", help: "<b>Void setFromCgi()<\/b>\n\n"},
{text: "HtmlElement.setInfoMessage", help: "<b>Void setInfoMessage(String infoMessage)<\/b>\n\nSets an info message above the HtmlElement if the form is posted.\n\nParameter:\n - String: the info message"},
{text: "HtmlElement.setNotEditable", help: "<b>Void setNotEditable(Bool onOff)<\/b>\n\nThis will cause the element to be disabled\/not editable for those elements that support this property.\nAvailable from 3.1.8.36"},
{text: "HtmlElement.setValue", help: "<b>Void setValue(String value)<\/b>\n\nSets the value of an element.\n\nParameter:\n - String: value of the element"},
{text: "Void.HTTP", help: "<b>HTTP<\/b>\n\nClass used to retrieve the result of an url\n\nExample code:\n\nHTTP h;\n\nByte[] b = h.open(\"https:\/\/httpbin.org\/\");\nprintLine(h.getValue(\"statusCode\"));\n\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "HTTP.hasError", help: "<b>Bool hasError()<\/b>\n\nReturns true if there was an error in the environment, false if not."},
{text: "HTTP.delete", help: "<b>Byte[] delete(String p_0)<\/b>\n\nSupports both http and https. Returns the result in a byte array.\n\nExample code:\n\nHTTP h;\n\nByte[] b = h.delete(\"https:\/\/httpbin.org\/delete\");\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "HTTP.get", help: "<b>Byte[] get(String p_0)<\/b>\n\nSupports both http and https. Returns the result in a byte array.\n\nExample code:\n\nHTTP h;\n\nh.addHeader(\"header\", \"test\");\nh.setValue(\"key\", \"value\");\nh.setValue(\"key2\", \"value2\");\nh.setOption(\"followLocation\", \"true\");\nByte[] b = h.get(\"https:\/\/httpbin.org\/get\");\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "HTTP.open", help: "<b>Byte[] open(String p_url)<\/b>\n\nThis function opens an url and returns the result as a Byte[].\n\nParameter:\n - p_url: The url to open. http:\/\/.....\n\nExample code:\n\nHTTP h;\n\nByte[] b = h.open(\"https:\/\/httpbin.org\/\");\n\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "HTTP.patch", help: "<b>Byte[] patch(String p_0)<\/b>\n\nSupports both http and https. Returns the result in a byte array.\n\nExample code:\n\nHTTP h;\n\nh.addHeader(\"header\", \"test\");\nh.setValue(\"key\", \"value\");\nh.setValue(\"key2\", \"value2\");\nh.setOption(\"followLocation\", \"true\");\nByte[] b = h.patch(\"https:\/\/httpbin.org\/patch\");\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "HTTP.post", help: "<b>Byte[] post(String p_0)<\/b>\n\nSupports both http and https. Returns the result in a byte array.\n\nExample code:\n\nHTTP h;\n\nh.addHeader(\"header\", \"test\");\nh.setValue(\"key\", \"value\");\nh.setValue(\"key2\", \"value2\");\nh.setOption(\"followLocation\", \"true\");\nByte[] b = h.post(\"https:\/\/httpbin.org\/post\");\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "HTTP.put", help: "<b>Byte[] put(String p_0)<\/b>\n\nSupports both http and https. Returns the result in a byte array.\n\nExample code:\n\nHTTP h;\n\nh.addHeader(\"header\", \"test\");\nh.setValue(\"key\", \"value\");\nh.setValue(\"key2\", \"value2\");\nh.setOption(\"followLocation\", \"true\");\nByte[] b = h.put(\"https:\/\/httpbin.org\/put\");\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "HTTP.getResponseHeaders", help: "<b>Map getResponseHeaders()<\/b>\n\nThis function will get a map of all the headers from the HTTP response headers after making a HTTP call.\nNote that the key is in lower case regardless of what was returned by the response. The value will keep the case."},
{text: "HTTP.getDebug", help: "<b>String getDebug()<\/b>\n\nTurn on debug mode by calling setDebugMode(true) and get it in String form by calling getDebug().\n\nReturns: a String of the debug output."},
{text: "HTTP.getErrorMessage", help: "<b>String getErrorMessage()<\/b>\n\nReturns the last error message.\n\nExample code:\n\nHTTP h;\n\nh.addHeader(\"header\", \"test\");\nh.setValue(\"key\", \"value\");\nh.setValue(\"key2\", \"value2\");\nh.setOption(\"followLocation\", \"true\");\nByte[] b = h.put(\"https:\/\/httpbin.org\/put\");\n\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "HTTP.getResponseHeader", help: "<b>String getResponseHeader(String p_header)<\/b>\n\nThis function will get a named HTTP header from the response of the HTTP request.\nThe header search is case insensitive.\n\nParameters\n- p_header: The header to get"},
{text: "HTTP.getValue", help: "<b>String getValue(String name)<\/b>\n\nGeneral function which returns various values from the instance. Supported values are:\n- \"statusCode\": Will return the status code from the HTTP request (e.g. \"404\", \"200\"). Supported from v8.0sr3."},
{text: "HTTP.addHeader", help: "<b>Void addHeader(String p_name, String p_value)<\/b>\n\nAdds a new header. The new header will be placed after other existing headers.\n\nParameters:\n - p_name: name of header\n - p_value: value of header\n\nExample code:\n\nHTTP h;\n\nh.addHeader(\"header\", \"test\");\n\nByte[] b = h.post(\"https:\/\/httpbin.org\/post\");\n\nif (h.hasError())\nprint(h.getErrorMessage());\nelse\nprint(String(b));"},
{text: "HTTP.setDebugMode", help: "<b>Void setDebugMode(Bool)<\/b>\n\nTurn on debug mode to record debug output and get the output by calling getDebug().\n\nParameters:\n- Bool - true to turn debug on, false to turn it off"},
{text: "HTTP.setOption", help: "<b>Void setOption(String p_name, String p_value)<\/b>\n\nOption function.\n\nPossible values for p_name and p_value:\n - \"verifyPeer\" - p_value: bool - verify the peer's SSL sertificate\n - \"verifyHost\" - p_value: bool - verify the certificate's name against the host\n - \"timeout\" - p_value: int - set maximum time the request is allowed to take\n - \"followLocation\" - p_value: bool - follow HTTP 3xx redirects if set to 1, default is 0\n - \"username\" - p_value: string - username used in authentication\n - \"password\" - p_value: string - password used in authentication\n - \"parameters\" - p_value: string - The complete parameters to post. This will replace whatever you have added using .setValue(), but allows you to specify the whole parameter to post. Useful when posting e.g. JSON structs instead of name=value pairs. NOTE: you need to prefix whatever you want to send with a dummy character (which will be removed)  due to complexities in this class. See example below.\n - \"authenticationMethod\" - p_value - which authentication method to use. Legal values are:\n    \"basic\" (default)\n    \"digest\"\n    \"gssnegotiate\"\n    \"ntlm\"\n    \"digest_ie\"\n    \"ntlm_wb\"\n    \"none\"\n- \"parametersUTF8\" - p_value: bool. From version 8.2R3. This option makes the parameters be encoded as UTF-8. Normally this is what you want, but to not break any old uses, this is an optional option.\n\nExample code:\n\nHTTP h;\n\nh.addHeader(\"header\", \"test\");\nh.setValue(\"key\", \"value\");\nh.setValue(\"key2\", \"value2\");\nh.setOption(\"followLocation\", \"true\");\n\nByte[] b = h.post(\"https:\/\/httpbin.org\/post\");\n\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));\n\n\/* Here is an example for creating an issue in JIRA, hosted by Atlassian*\/\nHTTP h2;\nString json = \" {\n  \\\"fields\\\": {\n    \\\"project\\\": {\n      \\\"key\\\": \\\"SUP\\\"\n    },\n    \\\"summary\\\": \\\"I have a problem!.\\\",\n    \\\"description\\\": \\\"Thats awesome\\\",\n    \\\"issuetype\\\": {\n      \\\"name\\\": \\\"Bug\\\"\n    }\n  }\n}\";\n\nHTTP h;\nh.setOption(\"username\", \"theUsername\");\nh.setOption(\"password\", \"thePassword\");\nh.addHeader(\"Content-Type\", \"application\/json\");\nh.setOption(\"parameters\", json);\nprint(String(h.post(\"https:\/\/theInstance.atlassian.net\/rest\/api\/2\/issue\/\")));"},
{text: "HTTP.setValue", help: "<b>Void setValue(String p_cgiVariable, String p_value)<\/b>\n\nThis function add a cgi variable and its according value to the HTTP request.\n\nParameters:\n - p_cgiVariable: The variable to set\n - p_value: The value\n\nExample code:\n\nHTTP h;\n\nh.addHeader(\"header\", \"test\");\nh.setValue(\"key\", \"value\");\nh.setValue(\"key2\", \"value2\");\nh.setOption(\"followLocation\", \"true\");\nByte[] b = h.put(\"https:\/\/httpbin.org\/put\");\nif (h.hasError())\n  print(h.getErrorMessage());\nelse\n  print(String(b));"},
{text: "Void.Inbox", help: "<b>Inbox<\/b>\n\nA class for managing the inbox."},
{text: "Inbox.addSmtpMail", help: "<b>Integer addSmtpMail(String smtpMail, String uidl, Integer filterId)<\/b>\n\nWith this method you can insert an SMTP formatted email into eJournal's inbox, which then will be imported when ejournalCron runs. The mail string must conform to the SMTP standard.\n\n\\param smtpMail A string with a SMTP formatted mail\n\\param uidl The UIDL for this email. Can be anything, but it have to be unique for each email\n\\param filterId The id of the mailbox that this mail will be imported under\n\n\\return An integer with the id of the inserted email."},
{text: "Void.Integer", help: "<b>Integer<\/b>\n\nA class for representing integers as objects.\nConstructor can take an integer, and returns integer."},
{text: "Integer.isNull", help: "<b>Bool isNull()<\/b>\n\nThis function returns true if the Integer is NULL\/NUL\/NIL.\n\nA NULL\/NUL\/NIL Integer is different from zero, in that it is conceptually without a value. However, when a null Integer is used naively, ejScript is usually forgiving and interprets it as zero.\n\nExample:\n\nInteger i = 3;\nprint(i.isNull().toString());\n\nPrints false."},
{text: "Integer.toBool", help: "<b>Bool toBool()<\/b>\n\nReturns false if the integer is zero, otherwise true.\n\nExample:\n\nInteger i = 3;\nprint(i.toBool().toString());\n\nPrints true."},
{text: "Integer.abs", help: "<b>Integer abs()<\/b>\n\nThis function returns the absolute value of the integer.\n\nIntegers 20 and -20 will both return 20."},
{text: "Integer.toHex", help: "<b>String toHex()<\/b>\n\nThis function returns a hexadecimal representation of the integer.\n\nThe integer 10 will return \"a\", 11 will return \"b\" and so on."},
{text: "Integer.toHex", help: "<b>String toHex(Integer p_0)<\/b>\n\nThis function returns the given integer as a hexadecimal representation of the integer.\n\nParameter:\n - p_0: The integer to convert to hex.\n\nThe integer 10 will return \"a\", 11 will return \"b\" and so on."},
{text: "Integer.toString", help: "<b>String toString()<\/b>\n\nThis function returns a string representation of the Integer."},
{text: "Void.InvoiceEntry", help: "<b>InvoiceEntry<\/b>\n\nThis class represent invoice entries. You will be able to create new or modify existing invoice entries with this class.\n\nExample code:\n\nInvoiceEntry i;\n\ni.setValue(\"description\", \"test\");\ni.setValue(\"quantity\", \"1\");\ni.setValue(\"pricePrUnit\", \"700\");\ni.setValue(\"discount\", \"0.2\");\nDate d; \/\/ Default value for date is today\ni.setValue(\"date\", d.toString());\ni.save();"},
{text: "InvoiceEntry.load", help: "<b>Bool load(Integer id)<\/b>\n\nThis method will load an existing InvoiceEntry object.\n\n\\param id The id of the invoice entry to be loaded"},
{text: "InvoiceEntry.save", help: "<b>Integer save()<\/b>\n\nWill save the existing InvoiceEntry object and return the id.\n\n\\return The id of the saved InvoiceEntry object"},
{text: "InvoiceEntry.getDiscount", help: "<b>String getDiscount()<\/b>\n\nThis method will get the discount of the current InvoiceEntry object in percent.\nIt will be returned as a String-representation of a number with 2 decimals accuracy.\nThe save-function calculates the discount in percent and money.\nSo if the discount is set in money (setDiscountMoney()),  you have to save the invoiceentry before getting the corresponding value in percent.\n\n\\return The dicount in percent."},
{text: "InvoiceEntry.getDiscountMoney", help: "<b>String getDiscountMoney()<\/b>\n\nThis method will get the discount of the current InvoiceEntry object in money.\nIt will be returned as a String-representation of a number with 2 decimals\naccuracy.\nThe save-function calculates the discount in percent and money.\nSo if the discount is set in percent (setDiscount()), you have to save the\ninvoiceentry before getting the corresponding value in money with this function.\n\n\\return The discount in money"},
{text: "InvoiceEntry.getPricePrUnit", help: "<b>String getPricePrUnit()<\/b>\n\nThis method will return thep price per unit of the current InvoiceEntry object.\nIt will be returned as a String-representation of a number with 2 decimals\naccuracy.\n\n\\return Price per unit"},
{text: "InvoiceEntry.getValue", help: "<b>String getValue(String field)<\/b>\n\nGet the value of the specifed field.\n\nThe following fields are available:\n - messageId the id which this invoice entry is connected to\n - description the descriptive text of this invoice entry\n - type id of the type for this invoice entry\n - quantity the number of units invoiced\n - pricePrUnit price per unit (precision 2)\n - discount discount in percentage for this invoice entry (precision 2)\n - discountMoney discount in money (precision 2)\n - date the date for this invoice entry\n\nParameter:\n - field: Name of the field which contains the value\n\nReturns the value of the field."},
{text: "InvoiceEntry.setDiscount", help: "<b>Void setDiscount(Float percent)<\/b>\n\nThis method will set the discount of the current InvoiceEntry object with the given\npercent.\nIf discount is set in both percent and money, the save-function use the money-version.\n\n\\param percent The dicount in percent."},
{text: "InvoiceEntry.setDiscountMoney", help: "<b>Void setDiscountMoney(Float money)<\/b>\n\nThis method will set the discount of the current InvoiceEntry object with the given\nmoney.\nIf both setDiscount() and this function has been used, the save()-function use the discount in money.\n\n\\param money The dicount in money."},
{text: "InvoiceEntry.setPricePrUnit", help: "<b>Void setPricePrUnit(Float price)<\/b>\n\nThis method will set the price per unit for the current InvoiceEntry object with the given price.\n\n\\param price The price per unit"},
{text: "InvoiceEntry.setValue", help: "<b>Void setValue(String field, String value)<\/b>\n\nThis method will set a field of the current InvoiceEntry object with the given value.\n\nThe following fields are available:\n - messageId the id of the message which this invoice entry is connected to\n - description a description of the invoice entry\n - type the id of the type which this invoice entry will be saved as\n - quantity number of invoiced unites (this can be a float value)\n - pricePrUnit price pr. unit (this can be a float value of precision 2)\n - discount discount given in percentage (float value of precision 2). If discountMoney is also specified, this field will be ignored\n - discountMoney discount in money\n - date the date of the invoice entry\n\nParameters:\n - field: on of the above field\n - value: the value of the specified field"},
{text: "Void.JSONBuilder", help: "<b>JSONBuilder<\/b>\n\nThe JSONBuilder class simplifies building JSON hierarchies. The result will be a string in correct JSON format, with string values properly escaped. This class is useful e.g. in combination with the HTTP class to make REST-calls.\n\nExample code:\n\nJSONBuilder jb;\njb.pushObject(\"\");\njb.pushArray(\"persons\");\n\njb.pushObject(\"\");\njb.addString(\"firstname\", \"John\");\njb.addInteger(\"age\", 40);\njb.popLevel();\n\njb.pushObject(\"\");\njb.addString(\"firstname\", \"Peter\");\njb.addInteger(\"age\", 34);\njb.popLevel();\n\njb.popLevel();\njb.popLevel(); \/\/ jb.finalize() could be used to pop all levels\nprint(jb.getString());"},
{text: "JSONBuilder.", help: "<b>finalize()<\/b>\n\nPops all levels out to the root. You can call this function instead of multiple popLevel() if you are at then end of your structure."},
{text: "JSONBuilder.getString", help: "<b>String getString()<\/b>\n\nReturns the JSON-formatted string that has been built by all push* and add* methods."},
{text: "JSONBuilder.addBoolean", help: "<b>Void addBoolean(String key, Bool value)<\/b>\n\nAdds a boolean value to the current scope. If the current scope is an object, you must supply a key. If the current scope is an array, key must be empty."},
{text: "JSONBuilder.addFloat", help: "<b>Void addFloat(String key, Float value)<\/b>\n\nAdds a float value to the current scope. If the current scope is an object, you must supply a key. If the current scope is an array, key must be empty."},
{text: "JSONBuilder.addInteger", help: "<b>Void addInteger(String key, Integer value)<\/b>\n\nAdds an integer value to the current scope. If the current scope is an object, you must supply a key. If the current scope is an array, key must be empty."},
{text: "JSONBuilder.addString", help: "<b>Void addString(String key, String value)<\/b>\n\nAdds a string value to the current scope. If the current scope is an object, you must supply a key. If the current scope is an array, key must be empty. The value does not need to be escaped, it will be escaped by JSONBuilder."},
{text: "JSONBuilder.popLevel", help: "<b>Void popLevel()<\/b>\n\nPops a level (i.e. closes an array or an object) in the JSONBuilder. Look at the root example for this class."},
{text: "JSONBuilder.pushArray", help: "<b>Void pushArray(String)<\/b>\n\nAdds an array to the JSONBuilder. Subsequent methods will add members inside the array. Normally, an array will be named (because it will be a named variable in the parent scope), except for when the array is the root of the JSON structure."},
{text: "JSONBuilder.pushObject", help: "<b>Void pushObject(String)<\/b>\n\nAdds an object to the JSONBuilder. Subsequent methods will add members inside the object. Normally, an object will be named (because it will be a named variable in the parent scope), except for when the object is the root of the JSON structure."},
{text: "Void.Knowledge", help: "<b>Knowledge<\/b>\n\n"},
{text: "Knowledge.buildExternalEntryURLWithParser", help: "<b>String buildExternalEntryURLWithParser(Integer kbId, Parser parser)<\/b>\n\nThis function builds an url to the customer center to view a knowledgebase entry.\nThe function fetch the baseUrl from the registry table with reg_id 61. Then it parses the url with the input parser, and returns the url.\n\n\\param Integer kbId, The id of the knowledgebase entry to link to.\n\\param Parser parser, The parser to use to parse the url\n\\return the url to the knowledgebase entry."},
{text: "Knowledge.rebuildFaqSearch", help: "<b>Void rebuildFaqSearch(Integer kbEntryId, String originalTitle)<\/b>\n\nThis function rebuilds the FAQ search base based on the kbEntryId. Supply the originalTitle since the title is weighted higher than words in the Question and Answer sections."},
{text: "Void.License", help: "<b>License<\/b>\n\nDeprecated in 7.1."},
{text: "License.legalKey", help: "<b>Bool legalKey()<\/b>\n\nDeprecated in 7.1.\n\nDetermines if a license key is legal or not.\n\n\\return true if the key is legal."},
{text: "License.getInfo", help: "<b>String getInfo()<\/b>\n\nDeprecated in 7.1.\n\nGet info about license key. Check if its legal and print hostname and modules.\n\n\\return Info."},
{text: "License.getReasonInvalid", help: "<b>String getReasonInvalid()<\/b>\n\nDeprecated in 7.1.\n\nCheck if the license key is valid and returns the reason as a string.\n\n\\return reason why not valid or null string if valid"},
{text: "License.getValue", help: "<b>String getValue(String name)<\/b>\n\nDeprecated in 7.1.\n\nExtract a value from the license key.\n\nThe following values are available:\n\nusers - The number of users.\nsimUsers - The number of simultanious users.\nreadUsers - The number of read users.\nsimReadUsers - The number of simultanious read only users.\ncompanyId - Id of the company owning the key. (Only relevant internal use)\nexpire - Expire date\nkey - The license key as a text string.\n\n\\param name Name of the value to extract."},
{text: "License.toParser", help: "<b>Void toParser(Parser parser)<\/b>\n\nDeprecated in 7.1.\n\nThis function will fill a Parser object with License values.\n\n\\param parser The Parser instance to populate with values."},
{text: "Void.LocalizedField", help: "<b>LocalizedField<\/b>\n\nA class for representing fields (Used by Company::set\/getAddress() functions).\n\nExample code:\n\nCompany c;\nc.load(someId);\nLocalizedField[][] adr = c.getFormattedAddress();\nadr[0][0].setValue(adr[0][0].getValue() + \"A\"); \/\/ Add an 'A' to the first address field\nc.setFormattedAddress(adr);\nc.save();\n\n\/\/ Print all info about all the address fields\nfor (Integer i = 0; i < adr.length(); i++)\n{\n  for (Integer j = 0; j < adr[i].length(); j++)\n    print(adr[i][j].getLabel() + \":\" + adr[i][j].getName() + \":\" + adr[i][j].getValue() + \":\" + adr[i][j].getTooltip() + \":\" + adr[i][j].getValueLength().toString() + \":\" + adr[i][j].getAddressType() +  \"     \");\n\n  print(\"\\n\");\n}\n\nprint(\"done!\\n\");"},
{text: "LocalizedField.getAddressType", help: "<b>String getAddressType()<\/b>\n\n"},
{text: "LocalizedField.getLabel", help: "<b>String getLabel()<\/b>\n\n"},
{text: "LocalizedField.getName", help: "<b>String getName()<\/b>\n\n"},
{text: "LocalizedField.getTooltip", help: "<b>String getTooltip()<\/b>\n\n"},
{text: "LocalizedField.getValue", help: "<b>String getValue()<\/b>\n\n"},
{text: "LocalizedField.getValueLength", help: "<b>String getValueLength()<\/b>\n\n"},
{text: "LocalizedField.setName", help: "<b>Void setName(String p_name)<\/b>\n\n"},
{text: "LocalizedField.setTooltip", help: "<b>Void setTooltip(String p_value)<\/b>\n\n"},
{text: "LocalizedField.setValue", help: "<b>Void setValue(String p_value)<\/b>\n\n"},
{text: "Void.MacroParameter", help: "<b>MacroParameter<\/b>\n\n"},
{text: "MacroParameter.getIsFixedValue", help: "<b>Bool getIsFixedValue()<\/b>\n\nThis function returns true if the value is fixed, and false if it is read from another task or the environment."},
{text: "MacroParameter.getIsOptional", help: "<b>Bool getIsOptional()<\/b>\n\nThis function returns true if the value is optional, and false if it is compulsory."},
{text: "MacroParameter.getControlConfig", help: "<b>Map getControlConfig()<\/b>\n\nGet the optional control configuration values that influence how the input control behaves."},
{text: "MacroParameter.getDescription", help: "<b>String getDescription()<\/b>\n\nThis function returns a longer description of the parameter.\n\nCan for instance be used as help in a form."},
{text: "MacroParameter.getLabel", help: "<b>String getLabel()<\/b>\n\nThis function returns the label for the parameter when displayed in a form."},
{text: "MacroParameter.getName", help: "<b>String getName()<\/b>\n\nThis function returns the name of the parameter. The name is used for accessing it."},
{text: "MacroParameter.getSourcePath", help: "<b>String getSourcePath()<\/b>\n\nThis function will return the sourcepath from the object it is called from.\n\nIn example: \"loadTicket.id\", \"_environment.entryId\""},
{text: "MacroParameter.getType", help: "<b>String getType()<\/b>\n\nThis function returns the type of the parameter.\n\nIt is used for displaying correct control in form.\n\nThe following types are available:\n - AnchorLine\n - InfoFields\n - Grid\n - HR\n - BR\n - SubHeader\n - ParserCode\n - Messages\n - EjScript\n - HtmlGrid\n - Planner\n - StaticGrid\n - DrillDown\n - GenericGrid\n - InfoFields2\n - ExtraTableEntriesGrid\n - DirectedAcyclicGraph\n - EjscriptElement\n - Chart\n - WhereChart\n - ListRecipients\n - EntityCard"},
{text: "MacroParameter.getValue", help: "<b>String getValue()<\/b>\n\nIf the parameter is a fixed value, this function will return that value."},
{text: "MacroParameter.setControlConfig", help: "<b>Void setControlConfig(Map p_0)<\/b>\n\nThis function sets the optional configuration values for the type. The configuration will influence how the input control behaves."},
{text: "MacroParameter.setDescription", help: "<b>Void setDescription(String p_0)<\/b>\n\nThis function sets a longer description of the parameter. This description can for instance be used in as help in a form."},
{text: "MacroParameter.setIsFixedValue", help: "<b>Void setIsFixedValue(Bool p_0)<\/b>\n\nThis function sets whether or not the parameter is a fixed value. The function takes a bool."},
{text: "MacroParameter.setIsOptional", help: "<b>Void setIsOptional(Bool p_0)<\/b>\n\nThis function sets whether or not the parameter is optional. The function takes a bool."},
{text: "MacroParameter.setLabel", help: "<b>Void setLabel(String p_0)<\/b>\n\nThis function will set the label of the parameter when displayed in form."},
{text: "MacroParameter.setName", help: "<b>Void setName(String p_0)<\/b>\n\nThis function will set the name of the parameter, which is used for accessing it."},
{text: "MacroParameter.setSourcePath", help: "<b>Void setSourcePath(String p_0)<\/b>\n\nThis function can set the parameter's source path.\n\nExamples of source paths: \"loadTicket.id\", \"_environment.entryId\""},
{text: "MacroParameter.setType", help: "<b>Void setType(String p_0)<\/b>\n\nThis function will set the type of the parameter.\n\nThe following types are available:\n - AnchorLine\n - InfoFields\n - Grid\n - HR\n - BR\n - SubHeader\n - ParserCode\n - Messages\n - EjScript\n - HtmlGrid\n - Planner\n - StaticGrid\n - DrillDown\n - GenericGrid\n - InfoFields2\n - ExtraTableEntriesGrid\n - DirectedAcyclicGraph\n - EjscriptElement\n - Chart\n - WhereChart\n - ListRecipients\n - EntityCard"},
{text: "MacroParameter.setValue", help: "<b>Void setValue(String p_0)<\/b>\n\nThis function will set the value of the parameter, given that the parameter is a fixed value."},
{text: "Void.MacroReturnValue", help: "<b>MacroReturnValue<\/b>\n\n"},
{text: "MacroReturnValue.getDescription", help: "<b>String getDescription()<\/b>\n\nThis function returns the description of the macro return value."},
{text: "MacroReturnValue.getName", help: "<b>String getName()<\/b>\n\nThis function returns the name of the macro return value."},
{text: "MacroReturnValue.setDescription", help: "<b>Void setDescription(String p_0)<\/b>\n\nThis function sets the description of the macro return value.\n\nParameters:\n - p_0: the description"},
{text: "MacroReturnValue.setName", help: "<b>Void setName(String p_0)<\/b>\n\nThis function sets the name of the macro return value.\n\nParameters:\n - p_0: the name"},
{text: "Void.MainMenu", help: "<b>MainMenu<\/b>\n\nClass used to manipulate the main menu (the one on the left side) of the system. This class is only useful when returned by the getMainMenu() call."},
{text: "MainMenu.getGroupIndex", help: "<b>Integer getGroupIndex(String)<\/b>\n\nReturns the index (starting at zero) of the group with the given group-id."},
{text: "MainMenu.getItemIndex", help: "<b>Integer getItemIndex(Integer p_group, String p_itemId)<\/b>\n\nReturns the index of the item with the given item-id in the group of the given index."},
{text: "MainMenu.getNumGroups", help: "<b>Integer getNumGroups()<\/b>\n\n\\return The number of groups in the menu"},
{text: "MainMenu.getNumItems", help: "<b>Integer getNumItems(Integer p_group)<\/b>\n\n\\param p_group The group\n\\return The number of items in the group indicated by p_group"},
{text: "MainMenu.getGroupId", help: "<b>String getGroupId(Integer p_group)<\/b>\n\nThis function will return the group id of group with index n. The group ids are unique strings ."},
{text: "MainMenu.getItemId", help: "<b>String getItemId(Integer p_groupId, Integer p_itemId)<\/b>\n\nThis function will return the item id for the given group index and item index."},
{text: "MainMenu.addGroup", help: "<b>Void addGroup(String label, String image)<\/b>\n\nAdds a group to the end of the menu with the given label and image (url)."},
{text: "MainMenu.addGroup", help: "<b>Void addGroup(String label, String image, Integer position)<\/b>\n\nInserts a group in the menu at the given position with the given label and image (url)."},
{text: "MainMenu.addGroup", help: "<b>Void addGroup(String, String, Integer, String)<\/b>\n\nSame as addGroup(String, String, Integer), but with another parameter which allows you to specify onClick javascript code. Using this, you can create clickable menu-groups, by adding the following javascript code: \"window.location='http:\/\/www.superoffice.com'\"."},
{text: "MainMenu.addItem", help: "<b>Void addItem(String label, String url)<\/b>\n\nAdds an item to the lastmost group with the given label and url."},
{text: "MainMenu.addItem", help: "<b>Void addItem(String label, String url, Integer group, Integer position)<\/b>\n\nAdds a menu item to the given group (index starts at 0) at the given poisition withing the group, with the given label and url."},
{text: "MainMenu.addItem", help: "<b>Void addItem(String label, String url, Integer group, Integer position, String onClick, String itemId, String target)<\/b>\n\nAdds a menu item to the given group (index starts at 0) at the given poisition withing the group, with the given label and url.\n\n\\param label The label of the menu item\n\\param group Which header this item belongs to\n\\param position The position inside the group of this item\n\\param onClick javascript that is executed when clicking the item\n\\param itemId A programmatic id for the item\n\\param target The target attribute of the link"},
{text: "MainMenu.addItem", help: "<b>Void addItem(String label, String url, Integer group, Integer position, String onClick, String itemId, String target, String iconUrl)<\/b>\n\nAdds a menu item to the given group (index starts at 0) at the given poisition withing the group, with the given label and url.\n\n\\param label The label of the menu item\n\\param group Which header this item belongs to\n\\param position The position inside the group of this item\n\\param onClick javascript that is executed when clicking the item\n\\param itemId A programmatic id for the item\n\\param target The target attribute of the link\n\\param iconUrl Url of a custom icon"},
{text: "MainMenu.clear", help: "<b>Void clear()<\/b>\n\nClears all the contents of the menu."},
{text: "MainMenu.deleteGroup", help: "<b>Void deleteGroup(Integer index)<\/b>\n\nDeletes the group with the given index (starts at 0)."},
{text: "MainMenu.deleteItem", help: "<b>Void deleteItem(Integer group, Integer index)<\/b>\n\nDelets the given item from the given group. Both indexes starts at 0."},
{text: "MainMenu.getNumGroups", help: "<b>Void getNumGroups()<\/b>\n\nThis function returns the number of groups in the menu."},
{text: "MainMenu.getNumItems", help: "<b>Void getNumItems(Integer p_group)<\/b>\n\nThis function returns the number of items in group n where n is a number >= 0 and < getNumGroups()."},
{text: "Void.Map", help: "<b>Map<\/b>\n\nClass for representing a key->value map. Both key and value are strings.\n\nExample code:\n\nMap m = Map(\"foo = bar, 2+2 = 4, testNumber = 3\");\n\nm.insert(\"test\", \"someValue\");\nm.remove(\"testNumber\");\nprintLine(m.exists(\"testNumber\").toString());\n\nm.first();\nwhile (!m.eof()){\n  printLine(m.getKey() + \" = \" + m.getVal());\n  m.next();\n}"},
{text: "Map.eof", help: "<b>Bool eof()<\/b>\n\n\\return True if the internal iterator is past the end of the map, otherwise False."},
{text: "Map.exists", help: "<b>Bool exists(String key)<\/b>\n\nChecks if the given key exists in the map.\n\nParameter:\n - key: The key to check\n\nReturns true if the key exists in the map."},
{text: "Map.first", help: "<b>Bool first()<\/b>\n\nRewind internal iterator to first element.\n\nReturns true if map is not empty, otherwise false."},
{text: "Map.next", help: "<b>Bool next()<\/b>\n\nMove internal iterator to next position.\n\nReturns false if eof(), otherwise true."},
{text: "Map.size", help: "<b>Integer size()<\/b>\n\nReturns the number of elements in the map."},
{text: "Map.insert", help: "<b>Map insert(String key, String value)<\/b>\n\nInsert a new key-value pair in the map. This function will reset the internal iterator in the map.\n\nParameters:\n - key: The key.\n - value: the value to insert.\n\nFrom version 7.1 the function will return a reference to itself, allowing you to use code like this to initialize a map:\n\nExample code:\n\nMap().insert(\"foo\", \"bar\").insert(\"Super\", \"Office\");"},
{text: "Map.get", help: "<b>String get(String key)<\/b>\n\nThis function returns the value for the given key.\n\nParameter:\n - key: The key to return the value for."},
{text: "Map.getKey", help: "<b>String getKey()<\/b>\n\nReturns the key pointed to by the internal iterator."},
{text: "Map.getVal", help: "<b>String getVal()<\/b>\n\nReturns the value pointed to by the internal iterator."},
{text: "Map.toJson", help: "<b>String toJson()<\/b>\n\nReturns the Map represented as jSon String. {\"key\": \"value\", \"foo\": \"bar\"}"},
{text: "Map.clear", help: "<b>Void clear()<\/b>\n\nWill clear the map, so there are no elements in it."},
{text: "Map.fromJson", help: "<b>Void fromJson(String pJson)<\/b>\n\nWill populate the map with the content of the jSon String.\nThe jSon string is like this: {\"key\": \"value\", \"foo\": \"bar\"}"},
{text: "Map.increaseValueForKey", help: "<b>Void increaseValueForKey(String p_0, Float p_1)<\/b>\n\nThis function will add the given float to the value of the given key.\n\nParameters:\n - p_0: the key\n - p_1: the float to add to the value\n\nExample code:\n\nMap m;\nm.insert(\"label\", \"5\").insert(\"label2\", \"3\");\nm.increaseValueForKey(\"label\", 2.3);"},
{text: "Map.increaseValueForKey", help: "<b>Void increaseValueForKey(String p_0, Integer p_1)<\/b>\n\nThis function will add the given integer to the value of the given key.\n\nParameters:\n - p_0: the key\n - p_1: the integer to add to the value\n\nExample code:\n\nMap m;\nm.insert(\"label\", \"5\").insert(\"label2\", \"3\");\nm.increaseValueForKey(\"label\", 2);"},
{text: "Map.remove", help: "<b>Void remove(String key)<\/b>\n\nWill remove the element with the given key.\n\nParameter:\n - key: the key matching the element to remove"},
{text: "Void.Message", help: "<b>Message<\/b>\n\nClass for representing an eJournal ticket message.\n\nExample code:\n\nMessage m;\n\nm.load(2); \/\/ Loads message with id = 2\nm.setValue(\"emailHeader\", \"Test\");\nm.setValue(\"body\", \"This is a test\");\nm.save();\nm.send(\"bob@example.com\", \"simon@example.com\", Null, \"Test\"); \/\/ To, cc, bcc, subject"},
{text: "Message.load", help: "<b>Bool load(Integer id)<\/b>\n\nLoad message with given id, returns true if successful or false if not successful.\n\nParameter:\n - Integer id of message\n\nReturns a bool with the load result, true if message loads successfully."},
{text: "Message.send", help: "<b>Bool send(Vector p_to, Vector p_cc, Vector p_bcc, Integer p_categoryId)<\/b>\n\nSends an e-mail-version of the message to the main contacts on the parent ticket.\nMerge with reply template int the settings of the submitted category id.\n\nParameters:\n - Vector To-recipient(s) in e-mail\n - Vector Cc-recipient(s) in e-mail\n - Vector Bcc-recipient(s) in e-mail\n - Integer The id of the category to check for reply template merge\n\nReturns a bool of send result, true if successful."},
{text: "Message.send", help: "<b>Bool send(Vector to, Vector cc, Vector bcc)<\/b>\n\nSends an e-mail-version of the message to the main contacts on the parent ticket.\n\nParameters:\n - Vector to-recipient(s) in e-mail\n - Vector cc-recipient(s) in e-mail\n - Vector bcc-recipient(s) in e-mail\n\nReturns a bool of send result, true if successful."},
{text: "Message.send", help: "<b>Bool send(Vector to, Vector cc, Vector bcc, String subject)<\/b>\n\nSends an e-mail-version of the message to the main contacts on the parent ticket.\nUsing the given subject.\n\nParameters:\n - Vector to-recipient(s) in e-mail\n - Vector cc-recipient(s) in e-mail\n - Vector bcc-recipient(s) in e-mail\n - String subject in e-mail\n\nReturns a bool of send result, true if successful."},
{text: "Message.send", help: "<b>Bool send(Vector to, Vector cc, Vector bcc, String subject, String bodyHeading)<\/b>\n\nSends an e-mail-version of the message to the main contacts on the parent ticket.\nUsing the given subject, and a given heading for the body part - the body heading may be empty for no heading, or null for default heading (same as not using this parameter).\n\nParameters:\n - Vector to-recipient(s) in e-mail\n - Vector cc-recipient(s) in e-mail\n - Vector bcc-recipient(s) in e-mail\n - String subject in e-mail\n - String body heading in e-mail\n\nReturns a bool of send result, true if successful."},
{text: "Message.sendSms", help: "<b>Bool sendSms(Vector to)<\/b>\n\nSends an sms-version of the message to the numbers in the vector.\n\nParameter:\n - Vector to The numbers to send the message to\n\nReturns a bool of send result, true if successful."},
{text: "Message.save", help: "<b>Integer save()<\/b>\n\nSaves the message and returns the database id.\n\nReturns an integer with message database id"},
{text: "Message.save", help: "<b>Integer save(String log)<\/b>\n\nThis function saves the message.\n\nParameter:\n - String log. This String will be saved in the ticket log which this message belongs to.\n\nReturns the id of the message."},
{text: "Message.save", help: "<b>Integer save(String log, Bool noNewInfo)<\/b>\n\nThis function saves the message.\n\nParameters:\n - String log: String to save on ticket log\n - Bool noNewInfo: false if you want your changes to  make the readStatus on ticket turn yellow. (Only applies if the readStatus is green). Otherwise true.\n\nReturns the id of the message."},
{text: "Message.getAttachments", help: "<b>Integer[] getAttachments()<\/b>\n\nThis function returns an Integer Array of all the attachement ids on the message."},
{text: "Message.getValue", help: "<b>String getValue(String colName)<\/b>\n\nReturns the value of column colName as String.\n\nParameter:\n - String column name of the value\n\nReturns a string value of the column."},
{text: "Message.addHeader", help: "<b>Void addHeader(String type, String value)<\/b>\n\nThis function adds a header to the message.\nThe headers will be shown at the view request page, listed at the message.\n\nParameters:\n - Type of header as a String, examples are To, Cc, SMS, Bcc\n - The header to add as a String, common values are recpients of the message as a commaseparated String."},
{text: "Message.convertInlineImages", help: "<b>Void convertInlineImages()<\/b>\n\nConvert any inline images in the message from (cid: to normal http)."},
{text: "Message.saveInvolved", help: "<b>Void saveInvolved(String emailAddress)<\/b>\n\nThis function saves the email address a recipient of the message.\n\nParameter:\n - email address"},
{text: "Message.saveInvolved", help: "<b>Void saveInvolved(Vector emailAdresses)<\/b>\n\nThis function saves the recipients of the messages. Even if they are not customers on the request. These recipients are listed as possible recipients in the\"Add message\"-screen.\n\nParameter:\n - Vector emailAdresses to save"},
{text: "Message.sendFacebook", help: "<b>Void sendFacebook()<\/b>\n\n"},
{text: "Message.setAttachments", help: "<b>Void setAttachments(Vector ids)<\/b>\n\nThis function connects the attachments to the message.\n\nParameter:\n - Vector ids The ids of the attachements\n\nNB! You must do a message.save before your do a message.setAttachments"},
{text: "Message.setValue", help: "<b>Void setValue(String colName, String value)<\/b>\n\nSets the value of column colName to the given value\n\nParameters:\n - String column name of the value\n - String value that should be stored in the column\n\nPossible columns:\n - id: Integer, The primary key (auto-incremented)\n - ticketId: Integer, The ticket this message is a child of.\n - createdAt: DateTime, When the message was posted.\n - createdBy: Integer, The id of the user who posted the message. The value 1 (system user) for externally posted messages.\n - type: String, The type of the message (plaintext\/html).\n - author: String, A string representing the author of the message. Could be a user's name, or a persons email address.\n - slevel: String, The securitylevel of the message (1 is internal, 2 is external).\n - message_id: String, The X-Message-Id header value from the email. Used for threading, i.e. connecting messages to existing tickets.\n - timeSpent: Integer, The time spent (minutes) for this message.\n - timeCharge: Integer, The amount of time (minutes) which should be invoiced for this message.\n - body: String, The textbody for the message.\n - bodyHtml: String, The html body for the message (if any).\n - emailHeader: String, The email header is saved in this field as raw text"},
{text: "Message.toParser", help: "<b>Void toParser(Parser parser)<\/b>\n\nThis function loads many fields of the message to the input parser.\n\nParameter:\n - Parser parser. The parser that the message values is loaded into.\n\nThe fields will be loaded as: message.value\nThe fields loaded are:\n - message.id, The id of the message\n - message.slevelInteger, The security level of the message Internal = 1, External = 2\n - message.slevel, The security level of the message as a String, according to the active user's language.\n - message.createdAt, The datetime when the message is created in format 12. jan 1998, kl. 11:23.\n - message.createdAtRaw, The datetime when the message is created in format 1998-01-12 11:23:15\n - message.author,  The author of the message\n - message.bodyHtml, The html body of the message\n - message.messageCategory, The messageCategory, can be:  Message = 0, Bounce = 1, OutboxFailed = 2\n - message.body, The body of the message, if this is a plaintext message, this text will be returned with activated links\n - message.bodyPlain, The body of the message exactly as saved in database.\n - message.header, The message header\n - message.mailSorter, If this message is a recieved mail, the this is the name of the mail filter that took it.\n - message.x_myextrafield, The value of the extrafield"},
{text: "Void.Notify", help: "<b>Notify<\/b>\n\nThis class handles notification of different types."},
{text: "Notify.sendCustomMessage", help: "<b>Void sendCustomMessage(Integer recipientId, String message)<\/b>\n\nThis method will send a custom notification to a user.\n\nParameters:\n - recipientId: the id of the user to notifiy\n - message: the notify message"},
{text: "Notify.sendNewTicket", help: "<b>Void sendNewTicket(Integer ticketId)<\/b>\n\nThis method will send a notification about a new request according to the user's notify configuration.\n\nParameter:\n - ticketId: the id of the ticket to notify about"},
{text: "Notify.sendNewTicketMessage", help: "<b>Void sendNewTicketMessage(Integer ticketId, Bool onlyToHotLlist)<\/b>\n\nThis method will notify a user about a new message in the specified ticket according to the users notify configuration. If onlyToHotList is set to true, only those who has this ticket in their hotlists will be notified\n\nParameters:\n - ticketId: the id of the ticket to be notified about\n - onlyToHotList: if this is set to true, only those with this ticket on their hotlists will be notified"},
{text: "Notify.sendTicketActivated", help: "<b>Void sendTicketActivated(Integer ticketId)<\/b>\n\nThis method will send a notification about a ticket being activated, according to the users notify configuration.\n\nParameter:\n - ticketId: The id of the ticket to be notified about"},
{text: "Notify.sendTicketTakenOver", help: "<b>Void sendTicketTakenOver(Integer ticketId, Integer oldUserId, Integer newUserId)<\/b>\n\nThis method will send a notification to the users about a ticket being taken over.\n\nParameter:\n - ticketId: the id of the ticket to be notified about\n - oldUserId: the id of the user who owned the ticket\n - newUserId: the id of the user who now owns the ticket"},
{text: "Void.NSActivityFilter", help: "<b>NSActivityFilter<\/b>\n\nActivity list filter information."},
{text: "NSActivityFilter.GetFromDate", help: "<b>DateTime GetFromDate()<\/b>\n\nThe filtering From date\r\n\r\n\\return DateTime"},
{text: "NSActivityFilter.GetToDate", help: "<b>DateTime GetToDate()<\/b>\n\nThe filtering To date\r\n\r\n\\return DateTime"},
{text: "NSActivityFilter.GetFutureDateList", help: "<b>NSMDOListItem[] GetFutureDateList()<\/b>\n\nThe list of future date selections. This is a static MDO list with standard values.\r\n\r\n\\return MDOListItemArray"},
{text: "NSActivityFilter.GetAssociateList", help: "<b>NSSelectableMDOListItem[] GetAssociateList()<\/b>\n\nThe list of associates to filter on\r\n\r\n\\return SelectableMDOListItemArray"},
{text: "NSActivityFilter.GetGroupList", help: "<b>NSSelectableMDOListItem[] GetGroupList()<\/b>\n\nThe list of groups to filter on\r\n\r\n\\return SelectableMDOListItemArray"},
{text: "NSActivityFilter.SetAssociateList", help: "<b>Void SetAssociateList(NSSelectableMDOListItem[] p_0)<\/b>\n\nThe list of associates to filter on\r\n\r\n\\param p_0 AssociateList: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSActivityFilter.SetFromDate", help: "<b>Void SetFromDate(DateTime p_0)<\/b>\n\nThe filtering From date\r\n\r\n\\param p_0 FromDate: DateTime\r\n\\return DateTime"},
{text: "NSActivityFilter.SetFutureDateList", help: "<b>Void SetFutureDateList(NSMDOListItem[] p_0)<\/b>\n\nThe list of future date selections. This is a static MDO list with standard values.\r\n\r\n\\param p_0 FutureDateList: MDOListItemArray\r\n\\return MDOListItemArray"},
{text: "NSActivityFilter.SetGroupList", help: "<b>Void SetGroupList(NSSelectableMDOListItem[] p_0)<\/b>\n\nThe list of groups to filter on\r\n\r\n\\param p_0 GroupList: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSActivityFilter.SetToDate", help: "<b>Void SetToDate(DateTime p_0)<\/b>\n\nThe filtering To date\r\n\r\n\\param p_0 ToDate: DateTime\r\n\\return DateTime"},
{text: "Void.NSActivityInformationListItem", help: "<b>NSActivityInformationListItem<\/b>\n\n"},
{text: "NSActivityInformationListItem.GetDate", help: "<b>DateTime GetDate()<\/b>\n\nDate that this item is valid for; there is exactly one item per date, ordered by date.\r\n\r\n\\return DateTime"},
{text: "NSActivityInformationListItem.GetActivityInformation", help: "<b>NSActivitySummary GetActivityInformation()<\/b>\n\nActivity information summary - number of free and busy activities.\r\n\r\n\\return ActivitySummary"},
{text: "NSActivityInformationListItem.SetActivityInformation", help: "<b>Void SetActivityInformation(NSActivitySummary p_0)<\/b>\n\nActivity information summary - number of free and busy activities.\r\n\r\n\\param p_0 ActivityInformation: ActivitySummary\r\n\\return ActivitySummary"},
{text: "NSActivityInformationListItem.SetDate", help: "<b>Void SetDate(DateTime p_0)<\/b>\n\nDate that this item is valid for; there is exactly one item per date, ordered by date.\r\n\r\n\\param p_0 Date: DateTime\r\n\\return DateTime"},
{text: "Void.NSActivitySummary", help: "<b>NSActivitySummary<\/b>\n\nActivity information summary - number of free and busy activities."},
{text: "NSActivitySummary.GetNumBusyActivities", help: "<b>Integer GetNumBusyActivities()<\/b>\n\nNumber of activites and tasks in the diary that are of type 'busy'. Sales and documents are not activites in this case, only diary appointments and tasks.\r\n\r\n\\return Integer"},
{text: "NSActivitySummary.GetNumFreeActivities", help: "<b>Integer GetNumFreeActivities()<\/b>\n\nNumber of activites of the type 'free'. Sales and documents are not activites in this case, only diary appointments and tasks.\r\n\r\n\\return Integer"},
{text: "NSActivitySummary.GetPercentageBusy", help: "<b>Integer GetPercentageBusy()<\/b>\n\nHow much of the active work-day which is booked in appointments.\r\n\r\n\\return Integer"},
{text: "NSActivitySummary.SetNumBusyActivities", help: "<b>Void SetNumBusyActivities(Integer p_0)<\/b>\n\nNumber of activites and tasks in the diary that are of type 'busy'. Sales and documents are not activites in this case, only diary appointments and tasks.\r\n\r\n\\param p_0 NumBusyActivities: Integer\r\n\\return Integer"},
{text: "NSActivitySummary.SetNumFreeActivities", help: "<b>Void SetNumFreeActivities(Integer p_0)<\/b>\n\nNumber of activites of the type 'free'. Sales and documents are not activites in this case, only diary appointments and tasks.\r\n\r\n\\param p_0 NumFreeActivities: Integer\r\n\\return Integer"},
{text: "NSActivitySummary.SetPercentageBusy", help: "<b>Void SetPercentageBusy(Integer p_0)<\/b>\n\nHow much of the active work-day which is booked in appointments.\r\n\r\n\\param p_0 PercentageBusy: Integer\r\n\\return Integer"},
{text: "Void.NSAddress", help: "<b>NSAddress<\/b>\n\nCarrier object for Address.\r\n\r\n"},
{text: "NSAddress.GetWgs84Latitude", help: "<b>Float GetWgs84Latitude()<\/b>\n\n\r\n\r\n"},
{text: "NSAddress.GetWgs84Longitude", help: "<b>Float GetWgs84Longitude()<\/b>\n\n\r\n\r\n"},
{text: "NSAddress.GetLocalizedAddress", help: "<b>NSLocalizedField[][] GetLocalizedAddress()<\/b>\n\nLocalizedFieldArray is a list of LocalizedFieldList objects. Used to store localized information such as formatted address data.\r\n\r\n"},
{text: "NSAddress.SetLocalizedAddress", help: "<b>Void SetLocalizedAddress(NSLocalizedField[][] p_0)<\/b>\n\nLocalizedFieldArray is a list of LocalizedFieldList objects. Used to store localized information such as formatted address data.\r\n\r\n"},
{text: "NSAddress.SetWgs84Latitude", help: "<b>Void SetWgs84Latitude(Float p_0)<\/b>\n\n\r\n\r\n"},
{text: "NSAddress.SetWgs84Longitude", help: "<b>Void SetWgs84Longitude(Float p_0)<\/b>\n\n\r\n\r\n"},
{text: "Void.NSAddressSyncData", help: "<b>NSAddressSyncData<\/b>\n\n"},
{text: "NSAddressSyncData.GetLatitude", help: "<b>Float GetLatitude()<\/b>\n\n\\return Float"},
{text: "NSAddressSyncData.GetLongitude", help: "<b>Float GetLongitude()<\/b>\n\n\\return Float"},
{text: "NSAddressSyncData.GetAddressId", help: "<b>Integer GetAddressId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSAddressSyncData.GetAddressType", help: "<b>Integer GetAddressType()<\/b>\n\n\\return Integer"},
{text: "NSAddressSyncData.GetAddress1", help: "<b>String GetAddress1()<\/b>\n\n\\return String"},
{text: "NSAddressSyncData.GetAddress2", help: "<b>String GetAddress2()<\/b>\n\n\\return String"},
{text: "NSAddressSyncData.GetAddress3", help: "<b>String GetAddress3()<\/b>\n\n\\return String"},
{text: "NSAddressSyncData.GetCity", help: "<b>String GetCity()<\/b>\n\n\\return String"},
{text: "NSAddressSyncData.GetCounty", help: "<b>String GetCounty()<\/b>\n\n\\return String"},
{text: "NSAddressSyncData.GetFormattedAddress", help: "<b>String GetFormattedAddress()<\/b>\n\n\\return String"},
{text: "NSAddressSyncData.GetState", help: "<b>String GetState()<\/b>\n\n\\return String"},
{text: "NSAddressSyncData.GetZipCode", help: "<b>String GetZipCode()<\/b>\n\n\\return String"},
{text: "NSAddressSyncData.SetAddress1", help: "<b>Void SetAddress1(String p_0)<\/b>\n\n\\param p_0 Address1: String\r\n\\return String"},
{text: "NSAddressSyncData.SetAddress2", help: "<b>Void SetAddress2(String p_0)<\/b>\n\n\\param p_0 Address2: String\r\n\\return String"},
{text: "NSAddressSyncData.SetAddress3", help: "<b>Void SetAddress3(String p_0)<\/b>\n\n\\param p_0 Address3: String\r\n\\return String"},
{text: "NSAddressSyncData.SetAddressId", help: "<b>Void SetAddressId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AddressId: Integer\r\n\\return Integer"},
{text: "NSAddressSyncData.SetAddressType", help: "<b>Void SetAddressType(Integer p_0)<\/b>\n\n\\param p_0 AddressType: Integer\r\n\\return Integer"},
{text: "NSAddressSyncData.SetCity", help: "<b>Void SetCity(String p_0)<\/b>\n\n\\param p_0 City: String\r\n\\return String"},
{text: "NSAddressSyncData.SetCounty", help: "<b>Void SetCounty(String p_0)<\/b>\n\n\\param p_0 County: String\r\n\\return String"},
{text: "NSAddressSyncData.SetFormattedAddress", help: "<b>Void SetFormattedAddress(String p_0)<\/b>\n\n\\param p_0 FormattedAddress: String\r\n\\return String"},
{text: "NSAddressSyncData.SetLatitude", help: "<b>Void SetLatitude(Float p_0)<\/b>\n\n\\param p_0 Latitude: Float\r\n\\return Float"},
{text: "NSAddressSyncData.SetLongitude", help: "<b>Void SetLongitude(Float p_0)<\/b>\n\n\\param p_0 Longitude: Float\r\n\\return Float"},
{text: "NSAddressSyncData.SetState", help: "<b>Void SetState(String p_0)<\/b>\n\n\\param p_0 State: String\r\n\\return String"},
{text: "NSAddressSyncData.SetZipCode", help: "<b>Void SetZipCode(String p_0)<\/b>\n\n\\param p_0 ZipCode: String\r\n\\return String"},
{text: "Void.NSAlarmData", help: "<b>NSAlarmData<\/b>\n\n"},
{text: "NSAlarmData.GetAlarmTime", help: "<b>DateTime GetAlarmTime()<\/b>\n\n\\return DateTime"},
{text: "NSAlarmData.GetEndDate", help: "<b>DateTime GetEndDate()<\/b>\n\nDate + end time planned\r\n\r\n\\return DateTime"},
{text: "NSAlarmData.GetStartTime", help: "<b>DateTime GetStartTime()<\/b>\n\ndate + start time planned\r\n\r\n\\return DateTime"},
{text: "NSAlarmData.GetAppointmentId", help: "<b>Integer GetAppointmentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetAppointmentType", help: "<b>Integer GetAppointmentType()<\/b>\n\nwhere=no start time,note,docin, docout\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetAssignmentStatus", help: "<b>Integer GetAssignmentStatus()<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetBookingType", help: "<b>Integer GetBookingType()<\/b>\n\nThe type of booking the appointment represents\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nContact ID of owning contact, may be 0\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetInvitationStatus", help: "<b>Integer GetInvitationStatus()<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nID of project referred to, may be 0\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nOwning sale, if any (may be 0)\r\n\r\n\\return Integer"},
{text: "NSAlarmData.GetAssignmentStatus", help: "<b>NSAssignmentStatus GetAssignmentStatus()<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n"},
{text: "NSAlarmData.GetBookingType", help: "<b>NSBookingType GetBookingType()<\/b>\n\nThe type of booking the appointment represents\r\n\r\n"},
{text: "NSAlarmData.GetInvitationStatus", help: "<b>NSInvitationStatus GetInvitationStatus()<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n"},
{text: "NSAlarmData.GetAppointmentText", help: "<b>String GetAppointmentText()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSAlarmData.GetContactDepartment", help: "<b>String GetContactDepartment()<\/b>\n\nDepartment\r\n\r\n\\return String"},
{text: "NSAlarmData.GetContactFullName", help: "<b>String GetContactFullName()<\/b>\n\n\\return String"},
{text: "NSAlarmData.GetContactName", help: "<b>String GetContactName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSAlarmData.GetFormalName", help: "<b>String GetFormalName()<\/b>\n\nThe associate's culture formatted formalname (firstname, middleName and lastname, title, mrmrs)\r\n\r\n\\return String"},
{text: "NSAlarmData.GetLocation", help: "<b>String GetLocation()<\/b>\n\nLocation for appointment, defaulted from invited resource of type place and other rules, but you can write anything you want here\r\n\r\n\\return String"},
{text: "NSAlarmData.GetPersonFullName", help: "<b>String GetPersonFullName()<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\return String"},
{text: "NSAlarmData.GetProjectName", help: "<b>String GetProjectName()<\/b>\n\nProject name\r\n\r\n\\return String"},
{text: "NSAlarmData.GetSaleName", help: "<b>String GetSaleName()<\/b>\n\n\\return String"},
{text: "NSAlarmData.GetTaskName", help: "<b>String GetTaskName()<\/b>\n\n\\return String"},
{text: "NSAlarmData.SetAlarmTime", help: "<b>Void SetAlarmTime(DateTime p_0)<\/b>\n\n\\param p_0 AlarmTime: DateTime\r\n\\return DateTime"},
{text: "NSAlarmData.SetAppointmentId", help: "<b>Void SetAppointmentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AppointmentId: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetAppointmentText", help: "<b>Void SetAppointmentText(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 AppointmentText: String\r\n\\return String"},
{text: "NSAlarmData.SetAppointmentType", help: "<b>Void SetAppointmentType(Integer p_0)<\/b>\n\nwhere=no start time,note,docin, docout\r\n\r\n\\param p_0 AppointmentType: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetAssignmentStatus", help: "<b>Void SetAssignmentStatus(Integer p_0)<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n\\param p_0 AssignmentStatus: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetAssignmentStatus", help: "<b>Void SetAssignmentStatus(NSAssignmentStatus p_0)<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n"},
{text: "NSAlarmData.SetBookingType", help: "<b>Void SetBookingType(Integer p_0)<\/b>\n\nThe type of booking the appointment represents\r\n\r\n\\param p_0 BookingType: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetBookingType", help: "<b>Void SetBookingType(NSBookingType p_0)<\/b>\n\nThe type of booking the appointment represents\r\n\r\n"},
{text: "NSAlarmData.SetContactDepartment", help: "<b>Void SetContactDepartment(String p_0)<\/b>\n\nDepartment\r\n\r\n\\param p_0 ContactDepartment: String\r\n\\return String"},
{text: "NSAlarmData.SetContactFullName", help: "<b>Void SetContactFullName(String p_0)<\/b>\n\n\\param p_0 ContactFullName: String\r\n\\return String"},
{text: "NSAlarmData.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nContact ID of owning contact, may be 0\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSAlarmData.SetEndDate", help: "<b>Void SetEndDate(DateTime p_0)<\/b>\n\nDate + end time planned\r\n\r\n\\param p_0 EndDate: DateTime\r\n\\return DateTime"},
{text: "NSAlarmData.SetFormalName", help: "<b>Void SetFormalName(String p_0)<\/b>\n\nThe associate's culture formatted formalname (firstname, middleName and lastname, title, mrmrs)\r\n\r\n\\param p_0 FormalName: String\r\n\\return String"},
{text: "NSAlarmData.SetInvitationStatus", help: "<b>Void SetInvitationStatus(Integer p_0)<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n\\param p_0 InvitationStatus: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetInvitationStatus", help: "<b>Void SetInvitationStatus(NSInvitationStatus p_0)<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n"},
{text: "NSAlarmData.SetLocation", help: "<b>Void SetLocation(String p_0)<\/b>\n\nLocation for appointment, defaulted from invited resource of type place and other rules, but you can write anything you want here\r\n\r\n\\param p_0 Location: String\r\n\\return String"},
{text: "NSAlarmData.SetPersonFullName", help: "<b>Void SetPersonFullName(String p_0)<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\param p_0 PersonFullName: String\r\n\\return String"},
{text: "NSAlarmData.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nID of project referred to, may be 0\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetProjectName", help: "<b>Void SetProjectName(String p_0)<\/b>\n\nProject name\r\n\r\n\\param p_0 ProjectName: String\r\n\\return String"},
{text: "NSAlarmData.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nOwning sale, if any (may be 0)\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSAlarmData.SetSaleName", help: "<b>Void SetSaleName(String p_0)<\/b>\n\n\\param p_0 SaleName: String\r\n\\return String"},
{text: "NSAlarmData.SetStartTime", help: "<b>Void SetStartTime(DateTime p_0)<\/b>\n\ndate + start time planned\r\n\r\n\\param p_0 StartTime: DateTime\r\n\\return DateTime"},
{text: "NSAlarmData.SetTaskName", help: "<b>Void SetTaskName(String p_0)<\/b>\n\n\\param p_0 TaskName: String\r\n\\return String"},
{text: "Void.NSAmountClassEntity", help: "<b>NSAmountClassEntity<\/b>\n\n"},
{text: "NSAmountClassEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\return Bool"},
{text: "NSAmountClassEntity.GetAmountFrom", help: "<b>Float GetAmountFrom()<\/b>\n\nLower limit of this amount class\r\n\r\n\\return Float"},
{text: "NSAmountClassEntity.GetAmountTo", help: "<b>Float GetAmountTo()<\/b>\n\nUpper limit of this amount class\r\n\r\n\\return Float"},
{text: "NSAmountClassEntity.GetAmountClassId", help: "<b>Integer GetAmountClassId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSAmountClassEntity.GetCurrencyId", help: "<b>Integer GetCurrencyId()<\/b>\n\nCurrency the limits in this amount class refer to. Mixing currencies between classes can give rise to overlapping intervals and thus unpredictable classifications.\r\n\r\n\\return Integer"},
{text: "NSAmountClassEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSAmountClassEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSAmountClassEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSAmountClassEntity.SetAmountClassId", help: "<b>Void SetAmountClassId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AmountClassId: Integer\r\n\\return Integer"},
{text: "NSAmountClassEntity.SetAmountFrom", help: "<b>Void SetAmountFrom(Float p_0)<\/b>\n\nLower limit of this amount class\r\n\r\n\\param p_0 AmountFrom: Float\r\n\\return Float"},
{text: "NSAmountClassEntity.SetAmountTo", help: "<b>Void SetAmountTo(Float p_0)<\/b>\n\nUpper limit of this amount class\r\n\r\n\\param p_0 AmountTo: Float\r\n\\return Float"},
{text: "NSAmountClassEntity.SetCurrencyId", help: "<b>Void SetCurrencyId(Integer p_0)<\/b>\n\nCurrency the limits in this amount class refer to. Mixing currencies between classes can give rise to overlapping intervals and thus unpredictable classifications.\r\n\r\n\\param p_0 CurrencyId: Integer\r\n\\return Integer"},
{text: "NSAmountClassEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSAmountClassEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSAmountClassEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSAmountClassEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSAppointment", help: "<b>NSAppointment<\/b>\n\nSimple read-only appointment data."},
{text: "NSAppointment.GetHasAlarm", help: "<b>Bool GetHasAlarm()<\/b>\n\nDoes this appointment have an alarm\r\n\r\n\\return Bool"},
{text: "NSAppointment.GetIsAlldayEvent", help: "<b>Bool GetIsAlldayEvent()<\/b>\n\nTrue if all day event\r\n\r\n\\return Bool"},
{text: "NSAppointment.GetIsBooking", help: "<b>Bool GetIsBooking()<\/b>\n\nTrue if this appointment is a booking.\r\n\r\n\\return Bool"},
{text: "NSAppointment.GetIsBookingMain", help: "<b>Bool GetIsBookingMain()<\/b>\n\nTrue if this appointment is a booking and current associate is the owner. False if it is a booking and current associate is a participant.\r\n\r\n\\return Bool"},
{text: "NSAppointment.GetIsFree", help: "<b>Bool GetIsFree()<\/b>\n\nTrue if free, false if busy\r\n\r\n\\return Bool"},
{text: "NSAppointment.GetIsPublished", help: "<b>Bool GetIsPublished()<\/b>\n\nTrue if appointment have an entry in published table\r\n\r\n\\return Bool"},
{text: "NSAppointment.GetIsRecurrence", help: "<b>Bool GetIsRecurrence()<\/b>\n\nTrue if the appointment is part of a recurring pattern.\r\n\r\n\\return Bool"},
{text: "NSAppointment.GetActiveDate", help: "<b>DateTime GetActiveDate()<\/b>\n\nThe date to be used for searching & showing\r\n\r\n\\return DateTime"},
{text: "NSAppointment.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nAppointment creation date\r\n\r\n\\return DateTime"},
{text: "NSAppointment.GetEndDate", help: "<b>DateTime GetEndDate()<\/b>\n\nDate + end time planned\r\n\r\n\\return DateTime"},
{text: "NSAppointment.GetRecurringEndDate", help: "<b>DateTime GetRecurringEndDate()<\/b>\n\n\\return DateTime"},
{text: "NSAppointment.GetRecurringStartDate", help: "<b>DateTime GetRecurringStartDate()<\/b>\n\n\\return DateTime"},
{text: "NSAppointment.GetStartDate", help: "<b>DateTime GetStartDate()<\/b>\n\ndate + start time planned\r\n\r\n\\return DateTime"},
{text: "NSAppointment.GetAlldayEvent", help: "<b>Integer GetAlldayEvent()<\/b>\n\nIs this an all day event: 0 = No, 1 = Yes\r\n\r\n"},
{text: "NSAppointment.GetAppointmentId", help: "<b>Integer GetAppointmentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetAssignedBy", help: "<b>Integer GetAssignedBy()<\/b>\n\nWho (last) assigned this appointment to associate_id?\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetAssignmentStatus", help: "<b>Integer GetAssignmentStatus()<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nID of associate whose diary the appointment is in, REQUIRED\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetBookingType", help: "<b>Integer GetBookingType()<\/b>\n\nThe type of booking the appointment represents\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetColorIndex", help: "<b>Integer GetColorIndex()<\/b>\n\nAppointment colour, used only in Japanese versions. Western versions take colour from Task\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetCompleted", help: "<b>Integer GetCompleted()<\/b>\n\nThe Completed state.\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nContact ID of owning contact, may be 0\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetCreatedByAssociateId", help: "<b>Integer GetCreatedByAssociateId()<\/b>\n\nId of the associate that created the appointment\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetFreeBusy", help: "<b>Integer GetFreeBusy()<\/b>\n\nWhat kind of time is this: 0 = Busy, 1 = Free\r\n\r\n"},
{text: "NSAppointment.GetInvitationStatus", help: "<b>Integer GetInvitationStatus()<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetMotherId", help: "<b>Integer GetMotherId()<\/b>\n\nID of mother appointment; self if booking master, master ID if booking slave, 0 if normal appointment. However, if 0 and assoc_id != reg_id then this is an assigned appointment, indicated vt type = kBooking\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetPriorityId", help: "<b>Integer GetPriorityId()<\/b>\n\nLink to priority list\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetPrivate", help: "<b>Integer GetPrivate()<\/b>\n\nObsolete, but still maintained field for appointment privacy; denormalization of visiblefor status\r\n\r\n"},
{text: "NSAppointment.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nID of project referred to, may be 0\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetRecurringPattern", help: "<b>Integer GetRecurringPattern()<\/b>\n\n\\return Integer"},
{text: "NSAppointment.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nOwning sale, if any (may be 0)\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetTaskType", help: "<b>Integer GetTaskType()<\/b>\n\nThe different task types of the appointment, if the activity is an appointment, task, phone. See the different types of appointments in the database manual.\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetType", help: "<b>Integer GetType()<\/b>\n\nThe different types of appointment, if the appointment is supposed to be shown in the diary or checklist, or if it's a document. See the different types of appointments in the database manual.\r\n\r\n\\return Integer"},
{text: "NSAppointment.GetPrivate", help: "<b>NSAppointmentPrivate GetPrivate()<\/b>\n\nObsolete, but still maintained field for appointment privacy; denormalization of visiblefor status\r\n\r\n\\return AppointmentPrivate"},
{text: "NSAppointment.GetAssignmentStatus", help: "<b>NSAssignmentStatus GetAssignmentStatus()<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n"},
{text: "NSAppointment.GetBookingType", help: "<b>NSBookingType GetBookingType()<\/b>\n\nThe type of booking the appointment represents\r\n\r\n"},
{text: "NSAppointment.GetInvitationStatus", help: "<b>NSInvitationStatus GetInvitationStatus()<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n"},
{text: "NSAppointment.GetRecurringPattern", help: "<b>NSRecurrencePattern GetRecurringPattern()<\/b>\n\n\r\n\r\n"},
{text: "NSAppointment.GetAssignedByFullName", help: "<b>String GetAssignedByFullName()<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\return String"},
{text: "NSAppointment.GetAssociateFullName", help: "<b>String GetAssociateFullName()<\/b>\n\nThe owner of the appointment - the associate whose diary\/checklist the appointment is in.\r\n\r\n\\return String"},
{text: "NSAppointment.GetAssociateName", help: "<b>String GetAssociateName()<\/b>\n\nThe associate's name\r\n\r\n\\return String"},
{text: "NSAppointment.GetContactName", help: "<b>String GetContactName()<\/b>\n\nThe contact associated with the appointment.\r\n\r\n\\return String"},
{text: "NSAppointment.GetCreatedBy", help: "<b>String GetCreatedBy()<\/b>\n\nWho created the appointment. Associate name.\r\n\r\n\\return String"},
{text: "NSAppointment.GetCreatedByFullName", help: "<b>String GetCreatedByFullName()<\/b>\n\nWho created the appointment. Full name.\r\n\r\n\\return String"},
{text: "NSAppointment.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe appointment's textbox; holds a descriptive text about the appointment. Filled out by the user.\r\n\r\n\\return String"},
{text: "NSAppointment.GetLocation", help: "<b>String GetLocation()<\/b>\n\nLocation for appointment, defaulted from invited resource of type place and other rules, but you can write anything you want here\r\n\r\n\\return String"},
{text: "NSAppointment.GetPersonFullName", help: "<b>String GetPersonFullName()<\/b>\n\nThe full name of the person this appointment belongs to.\r\n\r\n\\return String"},
{text: "NSAppointment.GetPriorityName", help: "<b>String GetPriorityName()<\/b>\n\nName of the appointments priority\r\n\r\n\\return String"},
{text: "NSAppointment.GetProjectName", help: "<b>String GetProjectName()<\/b>\n\nThe name of the project this appointment belong to. Blank if no project is connected.\r\n\r\n\\return String"},
{text: "NSAppointment.GetRejectReason", help: "<b>String GetRejectReason()<\/b>\n\nWhy was this booking or assignment rejected, the RejectReason list is a source of suggestions but you can write anything here\r\n\r\n\\return String"},
{text: "NSAppointment.GetSaleName", help: "<b>String GetSaleName()<\/b>\n\nHeading of Owning sale, if any. (may be blank)\r\n\r\n\\return String"},
{text: "NSAppointment.GetTask", help: "<b>String GetTask()<\/b>\n\nTask comprises the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\return String"},
{text: "NSAppointment.GetAlarmLeadTime", help: "<b>TimeSpan GetAlarmLeadTime()<\/b>\n\nAlarm lead time.\r\n\r\n\\return TimeSpan"},
{text: "NSAppointment.SetActiveDate", help: "<b>Void SetActiveDate(DateTime p_0)<\/b>\n\nThe date to be used for searching & showing\r\n\r\n\\param p_0 ActiveDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointment.SetAlarmLeadTime", help: "<b>Void SetAlarmLeadTime(TimeSpan p_0)<\/b>\n\nAlarm lead time.\r\n\r\n\\param p_0 AlarmLeadTime: TimeSpan\r\n\\return TimeSpan"},
{text: "NSAppointment.SetAlldayEvent", help: "<b>Void SetAlldayEvent(Integer p_0)<\/b>\n\nIs this an all day event: 0 = No, 1 = Yes\r\n\r\n"},
{text: "NSAppointment.SetAppointmentId", help: "<b>Void SetAppointmentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AppointmentId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetAssignedBy", help: "<b>Void SetAssignedBy(Integer p_0)<\/b>\n\nWho (last) assigned this appointment to associate_id?\r\n\r\n\\param p_0 AssignedBy: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetAssignedByFullName", help: "<b>Void SetAssignedByFullName(String p_0)<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\param p_0 AssignedByFullName: String\r\n\\return String"},
{text: "NSAppointment.SetAssignmentStatus", help: "<b>Void SetAssignmentStatus(Integer p_0)<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n\\param p_0 AssignmentStatus: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetAssignmentStatus", help: "<b>Void SetAssignmentStatus(NSAssignmentStatus p_0)<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n"},
{text: "NSAppointment.SetAssociateFullName", help: "<b>Void SetAssociateFullName(String p_0)<\/b>\n\nThe owner of the appointment - the associate whose diary\/checklist the appointment is in.\r\n\r\n\\param p_0 AssociateFullName: String\r\n\\return String"},
{text: "NSAppointment.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nID of associate whose diary the appointment is in, REQUIRED\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetAssociateName", help: "<b>Void SetAssociateName(String p_0)<\/b>\n\nThe associate's name\r\n\r\n\\param p_0 AssociateName: String\r\n\\return String"},
{text: "NSAppointment.SetBookingType", help: "<b>Void SetBookingType(Integer p_0)<\/b>\n\nThe type of booking the appointment represents\r\n\r\n\\param p_0 BookingType: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetBookingType", help: "<b>Void SetBookingType(NSBookingType p_0)<\/b>\n\nThe type of booking the appointment represents\r\n\r\n"},
{text: "NSAppointment.SetColorIndex", help: "<b>Void SetColorIndex(Integer p_0)<\/b>\n\nAppointment colour, used only in Japanese versions. Western versions take colour from Task\r\n\r\n\\param p_0 ColorIndex: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetCompleted", help: "<b>Void SetCompleted(Integer p_0)<\/b>\n\nThe Completed state.\r\n\r\n\\param p_0 Completed: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nContact ID of owning contact, may be 0\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nThe contact associated with the appointment.\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSAppointment.SetCreatedBy", help: "<b>Void SetCreatedBy(String p_0)<\/b>\n\nWho created the appointment. Associate name.\r\n\r\n\\param p_0 CreatedBy: String\r\n\\return String"},
{text: "NSAppointment.SetCreatedByAssociateId", help: "<b>Void SetCreatedByAssociateId(Integer p_0)<\/b>\n\nId of the associate that created the appointment\r\n\r\n\\param p_0 CreatedByAssociateId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetCreatedByFullName", help: "<b>Void SetCreatedByFullName(String p_0)<\/b>\n\nWho created the appointment. Full name.\r\n\r\n\\param p_0 CreatedByFullName: String\r\n\\return String"},
{text: "NSAppointment.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nAppointment creation date\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointment.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe appointment's textbox; holds a descriptive text about the appointment. Filled out by the user.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSAppointment.SetEndDate", help: "<b>Void SetEndDate(DateTime p_0)<\/b>\n\nDate + end time planned\r\n\r\n\\param p_0 EndDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointment.SetFreeBusy", help: "<b>Void SetFreeBusy(Integer p_0)<\/b>\n\nWhat kind of time is this: 0 = Busy, 1 = Free\r\n\r\n"},
{text: "NSAppointment.SetHasAlarm", help: "<b>Void SetHasAlarm(Bool p_0)<\/b>\n\nDoes this appointment have an alarm\r\n\r\n\\param p_0 HasAlarm: Bool\r\n\\return Bool"},
{text: "NSAppointment.SetInvitationStatus", help: "<b>Void SetInvitationStatus(Integer p_0)<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n\\param p_0 InvitationStatus: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetInvitationStatus", help: "<b>Void SetInvitationStatus(NSInvitationStatus p_0)<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n"},
{text: "NSAppointment.SetIsAlldayEvent", help: "<b>Void SetIsAlldayEvent(Bool p_0)<\/b>\n\nTrue if all day event\r\n\r\n\\param p_0 IsAlldayEvent: Bool\r\n\\return Bool"},
{text: "NSAppointment.SetIsBooking", help: "<b>Void SetIsBooking(Bool p_0)<\/b>\n\nTrue if this appointment is a booking.\r\n\r\n\\param p_0 IsBooking: Bool\r\n\\return Bool"},
{text: "NSAppointment.SetIsBookingMain", help: "<b>Void SetIsBookingMain(Bool p_0)<\/b>\n\nTrue if this appointment is a booking and current associate is the owner. False if it is a booking and current associate is a participant.\r\n\r\n\\param p_0 IsBookingMain: Bool\r\n\\return Bool"},
{text: "NSAppointment.SetIsFree", help: "<b>Void SetIsFree(Bool p_0)<\/b>\n\nTrue if free, false if busy\r\n\r\n\\param p_0 IsFree: Bool\r\n\\return Bool"},
{text: "NSAppointment.SetIsPublished", help: "<b>Void SetIsPublished(Bool p_0)<\/b>\n\nTrue if appointment have an entry in published table\r\n\r\n\\param p_0 IsPublished: Bool\r\n\\return Bool"},
{text: "NSAppointment.SetIsRecurrence", help: "<b>Void SetIsRecurrence(Bool p_0)<\/b>\n\nTrue if the appointment is part of a recurring pattern.\r\n\r\n\\param p_0 IsRecurrence: Bool\r\n\\return Bool"},
{text: "NSAppointment.SetLocation", help: "<b>Void SetLocation(String p_0)<\/b>\n\nLocation for appointment, defaulted from invited resource of type place and other rules, but you can write anything you want here\r\n\r\n\\param p_0 Location: String\r\n\\return String"},
{text: "NSAppointment.SetMotherId", help: "<b>Void SetMotherId(Integer p_0)<\/b>\n\nID of mother appointment; self if booking master, master ID if booking slave, 0 if normal appointment. However, if 0 and assoc_id != reg_id then this is an assigned appointment, indicated vt type = kBooking\r\n\r\n\\param p_0 MotherId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetPersonFullName", help: "<b>Void SetPersonFullName(String p_0)<\/b>\n\nThe full name of the person this appointment belongs to.\r\n\r\n\\param p_0 PersonFullName: String\r\n\\return String"},
{text: "NSAppointment.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetPriorityId", help: "<b>Void SetPriorityId(Integer p_0)<\/b>\n\nLink to priority list\r\n\r\n\\param p_0 PriorityId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetPriorityName", help: "<b>Void SetPriorityName(String p_0)<\/b>\n\nName of the appointments priority\r\n\r\n\\param p_0 PriorityName: String\r\n\\return String"},
{text: "NSAppointment.SetPrivate", help: "<b>Void SetPrivate(Integer p_0)<\/b>\n\nObsolete, but still maintained field for appointment privacy; denormalization of visiblefor status\r\n\r\n"},
{text: "NSAppointment.SetPrivate", help: "<b>Void SetPrivate(NSAppointmentPrivate p_0)<\/b>\n\nObsolete, but still maintained field for appointment privacy; denormalization of visiblefor status\r\n\r\n\\param p_0 Private: AppointmentPrivate\r\n\\return AppointmentPrivate"},
{text: "NSAppointment.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nID of project referred to, may be 0\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetProjectName", help: "<b>Void SetProjectName(String p_0)<\/b>\n\nThe name of the project this appointment belong to. Blank if no project is connected.\r\n\r\n\\param p_0 ProjectName: String\r\n\\return String"},
{text: "NSAppointment.SetRecurringEndDate", help: "<b>Void SetRecurringEndDate(DateTime p_0)<\/b>\n\n\\param p_0 RecurringEndDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointment.SetRecurringPattern", help: "<b>Void SetRecurringPattern(Integer p_0)<\/b>\n\n\\param p_0 RecurringPattern: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetRecurringPattern", help: "<b>Void SetRecurringPattern(NSRecurrencePattern p_0)<\/b>\n\n\r\n\r\n"},
{text: "NSAppointment.SetRecurringStartDate", help: "<b>Void SetRecurringStartDate(DateTime p_0)<\/b>\n\n\\param p_0 RecurringStartDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointment.SetRejectReason", help: "<b>Void SetRejectReason(String p_0)<\/b>\n\nWhy was this booking or assignment rejected, the RejectReason list is a source of suggestions but you can write anything here\r\n\r\n\\param p_0 RejectReason: String\r\n\\return String"},
{text: "NSAppointment.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nOwning sale, if any (may be 0)\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetSaleName", help: "<b>Void SetSaleName(String p_0)<\/b>\n\nHeading of Owning sale, if any. (may be blank)\r\n\r\n\\param p_0 SaleName: String\r\n\\return String"},
{text: "NSAppointment.SetStartDate", help: "<b>Void SetStartDate(DateTime p_0)<\/b>\n\ndate + start time planned\r\n\r\n\\param p_0 StartDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointment.SetTask", help: "<b>Void SetTask(String p_0)<\/b>\n\nTask comprises the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 Task: String\r\n\\return String"},
{text: "NSAppointment.SetTaskType", help: "<b>Void SetTaskType(Integer p_0)<\/b>\n\nThe different task types of the appointment, if the activity is an appointment, task, phone. See the different types of appointments in the database manual.\r\n\r\n\\param p_0 TaskType: Integer\r\n\\return Integer"},
{text: "NSAppointment.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nThe different types of appointment, if the appointment is supposed to be shown in the diary or checklist, or if it's a document. See the different types of appointments in the database manual.\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "Void.NSAppointmentAgent", help: "<b>NSAppointmentAgent<\/b>\n\nCollection of all services that works with Appointment data."},
{text: "NSAppointmentAgent.CanAssignToProjectMember", help: "<b>Bool CanAssignToProjectMember(Integer p_0, Integer p_1)<\/b>\n\n\\param p_0 projectId\r\n\\param p_1 suggestedAppointmentId"},
{text: "NSAppointmentAgent.GetAppointmentHaveParticipantsWithEmail", help: "<b>Bool GetAppointmentHaveParticipantsWithEmail(Integer p_0)<\/b>\n\nGetAppointmentHaveParticipantsWithEmail will check if any of the participants is marked to receive emails on this appointment. If no participants are defined, false will be returned.\r\n\r\n\\param p_0 appointmentId: The appointmentId.\r\n\\return Return true or false.\r\n"},
{text: "NSAppointmentAgent.GetCanInsertForAssociates", help: "<b>Bool[] GetCanInsertForAssociates(Integer[] p_0)<\/b>\n\nCheck if current associate can create appointments in the diary of other associates.\r\n\r\n\\param p_0 associateIds: Array of associate ids to check for.\r\n\\return Returns an array of bool corresponding to the associate array input parameter.\r\n"},
{text: "NSAppointmentAgent.GetCanInsertForAssociates", help: "<b>Boolean[] GetCanInsertForAssociates(Integer[] p_0)<\/b>\n\n"},
{text: "NSAppointmentAgent.CleanUpBookingDeleted", help: "<b>Integer CleanUpBookingDeleted(Integer[] p_0)<\/b>\n\nDeletes all appointments(within the appointmentIds array) with status BookingDeleted.\r\n\r\n\\param p_0 appointmentIds\r\n"},
{text: "NSAppointmentAgent.CleanUpRecurringBookingDeleted", help: "<b>Integer CleanUpRecurringBookingDeleted()<\/b>\n\nDeletes all appointments with status BookingDeleted and for in logged user."},
{text: "NSAppointmentAgent.ToggleActivities", help: "<b>Integer ToggleActivities(String[] p_0)<\/b>\n\nToggle the completed status for an array of activities.\r\n\r\n\\param p_0 activityIdentifier: Contain of a mix of appointment_id, sale_id, document_id and todo_id.\r\n\\return The resulting ActivityStatus of the first in the array"},
{text: "NSAppointmentAgent.ToggleActivity", help: "<b>Integer ToggleActivity(String p_0)<\/b>\n\nToggle the completed status for an activity. Activity may be sale, document or appointment. The changes are saved immediately.\r\n\r\n\\param p_0 activityIdentifier: May contain of a mix of appointment_id, sale_id, document_id and todo_id\r\n\\return What the result after toggling was."},
{text: "NSAppointmentAgent.ToggleAppointmentStatus", help: "<b>Integer ToggleAppointmentStatus(Integer p_0)<\/b>\n\nSets an appointment's status to Completed if the appointment had a different status, or sets the status to started if already set to completed.\r\n\r\n\\param p_0 appointmentId: The appointment id.\r\n\\return The new AppointmentStatus\r\n"},
{text: "NSAppointmentAgent.GetActivityInformationListByDatesAndAssociate", help: "<b>NSActivityInformationListItem[] GetActivityInformationListByDatesAndAssociate(DateTime p_0, DateTime p_1, Integer p_2)<\/b>\n\nGet activity information for one or more days according to the given date interval. The time portion of the dates is ignored. Private appointments are counted, but may not be visible through tooltips or other more detailed services.\r\n\r\n\\param p_0 startDate: Start date of interval. Time portion is ignored.\r\n\\param p_1 endDate: End date of interval. Time portion is ignored.\r\n\\param p_2 associateId: Associate id to identify the calendar to scan. If 0 is passed in, the currently authenticated associate is used instead.\r\n\\return Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.\r\n"},
{text: "NSAppointmentAgent.GetAppointment", help: "<b>NSAppointment GetAppointment(Integer p_0)<\/b>\n\nGets a Appointment object.\r\n\r\n\\param p_0 appointmentId: The identifier of the Appointment object\r\n\\return Appointment\r\n"},
{text: "NSAppointmentAgent.GetPublishedAppointment", help: "<b>NSAppointment GetPublishedAppointment(Integer p_0)<\/b>\n\nGet published appointment by appointment id.\r\n\r\n\\param p_0 appointmentId: The appointment id\r\n\\return Appointment\r\n"},
{text: "NSAppointmentAgent.UpdateAppointment", help: "<b>NSAppointment UpdateAppointment(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4, Integer p_5)<\/b>\n\nUpdates an appointment record.\r\n\r\n\\param p_0 id\r\n\\param p_1 startTime\r\n\\param p_2 endTime\r\n\\param p_3 status\r\n\\param p_4 type\r\n\\param p_5 associateId: The appointment owner's id (associate id)\r\n"},
{text: "NSAppointmentAgent.GetAppointmentList", help: "<b>NSAppointment[] GetAppointmentList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSAppointmentAgent.GetAppointmentRecords", help: "<b>NSAppointment[] GetAppointmentRecords(Integer p_0, Integer p_1)<\/b>\n\nGet all records involved in a booking and\/or recurring appointments. MotherId can be zero for repeating appointments or bookings, and recurrenceRuleId can be zero for bookings that are not repeating.\r\n\r\n\\param p_0 motherId: Appointment id of the owner of a booking\n\t\/\/\/\r\n\\param p_1 recurrenceRuleId: RecurrenceId of a recuring appointment"},
{text: "NSAppointmentAgent.GetAppointmentsByTaskHeading", help: "<b>NSAppointment[] GetAppointmentsByTaskHeading(Integer p_0)<\/b>\n\nMethod that returns appointments of a specific appointment task heading. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.\r\n\r\n\\param p_0 taskHeadingId: The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetAssociateDiary", help: "<b>NSAppointment[] GetAssociateDiary(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n\\param p_1 startTime\r\n\\param p_2 endTime\r\n\\param p_3 count\r\n"},
{text: "NSAppointmentAgent.GetAssociatesDiary", help: "<b>NSAppointment[] GetAssociatesDiary(Integer[] p_0, DateTime p_1, DateTime p_2)<\/b>\n\n\r\n\r\n\\param p_0 associateIds\r\n\\param p_1 startTime\r\n\\param p_2 endTime\r\n"},
{text: "NSAppointmentAgent.GetContactAppointments", help: "<b>NSAppointment[] GetContactAppointments(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3)<\/b>\n\nMethod that returns a specified number of appointments within a time range. The appointments belong to the contact specified. If the logged on user is not allowed to view this persons appointments an exception is thrown.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetContactAppointmentsByTask", help: "<b>NSAppointment[] GetContactAppointmentsByTask(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskId: The task id. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetContactAppointmentsByTaskHeading", help: "<b>NSAppointment[] GetContactAppointmentsByTaskHeading(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskHeadingId: The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetContactAppointmentsByTasks", help: "<b>NSAppointment[] GetContactAppointmentsByTasks(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer[] p_4)<\/b>\n\nMethod that returns a specified number of appointments belonging to an array of appointment task types within a time range. The appointments belong to the contact specified. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskIds: The task ids as an integer array. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetContactAppointmentsByType", help: "<b>NSAppointment[] GetContactAppointmentsByType(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the contact specified. If the logged on user is not allowed to view this contacts appointments an exception is thrown.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 appointmentType: The appointment type, e.g. inDiary, inChecklist etc.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetDiaryByGroup", help: "<b>NSAppointment[] GetDiaryByGroup(Integer p_0, Integer p_1, DateTime p_2, DateTime p_3, Integer p_4)<\/b>\n\n\r\n\r\n\\param p_0 groupId\r\n\\param p_1 groupType\r\n\\param p_2 startTime\r\n\\param p_3 endTime\r\n\\param p_4 count\r\n"},
{text: "NSAppointmentAgent.GetMyAppointments", help: "<b>NSAppointment[] GetMyAppointments(DateTime p_0, DateTime p_1, Integer p_2)<\/b>\n\nMethod that returns a specified number of appointments within a time range. The appointments belong to the currently logged on user.\r\n\r\n\\param p_0 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_1 endTime: The end of the time interval.\r\n\\param p_2 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetMyDiary", help: "<b>NSAppointment[] GetMyDiary(DateTime p_0, DateTime p_1, Integer p_2)<\/b>\n\nMethod that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user's diary. The appointments belong to the currently logged on user.\r\n\r\n\\param p_0 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_1 endTime: The end of the time interval.\r\n\\param p_2 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetMyPublishedAppointments", help: "<b>NSAppointment[] GetMyPublishedAppointments()<\/b>\n\nGet published appointments from the logged in user.\r\n\r\n\\return Appointments\r\n"},
{text: "NSAppointmentAgent.GetMyTasks", help: "<b>NSAppointment[] GetMyTasks(Integer p_0)<\/b>\n\nMethod that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user's task list. The appointments belong to the currently logged on user.\r\n\r\n\\param p_0 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetPersonAppointments", help: "<b>NSAppointment[] GetPersonAppointments(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments within a time range. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectAppointments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetPersonAppointmentsByTask", help: "<b>NSAppointment[] GetPersonAppointmentsByTask(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4, Integer p_5)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectAppointments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_5 taskId: The task id. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetPersonAppointmentsByTaskHeading", help: "<b>NSAppointment[] GetPersonAppointmentsByTaskHeading(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4, Integer p_5)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectAppointments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_5 taskHeadingId: The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetPersonAppointmentsByTasks", help: "<b>NSAppointment[] GetPersonAppointmentsByTasks(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4, Integer[] p_5)<\/b>\n\nMethod that returns a specified number of appointments from a list of appointment task types within a time range. The appointments belong to the person specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectAppointments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_5 taskIds: The task ids as an integer array. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetPersonAppointmentsByType", help: "<b>NSAppointment[] GetPersonAppointmentsByType(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4, Integer p_5)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the person specified.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectAppointments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_5 appointmentType: The appointment type, e.g. inDiary, inChecklist etc.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetPersonDiary", help: "<b>NSAppointment[] GetPersonDiary(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3)<\/b>\n\nMethod that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user's diary. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetPersonTasks", help: "<b>NSAppointment[] GetPersonTasks(Integer p_0, Integer p_1)<\/b>\n\nMethod that returns a specified number of appointments within a time range. It only returns appointments that would be displayed in the user's task list. The appointments belong to the person specified. If the person not is a SuperOffice user (associate) or the logged on user is not allowed to view this persons appointments an exception is thrown.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectAppointments", help: "<b>NSAppointment[] GetProjectAppointments(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3)<\/b>\n\nMethod that returns a specified number of appointments within a time range. The appointments belong to the project specified. If the logged on user is not allowed to view this projects appointments an exception is thrown.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectAppointmentsByTask", help: "<b>NSAppointment[] GetProjectAppointmentsByTask(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskId: The task id. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectAppointmentsByTaskHeading", help: "<b>NSAppointment[] GetProjectAppointmentsByTaskHeading(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskHeadingId: The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectAppointmentsByTasks", help: "<b>NSAppointment[] GetProjectAppointmentsByTasks(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer[] p_4)<\/b>\n\nMethod that returns a specified number of appointments matching the list of appointment task types within a time range. The appointments belong to the project specified.  Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskIds: The task ids as an integer array. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectAppointmentsByType", help: "<b>NSAppointment[] GetProjectAppointmentsByType(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the project specified.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 appointmentType: The appointment type, e.g. inDiary, inChecklist etc.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectMemberAppointments", help: "<b>NSAppointment[] GetProjectMemberAppointments(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3)<\/b>\n\nMethod that returns a specified number of appointments within a time range. The appointments belong to the projects where the person specified is member.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectMemberAppointmentsByTask", help: "<b>NSAppointment[] GetProjectMemberAppointmentsByTask(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment task type within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskId: The task id. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectMemberAppointmentsByTaskHeading", help: "<b>NSAppointment[] GetProjectMemberAppointmentsByTaskHeading(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment task heading within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on. The heading represents a grouping or filtering of tasks.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskHeadingId: The task heading id. The heading represents a grouping or filtering of tasks. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectMemberAppointmentsByTasks", help: "<b>NSAppointment[] GetProjectMemberAppointmentsByTasks(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer[] p_4)<\/b>\n\nMethod that returns a specified number of appointments matching a set of appointment task types within a time range. The appointments belong to the projects where the person specified is member. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 taskIds: The task ids as an integer array. Task represents the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetProjectMemberAppointmentsByType", help: "<b>NSAppointment[] GetProjectMemberAppointmentsByType(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of appointments of a specific appointment type within a time range. The appointments belong to the projects where the person specified is member.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 appointmentType: The appointment type, e.g. inDiary, inChecklist etc.\r\n\\return Array of Appointments.\r\n"},
{text: "NSAppointmentAgent.GetPublishedAppointments", help: "<b>NSAppointment[] GetPublishedAppointments(Integer[] p_0)<\/b>\n\nGet published appointments by appointment ids.\r\n\r\n\\param p_0 appointmentIds: The array of appointment ids\r\n\\return Array of Appointment\r\n"},
{text: "NSAppointmentAgent.GetPublishedProjectAppointments", help: "<b>NSAppointment[] GetPublishedProjectAppointments(Integer p_0)<\/b>\n\nGet published appointments by project id.\r\n\r\n\\param p_0 projectId: The project id\r\n\\return Array of Appointment\r\n"},
{text: "NSAppointmentAgent.AcceptRejected", help: "<b>NSAppointmentEntity AcceptRejected(Integer p_0, Integer p_1)<\/b>\n\nAccept that an invited participant has rejected your invitation or assignment.\r\n\r\n\\param p_0 appointmentId: The appointmentId. Both master and child record ids are accepted.\r\n\\param p_1 updateMode: Update mode for a recurring appointment.\r\n\\return Updated AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.AssignTo", help: "<b>NSAppointmentEntity AssignTo(Integer p_0, NSParticipantInfo p_1, Integer p_2)<\/b>\n\nAssigning an appointment to another person.\r\n\r\n\\param p_0 appointmentId: The appointmentId. Both master and child record ids are accepted.\r\n\\param p_1 participant\r\n\\param p_2 updateMode: Update mode for a recurring appointment.\r\n\\return Updated AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.CreateDefaultAppointmentEntity", help: "<b>NSAppointmentEntity CreateDefaultAppointmentEntity()<\/b>\n\nLoading default values into a new AppointmentEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New AppointmentEntity with default values\r\n"},
{text: "NSAppointmentAgent.CreateDefaultAppointmentEntityByType", help: "<b>NSAppointmentEntity CreateDefaultAppointmentEntityByType(Integer p_0)<\/b>\n\nCreates a AppointmentEntity populated with the default values for the specific type.\r\n\r\n\\param p_0 type: The type of task requested.\r\n\\return AppointmentEntity with default values.\r\n"},
{text: "NSAppointmentAgent.CreateDefaultAppointmentEntityByTypeAndAssociate", help: "<b>NSAppointmentEntity CreateDefaultAppointmentEntityByTypeAndAssociate(Integer p_0, Integer p_1)<\/b>\n\nCreates a AppointmentEntity populated with the default values for the specific type and owner.\r\n\r\n\\param p_0 type: The type of task requested.\r\n\\param p_1 associateId: The associateId of the appointment owner.\r\n\\return AppointmentEntity with default values.\r\n"},
{text: "NSAppointmentAgent.CreateDefaultAppointmentEntityFromProjectSuggestion", help: "<b>NSAppointmentEntity CreateDefaultAppointmentEntityFromProjectSuggestion(Integer p_0, Integer p_1, Bool p_2, Integer p_3)<\/b>\n\n\\param p_0 suggestedAppointmentId\r\n\\param p_1 projectId\r\n\\param p_2 createNow\r\n\\param p_3 ownerId"},
{text: "NSAppointmentAgent.CreateDefaultAppointmentEntityFromSaleSuggestion", help: "<b>NSAppointmentEntity CreateDefaultAppointmentEntityFromSaleSuggestion(Integer p_0, Integer p_1, Bool p_2, Integer p_3)<\/b>\n\nCreates an appointment based on a suggested appointment.\r\n\r\n\\param p_0 suggestedAppointmentId: The id of the suggested appointment\r\n\\param p_1 saleId: This is the id of the sale the appointment is connected to. This will be used to give the appointment it's starting date. If the id is 0 or invalid, we assume the start date is now\r\n\\param p_2 createNow: If this parameter is true, we override the suggested start time and create the appointment with the current date and time\r\n\\param p_3 ownerId\r\n\\return The newly created appointment\r\n"},
{text: "NSAppointmentAgent.CreateDefaultReOpenAppointment", help: "<b>NSAppointmentEntity CreateDefaultReOpenAppointment(Integer p_0)<\/b>\n\nA re-open appointment should be created as a reminder to re-open the sale at a certain date with information regarding the stalled sale.\r\n\r\n\\param p_0 saleId: The identifier of the stalled sale from which we create a re-open appointment\r\n\\return The re-open appointment with start date = the re-open date of the sale and a description matching the sales stalled reason.\r\n"},
{text: "NSAppointmentAgent.GetAppointmentEntity", help: "<b>NSAppointmentEntity GetAppointmentEntity(Integer p_0)<\/b>\n\nGets a AppointmentEntity object.\r\n\r\n\\param p_0 appointmentEntityId: The identifier of the AppointmentEntity object\r\n\\return AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.Move", help: "<b>NSAppointmentEntity Move(Integer p_0, DateTime p_1, Integer p_2)<\/b>\n\nMoving a booking to another start time.\r\n\r\n\\param p_0 appointmentId: The appointmentId. Both master and child record ids are accepted.\r\n\\param p_1 newStartTime: The new start time for the moved booking.\r\n\\param p_2 updateMode: Update mode for a recurring appointment.\r\n\\return Updated AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.Save", help: "<b>NSAppointmentEntity Save(NSAppointmentEntity p_0, Integer p_1, Bool p_2, NSEMailConnectionInfo p_3, NSEMailConnectionInfo p_4)<\/b>\n\nSaving a booking.\r\n\r\n\\param p_0 appointmentEntity\r\n\\param p_1 updateMode: Update mode for a recurring appointment.\r\n\\param p_2 sendEmailToParticipants: If true, emails will be sent to all participants that is marked with send email flag. If false no mails will be sent even if the send email flag is true.\r\n\\param p_3 smtpEMailConnectionInfo: Login information for outgoing smtp email server. Will be null if no login information is relevant.\r\n\\param p_4 imapEMailConnectionInfo: Login information for imap server. Will be null if no login information is relevant.\r\n\\return Updated AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.SaveAppointmentEntity", help: "<b>NSAppointmentEntity SaveAppointmentEntity(NSAppointmentEntity p_0)<\/b>\n\nUpdates the existing AppointmentEntity or creates a new AppointmentEntity if the id parameter is empty\r\n\r\n\\param p_0 appointmentEntity: The AppointmentEntity that is saved\r\n\\return New or updated AppointmentEntity"},
{text: "NSAppointmentAgent.GetAppointmentList", help: "<b>NSAppointmentList[] GetAppointmentList(Integer[] p_0)<\/b>\n\nGets an array of Appointment objects.\r\n\r\n\\param p_0 appointmentIds: The identifiers of the Appointment object\r\n\\return Array of Appointment objects\r\n"},
{text: "NSAppointmentAgent.GetMySyncAppointments", help: "<b>NSAppointmentSyncData[] GetMySyncAppointments(DateTime p_0, DateTime p_1)<\/b>\n\nMethod that returns a specified number of appointments within a time range. The appointments belong to the currently logged on user.\r\n\r\n\\param p_0 startTime: The start of the time interval in which we want appointments. This will usually be the current time.\r\n\\param p_1 endTime: The end of the time interval.\r\n\\return Array of Appointments."},
{text: "NSAppointmentAgent.GetCanInsertForAssociates", help: "<b>NSBoolean[] GetCanInsertForAssociates(Integer[] p_0)<\/b>\n\nCheck if current associate can create appointments in the diary of other associates.\r\n\r\n\\param p_0 associateIds: Array of associate ids to check for.\r\n\\return Returns an array of bool corresponding to the associate array input parameter."},
{text: "NSAppointmentAgent.GetDayInformationListByDatesAndAssociate", help: "<b>NSDayInformationListItem[] GetDayInformationListByDatesAndAssociate(DateTime p_0, DateTime p_1, Integer p_2)<\/b>\n\nGet combined day information (activity + redletter summary) for one or more days according to the given date interval. The time portion of the dates is ignored. Private appointments are counted, but may not be visible through tooltips or other more detailed services.\r\n\r\n\\param p_0 startDate: Start date of interval. Time portion is ignored.\r\n\\param p_1 endDate: End date of interval. Time portion is ignored.\r\n\\param p_2 associateId: Associate id to identify the calendar to scan. If 0 is passed in, the currently authenticated associate is used instead.\r\n\\return Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.\r\n"},
{text: "NSAppointmentAgent.GetAlarms", help: "<b>NSMultiAlarmData GetAlarms(Bool p_0, Bool p_1, Integer p_2)<\/b>\n\n\r\n\r\n\\param p_0 includeInvitations\r\n\\param p_1 includeAllAppointments\r\n\\param p_2 defaultAlarmLeadTimeInMinutes\r\n"},
{text: "NSAppointmentAgent.ValidateDays", help: "<b>NSRecurrenceDate[] ValidateDays(NSAppointmentEntity p_0, DateTime[] p_1)<\/b>\n\nValidates the set of dates to calculate any conflicts.\r\n\r\n\\param p_0 appointmentEntity\r\n\\param p_1 dates: The dates to validate.\r\n\\return Array of RecurrenceDate object for each validated date.\r\n"},
{text: "NSAppointmentAgent.CalculateDays", help: "<b>NSRecurrenceInfo CalculateDays(NSAppointmentEntity p_0)<\/b>\n\nCalculates the set of dates that represents a recurrence pattern. Adds conflict information to each date.\r\n\r\n\\param p_0 appointmentEntity\r\n"},
{text: "NSAppointmentAgent.CreateDefaultRecurrence", help: "<b>NSRecurrenceInfo CreateDefaultRecurrence()<\/b>\n\nCreates a RecurrenceInfo object populated with the default values for the specific type.\r\n\r\n\\return RecurrenceInfo object with default values.\r\n"},
{text: "NSAppointmentAgent.CreateDefaultRecurrenceByDate", help: "<b>NSRecurrenceInfo CreateDefaultRecurrenceByDate(DateTime p_0)<\/b>\n\nCreates a RecurrenceInfo object populated with the default values for the specific type. Using startDate as start date for the recurreing pattern.\r\n\r\n\\param p_0 startDate: Date of which the recurring pattern should start.\r\n"},
{text: "NSAppointmentAgent.GetRedLetterInformationListByDatesAndAssociate", help: "<b>NSRedLetterInformationListItem[] GetRedLetterInformationListByDatesAndAssociate(DateTime p_0, DateTime p_1, Integer p_2)<\/b>\n\nGet detailed red letter day information (redletter summary + individual day texts) for one or more days according to the given date interval. The time portion of the dates is ignored.\r\n\r\n\\param p_0 startDate: Start date of interval. Time portion is ignored.\r\n\\param p_1 endDate: End date of interval. Time portion is ignored.\r\n\\param p_2 associateId: Associate id to identify the calendar to scan. If 0 is passed in, the currently authenticated associate is used instead.\r\n\\return Exactly one item per day of the given time span is returned. Days where nothing happens will have all values set to 0, but will still be in the returned array. Start end dates are treated as inclusive.\r\n"},
{text: "NSAppointmentAgent.GenerateLead", help: "<b>NSSalesActivity GenerateLead(Integer p_0, String p_1, String p_2, Integer p_3, String p_4, String p_5, String p_6, String p_7, String p_8, String p_9, String p_10, String p_11)<\/b>\n\nAdds a sales lead (task) to a contact in SuperOffice. If the contact or person is known, the sales lead is added to the current contact. If not, a new contact is created, with the associate with ownerIdForNewContact as responsible (Our Contact). A relation is created between the contact and the person submitting the lead. Based on wether the person the request is made for is found or not, the following happens: If the person is found, the person, person's contact and sales representative is returned. If neither the person nor the contact is found a new person and contact is created (if sufficient data is supplied), and the person, person's contact and sales representative is returned. If the contact and not the person is found a new person is created on this contact, and the contact, salesrep, and person is returned (if there was enough data to return the person). If more than one contact is found a list of contacts is returned.\r\n\r\n\\param p_0 associateIdForNewContact: Associate id of the person set as \"Our Contact\" if a new Contact is created. Ensures that the sales lead is assigned to the correct salesman.\r\n\\param p_1 leadDescription: Description of the lead. The lead text as shown in SuperOffice\r\n\\param p_2 relation: The relation the person submitting the lead has to the contact.\r\n\\param p_3 relationId: Id of the relation type. Database specific.\r\n\\param p_4 leadContact: Name of the new or existing contact (company) the lead is created for.\r\n\\param p_5 leadPersonFirstname: Firstname of the contact's person.\r\n\\param p_6 leadPersonLastname: Lastname of the contact's person.\r\n\\param p_7 leadPersonEmail: Email to the contact's person.\r\n\\param p_8 leadPhoneNumber: Phone number of the contact or contact's person.\r\n\\param p_9 creatorsContact: The contact (company) of the person creating the lead\r\n\\param p_10 creatorsFirstname: The firstname of the person creating the lead\r\n\\param p_11 creatorsLastname: The lastname of the person creating the lead\r\n\\return True if successfull.\r\n"},
{text: "NSAppointmentAgent.RequestForInfo", help: "<b>NSSalesActivity RequestForInfo(Integer p_0, String p_1, String p_2, String p_3, String p_4, String p_5, String p_6, String p_7)<\/b>\n\nSubmits a request for information. The request is added to the task list of the user that is responsible for this contact. Based on wether the person the request is made for is found or not, the following happens: If the person is found, the person, person's contact and sales representative is returned. If neither the person nor the contact is found a new person and contact is created (if sufficient data is supplied), and the person, person's contact and sales representative is returned. If the contact and not the person is found a new person is created on this contact, and the contact, salesrep, and person is returned (if there was enough data to return the person). If more than one contact is found a list of contacts is returned.\r\n\r\n\\param p_0 associateIdForNewContact: Associate id of the person set as \"Our Contact\" if a new Contact is created. Ensures that the request is assigned to the correct salesman.\r\n\\param p_1 channel: The requested channel, e.g. \"Phone\"\r\n\\param p_2 regarding: The text submitted by the user.\r\n\\param p_3 contactName: The name of the contact that the RFI will be added to. May be empty.\r\n\\param p_4 personFirstname: The firstname of the person that the RFI will be added to. May be empty.\r\n\\param p_5 personLastname: The lastname of the person that the RFI will be added to. May be empty.\r\n\\param p_6 emailAddress: The email address of the person that the RFI will be added to.\r\n\\param p_7 phoneNumber: Phone number of the contact or contact's person.\r\n\\return True if the submission was successful.\r\n"},
{text: "NSAppointmentAgent.GetNextSuggestedAppointmentBySale", help: "<b>NSSuggestedAppointment GetNextSuggestedAppointmentBySale(Integer p_0, Integer p_1, Bool p_2)<\/b>\n\nGets the next suggested appointment for a given sale (or rather a given sale's guide).\r\n\r\n\\param p_0 saleId: The identifier of the (guided) sale from which we want to find a suggested appointment\r\n\\param p_1 currentAppointmentId: The identifier of the appointment from which we calculate the next suggestion. The next suggested appointment is the subsequent appointment defined in the SoAdmin's sales guide.\r\n\\param p_2 skipCompleteCheck: If you want to get the next appointment step in a sales guide for an appointment which is not completed, this value must be true. In all other cases, this value should be false, as it would return the value of null if the current appointment is not completes.\r\n\\return The next suggestion based on the sale id of a guided sale and the id of the current apopintment. If we cannot find a next suggestion or the sale is not guided (or if any of the paramters are invalid), we will return null.\r\n"},
{text: "NSAppointmentAgent.GetSuggestedAppointment", help: "<b>NSSuggestedAppointment GetSuggestedAppointment(Integer p_0)<\/b>\n\nGets a SuggestedAppointment object.\r\n\r\n\\param p_0 suggestedAppointmentId: The identifier of the SuggestedAppointment object\r\n\\return SuggestedAppointment\r\n"},
{text: "NSAppointmentAgent.CreateDefaultSuggestedAppointmentEntity", help: "<b>NSSuggestedAppointmentEntity CreateDefaultSuggestedAppointmentEntity()<\/b>\n\nLoading default values into a new SuggestedAppointmentEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New SuggestedAppointmentEntity with default values"},
{text: "NSAppointmentAgent.GetSuggestedAppointmentEntity", help: "<b>NSSuggestedAppointmentEntity GetSuggestedAppointmentEntity(Integer p_0)<\/b>\n\nGets a SuggestedAppointmentEntity object.\r\n\r\n\\param p_0 suggestedAppointmentEntityId: The identifier of the SuggestedAppointmentEntity object\r\n\\return SuggestedAppointmentEntity"},
{text: "NSAppointmentAgent.SaveSuggestedAppointmentEntity", help: "<b>NSSuggestedAppointmentEntity SaveSuggestedAppointmentEntity(NSSuggestedAppointmentEntity p_0)<\/b>\n\nUpdates the existing SuggestedAppointmentEntity or creates a new SuggestedAppointmentEntity if the id parameter is empty\r\n\r\n\\param p_0 suggestedAppointmentEntity: The SuggestedAppointmentEntity that is saved\r\n\\return New or updated SuggestedAppointmentEntity"},
{text: "NSAppointmentAgent.CreateDefaultTaskListItem", help: "<b>NSTaskListItem CreateDefaultTaskListItem()<\/b>\n\nLoading default values into a new TaskListItem.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New TaskListItem with default values"},
{text: "NSAppointmentAgent.GetTaskListItem", help: "<b>NSTaskListItem GetTaskListItem(Integer p_0)<\/b>\n\nGets a TaskListItem object.\r\n\r\n\\param p_0 taskListItemId: The identifier of the TaskListItem object\r\n\\return TaskListItem\r\n"},
{text: "NSAppointmentAgent.SaveTaskListItem", help: "<b>NSTaskListItem SaveTaskListItem(NSTaskListItem p_0)<\/b>\n\nUpdates the existing TaskListItem or creates a new TaskListItem if the id parameter is empty\r\n\r\n\\param p_0 taskListItem: The TaskListItem that is saved\r\n\\return New or updated TaskListItem"},
{text: "NSAppointmentAgent.GetTaskListItems", help: "<b>NSTaskListItem[] GetTaskListItems(Bool p_0)<\/b>\n\nGets all takslist items\r\n\r\n\\param p_0 includeDeleted: Include deleted items\r\n\\return An array of tasklist items"},
{text: "NSAppointmentAgent.ToggleAndSetActivities", help: "<b>String[] ToggleAndSetActivities(String[] p_0)<\/b>\n\nToggles the first activity and sets the rest of the activities to the result of the first toggle. However, there are some special rules for appointments that trigger a suggested appointment when they are completed. If more than one appointment in the set of identifiers triggers a suggestion, we will not toggle those appointments. This rule is only active when changing the status of an appointment to complete. There must be more than one appointment that triggers such an event for this rule to take effect.\r\n\r\n\\param p_0 activityIdentifiers: Array of activity ids. ex. appointment_id=666\r\n\\return The identifiers that were not toggled.\r\n"},
{text: "NSAppointmentAgent.Accept", help: "<b>Void Accept(Integer p_0, Integer p_1)<\/b>\n\nAccepting an appointment invitation.\r\n\r\n\\param p_0 appointmentId: The appointmentId. Both master and child record ids are accepted.\r\n\\param p_1 updateMode: Update mode for a recurring appointment.\r\n\\return Updated AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.Delete", help: "<b>Void Delete(Integer p_0, Integer p_1, Bool p_2, NSEMailConnectionInfo p_3, NSEMailConnectionInfo p_4)<\/b>\n\nDeleting a booking\r\n\r\n\\param p_0 appointmentId: The appointmentId. Both master and child record ids are accepted.\r\n\\param p_1 updateMode: Update mode for a recurring appointment.\r\n\\param p_2 sendEmailToParticipants: If true, emails will be sent to all participants that is marked with send email flag. If false no mails will be sent even if the send email flag is true.\r\n\\param p_3 smtpEMailConnectionInfo: Login information for outgoing smtp email server. Will be null if no login information is relevant.\r\n\\param p_4 imapEMailConnectionInfo: Login information for imap server. Will be null if no login information is relevant.\r\n"},
{text: "NSAppointmentAgent.DeleteAppointmentEntity", help: "<b>Void DeleteAppointmentEntity(Integer p_0)<\/b>\n\nDeletes the AppointmentEntity\r\n\r\n\\param p_0 appointmentEntityId: The identity of the AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.Reject", help: "<b>Void Reject(Integer p_0, String p_1, Integer p_2)<\/b>\n\nRejecting an appointment invitation\r\n\r\n\\param p_0 appointmentId: The appointmentId. Both master and child record ids are accepted.\r\n\\param p_1 rejectReason: The reason the invitation was rejected.\r\n\\param p_2 updateMode: Update mode for a recurring appointment.\r\n\\return Updated AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.SaveAppointmentEntity", help: "<b>Void SaveAppointmentEntity(NSAppointmentEntity p_0)<\/b>\n\nUpdates the existing AppointmentEntity or creates a new AppointmentEntity if the id parameter is empty\r\n\r\n\\param p_0 appointmentEntity: The AppointmentEntity that is saved.\r\n\\return New or updated AppointmentEntity\r\n"},
{text: "NSAppointmentAgent.SetActivityStatus", help: "<b>Void SetActivityStatus(String[] p_0, Integer p_1)<\/b>\n\nSets the completed status for an array of activities. The string activityIdentifier param may contain of a mix of appointment_id, sale_id, document_id and todo_id. The changes are saved immediately. If an invalid id is passed in (nonexistent record), no changes will be made. If there is no write access to the record being changed, a Sentry exception will be thrown in the usual manner.\r\n\r\n\\param p_0 activityIdentifier: Array of activity ids. ex. appointment_id=666\r\n\\param p_1 activityStatus: The status to set the activities\r\n"},
{text: "NSAppointmentAgent.SetSeen", help: "<b>Void SetSeen(Integer p_0, Integer p_1)<\/b>\n\nSets an appointment invitiation to seen.\r\n\r\n\\param p_0 appointmentId: The appointmentId. Both master and child record ids are accepted.\r\n\\param p_1 updateMode: Update mode for a recurring appointment.\r\n"},
{text: "Void.NSAppointmentEntity", help: "<b>NSAppointmentEntity<\/b>\n\nAppointments appear in the diary, and have links to a Contact\/Person and possibly a Project or Sale. They have start and end time+date."},
{text: "NSAppointmentEntity.GetAlldayEvent", help: "<b>Bool GetAlldayEvent()<\/b>\n\nTrue if this is an all day event.\r\n\r\n"},
{text: "NSAppointmentEntity.GetFreeBusy", help: "<b>Bool GetFreeBusy()<\/b>\n\nWhat kind of time is this. False is Busy. True is Free.\r\n\r\n"},
{text: "NSAppointmentEntity.GetHasAlarm", help: "<b>Bool GetHasAlarm()<\/b>\n\nDoes this appointment have an alarm\r\n\r\n\\return Bool"},
{text: "NSAppointmentEntity.GetHasConflict", help: "<b>Bool GetHasConflict()<\/b>\n\n\\return Bool"},
{text: "NSAppointmentEntity.GetIsAlldayEvent", help: "<b>Bool GetIsAlldayEvent()<\/b>\n\nTrue if all day event\r\n\r\n\\return Bool"},
{text: "NSAppointmentEntity.GetIsFree", help: "<b>Bool GetIsFree()<\/b>\n\nTrue if free, false if busy\r\n\r\n\\return Bool"},
{text: "NSAppointmentEntity.GetIsMileStone", help: "<b>Bool GetIsMileStone()<\/b>\n\nIs this appointment a milestone?\r\n\r\n\\return Bool"},
{text: "NSAppointmentEntity.GetIsPublished", help: "<b>Bool GetIsPublished()<\/b>\n\nGet the Publication is published field\r\n\r\n"},
{text: "NSAppointmentEntity.GetActiveDate", help: "<b>DateTime GetActiveDate()<\/b>\n\nThe date to be used for searching & showing\r\n\r\n\\return DateTime"},
{text: "NSAppointmentEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered date\r\n\r\n\\return DateTime"},
{text: "NSAppointmentEntity.GetEndDate", help: "<b>DateTime GetEndDate()<\/b>\n\nDate + end time planned\r\n\r\n\\return DateTime"},
{text: "NSAppointmentEntity.GetPublishEventDate", help: "<b>DateTime GetPublishEventDate()<\/b>\n\n\\return DateTime"},
{text: "NSAppointmentEntity.GetPublishFrom", help: "<b>DateTime GetPublishFrom()<\/b>\n\n\\return DateTime"},
{text: "NSAppointmentEntity.GetPublishTo", help: "<b>DateTime GetPublishTo()<\/b>\n\n\\return DateTime"},
{text: "NSAppointmentEntity.GetStartDate", help: "<b>DateTime GetStartDate()<\/b>\n\ndate + start time planned\r\n\r\n\\return DateTime"},
{text: "NSAppointmentEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nUpdated date\r\n\r\n\\return DateTime"},
{text: "NSAppointmentEntity.GetActiveLinks", help: "<b>Integer GetActiveLinks()<\/b>\n\nNumber of active links to sale, document, appointment.\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetAppointmentId", help: "<b>Integer GetAppointmentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetAssignmentStatus", help: "<b>Integer GetAssignmentStatus()<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetBookingType", help: "<b>Integer GetBookingType()<\/b>\n\nThe type of booking the appointment represents\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetColorIndex", help: "<b>Integer GetColorIndex()<\/b>\n\nAppointment colour, used only in Japanese versions. Western versions take colour from Task\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetCompleted", help: "<b>Integer GetCompleted()<\/b>\n\nAppointment Completed state. This property is the part of the Status property that is the completed state. Could be three state if the three state user preference is set.\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetInvitationStatus", help: "<b>Integer GetInvitationStatus()<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetMotherId", help: "<b>Integer GetMotherId()<\/b>\n\nID of mother appointment; self if booking master, master ID if booking slave, 0 if normal appointment. However, if 0 and assoc_id != reg_id then this is an assigned appointment, indicated vt type = kBooking\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetPreferredTZLocation", help: "<b>Integer GetPreferredTZLocation()<\/b>\n\nAppoinmtments preferred timezone location.\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetPrivate", help: "<b>Integer GetPrivate()<\/b>\n\nThe confidentiality of appointments is shown as different types of “private” on the appointment. For an updated list of “private” types, see the database manual.\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetRejectCounter", help: "<b>Integer GetRejectCounter()<\/b>\n\nHow many invitees have rejected this appointment\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetSuggestedAppointmentId", help: "<b>Integer GetSuggestedAppointmentId()<\/b>\n\nSuggested guide item that this appointment is an instance of (Note: NOT VALID for document-type appointments, they have their own link)\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetType", help: "<b>Integer GetType()<\/b>\n\nThe different types of appointment, if the appointment is supposed to be shown in the diary or checklist, or if it's a document. See the different types of appointments in the database manual.\r\n\r\n\\return Integer"},
{text: "NSAppointmentEntity.GetExtraFields", help: "<b>Map GetExtraFields()<\/b>\n\n\\return Map"},
{text: "NSAppointmentEntity.GetUserDefinedFields", help: "<b>Map GetUserDefinedFields()<\/b>\n\n\\return Map"},
{text: "NSAppointmentEntity.GetAssignmentStatus", help: "<b>NSAssignmentStatus GetAssignmentStatus()<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n"},
{text: "NSAppointmentEntity.GetAssignedBy", help: "<b>NSAssociate GetAssignedBy()<\/b>\n\n\\return Associate"},
{text: "NSAppointmentEntity.GetAssociate", help: "<b>NSAssociate GetAssociate()<\/b>\n\nThe owner of the appointment - the associate whose diary\/checklist the appointment is in.\r\n\r\n\\return Associate"},
{text: "NSAppointmentEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nThe associate that first created the appointment. The property is read-only.\r\n\r\n\\return Associate"},
{text: "NSAppointmentEntity.GetMotherAssociate", help: "<b>NSAssociate GetMotherAssociate()<\/b>\n\nThe owner of the mother appointment - the associate whose diary\/checklist the mother appointment is in.  The mother appointment is the one identified by the mother_id. If the mother_id is 0 or the same as this appointment_id, then the master associate will be the same as the 'ordinary' associate.\r\n\r\n\\return Associate"},
{text: "NSAppointmentEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nThe person that last updated the appointment.\r\n\r\n\\return Associate"},
{text: "NSAppointmentEntity.GetBookingType", help: "<b>NSBookingType GetBookingType()<\/b>\n\nThe type of booking the appointment represents\r\n\r\n"},
{text: "NSAppointmentEntity.GetContact", help: "<b>NSContact GetContact()<\/b>\n\nThe contact associated with the appointment. It may also be null if no contact is associated with the appointment.\r\n\r\n\\return Contact"},
{text: "NSAppointmentEntity.GetInvitationStatus", help: "<b>NSInvitationStatus GetInvitationStatus()<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n"},
{text: "NSAppointmentEntity.GetLinks", help: "<b>NSLink[] GetLinks()<\/b>\n\nList of all elements linked to the document.\r\n\r\n\\return LinkArray"},
{text: "NSAppointmentEntity.GetParticipants", help: "<b>NSParticipantInfo[] GetParticipants()<\/b>\n\nList of id's of the participants to this appointment.\r\n\r\n\\return ParticipantInfoArray"},
{text: "NSAppointmentEntity.GetInvitedPerson", help: "<b>NSPerson GetInvitedPerson()<\/b>\n\nIf the appointment is a booking, the invited persons may be your associates, but you are also able to invite contact persons from other companies to join your meeting. They do not receive an invitation, unless you send them one by email, but you can see in the appointment that persons other than your associates have been invited to a meeting. Each invited person will have an appointment slave record.\r\n\r\n\\return Person"},
{text: "NSAppointmentEntity.GetPerson", help: "<b>NSPerson GetPerson()<\/b>\n\nAn appointment may also be connected to a person; this must be a contact person registered on the current company. This does not mean however that a person is required.\r\n\r\n\\return Person"},
{text: "NSAppointmentEntity.GetPriority", help: "<b>NSPriority GetPriority()<\/b>\n\nIt's possible to give appointments different priorities. All the different priority types are saved in the priority table, and edited from the Admin. Client. An appointment does not require a priority.\r\n\r\n\\return Priority"},
{text: "NSAppointmentEntity.GetProject", help: "<b>NSProject GetProject()<\/b>\n\nAn appointment may also be connected to a project, so you see the appointment both on the company card, and on the project card. This does not mean however that a project is required.\r\n\r\n\\return Project"},
{text: "NSAppointmentEntity.GetRecurrence", help: "<b>NSRecurrenceInfo GetRecurrence()<\/b>\n\nThe appointment recurrence.\r\n\r\n\\return RecurrenceInfo"},
{text: "NSAppointmentEntity.GetSale", help: "<b>NSSale GetSale()<\/b>\n\nAn appointment may also be connected to a sale, so you see the appointment on the company card, on the project card and on the sale card. This does not mean however that a sale is required.\r\n\r\n\\return Sale"},
{text: "NSAppointmentEntity.GetTask", help: "<b>NSTaskListItem GetTask()<\/b>\n\nTask comprises the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\return TaskListItem"},
{text: "NSAppointmentEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of the appointment.\r\n\r\n\\return String"},
{text: "NSAppointmentEntity.GetLocation", help: "<b>String GetLocation()<\/b>\n\nLocation for appointment, defaulted from invited resource of type place and other rules, but you can write anything you want here\r\n\r\n\\return String"},
{text: "NSAppointmentEntity.GetRejectReason", help: "<b>String GetRejectReason()<\/b>\n\nWhy was this booking or assignment rejected, the RejectReason list is a source of suggestions but you can write anything here\r\n\r\n\\return String"},
{text: "NSAppointmentEntity.GetAlarmLeadTime", help: "<b>TimeSpan GetAlarmLeadTime()<\/b>\n\nAlarm lead time.\r\n\r\n\\return TimeSpan"},
{text: "NSAppointmentEntity.GetLagTime", help: "<b>TimeSpan GetLagTime()<\/b>\n\nas leadtime, but after the end - time blocked for travel etc.\r\n\r\n\\return TimeSpan"},
{text: "NSAppointmentEntity.GetLeadTime", help: "<b>TimeSpan GetLeadTime()<\/b>\n\nTime blocked (minutes) BEFORE starttime\r\n\r\n\\return TimeSpan"},
{text: "NSAppointmentEntity.GetVisibleFor", help: "<b>VisibleFor[] GetVisibleFor()<\/b>\n\n\\return VisibleForArray"},
{text: "NSAppointmentEntity.SetActiveDate", help: "<b>Void SetActiveDate(DateTime p_0)<\/b>\n\nThe date to be used for searching & showing\r\n\r\n\\param p_0 ActiveDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointmentEntity.SetActiveLinks", help: "<b>Void SetActiveLinks(Integer p_0)<\/b>\n\nNumber of active links to sale, document, appointment.\r\n\r\n\\param p_0 ActiveLinks: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetAlarmLeadTime", help: "<b>Void SetAlarmLeadTime(TimeSpan p_0)<\/b>\n\nAlarm lead time.\r\n\r\n\\param p_0 AlarmLeadTime: TimeSpan\r\n\\return TimeSpan"},
{text: "NSAppointmentEntity.SetAlldayEvent", help: "<b>Void SetAlldayEvent(Bool p_0)<\/b>\n\nTrue if this is an all day event.\r\n\r\n"},
{text: "NSAppointmentEntity.SetAppointmentId", help: "<b>Void SetAppointmentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AppointmentId: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetAssignedBy", help: "<b>Void SetAssignedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 AssignedBy: Associate\r\n\\return Associate"},
{text: "NSAppointmentEntity.SetAssignmentStatus", help: "<b>Void SetAssignmentStatus(Integer p_0)<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n\\param p_0 AssignmentStatus: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetAssignmentStatus", help: "<b>Void SetAssignmentStatus(NSAssignmentStatus p_0)<\/b>\n\nStatus if this appointment is in the process of being assigned to someone else\r\n\r\n"},
{text: "NSAppointmentEntity.SetAssociate", help: "<b>Void SetAssociate(NSAssociate p_0)<\/b>\n\nThe owner of the appointment - the associate whose diary\/checklist the appointment is in.\r\n\r\n\\param p_0 Associate: Associate\r\n\\return Associate"},
{text: "NSAppointmentEntity.SetBookingType", help: "<b>Void SetBookingType(Integer p_0)<\/b>\n\nThe type of booking the appointment represents\r\n\r\n\\param p_0 BookingType: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetBookingType", help: "<b>Void SetBookingType(NSBookingType p_0)<\/b>\n\nThe type of booking the appointment represents\r\n\r\n"},
{text: "NSAppointmentEntity.SetColorIndex", help: "<b>Void SetColorIndex(Integer p_0)<\/b>\n\nAppointment colour, used only in Japanese versions. Western versions take colour from Task\r\n\r\n\\param p_0 ColorIndex: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetCompleted", help: "<b>Void SetCompleted(Integer p_0)<\/b>\n\nAppointment Completed state. This property is the part of the Status property that is the completed state. Could be three state if the three state user preference is set.\r\n\r\n\\param p_0 Completed: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetContact", help: "<b>Void SetContact(NSContact p_0)<\/b>\n\nThe contact associated with the appointment. It may also be null if no contact is associated with the appointment.\r\n\r\n\\param p_0 Contact: Contact\r\n\\return Contact"},
{text: "NSAppointmentEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nThe associate that first created the appointment. The property is read-only.\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSAppointmentEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered date\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointmentEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of the appointment.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSAppointmentEntity.SetEndDate", help: "<b>Void SetEndDate(DateTime p_0)<\/b>\n\nDate + end time planned\r\n\r\n\\param p_0 EndDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointmentEntity.SetExtraFields", help: "<b>Void SetExtraFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSAppointmentEntity.SetFreeBusy", help: "<b>Void SetFreeBusy(Bool p_0)<\/b>\n\nWhat kind of time is this. False is Busy. True is Free.\r\n\r\n"},
{text: "NSAppointmentEntity.SetHasAlarm", help: "<b>Void SetHasAlarm(Bool p_0)<\/b>\n\nDoes this appointment have an alarm\r\n\r\n\\param p_0 HasAlarm: Bool\r\n\\return Bool"},
{text: "NSAppointmentEntity.SetHasConflict", help: "<b>Void SetHasConflict(Bool p_0)<\/b>\n\n\\param p_0 HasConflict: Bool\r\n\\return Bool"},
{text: "NSAppointmentEntity.SetInvitationStatus", help: "<b>Void SetInvitationStatus(Integer p_0)<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n\\param p_0 InvitationStatus: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetInvitationStatus", help: "<b>Void SetInvitationStatus(NSInvitationStatus p_0)<\/b>\n\nStatus if this appointment represents an invitation\r\n\r\n"},
{text: "NSAppointmentEntity.SetInvitedPerson", help: "<b>Void SetInvitedPerson(NSPerson p_0)<\/b>\n\nIf the appointment is a booking, the invited persons may be your associates, but you are also able to invite contact persons from other companies to join your meeting. They do not receive an invitation, unless you send them one by email, but you can see in the appointment that persons other than your associates have been invited to a meeting. Each invited person will have an appointment slave record.\r\n\r\n\\param p_0 InvitedPerson: Person\r\n\\return Person"},
{text: "NSAppointmentEntity.SetIsAlldayEvent", help: "<b>Void SetIsAlldayEvent(Bool p_0)<\/b>\n\nTrue if all day event\r\n\r\n\\param p_0 IsAlldayEvent: Bool\r\n\\return Bool"},
{text: "NSAppointmentEntity.SetIsFree", help: "<b>Void SetIsFree(Bool p_0)<\/b>\n\nTrue if free, false if busy\r\n\r\n\\param p_0 IsFree: Bool\r\n\\return Bool"},
{text: "NSAppointmentEntity.SetIsMileStone", help: "<b>Void SetIsMileStone(Bool p_0)<\/b>\n\nIs this appointment a milestone?\r\n\r\n\\param p_0 IsMileStone: Bool\r\n\\return Bool"},
{text: "NSAppointmentEntity.SetIsPublished", help: "<b>Void SetIsPublished()<\/b>\n\n\\param p_0 fields: Bool\r\n\\return Void"},
{text: "NSAppointmentEntity.SetIsPublished", help: "<b>Void SetIsPublished(Bool p_0)<\/b>\n\n\\return Bool"},
{text: "NSAppointmentEntity.SetLagTime", help: "<b>Void SetLagTime(TimeSpan p_0)<\/b>\n\nas leadtime, but after the end - time blocked for travel etc.\r\n\r\n\\param p_0 LagTime: TimeSpan\r\n\\return TimeSpan"},
{text: "NSAppointmentEntity.SetLeadTime", help: "<b>Void SetLeadTime(TimeSpan p_0)<\/b>\n\nTime blocked (minutes) BEFORE starttime\r\n\r\n\\param p_0 LeadTime: TimeSpan\r\n\\return TimeSpan"},
{text: "NSAppointmentEntity.SetLinks", help: "<b>Void SetLinks(NSLink[] p_0)<\/b>\n\nList of all elements linked to the document.\r\n\r\n\\param p_0 Links: LinkArray\r\n\\return LinkArray"},
{text: "NSAppointmentEntity.SetLocation", help: "<b>Void SetLocation(String p_0)<\/b>\n\nLocation for appointment, defaulted from invited resource of type place and other rules, but you can write anything you want here\r\n\r\n\\param p_0 Location: String\r\n\\return String"},
{text: "NSAppointmentEntity.SetMotherAssociate", help: "<b>Void SetMotherAssociate(NSAssociate p_0)<\/b>\n\nThe owner of the mother appointment - the associate whose diary\/checklist the mother appointment is in.  The mother appointment is the one identified by the mother_id. If the mother_id is 0 or the same as this appointment_id, then the master associate will be the same as the 'ordinary' associate.\r\n\r\n\\param p_0 MotherAssociate: Associate\r\n\\return Associate"},
{text: "NSAppointmentEntity.SetMotherId", help: "<b>Void SetMotherId(Integer p_0)<\/b>\n\nID of mother appointment; self if booking master, master ID if booking slave, 0 if normal appointment. However, if 0 and assoc_id != reg_id then this is an assigned appointment, indicated vt type = kBooking\r\n\r\n\\param p_0 MotherId: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetParticipants", help: "<b>Void SetParticipants(NSParticipantInfo[] p_0)<\/b>\n\nList of id's of the participants to this appointment.\r\n\r\n\\param p_0 Participants: ParticipantInfoArray\r\n\\return ParticipantInfoArray"},
{text: "NSAppointmentEntity.SetPerson", help: "<b>Void SetPerson(NSPerson p_0)<\/b>\n\nAn appointment may also be connected to a person; this must be a contact person registered on the current company. This does not mean however that a person is required.\r\n\r\n\\param p_0 Person: Person\r\n\\return Person"},
{text: "NSAppointmentEntity.SetPreferredTZLocation", help: "<b>Void SetPreferredTZLocation(Integer p_0)<\/b>\n\nAppoinmtments preferred timezone location.\r\n\r\n\\param p_0 PreferredTZLocation: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetPriority", help: "<b>Void SetPriority(NSPriority p_0)<\/b>\n\nIt's possible to give appointments different priorities. All the different priority types are saved in the priority table, and edited from the Admin. Client. An appointment does not require a priority.\r\n\r\n\\param p_0 Priority: Priority\r\n\\return Priority"},
{text: "NSAppointmentEntity.SetPrivate", help: "<b>Void SetPrivate(Integer p_0)<\/b>\n\nThe confidentiality of appointments is shown as different types of “private” on the appointment. For an updated list of “private” types, see the database manual.\r\n\r\n\\param p_0 Private: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetProject", help: "<b>Void SetProject(NSProject p_0)<\/b>\n\nAn appointment may also be connected to a project, so you see the appointment both on the company card, and on the project card. This does not mean however that a project is required.\r\n\r\n\\param p_0 Project: Project\r\n\\return Project"},
{text: "NSAppointmentEntity.SetPublishEventDate", help: "<b>Void SetPublishEventDate(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSAppointmentEntity.SetPublishFrom", help: "<b>Void SetPublishFrom(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSAppointmentEntity.SetPublishTo", help: "<b>Void SetPublishTo(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSAppointmentEntity.SetRecurrence", help: "<b>Void SetRecurrence(NSRecurrenceInfo p_0)<\/b>\n\nThe appointment recurrence.\r\n\r\n\\param p_0 Recurrence: RecurrenceInfo\r\n\\return RecurrenceInfo"},
{text: "NSAppointmentEntity.SetRejectCounter", help: "<b>Void SetRejectCounter(Integer p_0)<\/b>\n\nHow many invitees have rejected this appointment\r\n\r\n\\param p_0 RejectCounter: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetRejectReason", help: "<b>Void SetRejectReason(String p_0)<\/b>\n\nWhy was this booking or assignment rejected, the RejectReason list is a source of suggestions but you can write anything here\r\n\r\n\\param p_0 RejectReason: String\r\n\\return String"},
{text: "NSAppointmentEntity.SetSale", help: "<b>Void SetSale(NSSale p_0)<\/b>\n\nAn appointment may also be connected to a sale, so you see the appointment on the company card, on the project card and on the sale card. This does not mean however that a sale is required.\r\n\r\n\\param p_0 Sale: Sale\r\n\\return Sale"},
{text: "NSAppointmentEntity.SetStartDate", help: "<b>Void SetStartDate(DateTime p_0)<\/b>\n\ndate + start time planned\r\n\r\n\\param p_0 StartDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointmentEntity.SetSuggestedAppointmentId", help: "<b>Void SetSuggestedAppointmentId(Integer p_0)<\/b>\n\nSuggested guide item that this appointment is an instance of (Note: NOT VALID for document-type appointments, they have their own link)\r\n\r\n\\param p_0 SuggestedAppointmentId: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetTask", help: "<b>Void SetTask(NSTaskListItem p_0)<\/b>\n\nTask comprises the different types of activities, like “Phone call”, “Meeting” and so on.\r\n\r\n\\param p_0 Task: TaskListItem\r\n\\return TaskListItem"},
{text: "NSAppointmentEntity.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nThe different types of appointment, if the appointment is supposed to be shown in the diary or checklist, or if it's a document. See the different types of appointments in the database manual.\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSAppointmentEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nThe person that last updated the appointment.\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSAppointmentEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nUpdated date\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointmentEntity.SetUserDefinedFields", help: "<b>Void SetUserDefinedFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSAppointmentEntity.SetVisibleFor", help: "<b>Void SetVisibleFor(VisibleFor[] p_0)<\/b>\n\n\\param p_0 fields: VisibleForArray\r\n\\return Void"},
{text: "Void.NSAppointmentSyncData", help: "<b>NSAppointmentSyncData<\/b>\n\n"},
{text: "NSAppointmentSyncData.GetHasAlarm", help: "<b>Bool GetHasAlarm()<\/b>\n\nDoes this appointment have an alarm\r\n\r\n\\return Bool"},
{text: "NSAppointmentSyncData.GetIsAllDay", help: "<b>Bool GetIsAllDay()<\/b>\n\n\\return Bool"},
{text: "NSAppointmentSyncData.GetIsAssignment", help: "<b>Bool GetIsAssignment()<\/b>\n\n\\return Bool"},
{text: "NSAppointmentSyncData.GetIsBusy", help: "<b>Bool GetIsBusy()<\/b>\n\n\\return Bool"},
{text: "NSAppointmentSyncData.GetIsCompleted", help: "<b>Bool GetIsCompleted()<\/b>\n\n\\return Bool"},
{text: "NSAppointmentSyncData.GetIsInvitation", help: "<b>Bool GetIsInvitation()<\/b>\n\n\\return Bool"},
{text: "NSAppointmentSyncData.GetIsTentative", help: "<b>Bool GetIsTentative()<\/b>\n\n\\return Bool"},
{text: "NSAppointmentSyncData.GetAlarmTime", help: "<b>DateTime GetAlarmTime()<\/b>\n\nDate and time at which to show alarm\r\n\r\n\\return DateTime"},
{text: "NSAppointmentSyncData.GetEndDate", help: "<b>DateTime GetEndDate()<\/b>\n\nDate + end time planned\r\n\r\n\\return DateTime"},
{text: "NSAppointmentSyncData.GetStartDate", help: "<b>DateTime GetStartDate()<\/b>\n\ndate + start time planned\r\n\r\n\\return DateTime"},
{text: "NSAppointmentSyncData.GetAppointmentId", help: "<b>Integer GetAppointmentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSAppointmentSyncData.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nThe contacts identifier\r\n\r\n\\return Integer"},
{text: "NSAppointmentSyncData.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\return Integer"},
{text: "NSAppointmentSyncData.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nID of project referred to, may be 0\r\n\r\n\\return Integer"},
{text: "NSAppointmentSyncData.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nOwning sale, if any (may be 0)\r\n\r\n\\return Integer"},
{text: "NSAppointmentSyncData.GetParticipants", help: "<b>NSParticipantSyncData[] GetParticipants()<\/b>\n\n\\return ParticipantSyncDataArray"},
{text: "NSAppointmentSyncData.GetAppointmentText", help: "<b>String GetAppointmentText()<\/b>\n\nThe appointment's textbox; holds a descriptive text about the appointment. Filled out by the user.\r\n\r\n\\return String"},
{text: "NSAppointmentSyncData.GetContactDepartment", help: "<b>String GetContactDepartment()<\/b>\n\nThe department of the contact connected to the appointment\r\n\r\n\\return String"},
{text: "NSAppointmentSyncData.GetContactFullName", help: "<b>String GetContactFullName()<\/b>\n\nThe entire name of the contact, including department name\r\n\r\n\\return String"},
{text: "NSAppointmentSyncData.GetContactName", help: "<b>String GetContactName()<\/b>\n\nThe contact associated with the appointment.\r\n\r\n\\return String"},
{text: "NSAppointmentSyncData.GetLocation", help: "<b>String GetLocation()<\/b>\n\nLocation for appointment, defaulted from invited resource of type place and other rules, but you can write anything you want here\r\n\r\n\\return String"},
{text: "NSAppointmentSyncData.GetPersonFormalName", help: "<b>String GetPersonFormalName()<\/b>\n\n\\return String"},
{text: "NSAppointmentSyncData.GetPersonFullName", help: "<b>String GetPersonFullName()<\/b>\n\nThe full name of the person this appointment belongs to.\r\n\r\n\\return String"},
{text: "NSAppointmentSyncData.GetProjectName", help: "<b>String GetProjectName()<\/b>\n\nProject name\r\n\r\n\\return String"},
{text: "NSAppointmentSyncData.GetSaleName", help: "<b>String GetSaleName()<\/b>\n\nSale heading (short description?)\r\n\r\n\\return String"},
{text: "NSAppointmentSyncData.GetTaskName", help: "<b>String GetTaskName()<\/b>\n\n\\return String"},
{text: "NSAppointmentSyncData.SetAlarmTime", help: "<b>Void SetAlarmTime(DateTime p_0)<\/b>\n\nDate and time at which to show alarm\r\n\r\n\\param p_0 AlarmTime: DateTime\r\n\\return DateTime"},
{text: "NSAppointmentSyncData.SetAppointmentId", help: "<b>Void SetAppointmentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AppointmentId: Integer\r\n\\return Integer"},
{text: "NSAppointmentSyncData.SetAppointmentText", help: "<b>Void SetAppointmentText(String p_0)<\/b>\n\nThe appointment's textbox; holds a descriptive text about the appointment. Filled out by the user.\r\n\r\n\\param p_0 AppointmentText: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetContactDepartment", help: "<b>Void SetContactDepartment(String p_0)<\/b>\n\nThe department of the contact connected to the appointment\r\n\r\n\\param p_0 ContactDepartment: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetContactFullName", help: "<b>Void SetContactFullName(String p_0)<\/b>\n\nThe entire name of the contact, including department name\r\n\r\n\\param p_0 ContactFullName: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nThe contacts identifier\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSAppointmentSyncData.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nThe contact associated with the appointment.\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetEndDate", help: "<b>Void SetEndDate(DateTime p_0)<\/b>\n\nDate + end time planned\r\n\r\n\\param p_0 EndDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointmentSyncData.SetHasAlarm", help: "<b>Void SetHasAlarm(Bool p_0)<\/b>\n\nDoes this appointment have an alarm\r\n\r\n\\param p_0 HasAlarm: Bool\r\n\\return Bool"},
{text: "NSAppointmentSyncData.SetIsAllDay", help: "<b>Void SetIsAllDay(Bool p_0)<\/b>\n\n\\param p_0 IsAllDay: Bool\r\n\\return Bool"},
{text: "NSAppointmentSyncData.SetIsAssignment", help: "<b>Void SetIsAssignment(Bool p_0)<\/b>\n\n\\param p_0 IsAssignment: Bool\r\n\\return Bool"},
{text: "NSAppointmentSyncData.SetIsBusy", help: "<b>Void SetIsBusy(Bool p_0)<\/b>\n\n\\param p_0 IsBusy: Bool\r\n\\return Bool"},
{text: "NSAppointmentSyncData.SetIsCompleted", help: "<b>Void SetIsCompleted(Bool p_0)<\/b>\n\n\\param p_0 IsCompleted: Bool\r\n\\return Bool"},
{text: "NSAppointmentSyncData.SetIsInvitation", help: "<b>Void SetIsInvitation(Bool p_0)<\/b>\n\n\\param p_0 IsInvitation: Bool\r\n\\return Bool"},
{text: "NSAppointmentSyncData.SetIsTentative", help: "<b>Void SetIsTentative(Bool p_0)<\/b>\n\n\\param p_0 IsTentative: Bool\r\n\\return Bool"},
{text: "NSAppointmentSyncData.SetLocation", help: "<b>Void SetLocation(String p_0)<\/b>\n\nLocation for appointment, defaulted from invited resource of type place and other rules, but you can write anything you want here\r\n\r\n\\param p_0 Location: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetParticipants", help: "<b>Void SetParticipants(NSParticipantSyncData[] p_0)<\/b>\n\n\\param p_0 Participants: ParticipantSyncDataArray\r\n\\return ParticipantSyncDataArray"},
{text: "NSAppointmentSyncData.SetPersonFormalName", help: "<b>Void SetPersonFormalName(String p_0)<\/b>\n\n\\param p_0 PersonFormalName: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetPersonFullName", help: "<b>Void SetPersonFullName(String p_0)<\/b>\n\nThe full name of the person this appointment belongs to.\r\n\r\n\\param p_0 PersonFullName: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSAppointmentSyncData.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nID of project referred to, may be 0\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSAppointmentSyncData.SetProjectName", help: "<b>Void SetProjectName(String p_0)<\/b>\n\nProject name\r\n\r\n\\param p_0 ProjectName: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nOwning sale, if any (may be 0)\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSAppointmentSyncData.SetSaleName", help: "<b>Void SetSaleName(String p_0)<\/b>\n\nSale heading (short description?)\r\n\r\n\\param p_0 SaleName: String\r\n\\return String"},
{text: "NSAppointmentSyncData.SetStartDate", help: "<b>Void SetStartDate(DateTime p_0)<\/b>\n\ndate + start time planned\r\n\r\n\\param p_0 StartDate: DateTime\r\n\\return DateTime"},
{text: "NSAppointmentSyncData.SetTaskName", help: "<b>Void SetTaskName(String p_0)<\/b>\n\n\\param p_0 TaskName: String\r\n\\return String"},
{text: "Void.NSApproveRejectResponse", help: "<b>NSApproveRejectResponse<\/b>\n\nApproveRejectResponse contains a PluginResponse and an appointmentId if the operation created one."},
{text: "NSApproveRejectResponse.GetCreatedAppointmentId", help: "<b>Integer GetCreatedAppointmentId()<\/b>\n\nId of the created follow up.\r\n\r\n\\return Integer"},
{text: "NSApproveRejectResponse.GetPluginResponse", help: "<b>NSPluginResponse GetPluginResponse()<\/b>\n\nThe response from the operation.\r\n\r\n\\return PluginResponse"},
{text: "NSApproveRejectResponse.SetCreatedAppointmentId", help: "<b>Void SetCreatedAppointmentId(Integer p_0)<\/b>\n\nId of the created follow up.\r\n\r\n\\param p_0 CreatedAppointmentId: Integer\r\n\\return Integer"},
{text: "NSApproveRejectResponse.SetPluginResponse", help: "<b>Void SetPluginResponse(NSPluginResponse p_0)<\/b>\n\nThe response from the operation.\r\n\r\n\\param p_0 PluginResponse: PluginResponse\r\n\\return PluginResponse"},
{text: "Void.NSArchiveAgent", help: "<b>NSArchiveAgent<\/b>\n\n"},
{text: "NSArchiveAgent.GetGroupAssociateIds", help: "<b>Integer[] GetGroupAssociateIds(Integer[] p_0)<\/b>\n\nReturns the  associate ids that belongs to the given groups\r\n\r\n\\param p_0 groupIds: Array of group ids\r\n\\return Array of associate ids\r\n"},
{text: "NSArchiveAgent.GetActivityFilter", help: "<b>NSActivityFilter GetActivityFilter()<\/b>\n\nGet activity filter for the specified list.\r\n\r\n\\return The activity filter for the specified list\r\n"},
{text: "NSArchiveAgent.GetAvailableColumns", help: "<b>NSArchiveColumnInfo[] GetAvailableColumns(String p_0, String p_1)<\/b>\n\nReturn list of all columns supported by an archive provider. See also GetArchiveConfiguration.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 context: Optional context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Array of all columns supported by the archive provider."},
{text: "NSArchiveAgent.GetArchiveConfiguration", help: "<b>NSArchiveConfiguration GetArchiveConfiguration(String p_0, String p_1)<\/b>\n\nGet the configuration for one archive. The configuration is keyed by a combination of archive provider name and gui name. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.\r\n\r\n\\param p_0 guiName: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.\r\n\\param p_1 providerName: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.\r\n\\return Archive configuration consisting of column information, orderby information and entities\r\n"},
{text: "NSArchiveAgent.GetArchiveConfigurationWithContext", help: "<b>NSArchiveConfiguration GetArchiveConfigurationWithContext(String p_0, String p_1, String p_2)<\/b>\n\nGet the configuration for one archive, with context parameter. The configuration is keyed by a combination of archive provider name and gui name. The archive provider name must match an archive provider plugin; the gui name is an arbitrary string used to distinguish multiple occurrences of the same underlying provider in a gui.\r\n\r\n\\param p_0 guiName: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.\r\n\\param p_1 providerName: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.\r\n\\param p_2 context: Context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Archive configuration consisting of column information, orderby information and entities"},
{text: "NSArchiveAgent.GetArchiveList", help: "<b>NSArchiveListItem[] GetArchiveList(String p_0, String p_1, NSArchiveOrderByInfo[] p_2, NSArchiveRestrictionInfo[] p_3, String[] p_4, Integer p_5, Integer p_6)<\/b>\n\nGet a page of data for an archive. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.\r\n\r\n\\param p_0 guiName: The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)\r\n\\param p_1 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_2 sortOrder: Sort order for the archive. Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Which entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\return Array of archive list items, where each item represents one row of data (row level data + the requested columns)\r\n"},
{text: "NSArchiveAgent.GetArchiveList2", help: "<b>NSArchiveListItem[] GetArchiveList2(String p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5, Integer p_6)<\/b>\n\nGet a page of data for an archive using a restriction string. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.\r\n\r\n\\param p_0 guiName: The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)\r\n\\param p_1 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_2 sortOrder: Sort order for the archive. Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions as string. e.g. \"name = 'baz' or category oneOf (1,2,3)\". Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Comma separated list of entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\return Array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetArchiveListByColumns", help: "<b>NSArchiveListItem[] GetArchiveListByColumns(String p_0, String[] p_1, NSArchiveOrderByInfo[] p_2, NSArchiveRestrictionInfo[] p_3, String[] p_4, Integer p_5, Integer p_6)<\/b>\n\nGet a page of results for an archive list, explicitly specifying the restrictions, orderby and chosen columns.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 columns: An array of the names of the columns wanted.\r\n\\param p_2 sortOrder: Sort order for the archive. Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Which entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\return Array of archive list items, where each item represents one row of data (row level data + the requested columns)\r\n"},
{text: "NSArchiveAgent.GetArchiveListByColumns2", help: "<b>NSArchiveListItem[] GetArchiveListByColumns2(String p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5, Integer p_6)<\/b>\n\nGet a page of results for an archive list, explicitly specifying the restrictions as a string, orderby and chosen columns.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 columns: An array of the names of the columns wanted.\r\n\\param p_2 sortOrder: Sort order for the archive as string ('name asc, dept desc'). Can be null, which indicates 'no particular order'\r\n\\param p_3 restrictions: Archive restrictions as string ('category = 1 and business oneOf (1,2,3)'). Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Comma separated list of entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\return Array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetArchiveListByColumnsWithContext", help: "<b>NSArchiveListItem[] GetArchiveListByColumnsWithContext(String p_0, String[] p_1, NSArchiveOrderByInfo[] p_2, NSArchiveRestrictionInfo[] p_3, String[] p_4, Integer p_5, Integer p_6, String p_7)<\/b>\n\nGet a page of results for an archive list with context parameter, explicitly specifying the restrictions, orderby and chosen columns.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 columns: An array of the names of the columns wanted.\r\n\\param p_2 sortOrder: Sort order for the archive. Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Which entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\param p_7 context: Context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetArchiveListByColumnsWithContext2", help: "<b>NSArchiveListItem[] GetArchiveListByColumnsWithContext2(String p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5, Integer p_6, String p_7)<\/b>\n\nGet a page of results for an archive list with context parameter, explicitly specifying the restrictions as a string, orderby and chosen columns.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 columns: Comma separated names of the columns wanted.\r\n\\param p_2 sortOrder: Comma separated list of columns to sort order for the archive. e.g.: \"name asc, dept desc, registeredBy\" Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions as string. e.g. \"name startsWith 'foo' and (dept = 'bar' or dept = 'baz')\" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Comma separated list of entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\param p_7 context: Context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetArchiveListWithContext", help: "<b>NSArchiveListItem[] GetArchiveListWithContext(String p_0, String p_1, NSArchiveOrderByInfo[] p_2, NSArchiveRestrictionInfo[] p_3, String[] p_4, Integer p_5, Integer p_6, String p_7)<\/b>\n\nGet a page of data for an archive, with context parameter. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.\r\n\r\n\\param p_0 guiName: The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)\r\n\\param p_1 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_2 sortOrder: Sort order for the archive. Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Which entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\param p_7 context: Context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetArchiveListWithContext2", help: "<b>NSArchiveListItem[] GetArchiveListWithContext2(String p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5, Integer p_6, String p_7)<\/b>\n\nGet a page of data for an archive using restrictions as strings, with context parameter. The columns returned will be those set as chosen columns, using either the SetChosenColumns service or the corresponding SelectableMDOList.SetSelected.\r\n\r\n\\param p_0 guiName: The GUI name of the archive list, used to retrieve the currently configured set of columns (otherwise manipulated using the ArchiveConfiguration service)\r\n\\param p_1 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_2 sortOrder: Sort order for the archive. e.g. \"name asc, dept desc\" Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions as string. e.g. \"name gt 'B' or dept = 'baz'\" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Comma separated list of entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\param p_7 context: Context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.CreateDefaultArchiveListResult", help: "<b>NSArchiveListResult CreateDefaultArchiveListResult()<\/b>\n\nLoading default values into a new ArchiveListResult.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ArchiveListResult with default values\r\n"},
{text: "NSArchiveAgent.GetArchiveListByColumnsWithHeader", help: "<b>NSArchiveListResult GetArchiveListByColumnsWithHeader(String p_0, String[] p_1, NSArchiveOrderByInfo[] p_2, NSArchiveRestrictionInfo[] p_3, String[] p_4, Integer p_5, Integer p_6, String p_7)<\/b>\n\nGet a page of results for an archive list, explicitly specifying the restrictions, orderby and chosen columns; as well as a name\/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 columns: An array of the names of the columns wanted.\r\n\\param p_2 sortOrder: Sort order for the archive. Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Which entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\param p_7 options: name=value&amp;... formatted set of options. \"rowcount=true\" will cause the rowcount to be calculated and populated.\r\n\\return Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetArchiveListByColumnsWithHeader2", help: "<b>NSArchiveListResult GetArchiveListByColumnsWithHeader2(String p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5, Integer p_6, String p_7)<\/b>\n\nGet a page of results for an archive list, explicitly specifying the restrictions as strings, orderby and chosen columns; as well as a name\/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 columns: Comma separated string of the names of the columns wanted.\r\n\\param p_2 sortOrder: Comma separated string of sort order for the archive. e.g. \"name asc, dept desc\" Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions. e.g. \"category = 2 or business oneOf (2,3,4)\" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Comma separated list of entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\param p_7 options: name=value&amp;... formatted set of options. \"rowcount=true\" will cause the rowcount to be calculated and populated.\r\n\\return Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext", help: "<b>NSArchiveListResult GetArchiveListByColumnsWithHeaderWithContext(String p_0, String[] p_1, NSArchiveOrderByInfo[] p_2, NSArchiveRestrictionInfo[] p_3, String[] p_4, Integer p_5, Integer p_6, String p_7, String p_8)<\/b>\n\nGet a page of results for an archive list, with context parameter, explicitly specifying the restrictions, orderby and chosen columns; as well as a name\/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 columns: An array of the names of the columns wanted.\r\n\\param p_2 sortOrder: Sort order for the archive. Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions. Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Which entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\param p_7 options: name=value&amp;... formatted set of options. \"rowcount=true\" will cause the rowcount to be calculated and populated.\r\n\\param p_8 context: Context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetArchiveListByColumnsWithHeaderWithContext2", help: "<b>NSArchiveListResult GetArchiveListByColumnsWithHeaderWithContext2(String p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5, Integer p_6, String p_7, String p_8)<\/b>\n\nGet a page of results for an archive list, with context parameter, explicitly specifying the restrictions as strings, orderby and chosen columns; as well as a name\/value string formatted set of options. The return value includes a header that has various extra information, in addition to the actual rows.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 columns: Comma separated list of the names of the columns wanted.\r\n\\param p_2 sortOrder: Sort order for the archive. \"name asc, dept desc\" Can be null, which indicates 'no particular order'\r\n\\param p_3 restriction: Archive restrictions as string. \"updated > '2009.1.1' and registeredBy = 2\" Archives will generally throw an exception if no restrictions are set. Pass in an empty array if you really do not want restrictions, but remember that you may end up fetching the first page of millions of rows.\r\n\\param p_4 entities: Comma separated list of entities to include. Can be null, which indicates 'include all entities'\r\n\\param p_5 page: Page number, page 0 is the first page\r\n\\param p_6 pageSize: Page size, which should be kept reasonable (say, no more than 1000 rows at a time)\r\n\\param p_7 options: name=value&amp;... formatted set of options. \"rowcount=true\" will cause the rowcount to be calculated and populated.\r\n\\param p_8 context: Context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Header with optional row count, plus array of archive list items, where each item represents one row of data (row level data + the requested columns)"},
{text: "NSArchiveAgent.GetAvailableEntities", help: "<b>NSMDOListItem[] GetAvailableEntities(String p_0, String p_1)<\/b>\n\nReturn list of all entities supported by an archive provider. See also GetArchiveConfiguration.\r\n\r\n\\param p_0 providerName: The name of the archive provider to use; it will be created via the ArchiveProviderFactory from a plugin\r\n\\param p_1 context: Optional context parameter, url-encoded string context parameter for ArchiveProvider constructor\r\n\\return Array of all entity types supported by the archive provider. MDOListItem.Name = DisplayName, Tooltip = DisplayTooltip, Type = code name, StyleHint = optional\/mandatory, IconHint=DefaultShow"},
{text: "NSArchiveAgent.GetProviderNames", help: "<b>String[] GetProviderNames()<\/b>\n\nReturn list of all archive provider names\r\n\r\n\\return Array of all archive provider names."},
{text: "NSArchiveAgent.SetActivityFilter", help: "<b>Void SetActivityFilter(NSActivityFilter p_0)<\/b>\n\nSet activity filter for the specified list.\r\n\r\n\\param p_0 activityFilter: New activity filter\r\n"},
{text: "NSArchiveAgent.SetChosenColumns", help: "<b>Void SetChosenColumns(String p_0, String p_1, String[] p_2)<\/b>\n\nSet the currently chosen columns for the given gui name\/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveColumns: plus the archive provider name and gui name as its additionalInfo.\r\n\r\n\\param p_0 guiName: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.\r\n\\param p_1 providerName: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.\r\n\\param p_2 chosenColumns: Array of column names, where array order indicates left to right order in the archive.\r\n"},
{text: "NSArchiveAgent.SetChosenEntities", help: "<b>Void SetChosenEntities(String p_0, String p_1, String[] p_2)<\/b>\n\nSet the currently chosen entities for the given gui name\/provider name combination. This service corresponds to the SetSelected method of the SelectableMDOList service, for a list called archiveEntities: plus the archive provider name and gui name as its additionalInfo.\r\n\r\n\\param p_0 guiName: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.\r\n\\param p_1 providerName: Name of archive provider, must match one of the plugins known to the ArchiveProviderFactory.\r\n\\param p_2 entities: Array of entity names\r\n"},
{text: "NSArchiveAgent.SetColumnWidths", help: "<b>Void SetColumnWidths(String p_0, String[] p_1)<\/b>\n\nSet the column widths for the given set of columns and GUI name.\r\n\r\n\\param p_0 guiName: String that identifies the archive in the GUI, must be the same when fetching and storing configurations, but does not otherwise have to match anything.\r\n\\param p_1 columnWidths: Array of column widths. A column width is specified either as a fixed number of character (10c) or as a percentage (10%). Percentages will be recalculated so that they add up to exactly 100 when the configuration is fetched again.\r\n"},
{text: "Void.NSArchiveColumnData", help: "<b>NSArchiveColumnData<\/b>\n\nData carrier class for an item (cell) in an archive. This class contains properties and members for three distinct values: The (visible) display value; the tooltip hint, and the link hint."},
{text: "NSArchiveColumnData.GetDisplayValue", help: "<b>String GetDisplayValue()<\/b>\n\nThe visible display value for an archive cell. It is always a string, and other data types are converted to string according to the invariant culture. Further conversion to the local culture is the responsibility of the client.\r\n\r\n\\return String"},
{text: "NSArchiveColumnData.GetLinkHint", help: "<b>String GetLinkHint()<\/b>\n\nThe link hint consists of information to construct an actual link; additional information (such as a view context) must be provided by the client, who is also responsible for building the link. The content of the link will generally be one or more ids, such as contact_id=123.\r\n\r\n\\return String"},
{text: "NSArchiveColumnData.GetTooltipHint", help: "<b>String GetTooltipHint()<\/b>\n\nThe tooltip hint is either a text to be shown (after resource tag substitution), or a tooltip key to be given to the tooltip provider system in order to asynchronoously retrieve the actual tooltip.\r\n\r\n\\return String"},
{text: "NSArchiveColumnData.SetDisplayValue", help: "<b>Void SetDisplayValue(String p_0)<\/b>\n\nThe visible display value for an archive cell. It is always a string, and other data types are converted to string according to the invariant culture. Further conversion to the local culture is the responsibility of the client.\r\n\r\n\\param p_0 DisplayValue: String\r\n\\return String"},
{text: "NSArchiveColumnData.SetLinkHint", help: "<b>Void SetLinkHint(String p_0)<\/b>\n\nThe link hint consists of information to construct an actual link; additional information (such as a view context) must be provided by the client, who is also responsible for building the link. The content of the link will generally be one or more ids, such as contact_id=123.\r\n\r\n\\param p_0 LinkHint: String\r\n\\return String"},
{text: "NSArchiveColumnData.SetTooltipHint", help: "<b>Void SetTooltipHint(String p_0)<\/b>\n\nThe tooltip hint is either a text to be shown (after resource tag substitution), or a tooltip key to be given to the tooltip provider system in order to asynchronoously retrieve the actual tooltip.\r\n\r\n\\param p_0 TooltipHint: String\r\n\\return String"},
{text: "Void.NSArchiveColumnInfo", help: "<b>NSArchiveColumnInfo<\/b>\n\nThis class carries information about the definition and properties of an archive display column. It is used by the archive MDO providers to construct column lists for the configuration dialogs, and by the archive control to know what type (and other properties) each column has. The class is serializable and used on both the application and Web server sides."},
{text: "NSArchiveColumnInfo.GetCanOrderBy", help: "<b>Bool GetCanOrderBy()<\/b>\n\nCan this column be used for sorting?\r\n\r\n\\return Bool"},
{text: "NSArchiveColumnInfo.GetCanRestrictBy", help: "<b>Bool GetCanRestrictBy()<\/b>\n\nCan this column be used as a restriction\r\n\r\n\\return Bool"},
{text: "NSArchiveColumnInfo.GetIsVisible", help: "<b>Bool GetIsVisible()<\/b>\n\nIs this column visible to the user in configuration dialogs etc\r\n\r\n\\return Bool"},
{text: "NSArchiveColumnInfo.GetCanOrderBy", help: "<b>Boolean GetCanOrderBy()<\/b>\n\n"},
{text: "NSArchiveColumnInfo.GetCanRestrictBy", help: "<b>Boolean GetCanRestrictBy()<\/b>\n\n"},
{text: "NSArchiveColumnInfo.GetIsVisible", help: "<b>Boolean GetIsVisible()<\/b>\n\n"},
{text: "NSArchiveColumnInfo.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nThe column name to show, can be a resource identifier string.\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.GetDisplayTooltip", help: "<b>String GetDisplayTooltip()<\/b>\n\nThe column tooltip, used in the column list and in the column headings\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.GetDisplayType", help: "<b>String GetDisplayType()<\/b>\n\nType of column, so that the archive knows how to display it (actual display values are always strings, invariant-culture formatted). This name can contain resource tags.\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.GetHeadingIconHint", help: "<b>String GetHeadingIconHint()<\/b>\n\nIcon hint for the archive heading only. If this is a nonempty string, the archive header should use this icon and ignore the DisplayName. Otherwise, the DisplayName should be used as the heading.\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.GetIconHint", help: "<b>String GetIconHint()<\/b>\n\nIcon hint corresponding to the display name; this icon hint is used in the configuration dialog and other places where we 'talk about' the columns of the archive. The actual heading of the archive may also contain icons in lieu of textual names, the icon hint for that is specified in HeadingIconHint and is a different one.\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.GetName", help: "<b>String GetName()<\/b>\n\nUnique identity of this column (in this particular context); the name to be used when requesting the column from a provider, setting restrictions or order by criteria\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.GetRestrictionListName", help: "<b>String GetRestrictionListName()<\/b>\n\nIf the restriction data type is 'list', this property contains the name of the SoList so that choices can be shown\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.GetRestrictionType", help: "<b>String GetRestrictionType()<\/b>\n\nThe data type of the restriction; use this to retrieve the legal operators for the restriction.\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.GetSourceCode", help: "<b>String GetSourceCode()<\/b>\n\n"},
{text: "NSArchiveColumnInfo.GetWidth", help: "<b>String GetWidth()<\/b>\n\nThe width specification, if the column info has been extended with GUI-based information. It is either \"n%\" or \"nc\", where n is an integer. Percent-formatted fields grow and shrink; number-of-characters formatted fields have constant width when the whole archive width changes.\r\n\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetCanOrderBy", help: "<b>Void SetCanOrderBy(Bool p_0)<\/b>\n\nCan this column be used for sorting?\r\n\r\n\\param p_0 CanOrderBy: Bool\r\n\\return Bool"},
{text: "NSArchiveColumnInfo.SetCanOrderBy", help: "<b>Void SetCanOrderBy(Boolean p_0)<\/b>\n\n"},
{text: "NSArchiveColumnInfo.SetCanRestrictBy", help: "<b>Void SetCanRestrictBy(Bool p_0)<\/b>\n\nCan this column be used as a restriction\r\n\r\n\\param p_0 CanRestrictBy: Bool\r\n\\return Bool"},
{text: "NSArchiveColumnInfo.SetCanRestrictBy", help: "<b>Void SetCanRestrictBy(Boolean p_0)<\/b>\n\n"},
{text: "NSArchiveColumnInfo.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nThe column name to show, can be a resource identifier string.\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetDisplayTooltip", help: "<b>Void SetDisplayTooltip(String p_0)<\/b>\n\nThe column tooltip, used in the column list and in the column headings\r\n\r\n\\param p_0 DisplayTooltip: String\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetDisplayType", help: "<b>Void SetDisplayType(String p_0)<\/b>\n\nType of column, so that the archive knows how to display it (actual display values are always strings, invariant-culture formatted). This name can contain resource tags.\r\n\r\n\\param p_0 DisplayType: String\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetHeadingIconHint", help: "<b>Void SetHeadingIconHint(String p_0)<\/b>\n\nIcon hint for the archive heading only. If this is a nonempty string, the archive header should use this icon and ignore the DisplayName. Otherwise, the DisplayName should be used as the heading.\r\n\r\n\\param p_0 HeadingIconHint: String\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetIconHint", help: "<b>Void SetIconHint(String p_0)<\/b>\n\nIcon hint corresponding to the display name; this icon hint is used in the configuration dialog and other places where we 'talk about' the columns of the archive. The actual heading of the archive may also contain icons in lieu of textual names, the icon hint for that is specified in HeadingIconHint and is a different one.\r\n\r\n\\param p_0 IconHint: String\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetIsVisible", help: "<b>Void SetIsVisible(Bool p_0)<\/b>\n\nIs this column visible to the user in configuration dialogs etc\r\n\r\n\\param p_0 IsVisible: Bool\r\n\\return Bool"},
{text: "NSArchiveColumnInfo.SetIsVisible", help: "<b>Void SetIsVisible(Boolean p_0)<\/b>\n\n"},
{text: "NSArchiveColumnInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nUnique identity of this column (in this particular context); the name to be used when requesting the column from a provider, setting restrictions or order by criteria\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetRestrictionListName", help: "<b>Void SetRestrictionListName(String p_0)<\/b>\n\nIf the restriction data type is 'list', this property contains the name of the SoList so that choices can be shown\r\n\r\n\\param p_0 RestrictionListName: String\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetRestrictionType", help: "<b>Void SetRestrictionType(String p_0)<\/b>\n\nThe data type of the restriction; use this to retrieve the legal operators for the restriction.\r\n\r\n\\param p_0 RestrictionType: String\r\n\\return String"},
{text: "NSArchiveColumnInfo.SetSourceCode", help: "<b>Void SetSourceCode(String p_0)<\/b>\n\n"},
{text: "NSArchiveColumnInfo.SetWidth", help: "<b>Void SetWidth(String p_0)<\/b>\n\nThe width specification, if the column info has been extended with GUI-based information. It is either \"n%\" or \"nc\", where n is an integer. Percent-formatted fields grow and shrink; number-of-characters formatted fields have constant width when the whole archive width changes.\r\n\r\n\\param p_0 Width: String\r\n\\return String"},
{text: "Void.NSArchiveConfiguration", help: "<b>NSArchiveConfiguration<\/b>\n\nThis service is used to store and fetch the configuration of an archive. The configuration consists of entities and columns; entities correspond to archive provider entities and the checkboxes you see in the bottom of standard archives. Column configuration includes both what columns should be visible, what order they are in (left to right), and whether the archive rows should be sorted by one or more columns.<para\/>Note that desired columns can be set through the selectable mdo list called archiveColumns:&lt;perovider name&gt;, and entities can be set through the selectable mdo list archiveEntities:&lt;provider name&gt;. You can also use the SetChosenEntities and SetChosenColumns method of this service. The selectable mdo list implementation is suitable for data binding using mdo list controls."},
{text: "NSArchiveConfiguration.GetArchiveColumnInfo", help: "<b>NSArchiveColumnInfo[] GetArchiveColumnInfo()<\/b>\n\n\\return ArchiveColumnInfoArray"},
{text: "NSArchiveConfiguration.GetArchiveOrderByInfo", help: "<b>NSArchiveOrderByInfo[] GetArchiveOrderByInfo()<\/b>\n\n\\return ArchiveOrderByInfoArray"},
{text: "NSArchiveConfiguration.GetArchiveEntityInfo", help: "<b>NSSelectableMDOListItem[] GetArchiveEntityInfo()<\/b>\n\n\\return SelectableMDOListItemArray"},
{text: "NSArchiveConfiguration.SetArchiveColumnInfo", help: "<b>Void SetArchiveColumnInfo(NSArchiveColumnInfo[] p_0)<\/b>\n\n\\param p_0 ArchiveColumnInfo: ArchiveColumnInfoArray\r\n\\return ArchiveColumnInfoArray"},
{text: "NSArchiveConfiguration.SetArchiveEntityInfo", help: "<b>Void SetArchiveEntityInfo(NSSelectableMDOListItem[] p_0)<\/b>\n\n\\param p_0 ArchiveEntityInfo: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSArchiveConfiguration.SetArchiveOrderByInfo", help: "<b>Void SetArchiveOrderByInfo(NSArchiveOrderByInfo[] p_0)<\/b>\n\n\\param p_0 ArchiveOrderByInfo: ArchiveOrderByInfoArray\r\n\\return ArchiveOrderByInfoArray"},
{text: "Void.NSArchiveListItem", help: "<b>NSArchiveListItem<\/b>\n\n"},
{text: "NSArchiveListItem.GetPrimaryKey", help: "<b>Integer GetPrimaryKey()<\/b>\n\nThe  primary key for the row\r\n\r\n\\return Integer"},
{text: "NSArchiveListItem.GetColumnData", help: "<b>Map GetColumnData()<\/b>\n\n"},
{text: "NSArchiveListItem.GetColumnData", help: "<b>NSColumnDataDictionary GetColumnData()<\/b>\n\nDictionary of column name - column data items. Each column data item contains a display value, a tooltip hint, a link hint, and an orderby value. <para\/>The display value is encoded by the CultureDataFormatter and can be decoded \/ localized by that class; all other values are optional. <para\/>Tooltip hints can be passed to the TooltipProvider (Tooltip service) to be translated into an actual tootip.\r\n\r\n\\return ColumnDataDictionary"},
{text: "NSArchiveListItem.GetEntityName", help: "<b>String GetEntityName()<\/b>\n\nThe entity name of the ArchiveListItem. An ArchiveList may contain rows from different entities.\r\n\r\n\\return String"},
{text: "NSArchiveListItem.GetLinkHint", help: "<b>String GetLinkHint()<\/b>\n\nLink hint for the row, indicating things like navigation links that can be presented as clickable hyperlinks\r\n\r\n\\return String"},
{text: "NSArchiveListItem.GetStyleHint", help: "<b>String GetStyleHint()<\/b>\n\nStyle hint for the row, for instance 'retired' for associates or 'private' for appointments. Presentation layers can interpret the style hints as they see fit.\r\n\r\n\\return String"},
{text: "NSArchiveListItem.SetColumnData", help: "<b>Void SetColumnData(Map p_0)<\/b>\n\n"},
{text: "NSArchiveListItem.SetColumnData", help: "<b>Void SetColumnData(NSColumnDataDictionary p_0)<\/b>\n\nDictionary of column name - column data items. Each column data item contains a display value, a tooltip hint, a link hint, and an orderby value. <para\/>The display value is encoded by the CultureDataFormatter and can be decoded \/ localized by that class; all other values are optional. <para\/>Tooltip hints can be passed to the TooltipProvider (Tooltip service) to be translated into an actual tootip.\r\n\r\n\\param p_0 ColumnData: ColumnDataDictionary\r\n\\return ColumnDataDictionary"},
{text: "NSArchiveListItem.SetEntityName", help: "<b>Void SetEntityName(String p_0)<\/b>\n\nThe entity name of the ArchiveListItem. An ArchiveList may contain rows from different entities.\r\n\r\n\\param p_0 EntityName: String\r\n\\return String"},
{text: "NSArchiveListItem.SetLinkHint", help: "<b>Void SetLinkHint(String p_0)<\/b>\n\nLink hint for the row, indicating things like navigation links that can be presented as clickable hyperlinks\r\n\r\n\\param p_0 LinkHint: String\r\n\\return String"},
{text: "NSArchiveListItem.SetPrimaryKey", help: "<b>Void SetPrimaryKey(Integer p_0)<\/b>\n\nThe  primary key for the row\r\n\r\n\\param p_0 PrimaryKey: Integer\r\n\\return Integer"},
{text: "NSArchiveListItem.SetStyleHint", help: "<b>Void SetStyleHint(String p_0)<\/b>\n\nStyle hint for the row, for instance 'retired' for associates or 'private' for appointments. Presentation layers can interpret the style hints as they see fit.\r\n\r\n\\param p_0 StyleHint: String\r\n\\return String"},
{text: "Void.NSArchiveListResult", help: "<b>NSArchiveListResult<\/b>\n\nHeader\/Detail variant of archive result, with a Row Count plus the actual rows. Future extensions may include other header data on the same level as the RowCount"},
{text: "NSArchiveListResult.GetRowCount", help: "<b>Integer GetRowCount()<\/b>\n\nCount of rows, independent of paging. If you order up page 1 with page size 50, the row count may still be 279, that being the number of rows that would have been returned in a  paging-off situation\r\n\r\n\\return Integer"},
{text: "NSArchiveListResult.GetRows", help: "<b>NSArchiveListItem[] GetRows()<\/b>\n\nThe actual rows, according to the paging info, of the result. See RowCount for a paging-independent count estimate\r\n\r\n\\return ArchiveListItemArray"},
{text: "NSArchiveListResult.SetRowCount", help: "<b>Void SetRowCount(Integer p_0)<\/b>\n\nCount of rows, independent of paging. If you order up page 1 with page size 50, the row count may still be 279, that being the number of rows that would have been returned in a  paging-off situation\r\n\r\n\\param p_0 RowCount: Integer\r\n\\return Integer"},
{text: "NSArchiveListResult.SetRows", help: "<b>Void SetRows(NSArchiveListItem[] p_0)<\/b>\n\nThe actual rows, according to the paging info, of the result. See RowCount for a paging-independent count estimate\r\n\r\n\\param p_0 Rows: ArchiveListItemArray\r\n\\return ArchiveListItemArray"},
{text: "Void.NSArchiveOrderByInfo", help: "<b>NSArchiveOrderByInfo<\/b>\n\nThis class carries information about an ordering criterion for an archive."},
{text: "NSArchiveOrderByInfo.GetDirection", help: "<b>Integer GetDirection()<\/b>\n\nDirection to order.\r\n\r\n\\return Integer"},
{text: "NSArchiveOrderByInfo.GetName", help: "<b>String GetName()<\/b>\n\nProgrammatic name of the column to order by, semantically the same as the ArchiveColumnInfo.Name.\r\n\r\n\\return String"},
{text: "NSArchiveOrderByInfo.SetDirection", help: "<b>Void SetDirection(Integer p_0)<\/b>\n\nDirection to order.\r\n\r\n\\param p_0 Direction: Integer\r\n\\return Integer"},
{text: "NSArchiveOrderByInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nProgrammatic name of the column to order by, semantically the same as the ArchiveColumnInfo.Name.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "Void.NSArchiveRestrictionInfo", help: "<b>NSArchiveRestrictionInfo<\/b>\n\nThis class carries information about a restriction on the query of an archive provider"},
{text: "NSArchiveRestrictionInfo.GetIsActive", help: "<b>Bool GetIsActive()<\/b>\n\nIs this restriction active?  Inactive restrictions will not influence the generated query\r\n\r\n\\return Bool"},
{text: "NSArchiveRestrictionInfo.GetIsActive", help: "<b>Boolean GetIsActive()<\/b>\n\n"},
{text: "NSArchiveRestrictionInfo.GetInterOperator", help: "<b>Integer GetInterOperator()<\/b>\n\nGet or set the inter-restriction operator that describes how this restriction is related to the next one in an array. Default for new ArchiveRestrictionInfo objects is And\r\n\r\n\\return Integer"},
{text: "NSArchiveRestrictionInfo.GetInterParenthesis", help: "<b>Integer GetInterParenthesis()<\/b>\n\nGet or set the parenthesis (if any) associated with this restriction. Positive values indicate a number of opening parentheses (deepening nesting level), while negative numbers indicate closing parentheses. Zero means no change in nesting level (no parentheses).\r\n\r\n\\return Integer"},
{text: "NSArchiveRestrictionInfo.GetParenthesis", help: "<b>Integer GetParenthesis()<\/b>\n\n"},
{text: "NSArchiveRestrictionInfo.GetUniqueHash", help: "<b>Integer GetUniqueHash()<\/b>\n\n\\return Integer"},
{text: "NSArchiveRestrictionInfo.GetColumnInfo", help: "<b>NSArchiveColumnInfo GetColumnInfo()<\/b>\n\nOptional complete ArchiveColumnInfo for this restriction; in that case, ColumnInfo.Name == this.Name will always be true\r\n\r\n\\return ArchiveColumnInfo"},
{text: "NSArchiveRestrictionInfo.GetSubRestrictions", help: "<b>NSArchiveRestrictionInfo[] GetSubRestrictions()<\/b>\n\nOptional collection of sub criteria, usually null but set for Saint counter fields\r\n\r\n\\return ArchiveRestrictionInfoArray"},
{text: "NSArchiveRestrictionInfo.GetInterOperator", help: "<b>NSInterRestrictionOperator GetInterOperator()<\/b>\n\n"},
{text: "NSArchiveRestrictionInfo.GetName", help: "<b>String GetName()<\/b>\n\nThe programmatic column name, including any required prefixes\r\n\r\n\\return String"},
{text: "NSArchiveRestrictionInfo.GetOperator", help: "<b>String GetOperator()<\/b>\n\nThe operator, such as =, etc\r\n\r\n\\return String"},
{text: "NSArchiveRestrictionInfo.GetDisplayValues", help: "<b>String[] GetDisplayValues()<\/b>\n\nDisplay representation of value(s) - list ID's are decoded to display texts, other values are represented in a format suitable for decoding and display through the CultureDataFormatter.\r\n\r\n\\return StringArray"},
{text: "NSArchiveRestrictionInfo.GetValues", help: "<b>String[] GetValues()<\/b>\n\nValue(s) to test against\r\n\r\n\\return StringArray"},
{text: "NSArchiveRestrictionInfo.SetColumnInfo", help: "<b>Void SetColumnInfo(NSArchiveColumnInfo p_0)<\/b>\n\nOptional complete ArchiveColumnInfo for this restriction; in that case, ColumnInfo.Name == this.Name will always be true\r\n\r\n\\param p_0 ColumnInfo: ArchiveColumnInfo\r\n\\return ArchiveColumnInfo"},
{text: "NSArchiveRestrictionInfo.SetDisplayValues", help: "<b>Void SetDisplayValues(String[] p_0)<\/b>\n\nDisplay representation of value(s) - list ID's are decoded to display texts, other values are represented in a format suitable for decoding and display through the CultureDataFormatter.\r\n\r\n\\param p_0 DisplayValues: StringArray\r\n\\return StringArray"},
{text: "NSArchiveRestrictionInfo.SetInterOperator", help: "<b>Void SetInterOperator(Integer p_0)<\/b>\n\nGet or set the inter-restriction operator that describes how this restriction is related to the next one in an array. Default for new ArchiveRestrictionInfo objects is And\r\n\r\n\\param p_0 InterOperator: Integer\r\n\\return Integer"},
{text: "NSArchiveRestrictionInfo.SetInterOperator", help: "<b>Void SetInterOperator(NSInterRestrictionOperator p_0)<\/b>\n\n"},
{text: "NSArchiveRestrictionInfo.SetInterParenthesis", help: "<b>Void SetInterParenthesis(Integer p_0)<\/b>\n\nGet or set the parenthesis (if any) associated with this restriction. Positive values indicate a number of opening parentheses (deepening nesting level), while negative numbers indicate closing parentheses. Zero means no change in nesting level (no parentheses).\r\n\r\n\\param p_0 InterParenthesis: Integer\r\n\\return Integer"},
{text: "NSArchiveRestrictionInfo.SetIsActive", help: "<b>Void SetIsActive(Bool p_0)<\/b>\n\nIs this restriction active?  Inactive restrictions will not influence the generated query\r\n\r\n\\param p_0 IsActive: Bool\r\n\\return Bool"},
{text: "NSArchiveRestrictionInfo.SetIsActive", help: "<b>Void SetIsActive(Boolean p_0)<\/b>\n\n"},
{text: "NSArchiveRestrictionInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe programmatic column name, including any required prefixes\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSArchiveRestrictionInfo.SetOperator", help: "<b>Void SetOperator(String p_0)<\/b>\n\nThe operator, such as =, etc\r\n\r\n\\param p_0 Operator: String\r\n\\return String"},
{text: "NSArchiveRestrictionInfo.SetParenthesis", help: "<b>Void SetParenthesis(Integer p_0)<\/b>\n\n"},
{text: "NSArchiveRestrictionInfo.SetSubRestrictions", help: "<b>Void SetSubRestrictions(NSArchiveRestrictionInfo[] p_0)<\/b>\n\nOptional collection of sub criteria, usually null but set for Saint counter fields\r\n\r\n\\param p_0 SubRestrictions: ArchiveRestrictionInfoArray\r\n\\return ArchiveRestrictionInfoArray"},
{text: "NSArchiveRestrictionInfo.SetUniqueHash", help: "<b>Void SetUniqueHash(Integer p_0)<\/b>\n\n\\param p_0 UniqueHash: Integer\r\n\\return Integer"},
{text: "NSArchiveRestrictionInfo.SetValues", help: "<b>Void SetValues(String[] p_0)<\/b>\n\nValue(s) to test against\r\n\r\n\\param p_0 Values: StringArray\r\n\\return StringArray"},
{text: "Void.NSArea", help: "<b>NSArea<\/b>\n\n"},
{text: "NSArea.GetFreetextEnabeled", help: "<b>Bool GetFreetextEnabeled()<\/b>\n\n\\return Bool"},
{text: "NSArea.GetAreaId", help: "<b>Integer GetAreaId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSArea.GetMaxDataAge", help: "<b>Integer GetMaxDataAge()<\/b>\n\nMax age of data when generating db's based on this area\r\n\r\n\\return Integer"},
{text: "NSArea.GetNumberOfLogins", help: "<b>Integer GetNumberOfLogins()<\/b>\n\n\\return Integer"},
{text: "NSArea.GetNumberOfUsers", help: "<b>Integer GetNumberOfUsers()<\/b>\n\n\\return Integer"},
{text: "NSArea.GetName", help: "<b>String GetName()<\/b>\n\nArea name\r\n\r\n\\return String"},
{text: "NSArea.SetAreaId", help: "<b>Void SetAreaId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AreaId: Integer\r\n\\return Integer"},
{text: "NSArea.SetFreetextEnabeled", help: "<b>Void SetFreetextEnabeled(Bool p_0)<\/b>\n\n\\param p_0 FreetextEnabeled: Bool\r\n\\return Bool"},
{text: "NSArea.SetMaxDataAge", help: "<b>Void SetMaxDataAge(Integer p_0)<\/b>\n\nMax age of data when generating db's based on this area\r\n\r\n\\param p_0 MaxDataAge: Integer\r\n\\return Integer"},
{text: "NSArea.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nArea name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSArea.SetNumberOfLogins", help: "<b>Void SetNumberOfLogins(Integer p_0)<\/b>\n\n\\param p_0 NumberOfLogins: Integer\r\n\\return Integer"},
{text: "NSArea.SetNumberOfUsers", help: "<b>Void SetNumberOfUsers(Integer p_0)<\/b>\n\n\\param p_0 NumberOfUsers: Integer\r\n\\return Integer"},
{text: "Void.NSAssociate", help: "<b>NSAssociate<\/b>\n\n"},
{text: "NSAssociate.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIf true, the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\return Bool"},
{text: "NSAssociate.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSAssociate.GetEjUserId", help: "<b>Integer GetEjUserId()<\/b>\n\nID of the ej user record corresponding to this associate; 0 for associates that are not ej users\r\n\r\n\\return Integer"},
{text: "NSAssociate.GetGroupIdx", help: "<b>Integer GetGroupIdx()<\/b>\n\nPrimary group membership, see UserGroupLink for secondary memberships\r\n\r\n\\return Integer"},
{text: "NSAssociate.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nOwning person record\r\n\r\n\\return Integer"},
{text: "NSAssociate.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSAssociate.GetType", help: "<b>Integer GetType()<\/b>\n\n\\return Integer"},
{text: "NSAssociate.GetFormalName", help: "<b>String GetFormalName()<\/b>\n\nThe associate's culture formatted formalname (firstname, middleName and lastname, title, mrmrs)\r\n\r\n\\return String"},
{text: "NSAssociate.GetFullName", help: "<b>String GetFullName()<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\return String"},
{text: "NSAssociate.GetName", help: "<b>String GetName()<\/b>\n\nInitials, also login name, possibly database user name\r\n\r\n\\return String"},
{text: "NSAssociate.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSAssociate.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSAssociate.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIf true, the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSAssociate.SetEjUserId", help: "<b>Void SetEjUserId(Integer p_0)<\/b>\n\nID of the ej user record corresponding to this associate; 0 for associates that are not ej users\r\n\r\n\\param p_0 EjUserId: Integer\r\n\\return Integer"},
{text: "NSAssociate.SetFormalName", help: "<b>Void SetFormalName(String p_0)<\/b>\n\nThe associate's culture formatted formalname (firstname, middleName and lastname, title, mrmrs)\r\n\r\n\\param p_0 FormalName: String\r\n\\return String"},
{text: "NSAssociate.SetFullName", help: "<b>Void SetFullName(String p_0)<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\param p_0 FullName: String\r\n\\return String"},
{text: "NSAssociate.SetGroupIdx", help: "<b>Void SetGroupIdx(Integer p_0)<\/b>\n\nPrimary group membership, see UserGroupLink for secondary memberships\r\n\r\n\\param p_0 GroupIdx: Integer\r\n\\return Integer"},
{text: "NSAssociate.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nInitials, also login name, possibly database user name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSAssociate.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nOwning person record\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSAssociate.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSAssociate.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSAssociate.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "Void.NSAssociateAgent", help: "<b>NSAssociateAgent<\/b>\n\n"},
{text: "NSAssociateAgent.GetAssociate", help: "<b>NSAssociate GetAssociate(Integer p_0)<\/b>\n\nGets a Associate object.\r\n\r\n\\param p_0 associateId: The identifier of the Associate object\r\n\\return Associate\r\n"},
{text: "NSAssociateAgent.GetAssociateByPersonId", help: "<b>NSAssociate GetAssociateByPersonId(Integer p_0)<\/b>\n\nReturns the associate that belongs to this person if the person is an associate.\r\n\r\n\\param p_0 personId: The person id\r\n\\return Associate if person is associate\r\n"},
{text: "NSAssociateAgent.GetAssociateList", help: "<b>NSAssociate[] GetAssociateList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSAssociateAgent.GetAssociatesByGroup", help: "<b>NSAssociate[] GetAssociatesByGroup(Integer p_0, Integer p_1)<\/b>\n\nMethod that returns a array of associate , based on DiaryGroupType and groupId. The differernt types are, Userdefined, Usergroup and ResourceHeadings\r\n\r\n\\param p_0 groupId: Id of the group\r\n\\param p_1 type: The type of group. See DiaryGroupType\r\n\\return Array of associate\r\n"},
{text: "NSAssociateAgent.GetAssociateList", help: "<b>NSAssociateList[] GetAssociateList(Integer[] p_0)<\/b>\n\nGets an array of Associate objects.\r\n\r\n\\param p_0 associateIds: The identifiers of the Associate object\r\n\\return Array of Associate objects\r\n"},
{text: "NSAssociateAgent.GetNote", help: "<b>String[] GetNote(Integer p_0)<\/b>\n\nReturns an array of strings(notepad pages).\r\n\r\n\\param p_0 associateId: The associate id\r\n\\return Returns an array of strings(notepad pages).\r\n"},
{text: "NSAssociateAgent.LogOffWindowsUsers", help: "<b>Void LogOffWindowsUsers(Integer[] p_0)<\/b>\n\nMethod that logs off associates that are logged on to the win client\r\n\r\n\\param p_0 associateIds: The ids of the associates that shall be logged off\r\n\\return A void return"},
{text: "NSAssociateAgent.SaveNote", help: "<b>Void SaveNote(Integer p_0, String[] p_1)<\/b>\n\nSaves an array of strings(notepad pages).\r\n\r\n\\param p_0 associateId: The associate id\r\n\\param p_1 note: The array of strings(notepad pages).\r\n"},
{text: "Void.NSAudienceAgent", help: "<b>NSAudienceAgent<\/b>\n\n"},
{text: "NSAudienceAgent.GetConfigParameter", help: "<b>NSAudienceConfigParameter GetConfigParameter(String p_0, String p_1)<\/b>\n\nGets an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\param p_1 parameterName: The name of the Audience configuration parameter\r\n\\return The Audience configuration parameter.\r\n"},
{text: "NSAudienceAgent.GetConfigParameterOnPerson", help: "<b>NSAudienceConfigParameter GetConfigParameterOnPerson(String p_0, Integer p_1)<\/b>\n\nGets an Audience configuration parameter with the specified configuration parameter name on the person specified\r\n\r\n\\param p_0 parameterName: The name of the Audience configuration parameter\r\n\\param p_1 personId: Id of the person the parameter belongs to\r\n\\return The Audience configuration parameter.\r\n"},
{text: "NSAudienceAgent.GetMyConfigParameter", help: "<b>NSAudienceConfigParameter GetMyConfigParameter(String p_0)<\/b>\n\nGets an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.\r\n\r\n\\param p_0 parameterName: The name of the Audience configuration parameter\r\n\\return The Audience configuration parameter.\r\n"},
{text: "NSAudienceAgent.SaveConfigParameter", help: "<b>NSAudienceConfigParameter SaveConfigParameter(String p_0, NSAudienceConfigParameter p_1)<\/b>\n\nSaves an Audience configuration parameter belonging to a Audience layout\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\param p_1 configParameter: The Audience configuration parameter to save.\r\n\\return The new or updated configuration parameter\r\n"},
{text: "NSAudienceAgent.GetConfigParametersByLayoutName", help: "<b>NSAudienceConfigParameter[] GetConfigParametersByLayoutName(String p_0)<\/b>\n\nGets the Audience configuration parameters belonging to a given Audience layout.\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\return Array of Audience configuration parameters.\r\n"},
{text: "NSAudienceAgent.GetConfigParametersOnPerson", help: "<b>NSAudienceConfigParameter[] GetConfigParametersOnPerson(Integer p_0)<\/b>\n\nGets the Audience configuration parameters belonging to the person specified\r\n\r\n\\param p_0 personId: Id of the person the parameter belongs to\r\n\\return Array of Audience configuration parameters.\r\n"},
{text: "NSAudienceAgent.GetMyConfigParameters", help: "<b>NSAudienceConfigParameter[] GetMyConfigParameters()<\/b>\n\nGets the Audience configuration parameters belonging to the currently logged on user.\r\n\r\n\\return Array of Audience configuration parameters.\r\n"},
{text: "NSAudienceAgent.CreateDefaultAudienceLayoutEntity", help: "<b>NSAudienceLayoutEntity CreateDefaultAudienceLayoutEntity()<\/b>\n\nLoading default values into a new AudienceLayoutEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New AudienceLayoutEntity with default values\r\n"},
{text: "NSAudienceAgent.GetAudienceLayoutByName", help: "<b>NSAudienceLayoutEntity GetAudienceLayoutByName(String p_0)<\/b>\n\nGets an Audience layout by it's instance name\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\return Audience layout entity\r\n"},
{text: "NSAudienceAgent.GetAudienceLayoutEntity", help: "<b>NSAudienceLayoutEntity GetAudienceLayoutEntity(Integer p_0)<\/b>\n\nGets a AudienceLayoutEntity object.\r\n\r\n\\param p_0 audienceLayoutEntityId: The identifier of the AudienceLayoutEntity object\r\n\\return AudienceLayoutEntity\r\n"},
{text: "NSAudienceAgent.GetAudienceLayoutOnPerson", help: "<b>NSAudienceLayoutEntity GetAudienceLayoutOnPerson(Integer p_0)<\/b>\n\nGets the Audience layout belonging to the person specified.\r\n\r\n\\param p_0 personId: The person id\r\n\\return Audience layout entity\r\n"},
{text: "NSAudienceAgent.GetMyAudienceLayout", help: "<b>NSAudienceLayoutEntity GetMyAudienceLayout()<\/b>\n\nGets the Audience layout belonging to the currently logged on user.\r\n\r\n\\return Audience layout entity\r\n"},
{text: "NSAudienceAgent.SaveAudienceLayoutEntity", help: "<b>NSAudienceLayoutEntity SaveAudienceLayoutEntity(NSAudienceLayoutEntity p_0)<\/b>\n\nUpdates the existing AudienceLayoutEntity or creates a new AudienceLayoutEntity if the id parameter is empty\r\n\r\n\\param p_0 audienceLayoutEntity: The AudienceLayoutEntity that is saved\r\n\\return New or updated AudienceLayoutEntity"},
{text: "NSAudienceAgent.GetDefaultCountryFlag", help: "<b>NSImage GetDefaultCountryFlag(String p_0)<\/b>\n\nReturns the default country flag image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)\r\n"},
{text: "NSAudienceAgent.GetDefaultPersonImage", help: "<b>NSImage GetDefaultPersonImage(String p_0)<\/b>\n\nReturns the default person (sales rep) image that is displayed in Audience when no person image is found. The image belongs to a specific Audience layout instance.\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)\r\n"},
{text: "NSAudienceAgent.GetDefaultProjectImage", help: "<b>NSImage GetDefaultProjectImage(String p_0)<\/b>\n\nReturns the default project or event image that is displayed in Audience when no project\/event image is found. The image belongs to a specific Audience layout instance.\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)\r\n"},
{text: "NSAudienceAgent.GetLogoImage", help: "<b>NSImage GetLogoImage(String p_0)<\/b>\n\n\r\n\r\n\\param p_0 layoutName\r\n"},
{text: "NSAudienceAgent.GetConfigParameterValue", help: "<b>String GetConfigParameterValue(String p_0, String p_1)<\/b>\n\nGets the string value of an Audience configuration parameter belonging to a given Audience layout with the specified configuration parameter name\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\param p_1 parameterName: The name of the Audience configuration parameter\r\n\\return The string value of the Audience configuration parameter.\r\n"},
{text: "NSAudienceAgent.GetConfigParameterValueOnPerson", help: "<b>String GetConfigParameterValueOnPerson(String p_0, Integer p_1)<\/b>\n\nGets the string value of an Audience configuration parameter with the specified configuration parameter name on the person specified\r\n\r\n\\param p_0 parameterName: The name of the Audience configuration parameter\r\n\\param p_1 personId: Id of the person the parameter belongs to\r\n\\return The string value of the Audience configuration parameter.\r\n"},
{text: "NSAudienceAgent.GetMyConfigParameterValue", help: "<b>String GetMyConfigParameterValue(String p_0)<\/b>\n\nGets the string value of an Audience configuration parameter belonging to the currently logged on user with the specified configuration parameter name.\r\n\r\n\\param p_0 parameterName: The name of the Audience configuration parameter\r\n\\return The string value of the Audience configuration parameter.\r\n"},
{text: "NSAudienceAgent.DeleteAudienceLayoutEntity", help: "<b>Void DeleteAudienceLayoutEntity(Integer p_0)<\/b>\n\nDeletes the AudienceLayoutEntity\r\n\r\n\\param p_0 audienceLayoutEntityId: The identity of the AudienceLayoutEntity\r\n"},
{text: "NSAudienceAgent.DeleteConfigParameter", help: "<b>Void DeleteConfigParameter(String p_0, String p_1)<\/b>\n\nDeletes an Audience configuration parameter belonging to a Audience layout\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\param p_1 parameterName: The name of the Audience configuration parameter\r\n"},
{text: "NSAudienceAgent.SaveAudienceLayoutEntity", help: "<b>Void SaveAudienceLayoutEntity(NSAudienceLayoutEntity p_0)<\/b>\n\nUpdates the existing AudienceLayoutEntity or creates a new AudienceLayoutEntity if the id parameter is empty\r\n\r\n\\param p_0 audienceLayoutEntity: The AudienceLayoutEntity that is saved.\r\n\\return New or updated AudienceLayoutEntity\r\n"},
{text: "NSAudienceAgent.SetDefaultCountryFlag", help: "<b>Void SetDefaultCountryFlag(String p_0, NSImage p_1)<\/b>\n\nStores the default country flag image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\param p_1 image: The default country image to be stored for this Audience layout instance (System.Drawing.Image)\r\n"},
{text: "NSAudienceAgent.SetDefaultPersonImage", help: "<b>Void SetDefaultPersonImage(String p_0, NSImage p_1)<\/b>\n\nStores the default person (sales rep) image that is displayed in Audience when no person image is found. The image is set on a specific Audience layout instance.\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\param p_1 image: The default project\/event image to be stored for this Audience layout instance (System.Drawing.Image)\r\n"},
{text: "NSAudienceAgent.SetDefaultProjectImage", help: "<b>Void SetDefaultProjectImage(String p_0, NSImage p_1)<\/b>\n\nStores the default project or event image that is displayed in Audience when no project\/event image is found. The image is set on a specific Audience layout instance.\r\n\r\n\\param p_0 layoutName: Name of the Audience layout instance\r\n\\param p_1 image: The default project\/event image to be stored for this Audience layout instance (System.Drawing.Image)\r\n"},
{text: "NSAudienceAgent.SetLogoImage", help: "<b>Void SetLogoImage(String p_0, NSImage p_1)<\/b>\n\n\r\n\r\n\\param p_0 layoutName\r\n\\param p_1 image\r\n"},
{text: "Void.NSAudienceConfigParameter", help: "<b>NSAudienceConfigParameter<\/b>\n\nAn Audience configuration parameter, used for handling Audience application or Web part settings."},
{text: "NSAudienceConfigParameter.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nThe date and time the configuration parameter was created\r\n\r\n\\return DateTime"},
{text: "NSAudienceConfigParameter.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nThe date and time the configuration parameter was last updated\r\n\r\n\\return DateTime"},
{text: "NSAudienceConfigParameter.GetAudienceLayoutId", help: "<b>Integer GetAudienceLayoutId()<\/b>\n\nThe id of the Audience layout this configuration setting belongs to\r\n\r\n\\return Integer"},
{text: "NSAudienceConfigParameter.GetCreatedBy", help: "<b>String GetCreatedBy()<\/b>\n\nName of the person that created the configuration parameter\r\n\r\n\\return String"},
{text: "NSAudienceConfigParameter.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the configuration parameter\r\n\r\n\\return String"},
{text: "NSAudienceConfigParameter.GetUpdatedBy", help: "<b>String GetUpdatedBy()<\/b>\n\nName of the person that last updated the configuration parameter\r\n\r\n\\return String"},
{text: "NSAudienceConfigParameter.GetValue", help: "<b>String GetValue()<\/b>\n\nThe value of the configuration parameter\r\n\r\n\\return String"},
{text: "NSAudienceConfigParameter.SetAudienceLayoutId", help: "<b>Void SetAudienceLayoutId(Integer p_0)<\/b>\n\nThe id of the Audience layout this configuration setting belongs to\r\n\r\n\\param p_0 AudienceLayoutId: Integer\r\n\\return Integer"},
{text: "NSAudienceConfigParameter.SetCreatedBy", help: "<b>Void SetCreatedBy(String p_0)<\/b>\n\nName of the person that created the configuration parameter\r\n\r\n\\param p_0 CreatedBy: String\r\n\\return String"},
{text: "NSAudienceConfigParameter.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nThe date and time the configuration parameter was created\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSAudienceConfigParameter.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the configuration parameter\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSAudienceConfigParameter.SetUpdatedBy", help: "<b>Void SetUpdatedBy(String p_0)<\/b>\n\nName of the person that last updated the configuration parameter\r\n\r\n\\param p_0 UpdatedBy: String\r\n\\return String"},
{text: "NSAudienceConfigParameter.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nThe date and time the configuration parameter was last updated\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSAudienceConfigParameter.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nThe value of the configuration parameter\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSAudienceLayoutEntity", help: "<b>NSAudienceLayoutEntity<\/b>\n\nAudience layout. Each instance of Audience has at least one layout. The layout is connected to the instance by it's instance name or is linked to the currently logged on user. The web part layout and the Audience configuration parameters belongs to an Audience layout"},
{text: "NSAudienceLayoutEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nThe date and time the Audience layout was created\r\n\r\n\\return DateTime"},
{text: "NSAudienceLayoutEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nThe date and time the Audience layout was last updated\r\n\r\n\\return DateTime"},
{text: "NSAudienceLayoutEntity.GetAudienceLayoutId", help: "<b>Integer GetAudienceLayoutId()<\/b>\n\nThe Id of the Audience layout\r\n\r\n\\return Integer"},
{text: "NSAudienceLayoutEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nName of the person that created the Audience layout\r\n\r\n\\return Associate"},
{text: "NSAudienceLayoutEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nName of the person that last updated the Audience layout\r\n\r\n\\return Associate"},
{text: "NSAudienceLayoutEntity.GetInstanceLayout", help: "<b>String GetInstanceLayout()<\/b>\n\nThe web part layout as a serialized string\r\n\r\n\\return String"},
{text: "NSAudienceLayoutEntity.GetInstanceName", help: "<b>String GetInstanceName()<\/b>\n\nName of the layout instance\r\n\r\n\\return String"},
{text: "NSAudienceLayoutEntity.SetAudienceLayoutId", help: "<b>Void SetAudienceLayoutId(Integer p_0)<\/b>\n\nThe Id of the Audience layout\r\n\r\n\\param p_0 AudienceLayoutId: Integer\r\n\\return Integer"},
{text: "NSAudienceLayoutEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nName of the person that created the Audience layout\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSAudienceLayoutEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nThe date and time the Audience layout was created\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSAudienceLayoutEntity.SetInstanceLayout", help: "<b>Void SetInstanceLayout(String p_0)<\/b>\n\nThe web part layout as a serialized string\r\n\r\n\\param p_0 InstanceLayout: String\r\n\\return String"},
{text: "NSAudienceLayoutEntity.SetInstanceName", help: "<b>Void SetInstanceName(String p_0)<\/b>\n\nName of the layout instance\r\n\r\n\\param p_0 InstanceName: String\r\n\\return String"},
{text: "NSAudienceLayoutEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nName of the person that last updated the Audience layout\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSAudienceLayoutEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nThe date and time the Audience layout was last updated\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "Void.NSBatchAgent", help: "<b>NSBatchAgent<\/b>\n\n"},
{text: "NSBatchAgent.StopBatchJob", help: "<b>Bool StopBatchJob(Integer p_0)<\/b>\n\nStop a batch job based on Id.\r\n\r\n\\param p_0 id: Id of the batch job to stop.\r\n\\return Returns true if the job was stopped successfully.\r\n"},
{text: "NSBatchAgent.StartBatchJob", help: "<b>Integer StartBatchJob(NSBatchTaskInfo p_0)<\/b>\n\nStart a batch job based on BatchTaskInfo.\r\n\r\n\\param p_0 batchTaskInfo: Use BatchTaskInfo to describe the new batch job.\r\n\\return Returns the id of the created batch job.\r\n"},
{text: "NSBatchAgent.GetBatchTaskInfo", help: "<b>NSBatchTaskInfo GetBatchTaskInfo(Integer p_0)<\/b>\n\nGet a single BatchTaskInfo based on Id.\r\n\r\n\\param p_0 id: Id of the BatchTaskInfo to get.\r\n\\return Returns a BatchTaskInfo.\r\n"},
{text: "NSBatchAgent.UpdateBatchTask", help: "<b>NSBatchTaskInfo UpdateBatchTask(NSBatchTaskInfo p_0)<\/b>\n\nUpdate information about a BatchTask. Only the following properties can be updated: State, Description, Response and Request.\r\n\r\n\\param p_0 batchTaskInfo: The updated information to save.\r\n\\return The updated BatchTaskInfo\r\n"},
{text: "NSBatchAgent.GetBatchTaskInfosByAssociates", help: "<b>NSBatchTaskInfo[] GetBatchTaskInfosByAssociates(Integer[] p_0)<\/b>\n\nGet an array of BatchTaskInfo for the provided associate id's.\r\n\r\n\\param p_0 associateIds: Array of associate id's.\r\n\\return Returns an array of BatchTaskInfo.\r\n"},
{text: "NSBatchAgent.GetBatchTaskInfosByAssociatesAndState", help: "<b>NSBatchTaskInfo[] GetBatchTaskInfosByAssociatesAndState(Integer[] p_0, Integer p_1)<\/b>\n\nGet an array of BatchTaskInfo for the provided associate id's and batch task state.\r\n\r\n\\param p_0 associateIds: Array of associate id's.\r\n\\param p_1 state: The BatchTaskState to get batch tasks for.\r\n\\return Returns an array of BatchTaskInfo.\r\n"},
{text: "NSBatchAgent.GetBatchTaskInfosByNameAndAssociates", help: "<b>NSBatchTaskInfo[] GetBatchTaskInfosByNameAndAssociates(String p_0, Integer[] p_1)<\/b>\n\nGet an array of BatchTaskInfo for the provided associate id's and batch task definition name.\r\n\r\n\\param p_0 name: Batchtask definition name.\r\n\\param p_1 associateIds: Array of associate id's.\r\n\\return Returns an array of BatchTaskInfo.\r\n"},
{text: "NSBatchAgent.GetBatchTaskInfosByNameAndState", help: "<b>NSBatchTaskInfo[] GetBatchTaskInfosByNameAndState(String p_0, Integer p_1)<\/b>\n\nGets an array of BatchTaskInfo with state defined by a BatchTaskState and the batchtask definition name.\r\n\r\n\\param p_0 name: Batchtask definition name.\r\n\\param p_1 state: The BatchTaskState to get batch tasks for.\r\n\\return Returns an array of BatchTaskInfo.\r\n"},
{text: "NSBatchAgent.GetBatchTaskInfosByState", help: "<b>NSBatchTaskInfo[] GetBatchTaskInfosByState(Integer p_0)<\/b>\n\nGets an array of BatchTaskInfo with state defined by a BatchTaskState.\r\n\r\n\\param p_0 state: The BatchTaskState to get batch tasks for.\r\n\\return Returns an array of BatchTaskInfo.\r\n"},
{text: "NSBatchAgent.DeleteBatchTasks", help: "<b>Void DeleteBatchTasks(Integer[] p_0)<\/b>\n\nDelete batch tasks from the database.\r\n\r\n\\param p_0 batchTaskIds: Array of batchTask ids to delete.\r\n"},
{text: "Void.NSBatchTaskInfo", help: "<b>NSBatchTaskInfo<\/b>\n\nBatchTaskInfo contains information about one batch task."},
{text: "NSBatchTaskInfo.GetIsInternalTask", help: "<b>Bool GetIsInternalTask()<\/b>\n\nIf IsInternalTask is true, this task will not add a trace to the database.\r\n\r\n\\return Bool"},
{text: "NSBatchTaskInfo.GetIsSystemTask", help: "<b>Bool GetIsSystemTask()<\/b>\n\nIf IsSystemTask is true, the task is not initiated by an associate.\r\n\r\n\\return Bool"},
{text: "NSBatchTaskInfo.GetCreated", help: "<b>DateTime GetCreated()<\/b>\n\nTask creation time.\r\n\r\n\\return DateTime"},
{text: "NSBatchTaskInfo.GetLastStarted", help: "<b>DateTime GetLastStarted()<\/b>\n\nWhen was the task last started.\r\n\r\n\\return DateTime"},
{text: "NSBatchTaskInfo.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nGets or sets AssociateId.\n\t\/\/\/ <remarks>\n\t\/\/\/ If it is a System task, AssociateId = 0.\n\t\/\/\/ <\/remarks>\r\n\r\n\\return Integer"},
{text: "NSBatchTaskInfo.GetDetailsRecord", help: "<b>Integer GetDetailsRecord()<\/b>\n\nRecord Id of a row in the DetailsTable containing more info about the task.\r\n\r\n\\return Integer"},
{text: "NSBatchTaskInfo.GetDetailsTable", help: "<b>Integer GetDetailsTable()<\/b>\n\nId of table with more information about the task.\r\n\r\n\\return Integer"},
{text: "NSBatchTaskInfo.GetId", help: "<b>Integer GetId()<\/b>\n\nId of the task.\r\n\r\n\\return Integer"},
{text: "NSBatchTaskInfo.GetProgressPercent", help: "<b>Integer GetProgressPercent()<\/b>\n\nTask progress, in percent of estimated total\r\n\r\n\\return Integer"},
{text: "NSBatchTaskInfo.GetStartCount", help: "<b>Integer GetStartCount()<\/b>\n\nMaps to the startcount field in the batchtask table.\r\n\r\n\\return Integer"},
{text: "NSBatchTaskInfo.GetState", help: "<b>Integer GetState()<\/b>\n\nBatchTaskState of the task.\r\n\r\n\\return Integer"},
{text: "NSBatchTaskInfo.GetParameterObject", help: "<b>Map GetParameterObject()<\/b>\n\n"},
{text: "NSBatchTaskInfo.GetContext", help: "<b>String GetContext()<\/b>\n\nContext for the executing task.\r\n\r\n\\return String"},
{text: "NSBatchTaskInfo.GetDatabaseSerialNumber", help: "<b>String GetDatabaseSerialNumber()<\/b>\n\nSerial number of the database the task is to run on.\r\n\r\n\\return String"},
{text: "NSBatchTaskInfo.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of the task.\r\n\r\n\\return String"},
{text: "NSBatchTaskInfo.GetName", help: "<b>String GetName()<\/b>\n\nName of the task.\r\n\r\n\\return String"},
{text: "NSBatchTaskInfo.GetProgressDescription", help: "<b>String GetProgressDescription()<\/b>\n\nDescriptive text for the current stage\r\n\r\n\\return String"},
{text: "NSBatchTaskInfo.GetRequest", help: "<b>String GetRequest()<\/b>\n\nMaps to the request field in the batchtask table.\r\n\r\n\\return String"},
{text: "NSBatchTaskInfo.GetResponse", help: "<b>String GetResponse()<\/b>\n\nMaps to the response field in the batchtask table.\r\n\r\n\\return String"},
{text: "NSBatchTaskInfo.GetResult", help: "<b>String GetResult()<\/b>\n\nMaps to the result field in the batchtask table.\r\n\r\n\\return String"},
{text: "NSBatchTaskInfo.GetParameterObject", help: "<b>StringDictionary GetParameterObject()<\/b>\n\nParameterObject will be serialized to a binary blob and saved in the BinaryObject table. The link to the BinaryObject will be set using DetailsTable and DetailsRecord.\r\n\r\n\\return StringDictionary"},
{text: "NSBatchTaskInfo.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nGets or sets AssociateId.\n\t\/\/\/ <remarks>\n\t\/\/\/ If it is a System task, AssociateId = 0.\n\t\/\/\/ <\/remarks>\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSBatchTaskInfo.SetContext", help: "<b>Void SetContext(String p_0)<\/b>\n\nContext for the executing task.\r\n\r\n\\param p_0 Context: String\r\n\\return String"},
{text: "NSBatchTaskInfo.SetCreated", help: "<b>Void SetCreated(DateTime p_0)<\/b>\n\nTask creation time.\r\n\r\n\\param p_0 Created: DateTime\r\n\\return DateTime"},
{text: "NSBatchTaskInfo.SetDatabaseSerialNumber", help: "<b>Void SetDatabaseSerialNumber(String p_0)<\/b>\n\nSerial number of the database the task is to run on.\r\n\r\n\\param p_0 DatabaseSerialNumber: String\r\n\\return String"},
{text: "NSBatchTaskInfo.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of the task.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSBatchTaskInfo.SetDetailsRecord", help: "<b>Void SetDetailsRecord(Integer p_0)<\/b>\n\nRecord Id of a row in the DetailsTable containing more info about the task.\r\n\r\n\\param p_0 DetailsRecord: Integer\r\n\\return Integer"},
{text: "NSBatchTaskInfo.SetDetailsTable", help: "<b>Void SetDetailsTable(Integer p_0)<\/b>\n\nId of table with more information about the task.\r\n\r\n\\param p_0 DetailsTable: Integer\r\n\\return Integer"},
{text: "NSBatchTaskInfo.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nId of the task.\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSBatchTaskInfo.SetIsInternalTask", help: "<b>Void SetIsInternalTask(Bool p_0)<\/b>\n\nIf IsInternalTask is true, this task will not add a trace to the database.\r\n\r\n\\param p_0 IsInternalTask: Bool\r\n\\return Bool"},
{text: "NSBatchTaskInfo.SetIsSystemTask", help: "<b>Void SetIsSystemTask(Bool p_0)<\/b>\n\nIf IsSystemTask is true, the task is not initiated by an associate.\r\n\r\n\\param p_0 IsSystemTask: Bool\r\n\\return Bool"},
{text: "NSBatchTaskInfo.SetLastStarted", help: "<b>Void SetLastStarted(DateTime p_0)<\/b>\n\nWhen was the task last started.\r\n\r\n\\param p_0 LastStarted: DateTime\r\n\\return DateTime"},
{text: "NSBatchTaskInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of the task.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSBatchTaskInfo.SetParameterObject", help: "<b>Void SetParameterObject(Map p_0)<\/b>\n\n"},
{text: "NSBatchTaskInfo.SetParameterObject", help: "<b>Void SetParameterObject(StringDictionary p_0)<\/b>\n\nParameterObject will be serialized to a binary blob and saved in the BinaryObject table. The link to the BinaryObject will be set using DetailsTable and DetailsRecord.\r\n\r\n\\param p_0 ParameterObject: StringDictionary\r\n\\return StringDictionary"},
{text: "NSBatchTaskInfo.SetProgressDescription", help: "<b>Void SetProgressDescription(String p_0)<\/b>\n\nDescriptive text for the current stage\r\n\r\n\\param p_0 ProgressDescription: String\r\n\\return String"},
{text: "NSBatchTaskInfo.SetProgressPercent", help: "<b>Void SetProgressPercent(Integer p_0)<\/b>\n\nTask progress, in percent of estimated total\r\n\r\n\\param p_0 ProgressPercent: Integer\r\n\\return Integer"},
{text: "NSBatchTaskInfo.SetRequest", help: "<b>Void SetRequest(String p_0)<\/b>\n\nMaps to the request field in the batchtask table.\r\n\r\n\\param p_0 Request: String\r\n\\return String"},
{text: "NSBatchTaskInfo.SetResponse", help: "<b>Void SetResponse(String p_0)<\/b>\n\nMaps to the response field in the batchtask table.\r\n\r\n\\param p_0 Response: String\r\n\\return String"},
{text: "NSBatchTaskInfo.SetResult", help: "<b>Void SetResult(String p_0)<\/b>\n\nMaps to the result field in the batchtask table.\r\n\r\n\\param p_0 Result: String\r\n\\return String"},
{text: "NSBatchTaskInfo.SetStartCount", help: "<b>Void SetStartCount(Integer p_0)<\/b>\n\nMaps to the startcount field in the batchtask table.\r\n\r\n\\param p_0 StartCount: Integer\r\n\\return Integer"},
{text: "NSBatchTaskInfo.SetState", help: "<b>Void SetState(Integer p_0)<\/b>\n\nBatchTaskState of the task.\r\n\r\n\\param p_0 State: Integer\r\n\\return Integer"},
{text: "Void.NSBLOBAgent", help: "<b>NSBLOBAgent<\/b>\n\nCollection of all services that works with binary objects (BLOBS), e.g. Images and documents."},
{text: "NSBLOBAgent.SaveImageStream", help: "<b>Integer SaveImageStream(Integer p_0, NSImage p_1, String p_2)<\/b>\n\nStores an image in the database without linking it to a project or a person. It is possible to ChangePersonImage or ChangeProjectImage to attach image later.\r\n\r\n\\param p_0 type: The type of the image.\r\n\\param p_1 image: Image to store\r\n\\param p_2 description: Image description\r\n\\return The blob id"},
{text: "NSBLOBAgent.CreateDefaultBlobEntity", help: "<b>NSBlobEntity CreateDefaultBlobEntity()<\/b>\n\nLoading default values into a new BlobEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New BlobEntity with default values\r\n"},
{text: "NSBLOBAgent.GetBlobEntity", help: "<b>NSBlobEntity GetBlobEntity(Integer p_0)<\/b>\n\nGets a BlobEntity object.\r\n\r\n\\param p_0 blobEntityId: The identifier of the BlobEntity object\r\n\\return BlobEntity\r\n"},
{text: "NSBLOBAgent.GetBlobEntityOnCountry", help: "<b>NSBlobEntity GetBlobEntityOnCountry(Integer p_0)<\/b>\n\nGets the blob entity that represents the country flag binary object.\r\n\r\n\\param p_0 countryId: The country id\r\n\\return BlobEntity object\r\n"},
{text: "NSBLOBAgent.GetBlobEntityOnPerson", help: "<b>NSBlobEntity GetBlobEntityOnPerson(Integer p_0)<\/b>\n\nGets the blob entity that represents the person image binary object.\r\n\r\n\\param p_0 personId: The person id\r\n\\return BlobEntity object\r\n"},
{text: "NSBLOBAgent.GetBlobEntityOnProduct", help: "<b>NSBlobEntity GetBlobEntityOnProduct(Integer p_0)<\/b>\n\nGets the blob entity that represents the product image binary object.\r\n\r\n\\param p_0 productId: The product id\r\n\\return BlobEntity object"},
{text: "NSBLOBAgent.GetBlobEntityOnProject", help: "<b>NSBlobEntity GetBlobEntityOnProject(Integer p_0)<\/b>\n\nGets the blob entity that represents the project image binary object.\r\n\r\n\\param p_0 projectId: The project id\r\n\\return BlobEntity object\r\n"},
{text: "NSBLOBAgent.SaveBlobEntity", help: "<b>NSBlobEntity SaveBlobEntity(NSBlobEntity p_0)<\/b>\n\nUpdates the existing BlobEntity or creates a new BlobEntity if the id parameter is empty\r\n\r\n\\param p_0 blobEntity: The BlobEntity that is saved\r\n\\return New or updated BlobEntity"},
{text: "NSBLOBAgent.GetPersonImage", help: "<b>NSImage GetPersonImage(Integer p_0)<\/b>\n\nReturns the person image that is displayed in the CRM application.\r\n\r\n\\param p_0 personId: The person id of the person the image belongs to.\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)\r\n"},
{text: "NSBLOBAgent.GetPersonImageWithSize", help: "<b>NSImage GetPersonImageWithSize(Integer p_0, Integer p_1, Integer p_2)<\/b>\n\nReturns the person image that is displayed in the CRM application with a specified maximum size.\r\n\r\n\\param p_0 personId: The person id of the person the image belongs to.\r\n\\param p_1 width: The maximum with of the returned image. Specify <= 0 to preserve aspect ratio of existing image\r\n\\param p_2 height: The maximum height of the returned image. Specify <= 0 to preserve aspect ratio of existing image\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg\/base64 encoded string.)"},
{text: "NSBLOBAgent.GetProductImage", help: "<b>NSImage GetProductImage(Integer p_0)<\/b>\n\nReturns the product image (rank=1) that is displayed in the CRM application.\r\n\r\n\\param p_0 productId: The product id of the product the image belongs to.\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)"},
{text: "NSBLOBAgent.GetProductThumbnail", help: "<b>NSImage GetProductThumbnail(Integer p_0)<\/b>\n\nReturns the product thumbnail that is displayed in the CRM application.\r\n\r\n\\param p_0 productId: The product id of the product the thumbnail belongs to.\r\n\\return The thumbnail as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)"},
{text: "NSBLOBAgent.GetProjectImage", help: "<b>NSImage GetProjectImage(Integer p_0)<\/b>\n\nReturns the project image that is displayed in the CRM application.\r\n\r\n\\param p_0 projectId: The project id of the project the image belongs to.\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)\r\n"},
{text: "NSBLOBAgent.GetProjectImageWithSize", help: "<b>NSImage GetProjectImageWithSize(Integer p_0, Integer p_1, Integer p_2)<\/b>\n\nReturns the project image that is displayed in the CRM application with a specified maximum size.\r\n\r\n\\param p_0 projectId: The project id of the project the image belongs to.\r\n\\param p_1 width: The maximum with of the returned image. Specify <= 0 to preserve aspect ratio of existing image\r\n\\param p_2 height: The maximum height of the returned image. Specify <= 0 to preserve aspect ratio of existing image\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a jpeg\/base64 encoded string.)"},
{text: "NSBLOBAgent.GetQuoteLineImage", help: "<b>NSImage GetQuoteLineImage(Integer p_0)<\/b>\n\nReturns the quoteline image (rank=1) that is displayed in the CRM application.\r\n\r\n\\param p_0 quoteLineId: The product id of the quoteline the image belongs to.\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)"},
{text: "NSBLOBAgent.GetBlobStream", help: "<b>NSStream GetBlobStream(Integer p_0)<\/b>\n\nGet the binary object as a stream\r\n\r\n\\param p_0 blobEntityId: The ID of the BLOB entity object that refers to the binary data\r\n\\return The binary object as a Stream\r\n"},
{text: "NSBLOBAgent.GetAppData", help: "<b>String GetAppData(String p_0)<\/b>\n\nGet a CLOB (limited to a reasonable size by the mechanics of Web Services) according to a string key; ALSO limits to the current ApplicationToken if any\r\n\r\n\\param p_0 key: The key string, less than 200 characters. Must be unique within each application.\r\n\\return The applications value, suggested to be a JSON, XML or other readable structure"},
{text: "NSBLOBAgent.ChangePersonImage", help: "<b>Void ChangePersonImage(Integer p_0, Integer p_1)<\/b>\n\n\r\n\r\n\\param p_0 personId: The person the image is linked to\r\n\\param p_1 blobId: The Binary object id. If the Binary object id is 0, any image link is removed from the person.\r\n"},
{text: "NSBLOBAgent.ChangeProductImage", help: "<b>Void ChangeProductImage(Integer p_0, Integer p_1)<\/b>\n\n\\param p_0 productId: The product the image is linked to\r\n\\param p_1 blobId: The Binary object id. If the Binary object id is 0, any image link is removed from the product."},
{text: "NSBLOBAgent.ChangeProjectImage", help: "<b>Void ChangeProjectImage(Integer p_0, Integer p_1)<\/b>\n\nChanges the project image link. If the Binary object id is 0, any image link is removed from the project.\r\n\r\n\\param p_0 projectId: The project the image is linked to\r\n\\param p_1 blobId: The Binary object id. If the Binary object id is 0, any image link is removed from the project.\r\n"},
{text: "NSBLOBAgent.DeleteBlobEntity", help: "<b>Void DeleteBlobEntity(Integer p_0)<\/b>\n\nDeletes the BlobEntity\r\n\r\n\\param p_0 blobEntityId: The identity of the BlobEntity\r\n"},
{text: "NSBLOBAgent.SaveBlobEntity", help: "<b>Void SaveBlobEntity(NSBlobEntity p_0)<\/b>\n\nUpdates the existing BlobEntity or creates a new BlobEntity if the id parameter is empty\r\n\r\n\\param p_0 blobEntity: The BlobEntity that is saved.\r\n\\return New or updated BlobEntity\r\n"},
{text: "NSBLOBAgent.SaveProjectImage", help: "<b>Void SaveProjectImage(String p_0, NSImage p_1)<\/b>\n\nSaves a project image that is displayed in the CRM application's project image selection dialog to the database.\r\n\r\n\\param p_0 description: Image description. Should be image name (e.g. winter.jpg) for project images\r\n\\param p_1 image: The project image (System.Drawing.Image)\r\n"},
{text: "NSBLOBAgent.SetAppData", help: "<b>Void SetAppData(String p_0, String p_1)<\/b>\n\nGet a CLOB (limited to a reasonable size by the mechanics of Web Services) according to a string key; ALSO limits to the current ApplicationToken if any. Existing data, if any, will be overwritten. Overwrite with a blank value to delete.\r\n\r\n\\param p_0 key: The key string, less than 200 characters. Must be unique within each application.\r\n\\param p_1 data: The applications value, suggested to be a JSON, XML or other readable structure\r\n\\return This method has no return value"},
{text: "NSBLOBAgent.SetBlobStream", help: "<b>Void SetBlobStream(Integer p_0, NSStream p_1)<\/b>\n\nStore a binary object from it's stream\r\n\r\n\\param p_0 blobEntityId: Id of the BLOB entity object that the binary data should be stored to.\r\n\\param p_1 stream: The binary object as a Stream\r\n"},
{text: "NSBLOBAgent.SetPersonImage", help: "<b>Void SetPersonImage(Integer p_0, NSImage p_1)<\/b>\n\nStores the person image that is displayed in the CRM application.\r\n\r\n\\param p_0 personId: The person id of the person the image belongs to.\r\n\\param p_1 image: The image that is stored on the person (System.Drawing.Image)\r\n"},
{text: "NSBLOBAgent.SetProductImage", help: "<b>Void SetProductImage(Integer p_0, NSImage p_1)<\/b>\n\nStores the product image that is displayed in the CRM application. The image is scaled down to max 1000x1000. This method operates only the main (rank=1) image; future extensions may support multiple images. A thumbnail of size 75x75 is also automatically set.\r\n\r\n\\param p_0 productId: The project id of the product the image belongs to.\r\n\\param p_1 image: The image that is stored on the product (System.Drawing.Image), scaled down to no more than 1000x1000"},
{text: "NSBLOBAgent.SetProductThumbnail", help: "<b>Void SetProductThumbnail(Integer p_0, NSImage p_1)<\/b>\n\nStores the product thumbnail that is displayed in the CRM application. The image is scaled down to max 200x200 pixels.\r\n\r\n\\param p_0 productId: The project id of the product the image belongs to.\r\n\\param p_1 image: The image that is stored on the product (System.Drawing.Image); scaled down to no more than 200x200"},
{text: "NSBLOBAgent.SetProjectImage", help: "<b>Void SetProjectImage(Integer p_0, NSImage p_1)<\/b>\n\nStores the project image that is displayed in the CRM application.\r\n\r\n\\param p_0 projectId: The project id of the project the image belongs to.\r\n\\param p_1 image: The image that is stored on the project (System.Drawing.Image)\r\n"},
{text: "Void.NSBlobEntity", help: "<b>NSBlobEntity<\/b>\n\n"},
{text: "NSBlobEntity.GetIsEncrypted", help: "<b>Bool GetIsEncrypted()<\/b>\n\nHas the data been encrypted.\r\n\r\n\\return Bool"},
{text: "NSBlobEntity.GetIsZipped", help: "<b>Bool GetIsZipped()<\/b>\n\nHas the data been zipped.\r\n\r\n\\return Bool"},
{text: "NSBlobEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSBlobEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSBlobEntity.GetBlobId", help: "<b>Integer GetBlobId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSBlobEntity.GetBlobSize", help: "<b>Integer GetBlobSize()<\/b>\n\nThe length, in bytes, of the binary data AS STORED after any encryption and\/or zipping. Important to get right, since some databases will not tell us just based on the blob itself!\r\n\r\n\\return Integer"},
{text: "NSBlobEntity.GetOriginalSize", help: "<b>Integer GetOriginalSize()<\/b>\n\nOriginal size of the binary data, before encryption and\/or zipping. This is what the ultimate client will get\r\n\r\n\\return Integer"},
{text: "NSBlobEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nThe person that first created the document. The property is read-only.\r\n\r\n\\return Associate"},
{text: "NSBlobEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nThe person that last updated the appointment.\r\n\r\n\\return Associate"},
{text: "NSBlobEntity.GetConceptualType", help: "<b>String GetConceptualType()<\/b>\n\nThe type, for instance PHOTO, PERSONPHOTO, or whatever, that is descriptive of what kind of image or data this is\r\n\r\n\\return String"},
{text: "NSBlobEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nA description that is entered by the user, and visible to the user\r\n\r\n\\return String"},
{text: "NSBlobEntity.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\nExtra information, spare field, can be used for anything that makes sense. Should not refer to any particular context, that is something for the BinaryObjectLInk\r\n\r\n\\return String"},
{text: "NSBlobEntity.GetMimeType", help: "<b>String GetMimeType()<\/b>\n\nMime type, describing the technical type (image\/jpeg) of the data\r\n\r\n\\return String"},
{text: "NSBlobEntity.SetBlobId", help: "<b>Void SetBlobId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 BlobId: Integer\r\n\\return Integer"},
{text: "NSBlobEntity.SetBlobSize", help: "<b>Void SetBlobSize(Integer p_0)<\/b>\n\nThe length, in bytes, of the binary data AS STORED after any encryption and\/or zipping. Important to get right, since some databases will not tell us just based on the blob itself!\r\n\r\n\\param p_0 BlobSize: Integer\r\n\\return Integer"},
{text: "NSBlobEntity.SetConceptualType", help: "<b>Void SetConceptualType(String p_0)<\/b>\n\nThe type, for instance PHOTO, PERSONPHOTO, or whatever, that is descriptive of what kind of image or data this is\r\n\r\n\\param p_0 ConceptualType: String\r\n\\return String"},
{text: "NSBlobEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nThe person that first created the document. The property is read-only.\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSBlobEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSBlobEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nA description that is entered by the user, and visible to the user\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSBlobEntity.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\nExtra information, spare field, can be used for anything that makes sense. Should not refer to any particular context, that is something for the BinaryObjectLInk\r\n\r\n\\param p_0 ExtraInfo: String\r\n\\return String"},
{text: "NSBlobEntity.SetIsEncrypted", help: "<b>Void SetIsEncrypted(Bool p_0)<\/b>\n\nHas the data been encrypted.\r\n\r\n\\param p_0 IsEncrypted: Bool\r\n\\return Bool"},
{text: "NSBlobEntity.SetIsZipped", help: "<b>Void SetIsZipped(Bool p_0)<\/b>\n\nHas the data been zipped.\r\n\r\n\\param p_0 IsZipped: Bool\r\n\\return Bool"},
{text: "NSBlobEntity.SetMimeType", help: "<b>Void SetMimeType(String p_0)<\/b>\n\nMime type, describing the technical type (image\/jpeg) of the data\r\n\r\n\\param p_0 MimeType: String\r\n\\return String"},
{text: "NSBlobEntity.SetOriginalSize", help: "<b>Void SetOriginalSize(Integer p_0)<\/b>\n\nOriginal size of the binary data, before encryption and\/or zipping. This is what the ultimate client will get\r\n\r\n\\param p_0 OriginalSize: Integer\r\n\\return Integer"},
{text: "NSBlobEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nThe person that last updated the appointment.\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSBlobEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "Void.NSBusiness", help: "<b>NSBusiness<\/b>\n\n"},
{text: "NSBusiness.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSBusiness.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSBusiness.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSBusiness.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSBusiness.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSBusiness.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSCarrier", help: "<b>NSCarrier<\/b>\n\n"},
{text: "NSCarrier.GetFieldProperties", help: "<b>FieldPropertyDictionary GetFieldProperties()<\/b>\n\n"},
{text: "NSCarrier.GetTableRight", help: "<b>NSTableRight GetTableRight()<\/b>\n\n"},
{text: "NSCarrier.SetFieldProperties", help: "<b>Void SetFieldProperties(FieldPropertyDictionary p_0)<\/b>\n\n"},
{text: "NSCarrier.SetTableRight", help: "<b>Void SetTableRight(NSTableRight p_0)<\/b>\n\n"},
{text: "Void.NSCategory", help: "<b>NSCategory<\/b>\n\n"},
{text: "NSCategory.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSCategory.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSCategory.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSCategory.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSCategory.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSCategory.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSChangedData", help: "<b>NSChangedData<\/b>\n\nGeneric carrier, used in return values to indicate what data NetServer has changed 'behind the scenes' so clients can know what to update"},
{text: "NSChangedData.GetAddedRecords", help: "<b>NSChangedDataItem[] GetAddedRecords()<\/b>\n\nIds of added records.\r\n\r\n\\return ChangedDataItemArray"},
{text: "NSChangedData.GetDeletedRecords", help: "<b>NSChangedDataItem[] GetDeletedRecords()<\/b>\n\nIds of deleted records.\r\n\r\n\\return ChangedDataItemArray"},
{text: "NSChangedData.GetUpdatedRecords", help: "<b>NSChangedDataItem[] GetUpdatedRecords()<\/b>\n\nIds of updated records.\r\n\r\n\\return ChangedDataItemArray"},
{text: "NSChangedData.SetAddedRecords", help: "<b>Void SetAddedRecords(NSChangedDataItem[] p_0)<\/b>\n\nIds of added records.\r\n\r\n\\param p_0 AddedRecords: ChangedDataItemArray\r\n\\return ChangedDataItemArray"},
{text: "NSChangedData.SetDeletedRecords", help: "<b>Void SetDeletedRecords(NSChangedDataItem[] p_0)<\/b>\n\nIds of deleted records.\r\n\r\n\\param p_0 DeletedRecords: ChangedDataItemArray\r\n\\return ChangedDataItemArray"},
{text: "NSChangedData.SetUpdatedRecords", help: "<b>Void SetUpdatedRecords(NSChangedDataItem[] p_0)<\/b>\n\nIds of updated records.\r\n\r\n\\param p_0 UpdatedRecords: ChangedDataItemArray\r\n\\return ChangedDataItemArray"},
{text: "Void.NSChangedDataItem", help: "<b>NSChangedDataItem<\/b>\n\nTablename\/recordid pair used to refer to records"},
{text: "NSChangedDataItem.GetRecordId", help: "<b>Integer GetRecordId()<\/b>\n\nId of record, should never be 0\r\n\r\n\\return Integer"},
{text: "NSChangedDataItem.GetTablename", help: "<b>String GetTablename()<\/b>\n\nName of table, standardized to lowercase\r\n\r\n\\return String"},
{text: "NSChangedDataItem.SetRecordId", help: "<b>Void SetRecordId(Integer p_0)<\/b>\n\nId of record, should never be 0\r\n\r\n\\param p_0 RecordId: Integer\r\n\\return Integer"},
{text: "NSChangedDataItem.SetTablename", help: "<b>Void SetTablename(String p_0)<\/b>\n\nName of table, standardized to lowercase\r\n\r\n\\param p_0 Tablename: String\r\n\\return String"},
{text: "Void.NSCheckLicenseStatusResult", help: "<b>NSCheckLicenseStatusResult<\/b>\n\nResult of CheckLicenseStatus"},
{text: "NSCheckLicenseStatusResult.GetLicenseStatus", help: "<b>Integer GetLicenseStatus()<\/b>\n\nResult of CheckLicenseStatus\r\n\r\n\\return Integer"},
{text: "NSCheckLicenseStatusResult.GetMessage", help: "<b>String GetMessage()<\/b>\n\nMessage to display in SOADMIN if LinkType=90.\r\n\r\n\\return String"},
{text: "NSCheckLicenseStatusResult.GetUrl", help: "<b>String GetUrl()<\/b>\n\nUrl to show to the user.  This is relevant when LinkType is 60.\r\n\r\n\\return String"},
{text: "NSCheckLicenseStatusResult.SetLicenseStatus", help: "<b>Void SetLicenseStatus(Integer p_0)<\/b>\n\nResult of CheckLicenseStatus\r\n\r\n\\param p_0 LicenseStatus: Integer\r\n\\return Integer"},
{text: "NSCheckLicenseStatusResult.SetLicenseStatus", help: "<b>Void SetLicenseStatus(NSLicenseStatus p_0)<\/b>\n\n"},
{text: "NSCheckLicenseStatusResult.SetMessage", help: "<b>Void SetMessage(String p_0)<\/b>\n\nMessage to display in SOADMIN if LinkType=90.\r\n\r\n\\param p_0 Message: String\r\n\\return String"},
{text: "NSCheckLicenseStatusResult.SetUrl", help: "<b>Void SetUrl(String p_0)<\/b>\n\nUrl to show to the user.  This is relevant when LinkType is 60.\r\n\r\n\\param p_0 Url: String\r\n\\return String"},
{text: "Void.NSCheckoutInfo", help: "<b>NSCheckoutInfo<\/b>\n\nInformation about the checked-out state of one document, describing whether it is checked out, and to whom."},
{text: "NSCheckoutInfo.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nId of associate who has currently checked out the document; 0 if it is not checked out,  or is checked out by someone who is not a SuperOffice user\r\n\r\n\\return Integer"},
{text: "NSCheckoutInfo.GetState", help: "<b>Integer GetState()<\/b>\n\nCheckout state\r\n\r\n\\return Integer"},
{text: "NSCheckoutInfo.GetName", help: "<b>String GetName()<\/b>\n\nName of person who has currently checked out the document; blank if it is not checked out. This property may also be blank if the AssociateId is nonzero; NetServer will retrieve the associates' name as needed.\r\n\r\n\\return String"},
{text: "NSCheckoutInfo.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nId of associate who has currently checked out the document; 0 if it is not checked out,  or is checked out by someone who is not a SuperOffice user\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSCheckoutInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of person who has currently checked out the document; blank if it is not checked out. This property may also be blank if the AssociateId is nonzero; NetServer will retrieve the associates' name as needed.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSCheckoutInfo.SetState", help: "<b>Void SetState(Integer p_0)<\/b>\n\nCheckout state\r\n\r\n\\param p_0 State: Integer\r\n\\return Integer"},
{text: "Void.NSCommandInfo", help: "<b>NSCommandInfo<\/b>\n\nAn instance of this class describes a custom command, declared and implemented by a document plugin"},
{text: "NSCommandInfo.GetReturnType", help: "<b>Integer GetReturnType()<\/b>\n\nDeclaration of what kind of return type the execution of this command will give.\r\n\r\n\\return Integer"},
{text: "NSCommandInfo.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nDisplay name, shown in menus, command lists and similar GUI elements.\r\n\r\n\\return String"},
{text: "NSCommandInfo.GetDisplayTooltip", help: "<b>String GetDisplayTooltip()<\/b>\n\nTooltip string associate with the command - can be a literal or a tooltip hint.\r\n\r\n\\return String"},
{text: "NSCommandInfo.GetIconHint", help: "<b>String GetIconHint()<\/b>\n\nIcon hint, which should resolve to an icon that is compatible in size with a standard menu or dropdown list font. May be blank.\r\n\r\n\\return String"},
{text: "NSCommandInfo.GetName", help: "<b>String GetName()<\/b>\n\nThe programmatic name of the command, uniquely identifying this command for the document plugin.\r\n\r\n\\return String"},
{text: "NSCommandInfo.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nDisplay name, shown in menus, command lists and similar GUI elements.\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSCommandInfo.SetDisplayTooltip", help: "<b>Void SetDisplayTooltip(String p_0)<\/b>\n\nTooltip string associate with the command - can be a literal or a tooltip hint.\r\n\r\n\\param p_0 DisplayTooltip: String\r\n\\return String"},
{text: "NSCommandInfo.SetIconHint", help: "<b>Void SetIconHint(String p_0)<\/b>\n\nIcon hint, which should resolve to an icon that is compatible in size with a standard menu or dropdown list font. May be blank.\r\n\r\n\\param p_0 IconHint: String\r\n\\return String"},
{text: "NSCommandInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe programmatic name of the command, uniquely identifying this command for the document plugin.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSCommandInfo.SetReturnType", help: "<b>Void SetReturnType(Integer p_0)<\/b>\n\nDeclaration of what kind of return type the execution of this command will give.\r\n\r\n\\param p_0 ReturnType: Integer\r\n\\return Integer"},
{text: "Void.NSCompetitor", help: "<b>NSCompetitor<\/b>\n\n"},
{text: "NSCompetitor.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSCompetitor.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSCompetitor.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSCompetitor.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSCompetitor.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSCompetitor.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSConfigurationAgent", help: "<b>NSConfigurationAgent<\/b>\n\n"},
{text: "NSConfigurationAgent.ExistsSystemEvent", help: "<b>Bool ExistsSystemEvent(String p_0)<\/b>\n\nIs there a system event with the given key?\r\n\r\n\\param p_0 key: The key to match on\r\n\\return The system event"},
{text: "NSConfigurationAgent.CreateDefaultDiaryViewEntity", help: "<b>NSDiaryViewEntity CreateDefaultDiaryViewEntity()<\/b>\n\nLoading default values into a new DiaryViewEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New DiaryViewEntity with default values\r\n"},
{text: "NSConfigurationAgent.GetDiaryViewEntity", help: "<b>NSDiaryViewEntity GetDiaryViewEntity(Integer p_0)<\/b>\n\nGets a DiaryViewEntity object.\r\n\r\n\\param p_0 diaryViewEntityId: The identifier of the DiaryViewEntity object\r\n\\return DiaryViewEntity\r\n"},
{text: "NSConfigurationAgent.SaveDiaryViewEntity", help: "<b>NSDiaryViewEntity SaveDiaryViewEntity(NSDiaryViewEntity p_0)<\/b>\n\nUpdates the existing DiaryViewEntity or creates a new DiaryViewEntity if the id parameter is empty\r\n\r\n\\param p_0 diaryViewEntity: The DiaryViewEntity that is saved\r\n\\return New or updated DiaryViewEntity"},
{text: "NSConfigurationAgent.CreateDefaultSystemEventEntity", help: "<b>NSSystemEventEntity CreateDefaultSystemEventEntity()<\/b>\n\nLoading default values into a new SystemEventEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New SystemEventEntity with default values"},
{text: "NSConfigurationAgent.GetSystemEventEntity", help: "<b>NSSystemEventEntity GetSystemEventEntity(Integer p_0)<\/b>\n\nGets a SystemEventEntity object.\r\n\r\n\\param p_0 systemEventEntityId: The identifier of the SystemEventEntity object\r\n\\return SystemEventEntity"},
{text: "NSConfigurationAgent.SaveSystemEventEntity", help: "<b>NSSystemEventEntity SaveSystemEventEntity(NSSystemEventEntity p_0)<\/b>\n\nUpdates the existing SystemEventEntity or creates a new SystemEventEntity if the id parameter is empty\r\n\r\n\\param p_0 systemEventEntity: The SystemEventEntity that is saved\r\n\\return New or updated SystemEventEntity"},
{text: "NSConfigurationAgent.GetWindowPosSize", help: "<b>NSWindowPosSize GetWindowPosSize(Integer p_0)<\/b>\n\nGets a WindowPosSize object.\r\n\r\n\\param p_0 windowPosSizeId: The identifier of the WindowPosSize object\r\n\\return WindowPosSize\r\n"},
{text: "NSConfigurationAgent.SaveWindowPosSize", help: "<b>NSWindowPosSize SaveWindowPosSize(NSWindowPosSize p_0)<\/b>\n\nSaves a window and dialog position and size setting.\r\n\r\n\\param p_0 windowPosSize: The item that is saved\r\n\\return The saved item\r\n"},
{text: "NSConfigurationAgent.GetMyWindowPosSizes", help: "<b>NSWindowPosSize[] GetMyWindowPosSizes()<\/b>\n\nGets the window and dialog position and size settings belonging to the currently logged on user\r\n\r\n\\return Array of window and dialog position and size settings\r\n"},
{text: "NSConfigurationAgent.GetWindowPosSizeList", help: "<b>NSWindowPosSize[] GetWindowPosSizeList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSConfigurationAgent.GetWindowPosSizesOnAssociateId", help: "<b>NSWindowPosSize[] GetWindowPosSizesOnAssociateId(Integer p_0)<\/b>\n\nGets the window and dialog position and size settings belonging to the specified associate\r\n\r\n\\param p_0 associateId: Associate id of the Associate\/Person owning these window settings\r\n\\return Array of window and dialog position and size settings\r\n"},
{text: "NSConfigurationAgent.GetWindowPosSizesOnPersonId", help: "<b>NSWindowPosSize[] GetWindowPosSizesOnPersonId(Integer p_0)<\/b>\n\nGets the window and dialog position and size settings belonging to the specified person\r\n\r\n\\param p_0 personId: Person id of the associate owning these window settings\r\n\\return Array of window and dialog position and size settings\r\n"},
{text: "NSConfigurationAgent.SaveWindowPosSizes", help: "<b>NSWindowPosSize[] SaveWindowPosSizes(NSWindowPosSize[] p_0)<\/b>\n\nSaves a set of window and dialog position and size settings.\r\n\r\n\\param p_0 windowPosSizes: The items that are saved\r\n\\return The saved items\r\n"},
{text: "NSConfigurationAgent.GetWindowPosSizeList", help: "<b>NSWindowPosSizeList[] GetWindowPosSizeList(Integer[] p_0)<\/b>\n\nGets an array of WindowPosSize objects.\r\n\r\n\\param p_0 windowPosSizeIds: The identifiers of the WindowPosSize object\r\n\\return Array of WindowPosSize objects\r\n"},
{text: "NSConfigurationAgent.GetAnyConfiguration", help: "<b>String GetAnyConfiguration(String p_0, String p_1, String p_2, String p_3)<\/b>\n\nGet one defined configuration fragment, with full reference resolution and parsing applied. This is essentially the same service as the GetPageConfiguration, except that this service is not locked to objects of type Page.\r\n\r\n\\param p_0 application: The application name, for instance Six.Web\r\n\\param p_1 instance: The instance name, for instance Main\r\n\\param p_2 item: The configuration item name (first component of file name)\r\n\\param p_3 type: The configuration item type (second component of file name)\r\n\\return Fully resolved and parsed configuration XML, as string.\r\n"},
{text: "NSConfigurationAgent.GetApplicationConfiguration", help: "<b>String GetApplicationConfiguration(String p_0, String p_1)<\/b>\n\nReturn the application configuration. This is a list of pages, with information about the name, main panel and preference mappings of each page.\r\n\r\n\\param p_0 application: The application name, for instance 'SixWeb'\r\n\\param p_1 instance: The instance name for the application, like 'MainInstance'\r\n\\return XML structure containing the application configuration\r\n"},
{text: "NSConfigurationAgent.GetCRMUrl", help: "<b>String GetCRMUrl(String p_0, String p_1, Bool p_2)<\/b>\n\nReturns a valid url based in the soprotocol provided\r\n\r\n\\param p_0 soProtocol: SoProtocol to display. Eg. contact.activityarchive.minipreview\r\n\\param p_1 currents: currents to set. Eg. contact_id=100&person_id=299\r\n\\param p_2 frameless: If true frame is not rendered( Navigationbar, buttonbar and menu )\r\n\\return Url with soprotocol"},
{text: "NSConfigurationAgent.GetCSAuthUrl", help: "<b>String GetCSAuthUrl(String p_0, String p_1, String p_2, String p_3)<\/b>\n\nWill generate an url to the emarketing module\r\n\r\n\\param p_0 language: By setting this parameter, you can change the CS language for the current user.\r\n\\param p_1 programName: In this parameter you must specify which CS program you want to create an URL for. Valid examples are \"ticket\", \"rms\", \"spm\" etc.\r\n\\param p_2 action: Here you can optionally specify the action for the current program. This will enable you to go to a specific screen.\r\n\\param p_3 extraParameters: If an action is specified, you can specify extra parameters here. This can be used to set specific behaviour for the chosen screen\/action. If an empty action is supplied, this parameter will be ignored.\r\n\\return Returns a valid CS URL composed of the give parameters."},
{text: "NSConfigurationAgent.GetCsCgiUrlInternal", help: "<b>String GetCsCgiUrlInternal()<\/b>\n\nThis method will get the host name for CS\r\n\r\n\\return Will get the host name for where CS is installed"},
{text: "NSConfigurationAgent.GetCsProgramUrl", help: "<b>String GetCsProgramUrl(String p_0, String p_1, String p_2, String p_3)<\/b>\n\nThis method will convert a module name into a CS URL.\r\n\r\n\\param p_0 language: By setting this parameter, you can change the CS language for the current user.\r\n\\param p_1 programName: In this parameter you must specify which CS program you want to create an URL for. Valid examples are \"ticket\", \"rms\", \"spm\" etc.\r\n\\param p_2 action: Here you can optionally specify the action for the current program. This will enable you to go to a specific screen.\r\n\\param p_3 extraParameters: If an action is specified, you can specify extra parameters here. This can be used to set specific behaviour for the chosen screen\/action. If an empty action is supplied, this parameter will be ignored.\r\n\\return Returns a valid CS URL composed of the give parameters."},
{text: "NSConfigurationAgent.GetEMarketingUrl", help: "<b>String GetEMarketingUrl(String p_0)<\/b>\n\n\r\n\r\n\\param p_0 language\r\n"},
{text: "NSConfigurationAgent.GetFilterList", help: "<b>String GetFilterList(String p_0, String p_1)<\/b>\n\nGet the list of filters to be used for processing the configuration data for this application.\r\n\r\n\\param p_0 application: The application name, for instance 'SixWeb'\r\n\\param p_1 instance: The instance name for the application, like 'MainInstance'\r\n\\return XML representing the list of filters and any configuration data they may need.\r\n"},
{text: "NSConfigurationAgent.GetHelpDispatcherUrl", help: "<b>String GetHelpDispatcherUrl()<\/b>\n\nWill get the GetHelpDispatcherUrl used by the help system\r\n\r\n\\return URL to be used by the help system"},
{text: "NSConfigurationAgent.GetObjectMapping", help: "<b>String GetObjectMapping(String p_0, String p_1)<\/b>\n\nGet the object mappings, i.e., the what code objects should be instantiated to handle the entities of the client configuration.\r\n\r\n\\param p_0 application: The application name, for instance 'SixWeb'\r\n\\param p_1 instance: The instance name for the application, like 'MainInstance'\r\n\\return XML containing the object mappings, including assembly and class names\r\n"},
{text: "NSConfigurationAgent.GetPageConfiguration", help: "<b>String GetPageConfiguration(String p_0, String p_1, String p_2)<\/b>\n\nGet the configuration for one whole web page, including all its panels etc.  totally asynchronous items like menus are not included, but all references are resolved and all special processing is applied.\r\n\r\n\\param p_0 application: The application name, for instance 'SixWeb\r\n\\param p_1 instance: The instance name for the application, like 'MainInstance'\r\n\\param p_2 page: Page name, must correspond to one of the pages in the Application Configuration\r\n\\return XML containing the configuration for the given page, from the page down to the control level.\r\n"},
{text: "NSConfigurationAgent.GetRefreshedPageConfiguration", help: "<b>String GetRefreshedPageConfiguration(String p_0, String p_1, String p_2)<\/b>\n\nGet the configuration for one whole web page, including all its panels etc.  totally asynchronous items like menus are not included, but all references are resolved and all special processing is applied. Does not use cache for fetching, but updates the cache with refreshed configuration.\r\n\r\n\\param p_0 application: The application name, for instance 'SixWeb\r\n\\param p_1 instance: The instance name for the application, like 'MainInstance'\r\n\\param p_2 page: Page name, must correspond to one of the pages in the Application Configuration\r\n\\return XML containing the configuration for the given page, from the page down to the control level."},
{text: "NSConfigurationAgent.GetWwwUrl", help: "<b>String GetWwwUrl(String p_0)<\/b>\n\nWill get the default URL used for the logo, from the [NetServices] PageUrl preferencec, with tags substituted.\r\n\r\n\\param p_0 client: The name for the client application, like 'CS' or 'SM.web', used for the <clie> variable\r\n\\return URL to be used when clicking the logo"},
{text: "NSConfigurationAgent.GetWwwUrlForSMWeb", help: "<b>String GetWwwUrlForSMWeb()<\/b>\n\nReturns the URL used for the logo by the SM.web client. Uses urldispatch.aspx\r\n\r\n\\return Link to urldispatch.aspx tagged with [SOSITEURL]"},
{text: "NSConfigurationAgent.ClearConfigurationCache", help: "<b>Void ClearConfigurationCache(String p_0, String p_1, Bool p_2)<\/b>\n\nConfiguration XML's may be expensive to build and parse, and are therefore cached to the database. <para\/>Cahcing is per application\/instance\/associate, and can be turned off through the config file. <para\/>If caching is on, and the configuration is changed, it is necessary to clear the cached configurations from the database, through this call.<para\/>Note that changes to the externalapplication table require cache invalidation. SoAdmin will do so automatically.\r\n\r\n\\param p_0 application: The application name, for instance 'SixWeb'\r\n\\param p_1 instance: The instance name for the application, like 'MainInstance'\r\n\\param p_2 forAllAssociates: If false, only the current associate's configuration is cleared. If true, configurations are cleared for all associates.\r\n\\return There is no return value.\r\n"},
{text: "NSConfigurationAgent.DeleteDiaryViewEntity", help: "<b>Void DeleteDiaryViewEntity(Integer p_0)<\/b>\n\nDeletes the DiaryViewEntity\r\n\r\n\\param p_0 diaryViewEntityId: The identity of the DiaryViewEntity\r\n"},
{text: "NSConfigurationAgent.DeleteSystemEventEntity", help: "<b>Void DeleteSystemEventEntity(Integer p_0)<\/b>\n\nDeletes the SystemEventEntity\r\n\r\n\\param p_0 systemEventEntityId: The identity of the SystemEventEntity"},
{text: "NSConfigurationAgent.DeleteWindowPosSize", help: "<b>Void DeleteWindowPosSize(Integer p_0)<\/b>\n\nDeletes a window and dialog position and size setting.\r\n\r\n\\param p_0 windowPosSizeId: Id of the window and dialog position and size settings item.\r\n"},
{text: "NSConfigurationAgent.SaveDiaryViewEntity", help: "<b>Void SaveDiaryViewEntity(NSDiaryViewEntity p_0)<\/b>\n\nUpdates the existing DiaryViewEntity or creates a new DiaryViewEntity if the id parameter is empty\r\n\r\n\\param p_0 diaryViewEntity: The DiaryViewEntity that is saved.\r\n\\return New or updated DiaryViewEntity\r\n"},
{text: "Void.NSContact", help: "<b>NSContact<\/b>\n\n"},
{text: "NSContact.GetIsOwnerContact", help: "<b>Bool GetIsOwnerContact()<\/b>\n\nIs the contact an owner contact.  This means that all persons on this contact can on only be internal users and not external users.\r\n\r\n\\return Bool"},
{text: "NSContact.GetActiveErpLinks", help: "<b>Integer GetActiveErpLinks()<\/b>\n\nThe number of active erp links\r\n\r\n\\return Integer"},
{text: "NSContact.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nOur contact\r\n\r\n\\return Integer"},
{text: "NSContact.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSContact.GetCountryId", help: "<b>Integer GetCountryId()<\/b>\n\nCountry\r\n\r\n\\return Integer"},
{text: "NSContact.GetAddress", help: "<b>NSAddress GetAddress()<\/b>\n\nContact address as  a list of LocalizedFieldList objects. Used to store localized information such as formatted address data. Suitable for passing to an address control for display.\n\t\/\/\/\r\n\r\n\\return Address"},
{text: "NSContact.GetAddress", help: "<b>NSLocalizedField[][] GetAddress()<\/b>\n\n"},
{text: "NSContact.GetAssociateFullName", help: "<b>String GetAssociateFullName()<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\return String"},
{text: "NSContact.GetBusinessName", help: "<b>String GetBusinessName()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSContact.GetCategoryName", help: "<b>String GetCategoryName()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSContact.GetCity", help: "<b>String GetCity()<\/b>\n\nCity corresponding to zip code\r\n\r\n\\return String"},
{text: "NSContact.GetCountryName", help: "<b>String GetCountryName()<\/b>\n\nName of country in installed language\r\n\r\n\\return String"},
{text: "NSContact.GetDepartment", help: "<b>String GetDepartment()<\/b>\n\nDepartment\r\n\r\n\\return String"},
{text: "NSContact.GetDirectPhone", help: "<b>String GetDirectPhone()<\/b>\n\nThe contacts phone\r\n\r\n\\return String"},
{text: "NSContact.GetEmailAddress", help: "<b>String GetEmailAddress()<\/b>\n\nThe contact email address\r\n\r\n\\return String"},
{text: "NSContact.GetEmailAddressName", help: "<b>String GetEmailAddressName()<\/b>\n\nVisible field\r\n\r\n\\return String"},
{text: "NSContact.GetFormattedAddress", help: "<b>String GetFormattedAddress()<\/b>\n\nThe contact's address, formatted with linebreaks and spaces into a single string.\r\n\r\n\\return String"},
{text: "NSContact.GetFullName", help: "<b>String GetFullName()<\/b>\n\n\\return String"},
{text: "NSContact.GetKananame", help: "<b>String GetKananame()<\/b>\n\nContact kana name, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSContact.GetName", help: "<b>String GetName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSContact.GetOrgNr", help: "<b>String GetOrgNr()<\/b>\n\nVAT number or similar\r\n\r\n\\return String"},
{text: "NSContact.GetURL", help: "<b>String GetURL()<\/b>\n\nThe internet address to this contact\r\n\r\n\\return String"},
{text: "NSContact.GetURLName", help: "<b>String GetURLName()<\/b>\n\nVisible field\r\n\r\n\\return String"},
{text: "NSContact.SetActiveErpLinks", help: "<b>Void SetActiveErpLinks(Integer p_0)<\/b>\n\nThe number of active erp links\r\n\r\n\\param p_0 ActiveErpLinks: Integer\r\n\\return Integer"},
{text: "NSContact.SetAddress", help: "<b>Void SetAddress(NSAddress p_0)<\/b>\n\nContact address as  a list of LocalizedFieldList objects. Used to store localized information such as formatted address data. Suitable for passing to an address control for display.\n\t\/\/\/\r\n\r\n\\param p_0 Address: Address\r\n\\return Address"},
{text: "NSContact.SetAddress", help: "<b>Void SetAddress(NSLocalizedField[][] p_0)<\/b>\n\n"},
{text: "NSContact.SetAssociateFullName", help: "<b>Void SetAssociateFullName(String p_0)<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\param p_0 AssociateFullName: String\r\n\\return String"},
{text: "NSContact.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nOur contact\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSContact.SetBusinessName", help: "<b>Void SetBusinessName(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 BusinessName: String\r\n\\return String"},
{text: "NSContact.SetCategoryName", help: "<b>Void SetCategoryName(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 CategoryName: String\r\n\\return String"},
{text: "NSContact.SetCity", help: "<b>Void SetCity(String p_0)<\/b>\n\nCity corresponding to zip code\r\n\r\n\\param p_0 City: String\r\n\\return String"},
{text: "NSContact.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSContact.SetCountryId", help: "<b>Void SetCountryId(Integer p_0)<\/b>\n\nCountry\r\n\r\n\\param p_0 CountryId: Integer\r\n\\return Integer"},
{text: "NSContact.SetCountryName", help: "<b>Void SetCountryName(String p_0)<\/b>\n\nName of country in installed language\r\n\r\n\\param p_0 CountryName: String\r\n\\return String"},
{text: "NSContact.SetDepartment", help: "<b>Void SetDepartment(String p_0)<\/b>\n\nDepartment\r\n\r\n\\param p_0 Department: String\r\n\\return String"},
{text: "NSContact.SetDirectPhone", help: "<b>Void SetDirectPhone(String p_0)<\/b>\n\nThe contacts phone\r\n\r\n\\param p_0 DirectPhone: String\r\n\\return String"},
{text: "NSContact.SetEmailAddress", help: "<b>Void SetEmailAddress(String p_0)<\/b>\n\nThe contact email address\r\n\r\n\\param p_0 EmailAddress: String\r\n\\return String"},
{text: "NSContact.SetEmailAddressName", help: "<b>Void SetEmailAddressName(String p_0)<\/b>\n\nVisible field\r\n\r\n\\param p_0 EmailAddressName: String\r\n\\return String"},
{text: "NSContact.SetFormattedAddress", help: "<b>Void SetFormattedAddress(String p_0)<\/b>\n\nThe contact's address, formatted with linebreaks and spaces into a single string.\r\n\r\n\\param p_0 FormattedAddress: String\r\n\\return String"},
{text: "NSContact.SetFullName", help: "<b>Void SetFullName(String p_0)<\/b>\n\n\\param p_0 FullName: String\r\n\\return String"},
{text: "NSContact.SetIsOwnerContact", help: "<b>Void SetIsOwnerContact(Bool p_0)<\/b>\n\nIs the contact an owner contact.  This means that all persons on this contact can on only be internal users and not external users.\r\n\r\n\\param p_0 IsOwnerContact: Bool\r\n\\return Bool"},
{text: "NSContact.SetKananame", help: "<b>Void SetKananame(String p_0)<\/b>\n\nContact kana name, used in Japanese versions only\r\n\r\n\\param p_0 Kananame: String\r\n\\return String"},
{text: "NSContact.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSContact.SetOrgNr", help: "<b>Void SetOrgNr(String p_0)<\/b>\n\nVAT number or similar\r\n\r\n\\param p_0 OrgNr: String\r\n\\return String"},
{text: "NSContact.SetURL", help: "<b>Void SetURL(String p_0)<\/b>\n\nThe internet address to this contact\r\n\r\n\\param p_0 URL: String\r\n\\return String"},
{text: "NSContact.SetURLName", help: "<b>Void SetURLName(String p_0)<\/b>\n\nVisible field\r\n\r\n\\param p_0 URLName: String\r\n\\return String"},
{text: "Void.NSContactActivity", help: "<b>NSContactActivity<\/b>\n\n"},
{text: "NSContactActivity.GetActionTime", help: "<b>DateTime GetActionTime()<\/b>\n\nThe time of the activity. If more than one activity has occured on the contact, the last activity time is shown.\r\n\r\n\\return DateTime"},
{text: "NSContactActivity.GetAction", help: "<b>Integer GetAction()<\/b>\n\nThe activity that has occured on this contact.\r\n\r\n\\return Integer"},
{text: "NSContactActivity.GetActionId", help: "<b>Integer GetActionId()<\/b>\n\nId of the last element an activity was found on. I.e. AppointmentId, ContactId, or PersonId\r\n\r\n\\return Integer"},
{text: "NSContactActivity.GetActivityPersonId", help: "<b>Integer GetActivityPersonId()<\/b>\n\nId of the person causing the activity.\r\n\r\n\\return Integer"},
{text: "NSContactActivity.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nOur contact\r\n\r\n\\return Integer"},
{text: "NSContactActivity.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSContactActivity.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nThe person id\r\n\r\n\\return Integer"},
{text: "NSContactActivity.GetActivityPersonName", help: "<b>String GetActivityPersonName()<\/b>\n\nThe person that carried out the activity on the contact.\r\n\r\n\\return String"},
{text: "NSContactActivity.GetAssociateFullName", help: "<b>String GetAssociateFullName()<\/b>\n\nThe contact's owner\r\n\r\n\\return String"},
{text: "NSContactActivity.GetCategory", help: "<b>String GetCategory()<\/b>\n\nThe contact category.\r\n\r\n\\return String"},
{text: "NSContactActivity.GetDepartment", help: "<b>String GetDepartment()<\/b>\n\nDepartment\r\n\r\n\\return String"},
{text: "NSContactActivity.GetName", help: "<b>String GetName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSContactActivity.GetOrgNr", help: "<b>String GetOrgNr()<\/b>\n\nVAT number or similar\r\n\r\n\\return String"},
{text: "NSContactActivity.GetURL", help: "<b>String GetURL()<\/b>\n\nURL address\r\n\r\n\\return String"},
{text: "NSContactActivity.SetAction", help: "<b>Void SetAction(Integer p_0)<\/b>\n\nThe activity that has occured on this contact.\r\n\r\n\\param p_0 Action: Integer\r\n\\return Integer"},
{text: "NSContactActivity.SetActionId", help: "<b>Void SetActionId(Integer p_0)<\/b>\n\nId of the last element an activity was found on. I.e. AppointmentId, ContactId, or PersonId\r\n\r\n\\param p_0 ActionId: Integer\r\n\\return Integer"},
{text: "NSContactActivity.SetActionTime", help: "<b>Void SetActionTime(DateTime p_0)<\/b>\n\nThe time of the activity. If more than one activity has occured on the contact, the last activity time is shown.\r\n\r\n\\param p_0 ActionTime: DateTime\r\n\\return DateTime"},
{text: "NSContactActivity.SetActivityPersonId", help: "<b>Void SetActivityPersonId(Integer p_0)<\/b>\n\nId of the person causing the activity.\r\n\r\n\\param p_0 ActivityPersonId: Integer\r\n\\return Integer"},
{text: "NSContactActivity.SetActivityPersonName", help: "<b>Void SetActivityPersonName(String p_0)<\/b>\n\nThe person that carried out the activity on the contact.\r\n\r\n\\param p_0 ActivityPersonName: String\r\n\\return String"},
{text: "NSContactActivity.SetAssociateFullName", help: "<b>Void SetAssociateFullName(String p_0)<\/b>\n\nThe contact's owner\r\n\r\n\\param p_0 AssociateFullName: String\r\n\\return String"},
{text: "NSContactActivity.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nOur contact\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSContactActivity.SetCategory", help: "<b>Void SetCategory(String p_0)<\/b>\n\nThe contact category.\r\n\r\n\\param p_0 Category: String\r\n\\return String"},
{text: "NSContactActivity.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSContactActivity.SetDepartment", help: "<b>Void SetDepartment(String p_0)<\/b>\n\nDepartment\r\n\r\n\\param p_0 Department: String\r\n\\return String"},
{text: "NSContactActivity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSContactActivity.SetOrgNr", help: "<b>Void SetOrgNr(String p_0)<\/b>\n\nVAT number or similar\r\n\r\n\\param p_0 OrgNr: String\r\n\\return String"},
{text: "NSContactActivity.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nThe person id\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSContactActivity.SetURL", help: "<b>Void SetURL(String p_0)<\/b>\n\nURL address\r\n\r\n\\param p_0 URL: String\r\n\\return String"},
{text: "Void.NSContactAgent", help: "<b>NSContactAgent<\/b>\n\nCollection of all services that works with Contact (company) data."},
{text: "NSContactAgent.IsNumberValid", help: "<b>Bool IsNumberValid(Integer p_0, String p_1)<\/b>\n\nChecks if the number is unique or required.  The setting is configured from admin under system options.\r\n\r\n\\param p_0 contactId\r\n\\param p_1 number\r\n"},
{text: "NSContactAgent.Copy", help: "<b>Integer Copy(Integer p_0, String p_1, String p_2, Bool p_3)<\/b>\n\nCopy a contact. Activities and related data will be ignored\r\n\r\n\\param p_0 sourceContactId: The id of the contact to copy\r\n\\param p_1 destinationContactName: The name of the destination contact\r\n\\param p_2 destinationContactDepartment: The department of the destination contact\r\n\\param p_3 copyPersons: If true, persons will be copied from source contact\r\n\\return Id of copied contact\r\n"},
{text: "NSContactAgent.CreateNewEntry", help: "<b>Integer CreateNewEntry(NSDuplicateEntry p_0)<\/b>\n\nCreates a new contact based on external duplicate\r\n\r\n\\param p_0 duplicate: The duplicate to create a new entry based upon\r\n\\return The database identity of the newly created entry\r\n"},
{text: "NSContactAgent.GetAddress", help: "<b>NSAddress GetAddress(Integer p_0)<\/b>\n\nGets the contact's localized address.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\return The address as LocalizedField[][].\r\n"},
{text: "NSContactAgent.GetAddressByCountry", help: "<b>NSAddress GetAddressByCountry(Integer p_0, Integer p_1)<\/b>\n\nGets the contact's localized address.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 countryId\r\n\\return The address as LocalizedField[][].\r\n"},
{text: "NSContactAgent.SaveQuoteVersionAddress", help: "<b>NSAddress SaveQuoteVersionAddress(Integer p_0, NSAddress p_1, Integer p_2, Integer p_3)<\/b>\n\nSave a custom quote version address.\r\n\r\n\\param p_0 quoteVersionId: The version to save the address on.\r\n\\param p_1 address: The address to save on the quote version.\r\n\\param p_2 addressType: Should be either QuoteBillingAddress or QuoteShippingAddress\r\n\\param p_3 countryId: The country for the custom address\r\n\\return The saved addresses."},
{text: "NSContactAgent.GetQuoteVersionAddresses", help: "<b>NSAddress[] GetQuoteVersionAddresses(Integer p_0)<\/b>\n\nGet the associated billing and invoice quote version addresses. These addresses might be address on the contact, or a custom address.\r\n\r\n\\param p_0 quoteVersionId: The version to get the addresses for.\r\n\\return The quote version addresses. Invoice and billing address, in that order."},
{text: "NSContactAgent.GetContact", help: "<b>NSContact GetContact(Integer p_0)<\/b>\n\nGets a Contact object.\r\n\r\n\\param p_0 contactId: The identifier of the Contact object\r\n\\return Contact\r\n"},
{text: "NSContactAgent.GetContactList", help: "<b>NSContact[] GetContactList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSContactAgent.GetMyContacts", help: "<b>NSContact[] GetMyContacts()<\/b>\n\nGetting the contacts where the user currently logged in is set as contact owner.\r\n\r\n\\return Array of contacts\r\n"},
{text: "NSContactAgent.GetMyRecentContacts", help: "<b>NSContact[] GetMyRecentContacts(Integer p_0)<\/b>\n\nMethod that returns a set of initial contacts. This could be the contacts in a favorites selection, the history list, the diary, or from all sources. If retrieved from the diary it will get appointments for the current and the next day.\r\n\r\n\\param p_0 sourceType: The source where the contacts are retrieved from (Favorites, History, Diary)\r\n\\return Arrayof contacts\r\n"},
{text: "NSContactAgent.GetMyActiveContacts", help: "<b>NSContactActivity[] GetMyActiveContacts(DateTime p_0, Integer[] p_1, Integer p_2)<\/b>\n\nReturns the contacts where there has been activity since activityStartTime. If activityStartTime is larger than the current date, all contacts with activity since last log-out are returned. The result set can be filtered by category and action type.\r\n\r\n\\param p_0 activityStartTime: The start time of the activities. If the start time is set to a future date; activites since the user last logged out are returned.\r\n\\param p_1 contactCategories: Integer array of categories to filter on. If the array is empty contacts from all categories will be selected.\r\n\\param p_2 actionType: The type of action that has occured. E.g. updates, deletes, new appointments, etc.\r\n\\return Array of contacts where there have been activity in the period.\r\n"},
{text: "NSContactAgent.ChangeCountry", help: "<b>NSContactEntity ChangeCountry(NSContactEntity p_0, Integer p_1)<\/b>\n\nChange country regenerates the default values and localized information such as phone number and address format\r\n\r\n\\param p_0 contactEntity\r\n\\param p_1 toCountryId: The country to switch to\r\n"},
{text: "NSContactAgent.CreateDefaultContactEntity", help: "<b>NSContactEntity CreateDefaultContactEntity()<\/b>\n\nLoading default values into a new ContactEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ContactEntity with default values\r\n"},
{text: "NSContactAgent.GetContactEntity", help: "<b>NSContactEntity GetContactEntity(Integer p_0)<\/b>\n\nGets a ContactEntity object.\r\n\r\n\\param p_0 contactEntityId: The identifier of the ContactEntity object\r\n\\return ContactEntity\r\n"},
{text: "NSContactAgent.GetContactWithPersons", help: "<b>NSContactEntity GetContactWithPersons(Integer p_0)<\/b>\n\nReturns the contact with all the contact persons belonging to the contact\r\n\r\n\\param p_0 contactId: The id of the contact.\r\n\\return ContactEntity with all data and persons.\r\n"},
{text: "NSContactAgent.GetMyBizCard", help: "<b>NSContactEntity GetMyBizCard()<\/b>\n\nReturns all data needed to display the logged on person's business card. That is company, person, and company interest data.\r\n\r\n\\return The contact object with persons and interests\r\n"},
{text: "NSContactAgent.GetMyContact", help: "<b>NSContactEntity GetMyContact()<\/b>\n\nGets the contact belonging to the currently logged on user.\r\n\r\n\\return The Contact\r\n"},
{text: "NSContactAgent.SaveContactEntity", help: "<b>NSContactEntity SaveContactEntity(NSContactEntity p_0)<\/b>\n\nUpdates the existing ContactEntity or creates a new ContactEntity if the id parameter is empty\r\n\r\n\\param p_0 contactEntity: The ContactEntity that is saved\r\n\\return New or updated ContactEntity"},
{text: "NSContactAgent.GetContactList", help: "<b>NSContactList[] GetContactList(Integer[] p_0)<\/b>\n\nGets an array of Contact objects.\r\n\r\n\\param p_0 contactIds: The identifiers of the Contact object\r\n\\return Array of Contact objects\r\n"},
{text: "NSContactAgent.GetDuplicates", help: "<b>NSDuplicateEntry[] GetDuplicates(String p_0)<\/b>\n\nGet duplicates(exact or similar in the database) based on the name\r\n\r\n\\param p_0 name: Name used for lookup\r\n\\return Any records matching the specified name\r\n"},
{text: "NSContactAgent.GetNameDepartmentDuplicates", help: "<b>NSDuplicateEntry[] GetNameDepartmentDuplicates(String p_0, String p_1)<\/b>\n\n\r\n\r\n\\param p_0 name\r\n\\param p_1 department\r\n"},
{text: "NSContactAgent.GetDuplicateRules", help: "<b>NSDuplicateRule[] GetDuplicateRules()<\/b>\n\nRetrieve all available duplicate rules for contact\r\n\r\n\\return All available duplicate rules\r\n"},
{text: "NSContactAgent.GetAddress", help: "<b>NSLocalizedField[][] GetAddress(Integer p_0)<\/b>\n\n"},
{text: "NSContactAgent.GetAddressByCountry", help: "<b>NSLocalizedField[][] GetAddressByCountry(Integer p_0, Integer p_1)<\/b>\n\n"},
{text: "NSContactAgent.GetPersons", help: "<b>NSPerson[] GetPersons(Integer p_0)<\/b>\n\nReturns an array of all the contact persons for the company card.\r\n\r\n\\param p_0 contactId\r\n\\return Array of Persons\r\n"},
{text: "NSContactAgent.AddPerson", help: "<b>NSPersonEntity AddPerson(Integer p_0, NSPersonEntity p_1)<\/b>\n\n\r\n\r\n\\param p_0 contactId\r\n\\param p_1 newPersonEntity\r\n"},
{text: "NSContactAgent.DeleteContactEntity", help: "<b>Void DeleteContactEntity(Integer p_0)<\/b>\n\nDeletes the ContactEntity\r\n\r\n\\param p_0 contactEntityId: The identity of the ContactEntity\r\n"},
{text: "NSContactAgent.Merge", help: "<b>Void Merge(Integer p_0, Integer p_1, Bool p_2, Bool p_3)<\/b>\n\nMerge two contacts. The destination contact will remain.\r\n\r\n\\param p_0 sourceContactId: Source contact to merge from\r\n\\param p_1 destinationContactId: Destination contact to merge into\r\n\\param p_2 mergeIdenticalPersons: Persons with identical names will be merged\r\n\\param p_3 replaceEmptyFieldsOnDestination: If true, empty fields on destination will be replaced by values from source.\r\n"},
{text: "NSContactAgent.SaveContactEntity", help: "<b>Void SaveContactEntity(NSContactEntity p_0)<\/b>\n\nUpdates the existing ContactEntity or creates a new ContactEntity if the id parameter is empty\r\n\r\n\\param p_0 contactEntity: The ContactEntity that is saved.\r\n\\return New or updated ContactEntity\r\n"},
{text: "NSContactAgent.SetDuplicateRulesStatus", help: "<b>Void SetDuplicateRulesStatus(NSDuplicateRule[] p_0)<\/b>\n\nSet which duplicate rules should be active or not\r\n\r\n\\param p_0 rules: Duplicate rules to update active status for\r\n"},
{text: "Void.NSContactEntity", help: "<b>NSContactEntity<\/b>\n\nThe Contact Service. The service implements all services working with the Contact object"},
{text: "NSContactEntity.GetNoMailing", help: "<b>Bool GetNoMailing()<\/b>\n\nSpam filter. Indicates if this contact should retrieve advertising.\r\n\r\n\\return Bool"},
{text: "NSContactEntity.GetXstop", help: "<b>Bool GetXstop()<\/b>\n\nSTOP flag\r\n\r\n\\return Bool"},
{text: "NSContactEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nDate registered\r\n\r\n\\return DateTime"},
{text: "NSContactEntity.GetDbiLastModified", help: "<b>DateTime GetDbiLastModified()<\/b>\n\nWhen the entry was last modified.\r\n\r\n\\return DateTime"},
{text: "NSContactEntity.GetDbiLastSyncronized", help: "<b>DateTime GetDbiLastSyncronized()<\/b>\n\nLast external syncronization.\r\n\r\n\\return DateTime"},
{text: "NSContactEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nDate last updated\r\n\r\n\\return DateTime"},
{text: "NSContactEntity.GetActiveErpLinks", help: "<b>Integer GetActiveErpLinks()<\/b>\n\nThe number of active erp links\r\n\r\n\\return Integer"},
{text: "NSContactEntity.GetActiveInterests", help: "<b>Integer GetActiveInterests()<\/b>\n\nThe number of active interests.\r\n\r\n\\return Integer"},
{text: "NSContactEntity.GetActiveStatusMonitorId", help: "<b>Integer GetActiveStatusMonitorId()<\/b>\n\nActive status monitor identity with the lowest rank for contact\r\n\r\n\\return Integer"},
{text: "NSContactEntity.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSContactEntity.GetDbiAgentId", help: "<b>Integer GetDbiAgentId()<\/b>\n\nIntegration agent (eJournal)\r\n\r\n\\return Integer"},
{text: "NSContactEntity.GetDeleted", help: "<b>Integer GetDeleted()<\/b>\n\nIf nonzero, then this contact is 'deleted' and should generally not be shown\r\n\r\n\\return Integer"},
{text: "NSContactEntity.GetGroupId", help: "<b>Integer GetGroupId()<\/b>\n\nGroup id of original owning associate, semantics like appnt.grp_id\r\n\r\n\\return Integer"},
{text: "NSContactEntity.GetSource", help: "<b>Integer GetSource()<\/b>\n\nHow did we get this contact? For future integration needs\r\n\r\n\\return Integer"},
{text: "NSContactEntity.GetExtraFields", help: "<b>Map GetExtraFields()<\/b>\n\n\\return Map"},
{text: "NSContactEntity.GetUserDefinedFields", help: "<b>Map GetUserDefinedFields()<\/b>\n\n\\return Map"},
{text: "NSContactEntity.GetAddress", help: "<b>NSAddress GetAddress()<\/b>\n\n\\return Address"},
{text: "NSContactEntity.GetAssociate", help: "<b>NSAssociate GetAssociate()<\/b>\n\nThe person that owns this contact.\r\n\r\n\\return Associate"},
{text: "NSContactEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nThe person that created the contact\r\n\r\n\\return Associate"},
{text: "NSContactEntity.GetSupportAssociate", help: "<b>NSAssociate GetSupportAssociate()<\/b>\n\n\\return Associate"},
{text: "NSContactEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nThe person that last updated the contact\r\n\r\n\\return Associate"},
{text: "NSContactEntity.GetBusiness", help: "<b>NSBusiness GetBusiness()<\/b>\n\nThe business that the contact is associated with. The GUI forces the user to enter a business type.\r\n\r\n\\return Business"},
{text: "NSContactEntity.GetCategory", help: "<b>NSCategory GetCategory()<\/b>\n\nThe category that is set on the company. The GUI forces the user to enter a category type\r\n\r\n\\return Category"},
{text: "NSContactEntity.GetCountry", help: "<b>NSCountry GetCountry()<\/b>\n\nThe country this contact is located in. The country a contact is saved with, affects the phone number format, and the address layout.\r\n\r\n\\return Country"},
{text: "NSContactEntity.GetCustomerLanguage", help: "<b>NSCustomerLanguage GetCustomerLanguage()<\/b>\n\n\\return CustomerLanguage"},
{text: "NSContactEntity.GetEmails", help: "<b>NSEntityElement[] GetEmails()<\/b>\n\nThe contact's email\r\n\r\n\\return EntityElementArray"},
{text: "NSContactEntity.GetFaxes", help: "<b>NSEntityElement[] GetFaxes()<\/b>\n\nThe contact's fax numbers\r\n\r\n\\return EntityElementArray"},
{text: "NSContactEntity.GetPhones", help: "<b>NSEntityElement[] GetPhones()<\/b>\n\nThe contact's phone numbers\r\n\r\n\\return EntityElementArray"},
{text: "NSContactEntity.GetUrls", help: "<b>NSEntityElement[] GetUrls()<\/b>\n\nThe contact's internet adresses\r\n\r\n\\return EntityElementArray"},
{text: "NSContactEntity.GetAddress", help: "<b>NSLocalizedField[][] GetAddress()<\/b>\n\n"},
{text: "NSContactEntity.GetSupportPerson", help: "<b>NSPerson GetSupportPerson()<\/b>\n\n\\return Person"},
{text: "NSContactEntity.GetPersons", help: "<b>NSPerson[] GetPersons()<\/b>\n\nThe persons belonging to the contact.\r\n\r\n\\return PersonArray"},
{text: "NSContactEntity.GetInterests", help: "<b>NSSelectableMDOListItem[] GetInterests()<\/b>\n\nThe contact's available and selected interests.\r\n\r\n\\return SelectableMDOListItemArray"},
{text: "NSContactEntity.GetTicketPriority", help: "<b>NSTicketPriority GetTicketPriority()<\/b>\n\n\\return TicketPriority"},
{text: "NSContactEntity.GetDbiKey", help: "<b>String GetDbiKey()<\/b>\n\nThe primary key for the integrated entry in the external datasource.\r\n\r\n\\return String"},
{text: "NSContactEntity.GetDepartment", help: "<b>String GetDepartment()<\/b>\n\nDepartment\r\n\r\n\\return String"},
{text: "NSContactEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of the contact\r\n\r\n\\return String"},
{text: "NSContactEntity.GetKananame", help: "<b>String GetKananame()<\/b>\n\nContact kana name, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSContactEntity.GetName", help: "<b>String GetName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSContactEntity.GetNumber1", help: "<b>String GetNumber1()<\/b>\n\nAlphanumeric user field\r\n\r\n\\return String"},
{text: "NSContactEntity.GetNumber2", help: "<b>String GetNumber2()<\/b>\n\nAlphanumeric user field\r\n\r\n\\return String"},
{text: "NSContactEntity.GetOrgNr", help: "<b>String GetOrgNr()<\/b>\n\nVAT number or similar\r\n\r\n\\return String"},
{text: "NSContactEntity.SetActiveErpLinks", help: "<b>Void SetActiveErpLinks(Integer p_0)<\/b>\n\nThe number of active erp links\r\n\r\n\\param p_0 ActiveErpLinks: Integer\r\n\\return Integer"},
{text: "NSContactEntity.SetActiveInterests", help: "<b>Void SetActiveInterests(Integer p_0)<\/b>\n\nThe number of active interests.\r\n\r\n\\param p_0 ActiveInterests: Integer\r\n\\return Integer"},
{text: "NSContactEntity.SetActiveStatusMonitorId", help: "<b>Void SetActiveStatusMonitorId(Integer p_0)<\/b>\n\nActive status monitor identity with the lowest rank for contact\r\n\r\n\\param p_0 ActiveStatusMonitorId: Integer\r\n\\return Integer"},
{text: "NSContactEntity.SetAddress", help: "<b>Void SetAddress(NSAddress p_0)<\/b>\n\n\\param p_0 Address: Address\r\n\\return Address"},
{text: "NSContactEntity.SetAddress", help: "<b>Void SetAddress(NSLocalizedField[][] p_0)<\/b>\n\n"},
{text: "NSContactEntity.SetAssociate", help: "<b>Void SetAssociate(NSAssociate p_0)<\/b>\n\nThe person that owns this contact.\r\n\r\n\\param p_0 Associate: Associate\r\n\\return Associate"},
{text: "NSContactEntity.SetBusiness", help: "<b>Void SetBusiness(NSBusiness p_0)<\/b>\n\nThe business that the contact is associated with. The GUI forces the user to enter a business type.\r\n\r\n\\param p_0 Business: Business\r\n\\return Business"},
{text: "NSContactEntity.SetCategory", help: "<b>Void SetCategory(NSCategory p_0)<\/b>\n\nThe category that is set on the company. The GUI forces the user to enter a category type\r\n\r\n\\param p_0 Category: Category\r\n\\return Category"},
{text: "NSContactEntity.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSContactEntity.SetCountry", help: "<b>Void SetCountry(NSCountry p_0)<\/b>\n\nThe country this contact is located in. The country a contact is saved with, affects the phone number format, and the address layout.\r\n\r\n\\param p_0 Country: Country\r\n\\return Country"},
{text: "NSContactEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nThe person that created the contact\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSContactEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nDate registered\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSContactEntity.SetCustomerLanguage", help: "<b>Void SetCustomerLanguage(NSCustomerLanguage p_0)<\/b>\n\n\\param p_0 CustomerLanguage: CustomerLanguage\r\n\\return CustomerLanguage"},
{text: "NSContactEntity.SetDbiAgentId", help: "<b>Void SetDbiAgentId(Integer p_0)<\/b>\n\nIntegration agent (eJournal)\r\n\r\n\\param p_0 DbiAgentId: Integer\r\n\\return Integer"},
{text: "NSContactEntity.SetDbiKey", help: "<b>Void SetDbiKey(String p_0)<\/b>\n\nThe primary key for the integrated entry in the external datasource.\r\n\r\n\\param p_0 DbiKey: String\r\n\\return String"},
{text: "NSContactEntity.SetDbiLastModified", help: "<b>Void SetDbiLastModified(DateTime p_0)<\/b>\n\nWhen the entry was last modified.\r\n\r\n\\param p_0 DbiLastModified: DateTime\r\n\\return DateTime"},
{text: "NSContactEntity.SetDbiLastSyncronized", help: "<b>Void SetDbiLastSyncronized(DateTime p_0)<\/b>\n\nLast external syncronization.\r\n\r\n\\param p_0 DbiLastSyncronized: DateTime\r\n\\return DateTime"},
{text: "NSContactEntity.SetDeleted", help: "<b>Void SetDeleted(Integer p_0)<\/b>\n\nIf nonzero, then this contact is 'deleted' and should generally not be shown\r\n\r\n\\param p_0 Deleted: Integer\r\n\\return Integer"},
{text: "NSContactEntity.SetDepartment", help: "<b>Void SetDepartment(String p_0)<\/b>\n\nDepartment\r\n\r\n\\param p_0 Department: String\r\n\\return String"},
{text: "NSContactEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of the contact\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSContactEntity.SetEmails", help: "<b>Void SetEmails(NSEntityElement[] p_0)<\/b>\n\nThe contact's email\r\n\r\n\\param p_0 Emails: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSContactEntity.SetExtraFields", help: "<b>Void SetExtraFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSContactEntity.SetFaxes", help: "<b>Void SetFaxes(NSEntityElement[] p_0)<\/b>\n\nThe contact's fax numbers\r\n\r\n\\param p_0 Faxes: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSContactEntity.SetGroupId", help: "<b>Void SetGroupId(Integer p_0)<\/b>\n\nGroup id of original owning associate, semantics like appnt.grp_id\r\n\r\n\\param p_0 GroupId: Integer\r\n\\return Integer"},
{text: "NSContactEntity.SetInterests", help: "<b>Void SetInterests(NSSelectableMDOListItem[] p_0)<\/b>\n\nThe contact's available and selected interests.\r\n\r\n\\param p_0 Interests: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSContactEntity.SetKananame", help: "<b>Void SetKananame(String p_0)<\/b>\n\nContact kana name, used in Japanese versions only\r\n\r\n\\param p_0 Kananame: String\r\n\\return String"},
{text: "NSContactEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSContactEntity.SetNoMailing", help: "<b>Void SetNoMailing(Bool p_0)<\/b>\n\nSpam filter. Indicates if this contact should retrieve advertising.\r\n\r\n\\param p_0 NoMailing: Bool\r\n\\return Bool"},
{text: "NSContactEntity.SetNumber1", help: "<b>Void SetNumber1(String p_0)<\/b>\n\nAlphanumeric user field\r\n\r\n\\param p_0 Number1: String\r\n\\return String"},
{text: "NSContactEntity.SetNumber2", help: "<b>Void SetNumber2(String p_0)<\/b>\n\nAlphanumeric user field\r\n\r\n\\param p_0 Number2: String\r\n\\return String"},
{text: "NSContactEntity.SetOrgNr", help: "<b>Void SetOrgNr(String p_0)<\/b>\n\nVAT number or similar\r\n\r\n\\param p_0 OrgNr: String\r\n\\return String"},
{text: "NSContactEntity.SetPersons", help: "<b>Void SetPersons(NSPerson[] p_0)<\/b>\n\nThe persons belonging to the contact.\r\n\r\n\\param p_0 Persons: PersonArray\r\n\\return PersonArray"},
{text: "NSContactEntity.SetPhones", help: "<b>Void SetPhones(NSEntityElement[] p_0)<\/b>\n\nThe contact's phone numbers\r\n\r\n\\param p_0 Phones: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSContactEntity.SetSource", help: "<b>Void SetSource(Integer p_0)<\/b>\n\nHow did we get this contact? For future integration needs\r\n\r\n\\param p_0 Source: Integer\r\n\\return Integer"},
{text: "NSContactEntity.SetSupportAssociate", help: "<b>Void SetSupportAssociate(NSAssociate p_0)<\/b>\n\n\\param p_0 SupportAssociate: Associate\r\n\\return Associate"},
{text: "NSContactEntity.SetSupportPerson", help: "<b>Void SetSupportPerson(NSPerson p_0)<\/b>\n\n\\param p_0 SupportPerson: Person\r\n\\return Person"},
{text: "NSContactEntity.SetTicketPriority", help: "<b>Void SetTicketPriority(NSTicketPriority p_0)<\/b>\n\n\\param p_0 TicketPriority: TicketPriority\r\n\\return TicketPriority"},
{text: "NSContactEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nThe person that last updated the contact\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSContactEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nDate last updated\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSContactEntity.SetUrls", help: "<b>Void SetUrls(NSEntityElement[] p_0)<\/b>\n\nThe contact's internet adresses\r\n\r\n\\param p_0 Urls: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSContactEntity.SetUserDefinedFields", help: "<b>Void SetUserDefinedFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSContactEntity.SetXstop", help: "<b>Void SetXstop(Bool p_0)<\/b>\n\nSTOP flag\r\n\r\n\\param p_0 Xstop: Bool\r\n\\return Bool"},
{text: "Void.NSContactPersonId", help: "<b>NSContactPersonId<\/b>\n\nCarrier object for ContactPersonId.\r\n\r\n"},
{text: "NSContactPersonId.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nA contact id.\r\n\r\n"},
{text: "NSContactPersonId.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nA person id.\r\n\r\n"},
{text: "NSContactPersonId.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nA contact id.\r\n\r\n"},
{text: "NSContactPersonId.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nA person id.\r\n\r\n"},
{text: "Void.NSContactRelationEntity", help: "<b>NSContactRelationEntity<\/b>\n\nThe ContactRelation Service. The service implements all services working with the ContactRelation object."},
{text: "NSContactRelationEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSContactRelationEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSContactRelationEntity.GetDestinationContactId", help: "<b>Integer GetDestinationContactId()<\/b>\n\nId of the destination contact. The value is mandatory.\r\n\r\n\\return Integer"},
{text: "NSContactRelationEntity.GetDestinationPersonId", help: "<b>Integer GetDestinationPersonId()<\/b>\n\nId of the destination person. The value is not mandatory. The person must belong to the destination contact.\r\n\r\n\\return Integer"},
{text: "NSContactRelationEntity.GetRelationDefinitionId", help: "<b>Integer GetRelationDefinitionId()<\/b>\n\nReference to definition\r\n\r\n\\return Integer"},
{text: "NSContactRelationEntity.GetRelationId", help: "<b>Integer GetRelationId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSContactRelationEntity.GetReversed", help: "<b>Integer GetReversed()<\/b>\n\nIs direction reversed relative to definition\r\n\r\n\\return Integer"},
{text: "NSContactRelationEntity.GetSourceContactId", help: "<b>Integer GetSourceContactId()<\/b>\n\nId of the source contact. The value is mandatory.\r\n\r\n\\return Integer"},
{text: "NSContactRelationEntity.GetSourcePersonId", help: "<b>Integer GetSourcePersonId()<\/b>\n\nId of the source person. The value is not mandatory. The person must belong to the source contact.\r\n\r\n\\return Integer"},
{text: "NSContactRelationEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\n\\return Associate"},
{text: "NSContactRelationEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\n\\return Associate"},
{text: "NSContactRelationEntity.GetActiveText", help: "<b>String GetActiveText()<\/b>\n\nActive text for the relation.\r\n\r\n\\return String"},
{text: "NSContactRelationEntity.GetComment", help: "<b>String GetComment()<\/b>\n\nComment for relation\r\n\r\n\\return String"},
{text: "NSContactRelationEntity.GetDestinationContactName", help: "<b>String GetDestinationContactName()<\/b>\n\nName of the destination contact.\r\n\r\n\\return String"},
{text: "NSContactRelationEntity.GetDestinationPersonName", help: "<b>String GetDestinationPersonName()<\/b>\n\nName of the destination person.\r\n\r\n\\return String"},
{text: "NSContactRelationEntity.GetPassiveText", help: "<b>String GetPassiveText()<\/b>\n\nPassive text for the relation.\r\n\r\n\\return String"},
{text: "NSContactRelationEntity.GetSourceContactName", help: "<b>String GetSourceContactName()<\/b>\n\nName of the source contact.\r\n\r\n\\return String"},
{text: "NSContactRelationEntity.GetSourcePersonName", help: "<b>String GetSourcePersonName()<\/b>\n\nName of the source person.\r\n\r\n\\return String"},
{text: "NSContactRelationEntity.SetActiveText", help: "<b>Void SetActiveText(String p_0)<\/b>\n\nActive text for the relation.\r\n\r\n\\param p_0 ActiveText: String\r\n\\return String"},
{text: "NSContactRelationEntity.SetComment", help: "<b>Void SetComment(String p_0)<\/b>\n\nComment for relation\r\n\r\n\\param p_0 Comment: String\r\n\\return String"},
{text: "NSContactRelationEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSContactRelationEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSContactRelationEntity.SetDestinationContactId", help: "<b>Void SetDestinationContactId(Integer p_0)<\/b>\n\nId of the destination contact. The value is mandatory.\r\n\r\n\\param p_0 DestinationContactId: Integer\r\n\\return Integer"},
{text: "NSContactRelationEntity.SetDestinationContactName", help: "<b>Void SetDestinationContactName(String p_0)<\/b>\n\nName of the destination contact.\r\n\r\n\\param p_0 DestinationContactName: String\r\n\\return String"},
{text: "NSContactRelationEntity.SetDestinationPersonId", help: "<b>Void SetDestinationPersonId(Integer p_0)<\/b>\n\nId of the destination person. The value is not mandatory. The person must belong to the destination contact.\r\n\r\n\\param p_0 DestinationPersonId: Integer\r\n\\return Integer"},
{text: "NSContactRelationEntity.SetDestinationPersonName", help: "<b>Void SetDestinationPersonName(String p_0)<\/b>\n\nName of the destination person.\r\n\r\n\\param p_0 DestinationPersonName: String\r\n\\return String"},
{text: "NSContactRelationEntity.SetPassiveText", help: "<b>Void SetPassiveText(String p_0)<\/b>\n\nPassive text for the relation.\r\n\r\n\\param p_0 PassiveText: String\r\n\\return String"},
{text: "NSContactRelationEntity.SetRelationDefinitionId", help: "<b>Void SetRelationDefinitionId(Integer p_0)<\/b>\n\nReference to definition\r\n\r\n\\param p_0 RelationDefinitionId: Integer\r\n\\return Integer"},
{text: "NSContactRelationEntity.SetRelationId", help: "<b>Void SetRelationId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 RelationId: Integer\r\n\\return Integer"},
{text: "NSContactRelationEntity.SetReversed", help: "<b>Void SetReversed(Integer p_0)<\/b>\n\nIs direction reversed relative to definition\r\n\r\n\\param p_0 Reversed: Integer\r\n\\return Integer"},
{text: "NSContactRelationEntity.SetSourceContactId", help: "<b>Void SetSourceContactId(Integer p_0)<\/b>\n\nId of the source contact. The value is mandatory.\r\n\r\n\\param p_0 SourceContactId: Integer\r\n\\return Integer"},
{text: "NSContactRelationEntity.SetSourceContactName", help: "<b>Void SetSourceContactName(String p_0)<\/b>\n\nName of the source contact.\r\n\r\n\\param p_0 SourceContactName: String\r\n\\return String"},
{text: "NSContactRelationEntity.SetSourcePersonId", help: "<b>Void SetSourcePersonId(Integer p_0)<\/b>\n\nId of the source person. The value is not mandatory. The person must belong to the source contact.\r\n\r\n\\param p_0 SourcePersonId: Integer\r\n\\return Integer"},
{text: "NSContactRelationEntity.SetSourcePersonName", help: "<b>Void SetSourcePersonName(String p_0)<\/b>\n\nName of the source person.\r\n\r\n\\param p_0 SourcePersonName: String\r\n\\return String"},
{text: "NSContactRelationEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSContactRelationEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "Void.NSCountry", help: "<b>NSCountry<\/b>\n\n"},
{text: "NSCountry.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\ntrue if the country is deleted\r\n\r\n\\return Bool"},
{text: "NSCountry.GetAddressLayoutId", help: "<b>Integer GetAddressLayoutId()<\/b>\n\nAddress layout of the country\r\n\r\n\\return Integer"},
{text: "NSCountry.GetCountryId", help: "<b>Integer GetCountryId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSCountry.GetCurrencyId", help: "<b>Integer GetCurrencyId()<\/b>\n\nDefault currency for this country\r\n\r\n\\return Integer"},
{text: "NSCountry.GetDomesticAddressLayoutId", help: "<b>Integer GetDomesticAddressLayoutId()<\/b>\n\nDomestic address layout of the country\r\n\r\n\\return Integer"},
{text: "NSCountry.GetForeignAddressLayoutId", help: "<b>Integer GetForeignAddressLayoutId()<\/b>\n\nForeign address layout of the country\r\n\r\n\\return Integer"},
{text: "NSCountry.GetRank", help: "<b>Integer GetRank()<\/b>\n\nThe rank of the country\r\n\r\n\\return Integer"},
{text: "NSCountry.GetDialInPrefix", help: "<b>String GetDialInPrefix()<\/b>\n\nDial in prefix\r\n\r\n\\return String"},
{text: "NSCountry.GetDomainName", help: "<b>String GetDomainName()<\/b>\n\nDomain name of the country\r\n\r\n\\return String"},
{text: "NSCountry.GetEnglishName", help: "<b>String GetEnglishName()<\/b>\n\nName of country in english\r\n\r\n\\return String"},
{text: "NSCountry.GetImageDescription", help: "<b>String GetImageDescription()<\/b>\n\nDescription of the country's flag image. (This is the country flag that is displayed in the CRM client)\r\n\r\n\\return String"},
{text: "NSCountry.GetInterAreaPrefix", help: "<b>String GetInterAreaPrefix()<\/b>\n\nInternational prefix\r\n\r\n\\return String"},
{text: "NSCountry.GetName", help: "<b>String GetName()<\/b>\n\nName of country in installed language\r\n\r\n\\return String"},
{text: "NSCountry.GetOrgNrText", help: "<b>String GetOrgNrText()<\/b>\n\nLead text for organisation field\r\n\r\n\\return String"},
{text: "NSCountry.GetThreeLetterISOCountry", help: "<b>String GetThreeLetterISOCountry()<\/b>\n\nThree-letter country-code according to ISO3166\r\n\r\n\\return String"},
{text: "NSCountry.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nThe tooltip of the country\r\n\r\n\\return String"},
{text: "NSCountry.GetTwoLetterISOCountry", help: "<b>String GetTwoLetterISOCountry()<\/b>\n\nTwo-letter country-code according to ISO3166\r\n\r\n\\return String"},
{text: "NSCountry.GetZipPrefix", help: "<b>String GetZipPrefix()<\/b>\n\nPost prefix\r\n\r\n\\return String"},
{text: "NSCountry.SetAddressLayoutId", help: "<b>Void SetAddressLayoutId(Integer p_0)<\/b>\n\nAddress layout of the country\r\n\r\n\\param p_0 AddressLayoutId: Integer\r\n\\return Integer"},
{text: "NSCountry.SetCountryId", help: "<b>Void SetCountryId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 CountryId: Integer\r\n\\return Integer"},
{text: "NSCountry.SetCurrencyId", help: "<b>Void SetCurrencyId(Integer p_0)<\/b>\n\nDefault currency for this country\r\n\r\n\\param p_0 CurrencyId: Integer\r\n\\return Integer"},
{text: "NSCountry.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\ntrue if the country is deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSCountry.SetDialInPrefix", help: "<b>Void SetDialInPrefix(String p_0)<\/b>\n\nDial in prefix\r\n\r\n\\param p_0 DialInPrefix: String\r\n\\return String"},
{text: "NSCountry.SetDomainName", help: "<b>Void SetDomainName(String p_0)<\/b>\n\nDomain name of the country\r\n\r\n\\param p_0 DomainName: String\r\n\\return String"},
{text: "NSCountry.SetDomesticAddressLayoutId", help: "<b>Void SetDomesticAddressLayoutId(Integer p_0)<\/b>\n\nDomestic address layout of the country\r\n\r\n\\param p_0 DomesticAddressLayoutId: Integer\r\n\\return Integer"},
{text: "NSCountry.SetEnglishName", help: "<b>Void SetEnglishName(String p_0)<\/b>\n\nName of country in english\r\n\r\n\\param p_0 EnglishName: String\r\n\\return String"},
{text: "NSCountry.SetForeignAddressLayoutId", help: "<b>Void SetForeignAddressLayoutId(Integer p_0)<\/b>\n\nForeign address layout of the country\r\n\r\n\\param p_0 ForeignAddressLayoutId: Integer\r\n\\return Integer"},
{text: "NSCountry.SetImageDescription", help: "<b>Void SetImageDescription(String p_0)<\/b>\n\nDescription of the country's flag image. (This is the country flag that is displayed in the CRM client)\r\n\r\n\\param p_0 ImageDescription: String\r\n\\return String"},
{text: "NSCountry.SetInterAreaPrefix", help: "<b>Void SetInterAreaPrefix(String p_0)<\/b>\n\nInternational prefix\r\n\r\n\\param p_0 InterAreaPrefix: String\r\n\\return String"},
{text: "NSCountry.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of country in installed language\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSCountry.SetOrgNrText", help: "<b>Void SetOrgNrText(String p_0)<\/b>\n\nLead text for organisation field\r\n\r\n\\param p_0 OrgNrText: String\r\n\\return String"},
{text: "NSCountry.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nThe rank of the country\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSCountry.SetThreeLetterISOCountry", help: "<b>Void SetThreeLetterISOCountry(String p_0)<\/b>\n\nThree-letter country-code according to ISO3166\r\n\r\n\\param p_0 ThreeLetterISOCountry: String\r\n\\return String"},
{text: "NSCountry.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nThe tooltip of the country\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSCountry.SetTwoLetterISOCountry", help: "<b>Void SetTwoLetterISOCountry(String p_0)<\/b>\n\nTwo-letter country-code according to ISO3166\r\n\r\n\\param p_0 TwoLetterISOCountry: String\r\n\\return String"},
{text: "NSCountry.SetZipPrefix", help: "<b>Void SetZipPrefix(String p_0)<\/b>\n\nPost prefix\r\n\r\n\\param p_0 ZipPrefix: String\r\n\\return String"},
{text: "Void.NSCredential", help: "<b>NSCredential<\/b>\n\nCredentials supported for authentication"},
{text: "NSCredential.GetType", help: "<b>NSCredentialType GetType()<\/b>\n\nDescription of credential type\r\n\r\n\\return CredentialType"},
{text: "NSCredential.GetDisplayValue", help: "<b>String GetDisplayValue()<\/b>\n\nThe value displayed to the user. this will typically be the users login name in active directory.\r\n\r\n\\return String"},
{text: "NSCredential.GetValue", help: "<b>String GetValue()<\/b>\n\nThis is the actuall value of the credentials.  This will typically be the password or teh users SID in active directory\r\n\r\n\\return String"},
{text: "NSCredential.SetDisplayValue", help: "<b>Void SetDisplayValue(String p_0)<\/b>\n\nThe value displayed to the user. this will typically be the users login name in active directory.\r\n\r\n\\param p_0 DisplayValue: String\r\n\\return String"},
{text: "NSCredential.SetType", help: "<b>Void SetType(NSCredentialType p_0)<\/b>\n\nDescription of credential type\r\n\r\n\\param p_0 Type: CredentialType\r\n\\return CredentialType"},
{text: "NSCredential.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nThis is the actuall value of the credentials.  This will typically be the password or teh users SID in active directory\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSCredentialsGroup", help: "<b>NSCredentialsGroup<\/b>\n\nWhen the CredentialType's control is of type link, the user is selected from a source like active directory.  This will then be the organisational unit (e.g. user security group) in active directory.  Only one group is listed if the system does not support groups."},
{text: "NSCredentialsGroup.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nThe display name of the group to display to the user.\r\n\r\n\\return String"},
{text: "NSCredentialsGroup.GetName", help: "<b>String GetName()<\/b>\n\nThis is the full name of the group as needed to discover the users within the group.  this value should not be displayed to the end user.\r\n\r\n\\return String"},
{text: "NSCredentialsGroup.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nThe display name of the group to display to the user.\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSCredentialsGroup.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThis is the full name of the group as needed to discover the users within the group.  this value should not be displayed to the end user.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "Void.NSCredentialsGroupUsers", help: "<b>NSCredentialsGroupUsers<\/b>\n\nThis is the users within a user group."},
{text: "NSCredentialsGroupUsers.GetUsers", help: "<b>NSCredentialUser[] GetUsers()<\/b>\n\nThe list of actual users that can be selected\r\n\r\n\\return CredentialUserArray"},
{text: "NSCredentialsGroupUsers.GetHeadings", help: "<b>String[] GetHeadings()<\/b>\n\nHeadings in which to list the different users.\r\n\r\n\\return StringArray"},
{text: "NSCredentialsGroupUsers.SetHeadings", help: "<b>Void SetHeadings(String[] p_0)<\/b>\n\nHeadings in which to list the different users.\r\n\r\n\\param p_0 Headings: StringArray\r\n\\return StringArray"},
{text: "NSCredentialsGroupUsers.SetUsers", help: "<b>Void SetUsers(NSCredentialUser[] p_0)<\/b>\n\nThe list of actual users that can be selected\r\n\r\n\\param p_0 Users: CredentialUserArray\r\n\\return CredentialUserArray"},
{text: "Void.NSCredentialType", help: "<b>NSCredentialType<\/b>\n\nDescription of credential type"},
{text: "NSCredentialType.GetCanCreatePerson", help: "<b>Bool GetCanCreatePerson()<\/b>\n\n\\return Bool"},
{text: "NSCredentialType.GetValueControl", help: "<b>Integer GetValueControl()<\/b>\n\nType of control used to display the value.\r\n\r\n\\return Integer"},
{text: "NSCredentialType.GetValueControl", help: "<b>NSCredentialControlType GetValueControl()<\/b>\n\nType of control used to display the value.\r\n\r\n"},
{text: "NSCredentialType.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of the authentication type.  This value is used in a list of authentication providers that can be choosen by an end user and should be a fairly describtive text.  This will typically be SuperOffice is responsible for username and password for a password scenario.\r\n\r\n\\return String"},
{text: "NSCredentialType.GetDisplayType", help: "<b>String GetDisplayType()<\/b>\n\nThe name of the credentials to be displayed in the user interface.  This will typically be Password for user-name\/password scenarios and Active Directoru User for AD integration.\r\n\r\n\\return String"},
{text: "NSCredentialType.GetType", help: "<b>String GetType()<\/b>\n\nType of credentials, corresponding to name of plugin and type in the credentials table\r\n\r\n\\return String"},
{text: "NSCredentialType.SetCanCreatePerson", help: "<b>Void SetCanCreatePerson(Bool p_0)<\/b>\n\n\\param p_0 CanCreatePerson: Bool\r\n\\return Bool"},
{text: "NSCredentialType.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of the authentication type.  This value is used in a list of authentication providers that can be choosen by an end user and should be a fairly describtive text.  This will typically be SuperOffice is responsible for username and password for a password scenario.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSCredentialType.SetDisplayType", help: "<b>Void SetDisplayType(String p_0)<\/b>\n\nThe name of the credentials to be displayed in the user interface.  This will typically be Password for user-name\/password scenarios and Active Directoru User for AD integration.\r\n\r\n\\param p_0 DisplayType: String\r\n\\return String"},
{text: "NSCredentialType.SetType", help: "<b>Void SetType(String p_0)<\/b>\n\nType of credentials, corresponding to name of plugin and type in the credentials table\r\n\r\n\\param p_0 Type: String\r\n\\return String"},
{text: "NSCredentialType.SetValueControl", help: "<b>Void SetValueControl(Integer p_0)<\/b>\n\nType of control used to display the value.\r\n\r\n\\param p_0 ValueControl: Integer\r\n\\return Integer"},
{text: "NSCredentialType.SetValueControl", help: "<b>Void SetValueControl(NSCredentialControlType p_0)<\/b>\n\nType of control used to display the value.\r\n\r\n"},
{text: "Void.NSCredentialUser", help: "<b>NSCredentialUser<\/b>\n\nInformation about a users credentials in a foregin system that can be bound to a SuperOffice user (i.e. associate)"},
{text: "NSCredentialUser.GetCanCreatePerson", help: "<b>Bool GetCanCreatePerson()<\/b>\n\n\\return Bool"},
{text: "NSCredentialUser.GetDisplayValue", help: "<b>String GetDisplayValue()<\/b>\n\nDisplay value of the user.  This value needs to be applied to the Credential.DisplayValue field.\r\n\r\n\\return String"},
{text: "NSCredentialUser.GetValue", help: "<b>String GetValue()<\/b>\n\nIdentification of user in the foreign system.  This value needs to be applied to the Credential.Value field\r\n\r\n\\return String"},
{text: "NSCredentialUser.GetColumns", help: "<b>String[] GetColumns()<\/b>\n\nColumns, matching CredentialUsers.Headings\r\n\r\n\\return StringArray"},
{text: "NSCredentialUser.SetCanCreatePerson", help: "<b>Void SetCanCreatePerson(Bool p_0)<\/b>\n\n\\param p_0 CanCreatePerson: Bool\r\n\\return Bool"},
{text: "NSCredentialUser.SetColumns", help: "<b>Void SetColumns(String[] p_0)<\/b>\n\nColumns, matching CredentialUsers.Headings\r\n\r\n\\param p_0 Columns: StringArray\r\n\\return StringArray"},
{text: "NSCredentialUser.SetDisplayValue", help: "<b>Void SetDisplayValue(String p_0)<\/b>\n\nDisplay value of the user.  This value needs to be applied to the Credential.DisplayValue field.\r\n\r\n\\param p_0 DisplayValue: String\r\n\\return String"},
{text: "NSCredentialUser.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nIdentification of user in the foreign system.  This value needs to be applied to the Credential.Value field\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSCredited", help: "<b>NSCredited<\/b>\n\n"},
{text: "NSCredited.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSCredited.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSCredited.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSCredited.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSCredited.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSCredited.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSCriteriaInformation", help: "<b>NSCriteriaInformation<\/b>\n\nCarrier for criteria information. It contains all the search criteria - that is, ArchiveRestrictionInfo - objects, including a  column specification. In addition, it contains the same criteria expressed as an archive, with an array of ArchiveColumnInfo specifications and a set of ArchiveRow rows. The rows of the archive form a subset of the restriction array."},
{text: "NSCriteriaInformation.GetCriteriaArchiveColumns", help: "<b>NSArchiveColumnInfo[] GetCriteriaArchiveColumns()<\/b>\n\nArray of ColumnInfo column specifications\r\n\r\n\\return ArchiveColumnInfoArray"},
{text: "NSCriteriaInformation.GetCriteriaArchiveRows", help: "<b>NSArchiveListItem[] GetCriteriaArchiveRows()<\/b>\n\nArray of archive list items, i.e., the service layer carrier for archive rows. These are the criteria, represented as archive rows.\r\n\r\n\\return ArchiveListItemArray"},
{text: "NSCriteriaInformation.GetRestrictions", help: "<b>NSArchiveRestrictionInfo[] GetRestrictions()<\/b>\n\nArray of ArchiveRestrictionInfo restriction specifications\r\n\r\n\\return ArchiveRestrictionInfoArray"},
{text: "NSCriteriaInformation.SetCriteriaArchiveColumns", help: "<b>Void SetCriteriaArchiveColumns(NSArchiveColumnInfo[] p_0)<\/b>\n\nArray of ColumnInfo column specifications\r\n\r\n\\param p_0 CriteriaArchiveColumns: ArchiveColumnInfoArray\r\n\\return ArchiveColumnInfoArray"},
{text: "NSCriteriaInformation.SetCriteriaArchiveRows", help: "<b>Void SetCriteriaArchiveRows(NSArchiveListItem[] p_0)<\/b>\n\nArray of archive list items, i.e., the service layer carrier for archive rows. These are the criteria, represented as archive rows.\r\n\r\n\\param p_0 CriteriaArchiveRows: ArchiveListItemArray\r\n\\return ArchiveListItemArray"},
{text: "NSCriteriaInformation.SetRestrictions", help: "<b>Void SetRestrictions(NSArchiveRestrictionInfo[] p_0)<\/b>\n\nArray of ArchiveRestrictionInfo restriction specifications\r\n\r\n\\param p_0 Restrictions: ArchiveRestrictionInfoArray\r\n\\return ArchiveRestrictionInfoArray"},
{text: "Void.NSCurrency", help: "<b>NSCurrency<\/b>\n\n"},
{text: "NSCurrency.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSCurrency.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSCurrency.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSCurrency.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSCurrency.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSCurrency.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSCurrencyEntity", help: "<b>NSCurrencyEntity<\/b>\n\n"},
{text: "NSCurrencyEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\return Bool"},
{text: "NSCurrencyEntity.GetRate", help: "<b>Float GetRate()<\/b>\n\nExchange rate\r\n\r\n\\return Float"},
{text: "NSCurrencyEntity.GetUnits", help: "<b>Float GetUnits()<\/b>\n\nExchange unit scale (0.01, 0.1, 1, 10, 100 etc)\r\n\r\n\\return Float"},
{text: "NSCurrencyEntity.GetCurrencyId", help: "<b>Integer GetCurrencyId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSCurrencyEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSCurrencyEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSCurrencyEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSCurrencyEntity.SetCurrencyId", help: "<b>Void SetCurrencyId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 CurrencyId: Integer\r\n\\return Integer"},
{text: "NSCurrencyEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSCurrencyEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSCurrencyEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSCurrencyEntity.SetRate", help: "<b>Void SetRate(Float p_0)<\/b>\n\nExchange rate\r\n\r\n\\param p_0 Rate: Float\r\n\\return Float"},
{text: "NSCurrencyEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSCurrencyEntity.SetUnits", help: "<b>Void SetUnits(Float p_0)<\/b>\n\nExchange unit scale (0.01, 0.1, 1, 10, 100 etc)\r\n\r\n\\param p_0 Units: Float\r\n\\return Float"},
{text: "Void.NSCustomerLanguage", help: "<b>NSCustomerLanguage<\/b>\n\n"},
{text: "NSCustomerLanguage.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSCustomerLanguage.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSCustomerLanguage.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSCustomerLanguage.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSCustomerLanguage.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSCustomerLanguage.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSCustomerServiceAgent", help: "<b>NSCustomerServiceAgent<\/b>\n\nAgent used for Customer Service methods"},
{text: "NSCustomerServiceAgent.GetStatistics", help: "<b>NSStatisticsDataSet[] GetStatistics(Integer p_0)<\/b>\n\n"},
{text: "NSCustomerServiceAgent.GetStatistics", help: "<b>NSStatisticsDataSet[] GetStatistics(NSStatusScreenPanelType[] p_0)<\/b>\n\nReturns the calculated results for the required statistics for the Customer Service Status Page\r\n\r\n\\param p_0 functions: List of functions to calculate and return\r\n\\return Array of StatisticsDataSet"},
{text: "Void.NSDashboard", help: "<b>NSDashboard<\/b>\n\nDashboard configuration"},
{text: "NSDashboard.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nId of the associate who owns this dashboard\r\n\r\n\\return Integer"},
{text: "NSDashboard.GetDashboardId", help: "<b>Integer GetDashboardId()<\/b>\n\nThe dashboard id\r\n\r\n\\return Integer"},
{text: "NSDashboard.GetLayout", help: "<b>Integer GetLayout()<\/b>\n\nThe dashboard layout, how the tiles are organized on the screen\r\n\r\n\\return Integer"},
{text: "NSDashboard.GetTiles", help: "<b>NSDashboardTile[] GetTiles()<\/b>\n\nThe tiles associated with this dashboard\r\n\r\n\\return DashboardTileArray"},
{text: "NSDashboard.GetCaption", help: "<b>String GetCaption()<\/b>\n\nThe caption for this dashboard\r\n\r\n\\return String"},
{text: "NSDashboard.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nId of the associate who owns this dashboard\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSDashboard.SetCaption", help: "<b>Void SetCaption(String p_0)<\/b>\n\nThe caption for this dashboard\r\n\r\n\\param p_0 Caption: String\r\n\\return String"},
{text: "NSDashboard.SetDashboardId", help: "<b>Void SetDashboardId(Integer p_0)<\/b>\n\nThe dashboard id\r\n\r\n\\param p_0 DashboardId: Integer\r\n\\return Integer"},
{text: "NSDashboard.SetLayout", help: "<b>Void SetLayout(Integer p_0)<\/b>\n\nThe dashboard layout, how the tiles are organized on the screen\r\n\r\n\\param p_0 Layout: Integer\r\n\\return Integer"},
{text: "NSDashboard.SetTiles", help: "<b>Void SetTiles(NSDashboardTile[] p_0)<\/b>\n\nThe tiles associated with this dashboard\r\n\r\n\\param p_0 Tiles: DashboardTileArray\r\n\\return DashboardTileArray"},
{text: "Void.NSDashboardAgent", help: "<b>NSDashboardAgent<\/b>\n\nAgent lets you configure dashboard tiles and retrieve dashboard data"},
{text: "NSDashboardAgent.CreateDefaultDashboard", help: "<b>NSDashboard CreateDefaultDashboard()<\/b>\n\nLoading default values into a new Dashboard.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New Dashboard with default values"},
{text: "NSDashboardAgent.GetDashboard", help: "<b>NSDashboard GetDashboard(Integer p_0)<\/b>\n\nGets a Dashboard object.\r\n\r\n\\param p_0 dashboardId: The identifier of the Dashboard object\r\n\\return Dashboard"},
{text: "NSDashboardAgent.SaveDashboard", help: "<b>NSDashboard SaveDashboard(NSDashboard p_0)<\/b>\n\nUpdates the existing Dashboard or creates a new Dashboard if the id parameter is empty\r\n\r\n\\param p_0 dashboard: The Dashboard that is saved\r\n\\return New or updated Dashboard"},
{text: "NSDashboardAgent.SetTile", help: "<b>NSDashboard SetTile(Integer p_0, Integer p_1, Integer p_2)<\/b>\n\nSets tile in the given dashboard position\r\n\r\n\\param p_0 dashboardId: Dashboard Id\r\n\\param p_1 tileId: Tile Id\r\n\\param p_2 position: Tile position in the dashboard\r\n\\return The new dashboard is returned after the tile change"},
{text: "NSDashboardAgent.GetDashboards", help: "<b>NSDashboard[] GetDashboards(Integer p_0)<\/b>\n\nGets all dashboards for an associate\r\n\r\n\\param p_0 associateId: Associate Id\r\n\\return All the users dashboards"},
{text: "NSDashboardAgent.CreateDefaultDashboardTile", help: "<b>NSDashboardTile CreateDefaultDashboardTile()<\/b>\n\nLoading default values into a new DashboardTile.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New DashboardTile with default values"},
{text: "NSDashboardAgent.CreateNewFromTemplate", help: "<b>NSDashboardTile CreateNewFromTemplate(Integer p_0, String p_1, String p_2, Integer p_3, VisibleFor[] p_4)<\/b>\n\nCreate new tile from another tile used as template\r\n\r\n\\param p_0 dashboardTileId: Tile template Id\r\n\\param p_1 caption: Caption of new tile\r\n\\param p_2 description: Description of new tile\r\n\\param p_3 selectionId: Selection id of new tile\r\n\\param p_4 visibleFor: Who the tile should be visible for\r\n\\return The new tile"},
{text: "NSDashboardAgent.GetDashboardTile", help: "<b>NSDashboardTile GetDashboardTile(Integer p_0)<\/b>\n\nGets a DashboardTile object.\r\n\r\n\\param p_0 dashboardTileId: The identifier of the DashboardTile object\r\n\\return DashboardTile"},
{text: "NSDashboardAgent.SaveDashboardTile", help: "<b>NSDashboardTile SaveDashboardTile(NSDashboardTile p_0)<\/b>\n\nUpdates the existing DashboardTile or creates a new DashboardTile if the id parameter is empty\r\n\r\n\\param p_0 dashboardTile: The DashboardTile that is saved\r\n\\return New or updated DashboardTile"},
{text: "NSDashboardAgent.GetData", help: "<b>NSTileData[] GetData(Integer p_0, String p_1)<\/b>\n\nGet data for this tile\r\n\r\n\\param p_0 dashboardTileId: Tile Id\r\n\\param p_1 restrictions: Replacement restrictions\r\n\\return The data"},
{text: "NSDashboardAgent.GetDataWithSelection", help: "<b>NSTileData[] GetDataWithSelection(Integer p_0, Integer p_1, String p_2)<\/b>\n\nGet data for this tile\r\n\r\n\\param p_0 dashboardTileId: Tile Id\r\n\\param p_1 selectionId: Selection Id\r\n\\param p_2 restrictions: Replacement restrictions\r\n\\return The data"},
{text: "NSDashboardAgent.DeleteDashboard", help: "<b>Void DeleteDashboard(Integer p_0)<\/b>\n\nDeletes the Dashboard\r\n\r\n\\param p_0 dashboardId: The identity of the Dashboard"},
{text: "NSDashboardAgent.DeleteDashboardTile", help: "<b>Void DeleteDashboardTile(Integer p_0)<\/b>\n\nDeletes the DashboardTile\r\n\r\n\\param p_0 dashboardTileId: The identity of the DashboardTile"},
{text: "Void.NSDashboardTile", help: "<b>NSDashboardTile<\/b>\n\nDashboard Tile configuration"},
{text: "NSDashboardTile.GetIsDefault", help: "<b>Bool GetIsDefault()<\/b>\n\nTrue if this is one of the default tiles\r\n\r\n\\return Bool"},
{text: "NSDashboardTile.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nId of the associate who owns this tile\r\n\r\n\\return Integer"},
{text: "NSDashboardTile.GetDashboardTileId", help: "<b>Integer GetDashboardTileId()<\/b>\n\nThe tile id\r\n\r\n\\return Integer"},
{text: "NSDashboardTile.GetEntityType", help: "<b>Integer GetEntityType()<\/b>\n\nThe tile entity type\r\n\r\n\\return Integer"},
{text: "NSDashboardTile.GetGroupId", help: "<b>Integer GetGroupId()<\/b>\n\nId of the associates primary group at storage time\r\n\r\n\\return Integer"},
{text: "NSDashboardTile.GetSelectionId", help: "<b>Integer GetSelectionId()<\/b>\n\nThe selection that defines the data filter\/restrictions\r\n\r\n\\return Integer"},
{text: "NSDashboardTile.GetType", help: "<b>Integer GetType()<\/b>\n\nThe tile type, what kind of tile this is\r\n\r\n\\return Integer"},
{text: "NSDashboardTile.GetOptions", help: "<b>NSDashboardTileOption[] GetOptions()<\/b>\n\nThe tile options\r\n\r\n\\return DashboardTileOptionArray"},
{text: "NSDashboardTile.GetCaption", help: "<b>String GetCaption()<\/b>\n\nThe tile caption\r\n\r\n\\return String"},
{text: "NSDashboardTile.GetChartId", help: "<b>String GetChartId()<\/b>\n\nThe original chart Id\r\n\r\n\\return String"},
{text: "NSDashboardTile.GetChartName", help: "<b>String GetChartName()<\/b>\n\nThe original chart name\r\n\r\n\\return String"},
{text: "NSDashboardTile.GetConfig", help: "<b>String GetConfig()<\/b>\n\nThe tile config\r\n\r\n\\return String"},
{text: "NSDashboardTile.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe tile description\r\n\r\n\\return String"},
{text: "NSDashboardTile.GetVisibleFor", help: "<b>VisibleFor[] GetVisibleFor()<\/b>\n\n\\return VisibleForArray"},
{text: "NSDashboardTile.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nId of the associate who owns this tile\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSDashboardTile.SetCaption", help: "<b>Void SetCaption(String p_0)<\/b>\n\nThe tile caption\r\n\r\n\\param p_0 Caption: String\r\n\\return String"},
{text: "NSDashboardTile.SetChartId", help: "<b>Void SetChartId(String p_0)<\/b>\n\nThe original chart Id\r\n\r\n\\param p_0 ChartId: String\r\n\\return String"},
{text: "NSDashboardTile.SetChartName", help: "<b>Void SetChartName(String p_0)<\/b>\n\nThe original chart name\r\n\r\n\\param p_0 ChartName: String\r\n\\return String"},
{text: "NSDashboardTile.SetConfig", help: "<b>Void SetConfig(String p_0)<\/b>\n\nThe tile config\r\n\r\n\\param p_0 Config: String\r\n\\return String"},
{text: "NSDashboardTile.SetDashboardTileId", help: "<b>Void SetDashboardTileId(Integer p_0)<\/b>\n\nThe tile id\r\n\r\n\\param p_0 DashboardTileId: Integer\r\n\\return Integer"},
{text: "NSDashboardTile.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe tile description\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSDashboardTile.SetEntityType", help: "<b>Void SetEntityType(Integer p_0)<\/b>\n\nThe tile entity type\r\n\r\n\\param p_0 EntityType: Integer\r\n\\return Integer"},
{text: "NSDashboardTile.SetGroupId", help: "<b>Void SetGroupId(Integer p_0)<\/b>\n\nId of the associates primary group at storage time\r\n\r\n\\param p_0 GroupId: Integer\r\n\\return Integer"},
{text: "NSDashboardTile.SetIsDefault", help: "<b>Void SetIsDefault(Bool p_0)<\/b>\n\nTrue if this is one of the default tiles\r\n\r\n\\param p_0 IsDefault: Bool\r\n\\return Bool"},
{text: "NSDashboardTile.SetOptions", help: "<b>Void SetOptions(NSDashboardTileOption[] p_0)<\/b>\n\nThe tile options\r\n\r\n\\param p_0 Options: DashboardTileOptionArray\r\n\\return DashboardTileOptionArray"},
{text: "NSDashboardTile.SetSelectionId", help: "<b>Void SetSelectionId(Integer p_0)<\/b>\n\nThe selection that defines the data filter\/restrictions\r\n\r\n\\param p_0 SelectionId: Integer\r\n\\return Integer"},
{text: "NSDashboardTile.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nThe tile type, what kind of tile this is\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSDashboardTile.SetVisibleFor", help: "<b>Void SetVisibleFor(VisibleFor[] p_0)<\/b>\n\n\\param p_0 fields: VisibleForArray\r\n\\return Void"},
{text: "Void.NSDashboardTileOption", help: "<b>NSDashboardTileOption<\/b>\n\nDashboard Tile option"},
{text: "NSDashboardTileOption.GetDefaultDataOption", help: "<b>Bool GetDefaultDataOption()<\/b>\n\nTrue if this option only applies to the default data source, not selections\r\n\r\n\\return Bool"},
{text: "NSDashboardTileOption.GetType", help: "<b>Integer GetType()<\/b>\n\nThe type of option - integer, list, boolean (checkbox) etc.\r\n\r\n\\return Integer"},
{text: "NSDashboardTileOption.GetListItems", help: "<b>NSMDOListItem[] GetListItems()<\/b>\n\nList options given directly, not via MDO list name\r\n\r\n\\return MDOListItemArray"},
{text: "NSDashboardTileOption.GetDescription", help: "<b>String GetDescription()<\/b>\n\nOption description, visible to users\r\n\r\n\\return String"},
{text: "NSDashboardTileOption.GetListName", help: "<b>String GetListName()<\/b>\n\nAn MDO list name, used if the type is list and no ListOptions are given\r\n\r\n\\return String"},
{text: "NSDashboardTileOption.GetName", help: "<b>String GetName()<\/b>\n\nName of option, usually not visible to users\r\n\r\n\\return String"},
{text: "NSDashboardTileOption.GetValue", help: "<b>String GetValue()<\/b>\n\nThe value, encoded as string, Id:Name of list item if type is list\r\n\r\n\\return String"},
{text: "NSDashboardTileOption.SetDefaultDataOption", help: "<b>Void SetDefaultDataOption(Bool p_0)<\/b>\n\nTrue if this option only applies to the default data source, not selections\r\n\r\n\\param p_0 DefaultDataOption: Bool\r\n\\return Bool"},
{text: "NSDashboardTileOption.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nOption description, visible to users\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSDashboardTileOption.SetListItems", help: "<b>Void SetListItems(NSMDOListItem[] p_0)<\/b>\n\nList options given directly, not via MDO list name\r\n\r\n\\param p_0 ListItems: MDOListItemArray\r\n\\return MDOListItemArray"},
{text: "NSDashboardTileOption.SetListName", help: "<b>Void SetListName(String p_0)<\/b>\n\nAn MDO list name, used if the type is list and no ListOptions are given\r\n\r\n\\param p_0 ListName: String\r\n\\return String"},
{text: "NSDashboardTileOption.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of option, usually not visible to users\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSDashboardTileOption.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nThe type of option - integer, list, boolean (checkbox) etc.\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSDashboardTileOption.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nThe value, encoded as string, Id:Name of list item if type is list\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSDataRight", help: "<b>NSDataRight<\/b>\n\n"},
{text: "NSDataRight.GetDescription", help: "<b>String GetDescription()<\/b>\n\n\\return String"},
{text: "NSDataRight.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSDataRight.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSDataRight.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSDataRights", help: "<b>NSDataRights<\/b>\n\n"},
{text: "NSDataRights.GetRights", help: "<b>NSDataRight[][] GetRights()<\/b>\n\n\\return DataRightArrayArray"},
{text: "NSDataRights.GetRowsInfo", help: "<b>NSEntityName[] GetRowsInfo()<\/b>\n\n\\return EntityNameArray"},
{text: "NSDataRights.GetColumnsInfo", help: "<b>NSRelationToOwner[] GetColumnsInfo()<\/b>\n\n\\return RelationToOwnerArray"},
{text: "NSDataRights.SetColumnsInfo", help: "<b>Void SetColumnsInfo(NSRelationToOwner[] p_0)<\/b>\n\n\\param p_0 ColumnsInfo: RelationToOwnerArray\r\n\\return RelationToOwnerArray"},
{text: "NSDataRights.SetRights", help: "<b>Void SetRights(NSDataRight[][] p_0)<\/b>\n\n\\param p_0 Rights: DataRightArrayArray\r\n\\return DataRightArrayArray"},
{text: "NSDataRights.SetRowsInfo", help: "<b>Void SetRowsInfo(NSEntityName[] p_0)<\/b>\n\n\\param p_0 RowsInfo: EntityNameArray\r\n\\return EntityNameArray"},
{text: "Void.NSDayInformationListItem", help: "<b>NSDayInformationListItem<\/b>\n\nSummary information about the activites and holidaysfor one day"},
{text: "NSDayInformationListItem.GetDate", help: "<b>DateTime GetDate()<\/b>\n\nDate that this item is valid for; there is exactly one item per date, ordered by date.\r\n\r\n\\return DateTime"},
{text: "NSDayInformationListItem.GetActivityInformation", help: "<b>NSActivitySummary GetActivityInformation()<\/b>\n\nActivity information summary - number of free and busy activities.\r\n\r\n\\return ActivitySummary"},
{text: "NSDayInformationListItem.GetRedLetterInformation", help: "<b>NSRedLetterSummary GetRedLetterInformation()<\/b>\n\nSummary of redletter day information - holiday in own country, and in other countries known to the system.\r\n\r\n\\return RedLetterSummary"},
{text: "NSDayInformationListItem.SetActivityInformation", help: "<b>Void SetActivityInformation(NSActivitySummary p_0)<\/b>\n\nActivity information summary - number of free and busy activities.\r\n\r\n\\param p_0 ActivityInformation: ActivitySummary\r\n\\return ActivitySummary"},
{text: "NSDayInformationListItem.SetDate", help: "<b>Void SetDate(DateTime p_0)<\/b>\n\nDate that this item is valid for; there is exactly one item per date, ordered by date.\r\n\r\n\\param p_0 Date: DateTime\r\n\\return DateTime"},
{text: "NSDayInformationListItem.SetRedLetterInformation", help: "<b>Void SetRedLetterInformation(NSRedLetterSummary p_0)<\/b>\n\nSummary of redletter day information - holiday in own country, and in other countries known to the system.\r\n\r\n\\param p_0 RedLetterInformation: RedLetterSummary\r\n\\return RedLetterSummary"},
{text: "Void.NSDeliveryTerm", help: "<b>NSDeliveryTerm<\/b>\n\nThe built-in delivery terms list. Used by the SuperOffice Quote Connector in quote versions."},
{text: "NSDeliveryTerm.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSDeliveryTerm.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSDeliveryTerm.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSDeliveryTerm.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSDeliveryTerm.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSDeliveryTerm.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSDeliveryType", help: "<b>NSDeliveryType<\/b>\n\nThe built-in delivery types list. Used by the SuperOffice Quote Connector in quote versions."},
{text: "NSDeliveryType.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSDeliveryType.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSDeliveryType.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSDeliveryType.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSDeliveryType.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSDeliveryType.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSDepartment", help: "<b>NSDepartment<\/b>\n\na.k.a. User Group"},
{text: "NSDepartment.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSDepartment.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSDepartment.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSDepartment.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSDepartment.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSDepartment.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSDiagnosticsAgent", help: "<b>NSDiagnosticsAgent<\/b>\n\n"},
{text: "NSDiagnosticsAgent.GetCacheNames", help: "<b>String[] GetCacheNames()<\/b>\n\nGet the name of the caches that can be flushed\r\n\r\n\\return Name of the caches that can be flusehd"},
{text: "NSDiagnosticsAgent.AddWebAppUsage", help: "<b>Void AddWebAppUsage(NSWebAppUsage[] p_0)<\/b>\n\nAdds WebApp usage to existing log\r\n\r\n\\param p_0 webAppUsages: Web app usage."},
{text: "NSDiagnosticsAgent.ChangeLogSettings", help: "<b>Void ChangeLogSettings(Bool p_0, Bool p_1, Bool p_2, Bool p_3, Bool p_4, Bool p_5, Bool p_6, Bool p_7)<\/b>\n\nChange NetServer log settings.\r\n\r\n\\param p_0 logWarning: Turn on warning log\r\n\\param p_1 logInformation: Turn on information log\r\n\\param p_2 logSuccessAudit: Turn on success audit log\r\n\\param p_3 logFailureAudit: Turn on failure audit log\r\n\\param p_4 logToEventLog: Log to event log\r\n\\param p_5 logToSuperOffice: Log to SuperOffice\r\n\\param p_6 logToFile: Log to file\r\n\\param p_7 logToTrace: Log to trace"},
{text: "NSDiagnosticsAgent.CollectDataAdditions", help: "<b>Void CollectDataAdditions()<\/b>\n\nCollect and transmit usage statistics: Database Additions. If opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\r\n\r\n\\return This method has no return value"},
{text: "NSDiagnosticsAgent.CollectTableSizes", help: "<b>Void CollectTableSizes()<\/b>\n\nCollect and transmit usage statistics: Table Sizes. If opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\r\n\r\n\\return This method has no return value"},
{text: "NSDiagnosticsAgent.CollectWebUsage", help: "<b>Void CollectWebUsage()<\/b>\n\nCollect and transmit usage statistics: Web-based clients Usage. If opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\r\n\r\n\\return This method has no return value"},
{text: "NSDiagnosticsAgent.CollectWinUsage", help: "<b>Void CollectWinUsage()<\/b>\n\nCollect and transmit usage statistics: Windows CRM Client Usage. If opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\r\n\r\n\\return This method has no return value"},
{text: "NSDiagnosticsAgent.FlushCaches", help: "<b>Void FlushCaches()<\/b>\n\nFlushes all NetServer caches\r\n\r\n"},
{text: "NSDiagnosticsAgent.FlushCachesByName", help: "<b>Void FlushCachesByName(String[] p_0)<\/b>\n\nFlushes all NetServer caches named\r\n\r\n\\param p_0 cacheNames: Name of the cahcnes to flush\r\n\\return This method has no return value"},
{text: "NSDiagnosticsAgent.LogViewState", help: "<b>Void LogViewState(String p_0)<\/b>\n\nLog a change in view state. The granularity of the logging depends on the current configuration. This call returns asynchronously, leaving the server to finish processing later on.\r\n\r\n\\param p_0 viewState: Current view state to be logged\r\n"},
{text: "NSDiagnosticsAgent.ResyncUsers", help: "<b>Void ResyncUsers()<\/b>\n\nResynchronize user information with SuperOffice Community, if opted-out then this call does nothing. The call returns immediately (starting a background thread), and updates CS scheduler table to set the next run time.\r\n\r\n\\return This method has no return value"},
{text: "Void.NSDiaryViewEntity", help: "<b>NSDiaryViewEntity<\/b>\n\nThe DiaryView Service. The service implements all services working with the DiaryView object."},
{text: "NSDiaryViewEntity.GetAssocId", help: "<b>Integer GetAssocId()<\/b>\n\nOwning associate id for the DiaryView.\r\n\r\n\\return Integer"},
{text: "NSDiaryViewEntity.GetDiaryViewId", help: "<b>Integer GetDiaryViewId()<\/b>\n\nId of the DiaryView\r\n\r\n\\return Integer"},
{text: "NSDiaryViewEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nDiaryView rank.\r\n\r\n\\return Integer"},
{text: "NSDiaryViewEntity.GetTzLocationId", help: "<b>Integer GetTzLocationId()<\/b>\n\nDefault timezone location for this view\r\n\r\n\\return Integer"},
{text: "NSDiaryViewEntity.GetVisibleColumns", help: "<b>Integer GetVisibleColumns()<\/b>\n\nNumber of columns that should be visible simultanously.\r\n\r\n\\return Integer"},
{text: "NSDiaryViewEntity.GetAssociateList", help: "<b>NSSelectableMDOListItem[] GetAssociateList()<\/b>\n\n\\return SelectableMDOListItemArray"},
{text: "NSDiaryViewEntity.GetName", help: "<b>String GetName()<\/b>\n\nName of the DiaryView.\r\n\r\n\\return String"},
{text: "NSDiaryViewEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip\/description of the DiaryView\r\n\r\n\\return String"},
{text: "NSDiaryViewEntity.SetAssociateList", help: "<b>Void SetAssociateList(NSSelectableMDOListItem[] p_0)<\/b>\n\n\\param p_0 AssociateList: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSDiaryViewEntity.SetAssocId", help: "<b>Void SetAssocId(Integer p_0)<\/b>\n\nOwning associate id for the DiaryView.\r\n\r\n\\param p_0 AssocId: Integer\r\n\\return Integer"},
{text: "NSDiaryViewEntity.SetDiaryViewId", help: "<b>Void SetDiaryViewId(Integer p_0)<\/b>\n\nId of the DiaryView\r\n\r\n\\param p_0 DiaryViewId: Integer\r\n\\return Integer"},
{text: "NSDiaryViewEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of the DiaryView.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSDiaryViewEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nDiaryView rank.\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSDiaryViewEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip\/description of the DiaryView\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSDiaryViewEntity.SetTzLocationId", help: "<b>Void SetTzLocationId(Integer p_0)<\/b>\n\nDefault timezone location for this view\r\n\r\n\\param p_0 TzLocationId: Integer\r\n\\return Integer"},
{text: "NSDiaryViewEntity.SetVisibleColumns", help: "<b>Void SetVisibleColumns(Integer p_0)<\/b>\n\nNumber of columns that should be visible simultanously.\r\n\r\n\\param p_0 VisibleColumns: Integer\r\n\\return Integer"},
{text: "Void.NSDocument", help: "<b>NSDocument<\/b>\n\n"},
{text: "NSDocument.GetIsPublished", help: "<b>Bool GetIsPublished()<\/b>\n\nTrue if document have an entry in published table\r\n\r\n\\return Bool"},
{text: "NSDocument.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nID of associate whose diary the appointment is in, REQUIRED\r\n\r\n\\return Integer"},
{text: "NSDocument.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nContact ID of owning contact, may be 0\r\n\r\n\\return Integer"},
{text: "NSDocument.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSDocument.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\return Integer"},
{text: "NSDocument.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nID of project referred to, may be 0\r\n\r\n\\return Integer"},
{text: "NSDocument.GetAssociateFullName", help: "<b>String GetAssociateFullName()<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\return String"},
{text: "NSDocument.GetAttention", help: "<b>String GetAttention()<\/b>\n\nAttention\/salutation\r\n\r\n\\return String"},
{text: "NSDocument.GetContactName", help: "<b>String GetContactName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSDocument.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSDocument.GetDocumentTemplate", help: "<b>String GetDocumentTemplate()<\/b>\n\n\\return String"},
{text: "NSDocument.GetHeader", help: "<b>String GetHeader()<\/b>\n\nVisible document name\r\n\r\n\\return String"},
{text: "NSDocument.GetName", help: "<b>String GetName()<\/b>\n\nFile name\r\n\r\n\\return String"},
{text: "NSDocument.GetOurRef", help: "<b>String GetOurRef()<\/b>\n\nOur reference, searchable field from freetext search\r\n\r\n\\return String"},
{text: "NSDocument.GetPersonFullName", help: "<b>String GetPersonFullName()<\/b>\n\nThe full name of the person this document belongs to.\r\n\r\n\\return String"},
{text: "NSDocument.GetProjectName", help: "<b>String GetProjectName()<\/b>\n\nProject name\r\n\r\n\\return String"},
{text: "NSDocument.GetYourRef", help: "<b>String GetYourRef()<\/b>\n\nYour reference\r\n\r\n\\return String"},
{text: "NSDocument.SetAssociateFullName", help: "<b>Void SetAssociateFullName(String p_0)<\/b>\n\nThe associate's culture formatted fullname (firstname, middleName and lastname)\r\n\r\n\\param p_0 AssociateFullName: String\r\n\\return String"},
{text: "NSDocument.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nID of associate whose diary the appointment is in, REQUIRED\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSDocument.SetAttention", help: "<b>Void SetAttention(String p_0)<\/b>\n\nAttention\/salutation\r\n\r\n\\param p_0 Attention: String\r\n\\return String"},
{text: "NSDocument.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nContact ID of owning contact, may be 0\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSDocument.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSDocument.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSDocument.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSDocument.SetDocumentTemplate", help: "<b>Void SetDocumentTemplate(String p_0)<\/b>\n\n\\param p_0 DocumentTemplate: String\r\n\\return String"},
{text: "NSDocument.SetHeader", help: "<b>Void SetHeader(String p_0)<\/b>\n\nVisible document name\r\n\r\n\\param p_0 Header: String\r\n\\return String"},
{text: "NSDocument.SetIsPublished", help: "<b>Void SetIsPublished(Bool p_0)<\/b>\n\nTrue if document have an entry in published table\r\n\r\n\\param p_0 IsPublished: Bool\r\n\\return Bool"},
{text: "NSDocument.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nFile name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSDocument.SetOurRef", help: "<b>Void SetOurRef(String p_0)<\/b>\n\nOur reference, searchable field from freetext search\r\n\r\n\\param p_0 OurRef: String\r\n\\return String"},
{text: "NSDocument.SetPersonFullName", help: "<b>Void SetPersonFullName(String p_0)<\/b>\n\nThe full name of the person this document belongs to.\r\n\r\n\\param p_0 PersonFullName: String\r\n\\return String"},
{text: "NSDocument.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSDocument.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nID of project referred to, may be 0\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSDocument.SetProjectName", help: "<b>Void SetProjectName(String p_0)<\/b>\n\nProject name\r\n\r\n\\param p_0 ProjectName: String\r\n\\return String"},
{text: "NSDocument.SetYourRef", help: "<b>Void SetYourRef(String p_0)<\/b>\n\nYour reference\r\n\r\n\\param p_0 YourRef: String\r\n\\return String"},
{text: "Void.NSDocumentAgent", help: "<b>NSDocumentAgent<\/b>\n\nCollection of all services that works with Document data. This is services for the document information, not the physical document themselves. These are handled by the BLOB service methods."},
{text: "NSDocumentAgent.GetDocumentProperties", help: "<b>Map GetDocumentProperties(Integer p_0, String[] p_1)<\/b>\n\n"},
{text: "NSDocumentAgent.GetPluginCapabilities", help: "<b>Map GetPluginCapabilities(Integer p_0)<\/b>\n\n"},
{text: "NSDocumentAgent.GetCheckoutState", help: "<b>NSCheckoutInfo GetCheckoutState(Integer p_0)<\/b>\n\nGet the current checkout state for a document, relative to the user perforing the call.\r\n\r\n\\param p_0 documentId: SuperOffice document ID\r\n\\return Current checkout state of the document\r\n"},
{text: "NSDocumentAgent.GetDocumentCommands", help: "<b>NSCommandInfo[] GetDocumentCommands(Integer p_0, String[] p_1)<\/b>\n\nGet a list of custom commands valid for the specific document at this time. This information should not be cached by clients, as it may change between documents and over time.\r\n\r\n\\param p_0 documentId: SuperOffice document ID\r\n\\param p_1 allowedReturnTypes: List of return types that the client is prepared to handle, in case the document plugin needs to request additional processing.<br\/>Standard allowed return types include 'None', 'Message', 'SoProtocol', 'CustomGui', 'Other'.<br\/>An empty array implies that the client places no restriction on possible return action requests.<br\/>In this context the parameter is used to filter the returned command list, so that commands that require return actions not supported, will not be included by the document plugin.\r\n\\return Array of command information items. The command list is constrained by the allowedReturnTypes parameter.\r\n"},
{text: "NSDocumentAgent.GetDocument", help: "<b>NSDocument GetDocument(Integer p_0)<\/b>\n\nGets a Document object.\r\n\r\n\\param p_0 documentId: The identifier of the Document object\r\n\\return Document\r\n"},
{text: "NSDocumentAgent.GetPublishedDocument", help: "<b>NSDocument GetPublishedDocument(Integer p_0)<\/b>\n\nGet the document if it's published\r\n\r\n\\param p_0 documentId: The document id\r\n\\return Document\r\n"},
{text: "NSDocumentAgent.GetAppointmentDocuments", help: "<b>NSDocument[] GetAppointmentDocuments(Integer p_0)<\/b>\n\nGet all documents that are linked to the appointment. I.e. the documents that are listed in the appointment dialog.\r\n\r\n\\param p_0 appointmentId: The appointment id.\r\n\\return Array of documents\r\n"},
{text: "NSDocumentAgent.GetContactDocuments", help: "<b>NSDocument[] GetContactDocuments(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3)<\/b>\n\nMethod that returns a specified number of document appointments within a time range. The document appointments belong to the contact specified.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetContactDocumentsByTemplateHeading", help: "<b>NSDocument[] GetContactDocumentsByTemplateHeading(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by the document template heading. The document appointments belong to the contact specified. The heading represents a grouping or filtering of document templates.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 templateHeadingId: The document template heading id. The heading represents a grouping or filtering of document templates.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetContactDocumentsByTemplateType", help: "<b>NSDocument[] GetContactDocumentsByTemplateType(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template type. The document appointments belong to the contact specified.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 documentTemplateId: Id of the document template type to filter on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetContactDocumentsByTemplateTypes", help: "<b>NSDocument[] GetContactDocumentsByTemplateTypes(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer[] p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template types. The document appointments belong to the contact specified.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 documentTemplateIds: Ids of the document template types to filter on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetDocumentList", help: "<b>NSDocument[] GetDocumentList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSDocumentAgent.GetDocumentsByTemplateHeading", help: "<b>NSDocument[] GetDocumentsByTemplateHeading(Integer p_0)<\/b>\n\nMethod that returns document appointments, filtered by the document template heading. The heading represents a grouping or filtering of document templates.\r\n\r\n\\param p_0 templateHeadingId: The document template heading id. The heading represents a grouping or filtering of document templates.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetMyPublishedDocuments", help: "<b>NSDocument[] GetMyPublishedDocuments()<\/b>\n\n\r\n\r\n\\return Array of documents\r\n"},
{text: "NSDocumentAgent.GetPersonDocuments", help: "<b>NSDocument[] GetPersonDocuments(Integer p_0)<\/b>\n\nGet all documents that are linked to the person. I.e. the documents that are listed in the person dialog.\r\n\r\n\\param p_0 personId: The person id.\r\n\\return Array of documents\r\n"},
{text: "NSDocumentAgent.GetPersonDocumentsByDate", help: "<b>NSDocument[] GetPersonDocumentsByDate(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range. The document appointments belong to the person specified.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectDocuments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetPersonDocumentsByTemplateHeading", help: "<b>NSDocument[] GetPersonDocumentsByTemplateHeading(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4, Integer p_5)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template heading. The document appointments belong to the person specified. The heading represents a grouping or filtering of document templates.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectDocuments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_5 templateHeadingId: The document template heading id. The heading represents a grouping or filtering of document templates.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetPersonDocumentsByTemplateType", help: "<b>NSDocument[] GetPersonDocumentsByTemplateType(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4, Integer p_5)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template type. The document appointments belong to the person specified.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectDocuments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_5 documentTemplateId: Id of the document template type to filter on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetPersonDocumentsByTemplateTypes", help: "<b>NSDocument[] GetPersonDocumentsByTemplateTypes(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4, Integer[] p_5)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template types. The document appointments belong to the person specified.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectDocuments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_5 documentTemplateIds: Ids of the document template types to filter on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetProjectDocuments", help: "<b>NSDocument[] GetProjectDocuments(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3)<\/b>\n\nMethod that returns a specified number of document appointments within a time range. The document appointments belong to the project specified.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetProjectDocumentsByTemplateHeading", help: "<b>NSDocument[] GetProjectDocumentsByTemplateHeading(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template heading. The document appointments belong to the project specified. The heading represents a grouping or filtering of document templates.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 templateHeadingId: The document template heading id. The heading represents a grouping or filtering of document templates.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetProjectDocumentsByTemplateType", help: "<b>NSDocument[] GetProjectDocumentsByTemplateType(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template type. The document appointments belong to the project specified.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 documentTemplateId: Id of the document template type to filter on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetProjectDocumentsByTemplateTypes", help: "<b>NSDocument[] GetProjectDocumentsByTemplateTypes(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer[] p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template types. The document appointments belong to the project specified.\r\n\r\n\\param p_0 projectId: The project id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 documentTemplateIds: Ids of the document template types to filter on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetProjectMemberDocuments", help: "<b>NSDocument[] GetProjectMemberDocuments(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3)<\/b>\n\nMethod that returns a specified number of document appointments within a time range. The document appointments belong to the project member specified.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetProjectMemberDocumentsByTemplateHeading", help: "<b>NSDocument[] GetProjectMemberDocumentsByTemplateHeading(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template heading. The document appointments belong to the project member specified. The heading represents a grouping or filtering of document templates.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 templateHeadingId: The document template heading id. The heading represents a grouping or filtering of document templates.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetProjectMemberDocumentsByTemplateType", help: "<b>NSDocument[] GetProjectMemberDocumentsByTemplateType(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template type. The document appointments belong to the project member specified.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 documentTemplateId: Id of the document template type to filter on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetProjectMemberDocumentsByTemplateTypes", help: "<b>NSDocument[] GetProjectMemberDocumentsByTemplateTypes(Integer p_0, DateTime p_1, DateTime p_2, Integer p_3, Integer[] p_4)<\/b>\n\nMethod that returns a specified number of document appointments within a time range, filtered by document template types. The document appointments belong to the project member specified.\r\n\r\n\\param p_0 personId: The project member's person id\r\n\\param p_1 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_2 endTime: The end of the time interval.\r\n\\param p_3 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\param p_4 documentTemplateIds: Ids of the document template types to filter on.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetPublishedDocuments", help: "<b>NSDocument[] GetPublishedDocuments(Integer[] p_0)<\/b>\n\nGet the published documents from an array of doucment ids.\r\n\r\n\\param p_0 documentIds: Array of document ids.\r\n\\return Array of Document\r\n"},
{text: "NSDocumentAgent.GetPublishedDocumentsByDate", help: "<b>NSDocument[] GetPublishedDocumentsByDate(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of published document appointments within a time range. The document appointments is visible to the person specified or the document is in a project the person belongs to.\r\n\r\n\\param p_0 personId: The personId\r\n\\param p_1 includeProjectDocuments: Include projectDocuments to select documents in projects person is a member of.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetPublishedPersonDocumentsByDate", help: "<b>NSDocument[] GetPublishedPersonDocumentsByDate(Integer p_0, Bool p_1, DateTime p_2, DateTime p_3, Integer p_4)<\/b>\n\nMethod that returns a specified number of published document appointments within a time range. The document appointments belong to the person specified or the document is in a project the person belongs to.\r\n\r\n\\param p_0 personId: The person id of the SuperOffice user (associate).\r\n\\param p_1 includeProjectDocuments: If true, all appointments that belong to projects where the user is a project member are included as well as the appointments belonging to the person.\r\n\\param p_2 startTime: The start of the time interval we want appointments from. This will usually be the current time.\r\n\\param p_3 endTime: The end of the time interval.\r\n\\param p_4 count: The maximum number of appointments that should be returned. -1 means no count restrictions.\r\n\\return Array of Appointments.\r\n"},
{text: "NSDocumentAgent.GetPublishedProjectDocuments", help: "<b>NSDocument[] GetPublishedProjectDocuments(Integer p_0)<\/b>\n\nGet published appointment documents by project id.\r\n\r\n\\param p_0 projectId: The project id\r\n\\return Array of Appointment\r\n"},
{text: "NSDocumentAgent.GetSaleDocuments", help: "<b>NSDocument[] GetSaleDocuments(Integer p_0)<\/b>\n\nGet all documents that are linked to the sale. I.e. the documents that are listed in the sale dialog.\r\n\r\n\\param p_0 saleId: The sale id.\r\n\\return Array of documents\r\n"},
{text: "NSDocumentAgent.CreateDefaultDocumentEntity", help: "<b>NSDocumentEntity CreateDefaultDocumentEntity()<\/b>\n\nLoading default values into a new DocumentEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New DocumentEntity with default values\r\n"},
{text: "NSDocumentAgent.CreateDefaultDocumentEntityFromSuggestion", help: "<b>NSDocumentEntity CreateDefaultDocumentEntityFromSuggestion(Integer p_0)<\/b>\n\n\r\n\r\n\\param p_0 suggestedDocumentId\r\n"},
{text: "NSDocumentAgent.CreateNewPhysicalDocumentFromTemplate", help: "<b>NSDocumentEntity CreateNewPhysicalDocumentFromTemplate(Integer p_0, Integer p_1, Integer p_2, Integer p_3, Integer p_4, Integer p_5, Integer p_6, String p_7)<\/b>\n\nCreate a new physical document based on a document template and store it in the document archive.  Tags are substituted according to the provided id's.  Use GetDocumentStream to obtain the created document. Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.\r\n\r\n\\param p_0 contactId: Identifier for a contact\r\n\\param p_1 personId: Identifier for a person\r\n\\param p_2 appointmentId: identifier for an appointment\r\n\\param p_3 documentId: Identifier for a document\r\n\\param p_4 saleId: Identifier for sale.\r\n\\param p_5 selectionId: identifier for selection\r\n\\param p_6 projectId: identifier for project\r\n\\param p_7 uiCulture: Language used in UI. (\"en-US\" or \"nb-NO\" etc). Used to select a template of the appropriate language. Can be overridden in SO ARC by user preference \"PreferDocLang\".\r\n"},
{text: "NSDocumentAgent.CreateNewPhysicalDocumentFromTemplateWithCustomTags", help: "<b>NSDocumentEntity CreateNewPhysicalDocumentFromTemplateWithCustomTags(Integer p_0, Integer p_1, Integer p_2, Integer p_3, Integer p_4, Integer p_5, Integer p_6, String[] p_7, String[] p_8, String p_9)<\/b>\n\nCreate a new physical document based on a document template and store it in the document archive.  Tags are substituted according to the provided id's.  Use GetDocumentStream to obtain the created documents. Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.\r\n\r\n\\param p_0 contactId: Identifier for a contact\r\n\\param p_1 personId: Identifier for a person\r\n\\param p_2 appointmentId: identifier for an appointment\r\n\\param p_3 documentId: Identifier for a document\r\n\\param p_4 saleId: Identifier for sale.\r\n\\param p_5 selectionId: identifier for selection\r\n\\param p_6 projectId: identifier for project\r\n\\param p_7 customTags: Array of custom tag names. Each name should have exactly four characters. There should be exactly one value for each tag, i.e., the lengths of the customTags and customValues arrays should be the same.\r\n\\param p_8 customValues: Array of values for custom tags. There should be exactly one value for each tag, i.e., the lengths of the customTags and customValues arrays should be the same.\r\n\\param p_9 uiCulture: Language used in UI. (\"en-US\" or \"nb-NO\" etc). Used to select a template of the appropriate language. Can be overridden in SO ARC by user preference \"PreferDocLang\".\r\n"},
{text: "NSDocumentAgent.CreateNewPhysicalMailMergeDocumentFromTemplate", help: "<b>NSDocumentEntity CreateNewPhysicalMailMergeDocumentFromTemplate(Integer p_0, String p_1)<\/b>\n\nCreate a new physical document based on the documents template. Do not replace template tags, as the document is going to be used as a mail merge source. Use GetDocumentStream to obtain the created documents. Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.\r\n\r\n\\param p_0 documentId: Identifier for a document\r\n\\param p_1 uiCulture: Language used in UI. (\"en-US\" or \"nb-NO\" etc). Used to select a template of the appropriate language. Can be overridden in SO ARC by user preference \"PreferDocLang\".\r\n"},
{text: "NSDocumentAgent.GetDocumentEntity", help: "<b>NSDocumentEntity GetDocumentEntity(Integer p_0)<\/b>\n\nGets a DocumentEntity object.\r\n\r\n\\param p_0 documentEntityId: The identifier of the DocumentEntity object\r\n\\return DocumentEntity\r\n"},
{text: "NSDocumentAgent.SaveDocumentEntity", help: "<b>NSDocumentEntity SaveDocumentEntity(NSDocumentEntity p_0)<\/b>\n\nSave the document entity. If the entity already exists and the file name of the incoming entity is different from the existing one, a corresponding renaming of the physical document will be attempted. This may cause an amended file name to be substituted into the document entity, since a document plugin may have aribitrary rules on file names and collisions. Clients should always inspect the return value from this call and not assume that what they sent for saving is the final truth.\r\n\r\n\\param p_0 documentEntity: Entity to be saved\r\n\\return Entity as saved. If the entity already exists and the file name of the incoming entity is different from the existing one, a corresponding renaming of the physical document will be attempted. This may cause an amended file name to be substituted into the document entity, since a document plugin may have aribitrary rules on file names and collisions. Clients should always inspect the return value from this call and not assume that what they sent for saving is the final truth.\r\n"},
{text: "NSDocumentAgent.SetDocumentStream", help: "<b>NSDocumentEntity SetDocumentStream(NSDocumentEntity p_0, NSStream p_1, Bool p_2)<\/b>\n\nStore a document from its stream. Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.\r\n\r\n\\param p_0 documentEntity: The document entity object that the binary data (document) should be stored to. Its file name may be amended by this call, see the return value\r\n\\param p_1 stream: The document as a stream.\r\n\\param p_2 overwriteExistingData: If true, the stream will overwrite existing data stored for this record in the document archive; this works only for documents that already have a physical document in existence. If false, the call will only work for a document that has no physical document in the archive, and such a physical document will be created.\r\n\\return Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.\r\n"},
{text: "NSDocumentAgent.GetDocumentList", help: "<b>NSDocumentList[] GetDocumentList(Integer[] p_0)<\/b>\n\nGets an array of Document objects.\r\n\r\n\\param p_0 documentIds: The identifiers of the Document object\r\n\\return Array of Document objects\r\n"},
{text: "NSDocumentAgent.CheckinDocument", help: "<b>NSReturnInfo CheckinDocument(Integer p_0, String[] p_1, String p_2, String[] p_3)<\/b>\n\nCheck in a currently checked-out document\r\n\r\n\\param p_0 documentId: SuperOffice document Id\r\n\\param p_1 allowedReturnTypes: List of return types that the client is prepared to handle, in case the document plugin needs to request additional processing.<br\/>Standard allowed return types include 'None', 'Message', 'SoProtocol', 'CustomGui', 'Other'.<br\/>An empty array implies that the client places no restriction on possible return action requests.\r\n\\param p_2 versionDescription: Optional textual description related to this version of the document; may be blank, and is discarded if the document\/plugin do not support versioning.\r\n\\param p_3 versionExtraFields: Optional extra metadata related to the new version (as opposed to metadata related to the document as a whole). Discarded if the document\/plugin do not support versioning.\r\n\\return Return information, including possible requests for further processing (\"Return Action\"). Return actions are constrained by the allowedReturnTypes parameter.\r\n"},
{text: "NSDocumentAgent.CheckoutDocument", help: "<b>NSReturnInfo CheckoutDocument(Integer p_0, String[] p_1)<\/b>\n\nCheck out a document for editing by the current user.\r\n\r\n\\param p_0 documentId: SuperOffice document ID\r\n\\param p_1 allowedReturnTypes: List of return types that the client is prepared to handle, in case the document plugin needs to request additional processing.<br\/>Standard allowed return types include 'None', 'Message', 'SoProtocol', 'CustomGui', 'Other'.<br\/>An empty array implies that the client places no restriction on possible return action requests.\r\n\\return Return information, including possible requests for further processing (\"Return Action\"). Return actions are constrained by the allowedReturnTypes parameter.\r\n"},
{text: "NSDocumentAgent.DeletePhysicalDocument", help: "<b>NSReturnInfo DeletePhysicalDocument(Integer p_0, String[] p_1)<\/b>\n\n\r\n\r\n\\param p_0 documentId\r\n\\param p_1 allowedReturnType\r\n"},
{text: "NSDocumentAgent.ExecuteDocumentCommand", help: "<b>NSReturnInfo ExecuteDocumentCommand(Integer p_0, String p_1, String[] p_2, String p_3, String[] p_4)<\/b>\n\nExecute a custom command on a particular document, optionally a particular version\r\n\r\n\\param p_0 documentId: SuperOffice document ID\r\n\\param p_1 versionId: Version ID if applicable\/desired; a blank value implies \"latest\" version and is always acceptable.\r\n\\param p_2 allowedReturnTypes: List of return types that the client is prepared to handle, in case the document plugin needs to request additional processing.<br\/>Standard allowed return types include 'None', 'Message', 'SoProtocol', 'CustomGui', 'Other'.<br\/>An empty array implies that the client places no restriction on possible return action requests.\r\n\\param p_3 command: Command name, generally matching one of those returned from the GetDocumentCommands service. However, it is legal for document plugins to support commands that are not declared through GetDocumentCommands, for instance if a custom GUI needs to access plugin functionality.\r\n\\param p_4 additionalData: Any additional data that the document command needs. This parameter can be used as a tunnel between a custom-programmed GUI and its plugin.<br\/>It is suggested that the format is name=value, with one such pair per array item.\r\n\\return Return information, including possible requests for further processing (\"Return Action\"). Return actions are constrained by the allowedReturnTypes parameter.\r\n"},
{text: "NSDocumentAgent.UndoCheckoutDocument", help: "<b>NSReturnInfo UndoCheckoutDocument(Integer p_0, String[] p_1)<\/b>\n\nUndo (abandon) a checkout\r\n\r\n\\param p_0 documentId: SuperOffice document ID\r\n\\param p_1 allowedReturnTypes: List of return types that the client is prepared to handle, in case the document plugin needs to request additional processing.<br\/>Standard allowed return types include 'None', 'Message', 'SoProtocol', 'CustomGui', 'Other'.<br\/>An empty array implies that the client places no restriction on possible return action requests.\r\n\\return Return information, including possible requests for further processing (\"Return Action\"). Return actions are constrained by the allowedReturnTypes parameter.\r\n"},
{text: "NSDocumentAgent.CreateDocumentStream", help: "<b>NSStream CreateDocumentStream(NSDocumentEntity p_0, Bool p_1)<\/b>\n\nCreates a new Stream that can be used to store the document in the file archive.\r\n\r\n\\param p_0 documentEntity: The document the stream belongs to\r\n\\param p_1 overwriteExistingData: If true, the stream will overwrite existing data stored for this record in the document archive\r\n\\return A writeable stream. When written and closed, the stream will become the new document content, subject to locking and versioning constraints.\r\n"},
{text: "NSDocumentAgent.GetDocumentStream", help: "<b>NSStream GetDocumentStream(Integer p_0)<\/b>\n\nGet the document as a stream\r\n\r\n\\param p_0 documentId: SuperOffice document id\r\n\\return The document as a Stream. This stream can be read once and clients should not assume it remains valid after a ReadToEnd or Close.\r\n"},
{text: "NSDocumentAgent.GetDocumentStreamFromEntity", help: "<b>NSStream GetDocumentStreamFromEntity(NSDocumentEntity p_0)<\/b>\n\nGet the document as a stream\r\n\r\n\\param p_0 documentEntity: The document entity object that refers to the binary data (document)\r\n\\return The document as a Stream\r\n"},
{text: "NSDocumentAgent.GetTempFile", help: "<b>NSStream GetTempFile(String p_0)<\/b>\n\nGet data stream for temporary file created with CreateTempFile.\r\n\r\n\\param p_0 filename: Name of temporary file to retrieve.\r\n\\return The document as a Stream\r\n"},
{text: "NSDocumentAgent.GetTemplateStream", help: "<b>NSStream GetTemplateStream(String p_0, Bool p_1, String p_2)<\/b>\n\nRetrieve a stream to a document template based on its name\r\n\r\n\\param p_0 templateName: Filename of template to retrieve\r\n\\param p_1 allowPersonal: If true, try looking up template in personal area before looking in default document template area\r\n\\param p_2 uiCulture: Language used in UI. (\"en-US\" or \"nb-NO\" etc). Used to select a template of the appropriate language. Can be overridden in SO ARC by user preference \"PreferDocLang\".\r\n\\return Open stream to the template\r\n"},
{text: "NSDocumentAgent.GetTemplateStreamFromId", help: "<b>NSStream GetTemplateStreamFromId(Integer p_0, String p_1)<\/b>\n\nRetrieve a stream to a document template based on its id\r\n\r\n\\param p_0 templateId: Id of template to retrieve\r\n\\param p_1 uiCulture: Language used in UI. (\"en-US\" or \"nb-NO\" etc). Used to select a template of the appropriate language. Can be overridden in SO ARC by user preference \"PreferDocLang\".\r\n\\return Open stream to the template"},
{text: "NSDocumentAgent.SubstituteMergeDocumentTemplateVariables", help: "<b>NSStream SubstituteMergeDocumentTemplateVariables(Integer p_0, Integer p_1, String[] p_2, String[] p_3)<\/b>\n\nParse the source document, and replace any template variable tags with their values, based on the associate Id.<p\/> The source document should be of type MergeDraft. This method also takes a pair of arrays specifying custom tags and their values; these tags will be available during substitution in addition to all the existing tags. Custom values will override values otherwise set.\r\n\r\n\\param p_0 documentId: The document id that refers to the binary data (document)\r\n\\param p_1 associateId: The associateId used to subsitute tags in the document.\r\n\\param p_2 customTags: Array of custom tag names. Each name should have exactly four characters. There should be exactly one value for each tag, i.e., the lengths of the customTags and customValues arrays should be the same.\r\n\\param p_3 customValues: Array of values for custom tags. There should be exactly one value for each tag, i.e., the lengths of the customTags and customValues arrays should be the same.\r\n\\return The document as a Stream\r\n"},
{text: "NSDocumentAgent.SubstituteMergeDocumentTemplateVariablesEx", help: "<b>NSStream SubstituteMergeDocumentTemplateVariablesEx(Integer p_0, Integer p_1, Integer p_2, Integer p_3, Integer p_4, Integer p_5, Integer p_6, Integer p_7, String[] p_8, String[] p_9)<\/b>\n\nParse the source document, and replace any template variable tags with their values, based on the provided identifiers.<p\/> The source document should be of type MergeDraft. This method also takes a pair of arrays specifying custom tags and their values; these tags will be available during substitution in addition to all the existing tags. Custom values will override values otherwise set.\r\n\r\n\\param p_0 mergeDocumentId: The document id that refers to the binary data (document)\r\n\\param p_1 contactId: The contact identifier to use for template substitution\r\n\\param p_2 personId: The person identifier to use for template substitution\r\n\\param p_3 projectId: The project identifier to use for template substitution\r\n\\param p_4 selectionId: The selection identifier to use for template substitution\r\n\\param p_5 appointmentId: The appointment identifier to use for template substitution\r\n\\param p_6 documentId: The document identifier to use for template substitution\r\n\\param p_7 saleId: The sale identifier to use for template substitution\r\n\\param p_8 customTags: Array of custom tag names. Each name should have exactly four characters. There should be exactly one value for each tag, i.e., the lengths of the customTags and customValues arrays should be the same.\r\n\\param p_9 customValues: Array of values for custom tags. There should be exactly one value for each tag, i.e., the lengths of the customTags and customValues arrays should be the same.\r\n\\return The document as a Stream\r\n"},
{text: "NSDocumentAgent.CreateDefaultSuggestedDocumentEntity", help: "<b>NSSuggestedDocumentEntity CreateDefaultSuggestedDocumentEntity()<\/b>\n\nLoading default values into a new SuggestedDocumentEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New SuggestedDocumentEntity with default values"},
{text: "NSDocumentAgent.GetSuggestedDocumentEntity", help: "<b>NSSuggestedDocumentEntity GetSuggestedDocumentEntity(Integer p_0)<\/b>\n\nGets a SuggestedDocumentEntity object.\r\n\r\n\\param p_0 suggestedDocumentEntityId: The identifier of the SuggestedDocumentEntity object\r\n\\return SuggestedDocumentEntity"},
{text: "NSDocumentAgent.SaveSuggestedDocumentEntity", help: "<b>NSSuggestedDocumentEntity SaveSuggestedDocumentEntity(NSSuggestedDocumentEntity p_0)<\/b>\n\nUpdates the existing SuggestedDocumentEntity or creates a new SuggestedDocumentEntity if the id parameter is empty\r\n\r\n\\param p_0 suggestedDocumentEntity: The SuggestedDocumentEntity that is saved\r\n\\return New or updated SuggestedDocumentEntity"},
{text: "NSDocumentAgent.SaveDocumentTemplateStream", help: "<b>NSTemplateInfo SaveDocumentTemplateStream(Integer p_0, NSStream p_1, String p_2, Integer p_3)<\/b>\n\nSaves content in stream to document template file\r\n\r\n\\param p_0 documentTemplateId: Identifier for document template\r\n\\param p_1 content: Stream containing content to be saved to document template file\r\n\\param p_2 languageCode: Language code\r\n\\param p_3 pluginId: Plugin id\r\n\\return Template info"},
{text: "NSDocumentAgent.CreateDefaultTemplateVariablesParameters", help: "<b>NSTemplateVariablesParameters CreateDefaultTemplateVariablesParameters()<\/b>\n\nLoading default values into a new TemplateVariablesParameters.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New TemplateVariablesParameters with default values\r\n"},
{text: "NSDocumentAgent.GetVersionList", help: "<b>NSVersionInfo[] GetVersionList(Integer p_0)<\/b>\n\nGet a list of existing, committed  versions for a given document\r\n\r\n\\param p_0 documentId: SuperOffice document Id\r\n\\return Array of objects describing the existing, committed versions for this document\r\n"},
{text: "NSDocumentAgent.CreateTempFile", help: "<b>String CreateTempFile(String p_0, NSStream p_1)<\/b>\n\nCreate a new temporary file based on the provided stream.  Specified filename may be overridden, and actual name is returned.\r\n\r\n\\param p_0 filename: Wanted name of file.\r\n\\param p_1 dataStream: Data to be added to the file.\r\n\\return Actual used filename.\r\n"},
{text: "NSDocumentAgent.GetDocumentUrl", help: "<b>String GetDocumentUrl(Integer p_0, String p_1, Bool p_2)<\/b>\n\nGet a WebDAV-compliant URL referring to the given document.<br \/>This URL may be passed to the ultimate client (text editor of some kind?), which is then responsible for all further operations.<br\/>The returned string is a fully resolved URL.<br\/>Not all documents and document plugins support this feature.\r\n\r\n\\param p_0 documentId: SuperOffice document Id\r\n\\param p_1 versionId: Version ID if applicable\/desired; a blank value implies \"latest\" version and is always acceptable.\r\n\\param p_2 writeableUrl: If true, then a URL that supports saving is requested. Som edocument plugins may not support read-only URLs, so there is no guarantee that a False value will actually yield a read-only URL, and vice versa.\r\n\\return Fully resolved URL referring to the document."},
{text: "NSDocumentAgent.RenameDocument", help: "<b>String RenameDocument(Integer p_0, String p_1)<\/b>\n\nRename the physical document, i.e., change the file name or equivalent concept in the document archive.\r\n\r\n\\param p_0 documentId: SuperOffice document ID\r\n\\param p_1 newFilename: Suggested new file name. The document archive may amend this to conform to uniqueness constraints, character range limitations etc.\r\n\\return The actual, new \"file\" name. This will generally be derived from the suggested name, but may be amended.\r\n"},
{text: "NSDocumentAgent.SubstituteTemplateVariables", help: "<b>String SubstituteTemplateVariables(String p_0, Integer p_1, Integer p_2, Integer p_3, Integer p_4, Integer p_5, Integer p_6, Integer p_7, Integer p_8, String p_9)<\/b>\n\nParse the source string, and replace any template variable tags with their values, based on the ID's given in the other parameters.\r\n\r\n\\param p_0 source: Source string to parse for template variables. Such variables must have delimiters corresponding to the standard for the given generator encoding.<p\/>Non-text source data (such as the binary content of a .doc file) should be passed in as Base64.\r\n\\param p_1 generatorEncoding: Encoding of source string. Non-text formats such as MsWord or Excel should be Base64 encoded in the source string.\r\n\\param p_2 contactId: Identifier for a contact\r\n\\param p_3 personId: Identifier for a person\r\n\\param p_4 appointmentId: Identifier for an appointment\r\n\\param p_5 documentId: Identifier for a document\r\n\\param p_6 saleId: Identifier for a sale\r\n\\param p_7 selectionId: Identifier for a selection\r\n\\param p_8 projectId: Identifier for a project\r\n\\param p_9 cultureName: Name of culture to be used for culture-sensitive data, such as dates or multi-language texts. Use a blank string to accept whatever current culture is set on the server (possibly not a good choice in multinational organizations with a single server).\r\n\\return Source string with templates substituted, using the same encoding as for the source (binary data will be returned in Base64).\r\n"},
{text: "NSDocumentAgent.SubstituteTemplateVariablesEx", help: "<b>String SubstituteTemplateVariablesEx(NSTemplateVariablesParameters p_0)<\/b>\n\nParse the source string, and replace any template variable tags with their values, based on the identities, custom values and entities specified in the other parameters.\r\n\r\n\\param p_0 parameters: Name of culture to be used for culture-sensitive data, such as dates or multi-language texts. Use a blank string to accept whatever current culture is set on the server (possibly not a good choice in multinational organizations with a single server).\r\n\\return Source string with templates substituted, using the same encoding as for the source (binary data will be returned in Base64).\r\n"},
{text: "NSDocumentAgent.SubstituteTemplateVariablesWithCustomTags", help: "<b>String SubstituteTemplateVariablesWithCustomTags(String p_0, Integer p_1, String[] p_2, String[] p_3, Integer p_4, Integer p_5, Integer p_6, Integer p_7, Integer p_8, Integer p_9, Integer p_10, String p_11)<\/b>\n\nParse the source string, and replace any template variable tags with their values, based on the ID's given in the other parameters.<p\/>This method also takes a pair of arrays specifying custom tags and their values; these tags will be available during substitution in addition to all the existing tags. Custom values will override values otherwise set.\r\n\r\n\\param p_0 source: Source string to parse for template variables. Such variables must have delimiters corresponding to the standard for the given generator encoding.<p\/>Non-text source data (such as the binary content of a .doc file) should be passed in as Base64.\r\n\\param p_1 generatorEncoding: Encoding of source string. Non-text formats such as MsWord or Excel should be Base64 encoded in the source string.\r\n\\param p_2 customTags: Array of custom tag names. Each name should have exactly four characters. There should be exactly one value for each tag, i.e., the lengths of the customTags and customValues arrays should be the same.\r\n\\param p_3 customValues: Array of values for custom tags. There should be exactly one value for each tag, i.e., the lengths of the customTags and customValues arrays should be the same.\r\n\\param p_4 contactId: Identifier for a contact\r\n\\param p_5 personId: Identifier for a person\r\n\\param p_6 appointmentId: Identifier for an appointment\r\n\\param p_7 documentId: Identifier for a document\r\n\\param p_8 saleId: Identifier for a sale\r\n\\param p_9 selectionId: Identifier for a selection\r\n\\param p_10 projectId: Identifier for a project\r\n\\param p_11 cultureName: Name of culture to be used for culture-sensitive data, such as dates or multi-language texts. Use a blank string to accept whatever current culture is set on the server (possibly not a good choice in multinational organizations with a single server).\r\n\\return Source string with templates substituted, using the same encoding as for the source (binary data will be returned in Base64).\r\n"},
{text: "NSDocumentAgent.GetDocumentProperties", help: "<b>String[] GetDocumentProperties(Integer p_0, String[] p_1)<\/b>\n\nGet plugin-dependent properties for the document. A number of standard properties that should be supported by all plugins are defined in SuperOffice.CRM.Documents.Constants.Properties.\r\n\r\n\\param p_0 documentId: SuperOffice document ID\r\n\\param p_1 requestedProperties: Array of property names whose values are being requested.\r\n\\return Array of name=value pairs, corresponding to the requested properties.\r\n"},
{text: "NSDocumentAgent.GetPluginCapabilities", help: "<b>String[] GetPluginCapabilities(Integer p_0)<\/b>\n\nGet a list of plugin-dependent capabilities for a given document archive plugin.<br\/>A standard set of properties is defined in SuperOffice.CRM.Documents.Constants.Capabilities.\r\n\r\n\\param p_0 pluginId: Numeric plugin id, corresponding to the archiveProvider\r\n"},
{text: "NSDocumentAgent.GetDocumentProperties", help: "<b>StringDictionary GetDocumentProperties(Integer p_0, String[] p_1)<\/b>\n\nGet plugin-dependent properties for the document. A number of standard properties that should be supported by all plugins are defined in SuperOffice.CRM.Documents.Constants.Properties.\r\n\r\n\\param p_0 documentId: SuperOffice document ID\r\n\\param p_1 requestedProperties: Array of property names whose values are being requested.\r\n\\return Dictionary of name=value pairs, corresponding to the requested properties."},
{text: "NSDocumentAgent.GetPluginCapabilities", help: "<b>StringDictionary GetPluginCapabilities(Integer p_0)<\/b>\n\nGet a list of plugin-dependent capabilities for a given document archive plugin.<br\/>A standard set of properties is defined in SuperOffice.CRM.Documents.Constants.Capabilities.\r\n\r\n\\param p_0 pluginId: Numeric document plugin id, corresponding to the document.archiveProvider id or doctmpl.autoeventid.\r\n\\return Dictionary mapping capability names=values"},
{text: "NSDocumentAgent.DeleteDocumentEntity", help: "<b>Void DeleteDocumentEntity(Integer p_0)<\/b>\n\nDeletes the DocumentEntity\r\n\r\n\\param p_0 documentEntityId: The identity of the DocumentEntity\r\n"},
{text: "NSDocumentAgent.DeleteTempFile", help: "<b>Void DeleteTempFile(String p_0)<\/b>\n\nDelete a temporary file created with CreateTempFile.\r\n\r\n\\param p_0 filename: Name of temporary file to delete.\r\n"},
{text: "NSDocumentAgent.SetTemplateStream", help: "<b>Void SetTemplateStream(String p_0, Bool p_1, NSStream p_2)<\/b>\n\nSave a template to the document archive\r\n\r\n\\param p_0 filename: Filename of template.\r\n\\param p_1 personal: If true, save the template in the user area, instead of in common template area.\r\n\\param p_2 stream: The template as a stream.\r\n"},
{text: "NSDocumentAgent.VerifyGetDocumentStream", help: "<b>Void VerifyGetDocumentStream(Integer p_0)<\/b>\n\nVerify that the requested document stream exists, and that we can access it, without actually getting the stream.\r\n\r\n\\param p_0 documentId: The document id that refers to the binary data (document)\r\n"},
{text: "Void.NSDocumentEntity", help: "<b>NSDocumentEntity<\/b>\n\n"},
{text: "NSDocumentEntity.GetIsPublished", help: "<b>Bool GetIsPublished()<\/b>\n\nGet the Publication is published field\r\n\r\n"},
{text: "NSDocumentEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSDocumentEntity.GetDate", help: "<b>DateTime GetDate()<\/b>\n\ndate + start time planned\r\n\r\n\\return DateTime"},
{text: "NSDocumentEntity.GetPublishEventDate", help: "<b>DateTime GetPublishEventDate()<\/b>\n\n\\return DateTime"},
{text: "NSDocumentEntity.GetPublishFrom", help: "<b>DateTime GetPublishFrom()<\/b>\n\n\\return DateTime"},
{text: "NSDocumentEntity.GetPublishTo", help: "<b>DateTime GetPublishTo()<\/b>\n\n\\return DateTime"},
{text: "NSDocumentEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSDocumentEntity.GetActiveLinks", help: "<b>Integer GetActiveLinks()<\/b>\n\nNumber of active links to sale, document, appointment.\r\n\r\n\\return Integer"},
{text: "NSDocumentEntity.GetCompleted", help: "<b>Integer GetCompleted()<\/b>\n\nDocument Completed state. This property is the part of the Status property that is the completed state.\r\n\r\n\\return Integer"},
{text: "NSDocumentEntity.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSDocumentEntity.GetLockSemantics", help: "<b>Integer GetLockSemantics()<\/b>\n\n\\return Integer"},
{text: "NSDocumentEntity.GetSuggestedDocumentId", help: "<b>Integer GetSuggestedDocumentId()<\/b>\n\nSuggested guide item that this document is an instance of (Note: NOT valid for appointments, they have their own link)\r\n\r\n\\return Integer"},
{text: "NSDocumentEntity.GetType", help: "<b>Integer GetType()<\/b>\n\nwhere=no start time,note,docin, docout\r\n\r\n\\return Integer"},
{text: "NSDocumentEntity.GetExtraFields", help: "<b>Map GetExtraFields()<\/b>\n\n\\return Map"},
{text: "NSDocumentEntity.GetUserDefinedFields", help: "<b>Map GetUserDefinedFields()<\/b>\n\n\\return Map"},
{text: "NSDocumentEntity.GetAssociate", help: "<b>NSAssociate GetAssociate()<\/b>\n\nThe owner of the document - the associate whose checklist the document is in.\r\n\r\n\\return Associate"},
{text: "NSDocumentEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nThe person that first created the document. The property is read-only.\r\n\r\n\\return Associate"},
{text: "NSDocumentEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nThe person that last updated the appointment.\r\n\r\n\\return Associate"},
{text: "NSDocumentEntity.GetContact", help: "<b>NSContact GetContact()<\/b>\n\nThe contact associated with the document. It may also be null if no contact is associated with the document.\r\n\r\n\\return Contact"},
{text: "NSDocumentEntity.GetDocumentTemplate", help: "<b>NSDocumentTemplate GetDocumentTemplate()<\/b>\n\nThe template type of the document.\r\n\r\n\\return DocumentTemplate"},
{text: "NSDocumentEntity.GetLinks", help: "<b>NSLink[] GetLinks()<\/b>\n\nList of all elements linked to the document.\r\n\r\n\\return LinkArray"},
{text: "NSDocumentEntity.GetPerson", help: "<b>NSPerson GetPerson()<\/b>\n\nA document may also be connected to a person; this must be a contact person registered on the current company. This does not mean however that a person is required.\r\n\r\n\\return Person"},
{text: "NSDocumentEntity.GetProject", help: "<b>NSProject GetProject()<\/b>\n\nA document may also be connected to a project, so you see the document both on the company card, and on the project card. This does not mean however that a project is required.\r\n\r\n\\return Project"},
{text: "NSDocumentEntity.GetSale", help: "<b>NSSale GetSale()<\/b>\n\nAn document may also be connected to a sale, so you see the document on the company card, on the project card and on the sale card. This does not mean however that a sale is required.\r\n\r\n\\return Sale"},
{text: "NSDocumentEntity.GetAttention", help: "<b>String GetAttention()<\/b>\n\nAttention\/salutation\r\n\r\n\\return String"},
{text: "NSDocumentEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSDocumentEntity.GetExternalRef", help: "<b>String GetExternalRef()<\/b>\n\nExternal reference (notes ID, email ID, whatever)\r\n\r\n\\return String"},
{text: "NSDocumentEntity.GetHeader", help: "<b>String GetHeader()<\/b>\n\nVisible document name\r\n\r\n\\return String"},
{text: "NSDocumentEntity.GetName", help: "<b>String GetName()<\/b>\n\nFile name\r\n\r\n\\return String"},
{text: "NSDocumentEntity.GetOurRef", help: "<b>String GetOurRef()<\/b>\n\nOur reference, searchable field from freetext search\r\n\r\n\\return String"},
{text: "NSDocumentEntity.GetYourRef", help: "<b>String GetYourRef()<\/b>\n\nYour reference\r\n\r\n\\return String"},
{text: "NSDocumentEntity.GetVisibleFor", help: "<b>VisibleFor[] GetVisibleFor()<\/b>\n\n\\return VisibleForArray"},
{text: "NSDocumentEntity.SetActiveLinks", help: "<b>Void SetActiveLinks(Integer p_0)<\/b>\n\nNumber of active links to sale, document, appointment.\r\n\r\n\\param p_0 ActiveLinks: Integer\r\n\\return Integer"},
{text: "NSDocumentEntity.SetAssociate", help: "<b>Void SetAssociate(NSAssociate p_0)<\/b>\n\nThe owner of the document - the associate whose checklist the document is in.\r\n\r\n\\param p_0 Associate: Associate\r\n\\return Associate"},
{text: "NSDocumentEntity.SetAttention", help: "<b>Void SetAttention(String p_0)<\/b>\n\nAttention\/salutation\r\n\r\n\\param p_0 Attention: String\r\n\\return String"},
{text: "NSDocumentEntity.SetCompleted", help: "<b>Void SetCompleted(Integer p_0)<\/b>\n\nDocument Completed state. This property is the part of the Status property that is the completed state.\r\n\r\n\\param p_0 Completed: Integer\r\n\\return Integer"},
{text: "NSDocumentEntity.SetContact", help: "<b>Void SetContact(NSContact p_0)<\/b>\n\nThe contact associated with the document. It may also be null if no contact is associated with the document.\r\n\r\n\\param p_0 Contact: Contact\r\n\\return Contact"},
{text: "NSDocumentEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nThe person that first created the document. The property is read-only.\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSDocumentEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSDocumentEntity.SetDate", help: "<b>Void SetDate(DateTime p_0)<\/b>\n\ndate + start time planned\r\n\r\n\\param p_0 Date: DateTime\r\n\\return DateTime"},
{text: "NSDocumentEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSDocumentEntity.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSDocumentEntity.SetDocumentTemplate", help: "<b>Void SetDocumentTemplate(NSDocumentTemplate p_0)<\/b>\n\nThe template type of the document.\r\n\r\n\\param p_0 DocumentTemplate: DocumentTemplate\r\n\\return DocumentTemplate"},
{text: "NSDocumentEntity.SetExternalRef", help: "<b>Void SetExternalRef(String p_0)<\/b>\n\nExternal reference (notes ID, email ID, whatever)\r\n\r\n\\param p_0 ExternalRef: String\r\n\\return String"},
{text: "NSDocumentEntity.SetExtraFields", help: "<b>Void SetExtraFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSDocumentEntity.SetHeader", help: "<b>Void SetHeader(String p_0)<\/b>\n\nVisible document name\r\n\r\n\\param p_0 Header: String\r\n\\return String"},
{text: "NSDocumentEntity.SetIsPublished", help: "<b>Void SetIsPublished()<\/b>\n\n\\param p_0 fields: Bool\r\n\\return Void"},
{text: "NSDocumentEntity.SetIsPublished", help: "<b>Void SetIsPublished(Bool p_0)<\/b>\n\n\\return Bool"},
{text: "NSDocumentEntity.SetLinks", help: "<b>Void SetLinks(NSLink[] p_0)<\/b>\n\nList of all elements linked to the document.\r\n\r\n\\param p_0 Links: LinkArray\r\n\\return LinkArray"},
{text: "NSDocumentEntity.SetLockSemantics", help: "<b>Void SetLockSemantics(Integer p_0)<\/b>\n\n\\param p_0 LockSemantics: Integer\r\n\\return Integer"},
{text: "NSDocumentEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nFile name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSDocumentEntity.SetOurRef", help: "<b>Void SetOurRef(String p_0)<\/b>\n\nOur reference, searchable field from freetext search\r\n\r\n\\param p_0 OurRef: String\r\n\\return String"},
{text: "NSDocumentEntity.SetPerson", help: "<b>Void SetPerson(NSPerson p_0)<\/b>\n\nA document may also be connected to a person; this must be a contact person registered on the current company. This does not mean however that a person is required.\r\n\r\n\\param p_0 Person: Person\r\n\\return Person"},
{text: "NSDocumentEntity.SetProject", help: "<b>Void SetProject(NSProject p_0)<\/b>\n\nA document may also be connected to a project, so you see the document both on the company card, and on the project card. This does not mean however that a project is required.\r\n\r\n\\param p_0 Project: Project\r\n\\return Project"},
{text: "NSDocumentEntity.SetPublishEventDate", help: "<b>Void SetPublishEventDate(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSDocumentEntity.SetPublishFrom", help: "<b>Void SetPublishFrom(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSDocumentEntity.SetPublishTo", help: "<b>Void SetPublishTo(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSDocumentEntity.SetSale", help: "<b>Void SetSale(NSSale p_0)<\/b>\n\nAn document may also be connected to a sale, so you see the document on the company card, on the project card and on the sale card. This does not mean however that a sale is required.\r\n\r\n\\param p_0 Sale: Sale\r\n\\return Sale"},
{text: "NSDocumentEntity.SetSuggestedDocumentId", help: "<b>Void SetSuggestedDocumentId(Integer p_0)<\/b>\n\nSuggested guide item that this document is an instance of (Note: NOT valid for appointments, they have their own link)\r\n\r\n\\param p_0 SuggestedDocumentId: Integer\r\n\\return Integer"},
{text: "NSDocumentEntity.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nwhere=no start time,note,docin, docout\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSDocumentEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nThe person that last updated the appointment.\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSDocumentEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSDocumentEntity.SetUserDefinedFields", help: "<b>Void SetUserDefinedFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSDocumentEntity.SetVisibleFor", help: "<b>Void SetVisibleFor(VisibleFor[] p_0)<\/b>\n\n\\param p_0 fields: VisibleForArray\r\n\\return Void"},
{text: "NSDocumentEntity.SetYourRef", help: "<b>Void SetYourRef(String p_0)<\/b>\n\nYour reference\r\n\r\n\\param p_0 YourRef: String\r\n\\return String"},
{text: "Void.NSDocumentTemplate", help: "<b>NSDocumentTemplate<\/b>\n\nThe template a document is based on is stored in the SO_arc\\template folder on the server. This will return the name as displayed in the GUI, and not the physical document name, of the template the document object is based on."},
{text: "NSDocumentTemplate.GetAutoeventId", help: "<b>Integer GetAutoeventId()<\/b>\n\nWhich document plugin is responsible for the documents generated from this template\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplate.GetDeleted", help: "<b>Integer GetDeleted()<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplate.GetDirection", help: "<b>Integer GetDirection()<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n"},
{text: "NSDocumentTemplate.GetDocumentTemplateId", help: "<b>Integer GetDocumentTemplateId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplate.GetQuoteDocType", help: "<b>Integer GetQuoteDocType()<\/b>\n\n"},
{text: "NSDocumentTemplate.GetRecordType", help: "<b>Integer GetRecordType()<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n"},
{text: "NSDocumentTemplate.GetSaveInDb", help: "<b>Integer GetSaveInDb()<\/b>\n\n1 = save document records in DB; otherwise not.\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplate.GetDirection", help: "<b>NSDocTmplDirection GetDirection()<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n\\return DocTmplDirection"},
{text: "NSDocumentTemplate.GetQuoteDocType", help: "<b>NSDocTmplQuoteType GetQuoteDocType()<\/b>\n\nWhat type of quote document is this.\r\n\r\n\\return DocTmplQuoteType"},
{text: "NSDocumentTemplate.GetRecordType", help: "<b>NSDocTmplType GetRecordType()<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n\\return DocTmplType"},
{text: "NSDocumentTemplate.GetDefaultOref", help: "<b>String GetDefaultOref()<\/b>\n\nProcessed via tag substitution to give document reference\r\n\r\n\\return String"},
{text: "NSDocumentTemplate.GetFilename", help: "<b>String GetFilename()<\/b>\n\nRelative to TemplatePath\r\n\r\n\\return String"},
{text: "NSDocumentTemplate.GetName", help: "<b>String GetName()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSDocumentTemplate.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSDocumentTemplate.SetAutoeventId", help: "<b>Void SetAutoeventId(Integer p_0)<\/b>\n\nWhich document plugin is responsible for the documents generated from this template\r\n\r\n\\param p_0 AutoeventId: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplate.SetDefaultOref", help: "<b>Void SetDefaultOref(String p_0)<\/b>\n\nProcessed via tag substitution to give document reference\r\n\r\n\\param p_0 DefaultOref: String\r\n\\return String"},
{text: "NSDocumentTemplate.SetDeleted", help: "<b>Void SetDeleted(Integer p_0)<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\param p_0 Deleted: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplate.SetDirection", help: "<b>Void SetDirection(Integer p_0)<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n"},
{text: "NSDocumentTemplate.SetDirection", help: "<b>Void SetDirection(NSDocTmplDirection p_0)<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n\\param p_0 Direction: DocTmplDirection\r\n\\return DocTmplDirection"},
{text: "NSDocumentTemplate.SetDocumentTemplateId", help: "<b>Void SetDocumentTemplateId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 DocumentTemplateId: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplate.SetFilename", help: "<b>Void SetFilename(String p_0)<\/b>\n\nRelative to TemplatePath\r\n\r\n\\param p_0 Filename: String\r\n\\return String"},
{text: "NSDocumentTemplate.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSDocumentTemplate.SetQuoteDocType", help: "<b>Void SetQuoteDocType(Integer p_0)<\/b>\n\n"},
{text: "NSDocumentTemplate.SetQuoteDocType", help: "<b>Void SetQuoteDocType(NSDocTmplQuoteType p_0)<\/b>\n\nWhat type of quote document is this.\r\n\r\n\\param p_0 QuoteDocType: DocTmplQuoteType\r\n\\return DocTmplQuoteType"},
{text: "NSDocumentTemplate.SetRecordType", help: "<b>Void SetRecordType(Integer p_0)<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n"},
{text: "NSDocumentTemplate.SetRecordType", help: "<b>Void SetRecordType(NSDocTmplType p_0)<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n\\param p_0 RecordType: DocTmplType\r\n\\return DocTmplType"},
{text: "NSDocumentTemplate.SetSaveInDb", help: "<b>Void SetSaveInDb(Integer p_0)<\/b>\n\n1 = save document records in DB; otherwise not.\r\n\r\n\\param p_0 SaveInDb: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplate.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSDocumentTemplateEntity", help: "<b>NSDocumentTemplateEntity<\/b>\n\nThe template a document is based on is stored in the SO_arc\\template folder on the server. This will return the name as displayed in the GUI, and not the physical document name, of the template the document object is based on."},
{text: "NSDocumentTemplateEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nTrue if deleted\r\n\r\n\\return Bool"},
{text: "NSDocumentTemplateEntity.GetIsDefaultPublished", help: "<b>Bool GetIsDefaultPublished()<\/b>\n\nPublished to external persons\r\n\r\n\\return Bool"},
{text: "NSDocumentTemplateEntity.GetIsInUseInGuides", help: "<b>Bool GetIsInUseInGuides()<\/b>\n\nTrue if the template is in use in a project or sales guide\r\n\r\n\\return Bool"},
{text: "NSDocumentTemplateEntity.GetAutoeventId", help: "<b>Integer GetAutoeventId()<\/b>\n\nWhich document plugin is responsible for the documents generated from this template\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.GetDirection", help: "<b>Integer GetDirection()<\/b>\n\n"},
{text: "NSDocumentTemplateEntity.GetDocumentTemplateId", help: "<b>Integer GetDocumentTemplateId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.GetDocumentTypeKey", help: "<b>Integer GetDocumentTypeKey()<\/b>\n\nThe document type to use when creating a blank document. Plugin-specific. Used when not creating template from a local file.\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.GetIntentId", help: "<b>Integer GetIntentId()<\/b>\n\nWhat is the intention of this document (used by SAINT)\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.GetLoadTemplateFromPlugin", help: "<b>Integer GetLoadTemplateFromPlugin()<\/b>\n\nWhich document plugin is responsible for this template's contents\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.GetQuoteDocType", help: "<b>Integer GetQuoteDocType()<\/b>\n\n"},
{text: "NSDocumentTemplateEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.GetRecordType", help: "<b>Integer GetRecordType()<\/b>\n\n"},
{text: "NSDocumentTemplateEntity.GetSaveInDb", help: "<b>Integer GetSaveInDb()<\/b>\n\n1 = save document records in DB; otherwise not.\r\n\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.GetDirection", help: "<b>NSDocTmplDirection GetDirection()<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n\\return DocTmplDirection"},
{text: "NSDocumentTemplateEntity.GetQuoteDocType", help: "<b>NSDocTmplQuoteType GetQuoteDocType()<\/b>\n\nThe role this document plays in the Quote system, if any\r\n\r\n\\return DocTmplQuoteType"},
{text: "NSDocumentTemplateEntity.GetRecordType", help: "<b>NSDocTmplType GetRecordType()<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n\\return DocTmplType"},
{text: "NSDocumentTemplateEntity.GetDefaultOref", help: "<b>String GetDefaultOref()<\/b>\n\nProcessed via tag substitution to give document reference\r\n\r\n\\return String"},
{text: "NSDocumentTemplateEntity.GetFilename", help: "<b>String GetFilename()<\/b>\n\nRelative to TemplatePath, or extref for other document plugins. i.e URL or full path.\r\n\r\n\\return String"},
{text: "NSDocumentTemplateEntity.GetMimeType", help: "<b>String GetMimeType()<\/b>\n\nThe mime type\r\n\r\n\\return String"},
{text: "NSDocumentTemplateEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe template list item\r\n\r\n\\return String"},
{text: "NSDocumentTemplateEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSDocumentTemplateEntity.SetAutoeventId", help: "<b>Void SetAutoeventId(Integer p_0)<\/b>\n\nWhich document plugin is responsible for the documents generated from this template\r\n\r\n\\param p_0 AutoeventId: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.SetDefaultOref", help: "<b>Void SetDefaultOref(String p_0)<\/b>\n\nProcessed via tag substitution to give document reference\r\n\r\n\\param p_0 DefaultOref: String\r\n\\return String"},
{text: "NSDocumentTemplateEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nTrue if deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSDocumentTemplateEntity.SetDirection", help: "<b>Void SetDirection(Integer p_0)<\/b>\n\n"},
{text: "NSDocumentTemplateEntity.SetDirection", help: "<b>Void SetDirection(NSDocTmplDirection p_0)<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n\\param p_0 Direction: DocTmplDirection\r\n\\return DocTmplDirection"},
{text: "NSDocumentTemplateEntity.SetDocumentTemplateId", help: "<b>Void SetDocumentTemplateId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 DocumentTemplateId: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.SetDocumentTypeKey", help: "<b>Void SetDocumentTypeKey(Integer p_0)<\/b>\n\nThe document type to use when creating a blank document. Plugin-specific. Used when not creating template from a local file.\r\n\r\n\\param p_0 DocumentTypeKey: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.SetFilename", help: "<b>Void SetFilename(String p_0)<\/b>\n\nRelative to TemplatePath, or extref for other document plugins. i.e URL or full path.\r\n\r\n\\param p_0 Filename: String\r\n\\return String"},
{text: "NSDocumentTemplateEntity.SetIntentId", help: "<b>Void SetIntentId(Integer p_0)<\/b>\n\nWhat is the intention of this document (used by SAINT)\r\n\r\n\\param p_0 IntentId: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.SetIsDefaultPublished", help: "<b>Void SetIsDefaultPublished(Bool p_0)<\/b>\n\nPublished to external persons\r\n\r\n\\param p_0 IsDefaultPublished: Bool\r\n\\return Bool"},
{text: "NSDocumentTemplateEntity.SetIsInUseInGuides", help: "<b>Void SetIsInUseInGuides(Bool p_0)<\/b>\n\nTrue if the template is in use in a project or sales guide\r\n\r\n\\param p_0 IsInUseInGuides: Bool\r\n\\return Bool"},
{text: "NSDocumentTemplateEntity.SetLoadTemplateFromPlugin", help: "<b>Void SetLoadTemplateFromPlugin(Integer p_0)<\/b>\n\nWhich document plugin is responsible for this template's contents\r\n\r\n\\param p_0 LoadTemplateFromPlugin: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.SetMimeType", help: "<b>Void SetMimeType(String p_0)<\/b>\n\nThe mime type\r\n\r\n\\param p_0 MimeType: String\r\n\\return String"},
{text: "NSDocumentTemplateEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe template list item\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSDocumentTemplateEntity.SetQuoteDocType", help: "<b>Void SetQuoteDocType(Integer p_0)<\/b>\n\n"},
{text: "NSDocumentTemplateEntity.SetQuoteDocType", help: "<b>Void SetQuoteDocType(NSDocTmplQuoteType p_0)<\/b>\n\nThe role this document plays in the Quote system, if any\r\n\r\n\\param p_0 QuoteDocType: DocTmplQuoteType\r\n\\return DocTmplQuoteType"},
{text: "NSDocumentTemplateEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.SetRecordType", help: "<b>Void SetRecordType(Integer p_0)<\/b>\n\n"},
{text: "NSDocumentTemplateEntity.SetRecordType", help: "<b>Void SetRecordType(NSDocTmplType p_0)<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n\\param p_0 RecordType: DocTmplType\r\n\\return DocTmplType"},
{text: "NSDocumentTemplateEntity.SetSaveInDb", help: "<b>Void SetSaveInDb(Integer p_0)<\/b>\n\n1 = save document records in DB; otherwise not.\r\n\r\n\\param p_0 SaveInDb: Integer\r\n\\return Integer"},
{text: "NSDocumentTemplateEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSDSAParameters", help: "<b>NSDSAParameters<\/b>\n\n"},
{text: "NSDSAParameters.GetCounter", help: "<b>Integer GetCounter()<\/b>\n\n"},
{text: "NSDSAParameters.GetG", help: "<b>NSBinary GetG()<\/b>\n\n"},
{text: "NSDSAParameters.GetJ", help: "<b>NSBinary GetJ()<\/b>\n\n"},
{text: "NSDSAParameters.GetP", help: "<b>NSBinary GetP()<\/b>\n\n"},
{text: "NSDSAParameters.GetQ", help: "<b>NSBinary GetQ()<\/b>\n\n"},
{text: "NSDSAParameters.GetSeed", help: "<b>NSBinary GetSeed()<\/b>\n\n"},
{text: "NSDSAParameters.GetY", help: "<b>NSBinary GetY()<\/b>\n\n"},
{text: "NSDSAParameters.SetCounter", help: "<b>Void SetCounter(Integer p_0)<\/b>\n\n"},
{text: "NSDSAParameters.SetG", help: "<b>Void SetG(NSBinary p_0)<\/b>\n\n"},
{text: "NSDSAParameters.SetJ", help: "<b>Void SetJ(NSBinary p_0)<\/b>\n\n"},
{text: "NSDSAParameters.SetP", help: "<b>Void SetP(NSBinary p_0)<\/b>\n\n"},
{text: "NSDSAParameters.SetQ", help: "<b>Void SetQ(NSBinary p_0)<\/b>\n\n"},
{text: "NSDSAParameters.SetSeed", help: "<b>Void SetSeed(NSBinary p_0)<\/b>\n\n"},
{text: "NSDSAParameters.SetY", help: "<b>Void SetY(NSBinary p_0)<\/b>\n\n"},
{text: "Void.NSDuplicateEntry", help: "<b>NSDuplicateEntry<\/b>\n\nCarrier object for DuplicateEntry.\r\n\r\n"},
{text: "NSDuplicateEntry.GetSoPrimaryKey", help: "<b>Integer GetSoPrimaryKey()<\/b>\n\nIdentity of an entry in the SuperOffice database. Should be 0 for matches from external systems.\r\n\r\n"},
{text: "NSDuplicateEntry.GetEntryIdentifier", help: "<b>String GetEntryIdentifier()<\/b>\n\nString identifier for entry. Typically used to identify an entry in an external system.\r\n\r\n"},
{text: "NSDuplicateEntry.GetEntryName", help: "<b>String GetEntryName()<\/b>\n\nName of duplicate entry\r\n\r\n"},
{text: "NSDuplicateEntry.GetRuleDisplayName", help: "<b>String GetRuleDisplayName()<\/b>\n\nShort name of rule to display to user\r\n\r\n"},
{text: "NSDuplicateEntry.GetRuleName", help: "<b>String GetRuleName()<\/b>\n\nIdentifying name for rule\r\n\t\/\/\/\r\n\r\n"},
{text: "NSDuplicateEntry.SetEntryIdentifier", help: "<b>Void SetEntryIdentifier(String p_0)<\/b>\n\nString identifier for entry. Typically used to identify an entry in an external system.\r\n\r\n"},
{text: "NSDuplicateEntry.SetEntryName", help: "<b>Void SetEntryName(String p_0)<\/b>\n\nName of duplicate entry\r\n\r\n"},
{text: "NSDuplicateEntry.SetRuleDisplayName", help: "<b>Void SetRuleDisplayName(String p_0)<\/b>\n\nShort name of rule to display to user\r\n\r\n"},
{text: "NSDuplicateEntry.SetRuleName", help: "<b>Void SetRuleName(String p_0)<\/b>\n\nIdentifying name for rule\r\n\t\/\/\/\r\n\r\n"},
{text: "NSDuplicateEntry.SetSoPrimaryKey", help: "<b>Void SetSoPrimaryKey(Integer p_0)<\/b>\n\nIdentity of an entry in the SuperOffice database. Should be 0 for matches from external systems.\r\n\r\n"},
{text: "Void.NSDuplicateRule", help: "<b>NSDuplicateRule<\/b>\n\nCarrier object for DuplicateRule.\r\n\r\n"},
{text: "NSDuplicateRule.GetIsActive", help: "<b>Bool GetIsActive()<\/b>\n\nIndicating if a rule is current active, and should included in the duplicate detection\r\n\r\n"},
{text: "NSDuplicateRule.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nShort name of rule to display to user\r\n\r\n"},
{text: "NSDuplicateRule.GetDisplayTooltip", help: "<b>String GetDisplayTooltip()<\/b>\n\nDescription of the rule\r\n\r\n"},
{text: "NSDuplicateRule.GetName", help: "<b>String GetName()<\/b>\n\nIdentifying name for rule\r\n\t\/\/\/\r\n\r\n"},
{text: "NSDuplicateRule.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nShort name of rule to display to user\r\n\r\n"},
{text: "NSDuplicateRule.SetDisplayTooltip", help: "<b>Void SetDisplayTooltip(String p_0)<\/b>\n\nDescription of the rule\r\n\r\n"},
{text: "NSDuplicateRule.SetIsActive", help: "<b>Void SetIsActive(Bool p_0)<\/b>\n\nIndicating if a rule is current active, and should included in the duplicate detection\r\n\r\n"},
{text: "NSDuplicateRule.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nIdentifying name for rule\r\n\t\/\/\/\r\n\r\n"},
{text: "Void.NSEMailAddress", help: "<b>NSEMailAddress<\/b>\n\n"},
{text: "NSEMailAddress.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSEMailAddress.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSEMailAddress.GetEmailId", help: "<b>Integer GetEmailId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSEMailAddress.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSEMailAddress.GetAddress", help: "<b>String GetAddress()<\/b>\n\n\\return String"},
{text: "NSEMailAddress.GetContactName", help: "<b>String GetContactName()<\/b>\n\n\\return String"},
{text: "NSEMailAddress.GetPersonName", help: "<b>String GetPersonName()<\/b>\n\n\\return String"},
{text: "NSEMailAddress.SetAddress", help: "<b>Void SetAddress(String p_0)<\/b>\n\n\\param p_0 Address: String\r\n\\return String"},
{text: "NSEMailAddress.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSEMailAddress.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSEMailAddress.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSEMailAddress.SetEmailId", help: "<b>Void SetEmailId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 EmailId: Integer\r\n\\return Integer"},
{text: "NSEMailAddress.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSEMailAddress.SetPersonName", help: "<b>Void SetPersonName(String p_0)<\/b>\n\n\\param p_0 PersonName: String\r\n\\return String"},
{text: "Void.NSEMailAgent", help: "<b>NSEMailAgent<\/b>\n\n"},
{text: "NSEMailAgent.Authenticate", help: "<b>Bool Authenticate(NSEMailConnectionInfoExtended p_0)<\/b>\n\n\\param p_0 connectionInfoExtended"},
{text: "NSEMailAgent.AuthenticateIncoming", help: "<b>Bool AuthenticateIncoming(NSEMailConnectionInfo p_0)<\/b>\n\nAuthenticate against a mail-server to retrieve e-mails from\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\return True if authentication was succcesfull\r\n"},
{text: "NSEMailAgent.AuthenticateOutgoing", help: "<b>Bool AuthenticateOutgoing(NSEMailConnectionInfo p_0)<\/b>\n\nAuthenticate against a mail server to send items with\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\return True if authentication was succcesfull\r\n"},
{text: "NSEMailAgent.GetFolderHasNewEMail", help: "<b>Bool GetFolderHasNewEMail(NSEMailConnectionInfo p_0)<\/b>\n\nCheck if folder has received new items since previous access.\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\return True if new mail is available.\r\n"},
{text: "NSEMailAgent.GetFolderEMailCount", help: "<b>Integer GetFolderEMailCount(NSEMailConnectionInfo p_0, Bool p_1)<\/b>\n\nRetrieve total\/unread mail items in current folder\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 onlyUnread: If true, only unread items are counted\r\n\\return Number of mail items\r\n"},
{text: "NSEMailAgent.RefreshFolder", help: "<b>Integer RefreshFolder(NSEMailConnectionInfo p_0, String[] p_1)<\/b>\n\nRefresh the given folders - i.e., fetch data from the mail server and update the in-database cache. This may happen synchronously or as a batch task, the return value will be 0 if the processing was synchronous, or the batch task id if a batch task is used.\r\n\r\n\\param p_0 connectionInfo: Email connection info credentials\r\n\\param p_1 folders: List of folder names to refresh\r\n\\return Batch task id, or 0 if the processing was synchronous\r\n"},
{text: "NSEMailAgent.CreateDefaultEMailAddress", help: "<b>NSEMailAddress CreateDefaultEMailAddress()<\/b>\n\nLoading default values into a new EMailAddress.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailAddress with default values\r\n"},
{text: "NSEMailAgent.FindAddress", help: "<b>NSEMailAddress[] FindAddress(String p_0)<\/b>\n\nSearch for contacts and persons with the specified e-mail address (exact match on the email address string required)\r\n\r\n\\param p_0 address: E-mail address to look for\r\n\\return All resolved contacts\/persons\r\n"},
{text: "NSEMailAgent.GetEMailAddresses", help: "<b>NSEMailAddress[] GetEMailAddresses(Integer[] p_0)<\/b>\n\nGet information about one or more email addresses, identified by IDs\r\n\r\n\\param p_0 emailIds: Array of IDs from the email table, each identifying one email address\r\n\\return Array of email information objects\r\n"},
{text: "NSEMailAgent.CreateDefaultEMailAttachment", help: "<b>NSEMailAttachment CreateDefaultEMailAttachment()<\/b>\n\nLoading default values into a new EMailAttachment.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailAttachment with default values\r\n"},
{text: "NSEMailAgent.GetAttachment", help: "<b>NSEMailAttachment GetAttachment(NSEMailConnectionInfo p_0, Integer p_1, String p_2)<\/b>\n\nRetrieve an attachment from an e-mail\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 messageServerId: Unique ID for the e-mail to retrieve the attachment from\r\n\\param p_2 attachmentId: Id of the attachment in the e-mail\r\n\\return The attachment\r\n"},
{text: "NSEMailAgent.CreateDefaultEMailConnectionInfo", help: "<b>NSEMailConnectionInfo CreateDefaultEMailConnectionInfo()<\/b>\n\nLoading default values into a new EMailConnectionInfo.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailConnectionInfo with default values\r\n"},
{text: "NSEMailAgent.CreateDefaultEMailConnectionInfoExtended", help: "<b>NSEMailConnectionInfoExtended CreateDefaultEMailConnectionInfoExtended()<\/b>\n\nLoading default values into a new EMailConnectionInfoExtended.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailConnectionInfoExtended with default values"},
{text: "NSEMailAgent.CreateDefaultEMailCustomHeader", help: "<b>NSEMailCustomHeader CreateDefaultEMailCustomHeader()<\/b>\n\nLoading default values into a new EMailCustomHeader.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailCustomHeader with default values\r\n"},
{text: "NSEMailAgent.CreateDefaultEMailEntity", help: "<b>NSEMailEntity CreateDefaultEMailEntity()<\/b>\n\nLoading default values into a new EMailEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailEntity with default values\r\n"},
{text: "NSEMailAgent.CreateEMailFromDocumentEntity", help: "<b>NSEMailEntity CreateEMailFromDocumentEntity(NSDocumentEntity p_0)<\/b>\n\nGet an e-mail based on the provided DocumentEntity\r\n\r\n\\param p_0 documentEntity: DocumentEntity data\r\n\\return The e-mail\r\n"},
{text: "NSEMailAgent.CreateEMailFromMimeMessage", help: "<b>NSEMailEntity CreateEMailFromMimeMessage(String p_0)<\/b>\n\nGet an e-mail based on the provided MIME-message\r\n\r\n\\param p_0 mimeMessage: string representing a MIME-formatted message\r\n\\return The e-mail"},
{text: "NSEMailAgent.GetEMailFromDocumentId", help: "<b>NSEMailEntity GetEMailFromDocumentId(Integer p_0)<\/b>\n\nGet an e-mail based on an archived document\r\n\r\n\\param p_0 documentId: Unique id of the document\r\n\\return The e-mail\r\n"},
{text: "NSEMailAgent.GetEMailFromId", help: "<b>NSEMailEntity GetEMailFromId(NSEMailConnectionInfo p_0, Integer p_1, Bool p_2, Integer p_3, Bool p_4)<\/b>\n\nGet en e-mail based on its unique id\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 messageServerId: Unique ID for the e-mail to retrieve\r\n\\param p_2 lookupAddresses: If true try to look up e-mail addresses in from\/to\/cc\/bcc fields against superoffice contacts\r\n\\param p_3 flags: Any flags to apply to the fetched item. Ex: Seen\/Answered\r\n\\param p_4 includeAttachments: Should we retrieve attachments embedded in the e-mail from the server\r\n\\return The e-mail"},
{text: "NSEMailAgent.GetEMailFromId", help: "<b>NSEMailEntity GetEMailFromId(NSEMailConnectionInfo p_0, Integer p_1, Bool p_2, NSEMailFlags p_3, Bool p_4)<\/b>\n\nGet en e-mail based on its unique id\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 messageServerId: Unique ID for the e-mail to retrieve\r\n\\param p_2 lookupAddresses: If true try to look up e-mail addresses in from\/to\/cc\/bcc fields against superoffice contacts\r\n\\param p_3 flags: Any flags to apply to the fetched item. Ex: Seen\/Answered\r\n\\param p_4 includeAttachments: Should we retrieve attachments embedded in the e-mail from the server\r\n\\return The e-mail\r\n"},
{text: "NSEMailAgent.GetEMailFromTemp", help: "<b>NSEMailEntity GetEMailFromTemp(String p_0)<\/b>\n\n\r\n\r\n\\param p_0 fileName\r\n"},
{text: "NSEMailAgent.SaveEMail", help: "<b>NSEMailEntity SaveEMail(NSEMailConnectionInfo p_0, NSEMailEntity p_1)<\/b>\n\nSave the passed e-mail back to the server\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 email: The e-mail to save\r\n\\return The updated saved entity\r\n"},
{text: "NSEMailAgent.SendEMails", help: "<b>NSEMailEntity[] SendEMails(NSEMailConnectionInfo p_0, NSEMailEntity[] p_1, NSEMailConnectionInfo p_2)<\/b>\n\nSend the provided e-mails\r\n\r\n\\param p_0 outgoingConnectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 emails: The e-mails to send\r\n\\param p_2 sentItemsConnectionInfo: If provided, save sent item(s) in the folder specified.  May be null.\r\n\\return The sent e-mails (updated with message id etc.)\r\n"},
{text: "NSEMailAgent.CreateDefaultEMailEnvelope", help: "<b>NSEMailEnvelope CreateDefaultEMailEnvelope()<\/b>\n\nLoading default values into a new EMailEnvelope.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailEnvelope with default values\r\n"},
{text: "NSEMailAgent.GetEMailEnvelopes", help: "<b>NSEMailEnvelope[] GetEMailEnvelopes(NSEMailConnectionInfo p_0, Integer[] p_1)<\/b>\n\nRetrieve a set of e-mail envelopes\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 messageServerIds: Unique identitifiers for the e-mails to retrieve envelopes for\r\n\\return The e-mail envelope objects\r\n"},
{text: "NSEMailAgent.CreateDefaultEMailFolder", help: "<b>NSEMailFolder CreateDefaultEMailFolder()<\/b>\n\nLoading default values into a new EMailFolder.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailFolder with default values\r\n"},
{text: "NSEMailAgent.GetFolderInfo", help: "<b>NSEMailFolder[] GetFolderInfo(NSEMailConnectionInfo p_0, String[] p_1)<\/b>\n\nRetrieve information about folders.  If folders parameter is not specified(null), information about all subscribed folders will be returned.\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 folders: Folders to get information about.\r\n\\return Folder information\r\n"},
{text: "NSEMailAgent.CreateDefaultEMailSOInfo", help: "<b>NSEMailSOInfo CreateDefaultEMailSOInfo()<\/b>\n\nLoading default values into a new EMailSOInfo.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New EMailSOInfo with default values\r\n"},
{text: "NSEMailAgent.GetEMailSOInfo", help: "<b>NSEMailSOInfo GetEMailSOInfo(Integer p_0)<\/b>\n\nGets a EMailSOInfo object.\r\n\r\n\\param p_0 eMailSOInfoId: The identifier of the EMailSOInfo object\r\n\\return EMailSOInfo\r\n"},
{text: "NSEMailAgent.GetEMailAsStream", help: "<b>NSStream GetEMailAsStream(NSEMailConnectionInfo p_0, Integer p_1, Bool p_2)<\/b>\n\nRetrieve an e-mail optionally stripping attachments as a stream\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 messageServerId: Unique ID for the e-mail to retrieve\r\n\\param p_2 stripAttachments: If true, do not include attachments in stream\r\n\\return The attachment as a stream\r\n"},
{text: "NSEMailAgent.GetEmailMessageIds", help: "<b>String[] GetEmailMessageIds(NSEMailConnectionInfoExtended p_0)<\/b>\n\n\\param p_0 connectionInfoExtended"},
{text: "NSEMailAgent.GetEmailsAsString", help: "<b>String[] GetEmailsAsString(NSEMailConnectionInfoExtended p_0, String[] p_1)<\/b>\n\n\\param p_0 connectionInfoExtended\r\n\\param p_1 messageIds"},
{text: "NSEMailAgent.GetFolderList", help: "<b>String[] GetFolderList(NSEMailConnectionInfo p_0, Bool p_1)<\/b>\n\nRetrieve all folders for the mail account. String is separated in sections by the paragraph character.  First section contains the folder delimeter char. Next is folder name. Additional sections may be unread and total items.\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 includeItemCount: If true, unread and total items are added to the foldername separated by a comma\r\n\\return List of available folders as a string array\r\n"},
{text: "NSEMailAgent.CreateFolder", help: "<b>Void CreateFolder(NSEMailConnectionInfo p_0)<\/b>\n\nCreate a new folder on the server\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n"},
{text: "NSEMailAgent.Delete", help: "<b>Void Delete(NSEMailConnectionInfo p_0, Integer[] p_1, String p_2)<\/b>\n\nDelete specified mail items\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 messageServerIds: The e-mails to handle\r\n\\param p_2 moveToFolder: If set, move deleted items to this folder\r\n"},
{text: "NSEMailAgent.DeleteExtended", help: "<b>Void DeleteExtended(NSEMailConnectionInfoExtended p_0, String[] p_1)<\/b>\n\n\\param p_0 connectionInfoExtended\r\n\\param p_1 messageIds"},
{text: "NSEMailAgent.DeleteFolder", help: "<b>Void DeleteFolder(NSEMailConnectionInfo p_0)<\/b>\n\nDelete a folder from the server\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n"},
{text: "NSEMailAgent.EmptyFolder", help: "<b>Void EmptyFolder(NSEMailConnectionInfo p_0, String p_1)<\/b>\n\nDelete all items in folder specified in the connection object\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 moveToFolder: If set, move deleted items to this folder\r\n"},
{text: "NSEMailAgent.MarkAsRead", help: "<b>Void MarkAsRead(NSEMailConnectionInfo p_0, Integer[] p_1, Bool p_2)<\/b>\n\nMark one or more e-mails as (un)read\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 messageServerIds: The e-mails to handle\r\n\\param p_2 read: If true mails are marked as read.\n\t\/\/\/ If false mails are marked as unread."},
{text: "NSEMailAgent.MoveToFolder", help: "<b>Void MoveToFolder(NSEMailConnectionInfo p_0, Integer[] p_1, String p_2)<\/b>\n\nMoved specified items from current folder to targetFolder\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 messageServerIds: The e-mails to handle\r\n\\param p_2 targetFolder: Name of folder to move items to\r\n"},
{text: "NSEMailAgent.RelayMessage", help: "<b>Void RelayMessage(NSEMailConnectionInfoExtended p_0, String p_1, String p_2, String[] p_3)<\/b>\n\n\\param p_0 connectionInfoExtended\r\n\\param p_1 rfc822\r\n\\param p_2 from\r\n\\param p_3 recipients"},
{text: "NSEMailAgent.SetSubscription", help: "<b>Void SetSubscription(NSEMailConnectionInfo p_0, NSEMailFolder[] p_1)<\/b>\n\nSet subscription on or off on a set of folders\r\n\r\n\\param p_0 connectionInfo: All information needed to connect to the mailserver\r\n\\param p_1 folders: Folders to set subscription value on\r\n"},
{text: "Void.NSEMailAttachment", help: "<b>NSEMailAttachment<\/b>\n\nInformation about an attachment"},
{text: "NSEMailAttachment.GetSize", help: "<b>Integer GetSize()<\/b>\n\nSize of attachment\r\n\r\n\\return Integer"},
{text: "NSEMailAttachment.GetStream", help: "<b>NSStream GetStream()<\/b>\n\nBinary stream for outgoing attachments. This property will not be populated for existing e-mail items.\r\n\r\n\\return Stream"},
{text: "NSEMailAttachment.GetDescription", help: "<b>String GetDescription()<\/b>\n\nName\/description\r\n\r\n\\return String"},
{text: "NSEMailAttachment.GetDisposition", help: "<b>String GetDisposition()<\/b>\n\nContent-Disposition\r\n\r\n\\return String"},
{text: "NSEMailAttachment.GetEncoding", help: "<b>String GetEncoding()<\/b>\n\nContent-Transfer-Encoding\r\n\r\n\\return String"},
{text: "NSEMailAttachment.GetFilename", help: "<b>String GetFilename()<\/b>\n\nFilename\r\n\r\n\\return String"},
{text: "NSEMailAttachment.GetId", help: "<b>String GetId()<\/b>\n\nContent-ID\r\n\r\n\\return String"},
{text: "NSEMailAttachment.GetType", help: "<b>String GetType()<\/b>\n\nAttachment Content-Type\r\n\r\n\\return String"},
{text: "NSEMailAttachment.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nName\/description\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSEMailAttachment.SetDisposition", help: "<b>Void SetDisposition(String p_0)<\/b>\n\nContent-Disposition\r\n\r\n\\param p_0 Disposition: String\r\n\\return String"},
{text: "NSEMailAttachment.SetEncoding", help: "<b>Void SetEncoding(String p_0)<\/b>\n\nContent-Transfer-Encoding\r\n\r\n\\param p_0 Encoding: String\r\n\\return String"},
{text: "NSEMailAttachment.SetFilename", help: "<b>Void SetFilename(String p_0)<\/b>\n\nFilename\r\n\r\n\\param p_0 Filename: String\r\n\\return String"},
{text: "NSEMailAttachment.SetId", help: "<b>Void SetId(String p_0)<\/b>\n\nContent-ID\r\n\r\n\\param p_0 Id: String\r\n\\return String"},
{text: "NSEMailAttachment.SetSize", help: "<b>Void SetSize(Integer p_0)<\/b>\n\nSize of attachment\r\n\r\n\\param p_0 Size: Integer\r\n\\return Integer"},
{text: "NSEMailAttachment.SetStream", help: "<b>Void SetStream(NSStream p_0)<\/b>\n\nBinary stream for outgoing attachments. This property will not be populated for existing e-mail items.\r\n\r\n\\param p_0 Stream: Stream\r\n\\return Stream"},
{text: "NSEMailAttachment.SetType", help: "<b>Void SetType(String p_0)<\/b>\n\nAttachment Content-Type\r\n\r\n\\param p_0 Type: String\r\n\\return String"},
{text: "Void.NSEMailConnectionInfo", help: "<b>NSEMailConnectionInfo<\/b>\n\nAll information needed to connect to a mailserver"},
{text: "NSEMailConnectionInfo.GetUseSSL", help: "<b>Bool GetUseSSL()<\/b>\n\nUse a secure connection with the server\r\n\r\n\\return Bool"},
{text: "NSEMailConnectionInfo.GetFolder", help: "<b>String GetFolder()<\/b>\n\nOptional folder to set as current after logging in\r\n\r\n\\return String"},
{text: "NSEMailConnectionInfo.GetPassword", help: "<b>String GetPassword()<\/b>\n\nPassword for the username\r\n\r\n\\return String"},
{text: "NSEMailConnectionInfo.GetServerName", help: "<b>String GetServerName()<\/b>\n\nHostname or ip to server to connect to. Custom ports may be specified by adding ':' and the port number after the name\/ip. Ex: '127.0.0.1:6543'\r\n\r\n\\return String"},
{text: "NSEMailConnectionInfo.GetUserName", help: "<b>String GetUserName()<\/b>\n\nName of user to log in with\r\n\r\n\\return String"},
{text: "NSEMailConnectionInfo.SetFolder", help: "<b>Void SetFolder(String p_0)<\/b>\n\nOptional folder to set as current after logging in\r\n\r\n\\param p_0 Folder: String\r\n\\return String"},
{text: "NSEMailConnectionInfo.SetPassword", help: "<b>Void SetPassword(String p_0)<\/b>\n\nPassword for the username\r\n\r\n\\param p_0 Password: String\r\n\\return String"},
{text: "NSEMailConnectionInfo.SetServerName", help: "<b>Void SetServerName(String p_0)<\/b>\n\nHostname or ip to server to connect to. Custom ports may be specified by adding ':' and the port number after the name\/ip. Ex: '127.0.0.1:6543'\r\n\r\n\\param p_0 ServerName: String\r\n\\return String"},
{text: "NSEMailConnectionInfo.SetUserName", help: "<b>Void SetUserName(String p_0)<\/b>\n\nName of user to log in with\r\n\r\n\\param p_0 UserName: String\r\n\\return String"},
{text: "NSEMailConnectionInfo.SetUseSSL", help: "<b>Void SetUseSSL(Bool p_0)<\/b>\n\nUse a secure connection with the server\r\n\r\n\\param p_0 UseSSL: Bool\r\n\\return Bool"},
{text: "Void.NSEMailConnectionInfoExtended", help: "<b>NSEMailConnectionInfoExtended<\/b>\n\n"},
{text: "NSEMailConnectionInfoExtended.GetUseSSL", help: "<b>Bool GetUseSSL()<\/b>\n\nUse a secure connection with the server\r\n\r\n\\return Bool"},
{text: "NSEMailConnectionInfoExtended.GetPort", help: "<b>Integer GetPort()<\/b>\n\n\\return Integer"},
{text: "NSEMailConnectionInfoExtended.GetFolder", help: "<b>String GetFolder()<\/b>\n\nOptional folder to set as current after logging in\r\n\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.GetPassword", help: "<b>String GetPassword()<\/b>\n\nPassword for the username\r\n\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.GetProtocol", help: "<b>String GetProtocol()<\/b>\n\n\\return String"},
{text: "NSEMailConnectionInfoExtended.GetServerName", help: "<b>String GetServerName()<\/b>\n\nHostname or ip to server to connect to. Custom ports may be specified by adding ':' and the port number after the name\/ip. Ex: '127.0.0.1:6543'\r\n\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.GetUserName", help: "<b>String GetUserName()<\/b>\n\nName of user to log in with\r\n\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.SetFolder", help: "<b>Void SetFolder(String p_0)<\/b>\n\nOptional folder to set as current after logging in\r\n\r\n\\param p_0 Folder: String\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.SetPassword", help: "<b>Void SetPassword(String p_0)<\/b>\n\nPassword for the username\r\n\r\n\\param p_0 Password: String\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.SetPort", help: "<b>Void SetPort(Integer p_0)<\/b>\n\n\\param p_0 Port: Integer\r\n\\return Integer"},
{text: "NSEMailConnectionInfoExtended.SetProtocol", help: "<b>Void SetProtocol(String p_0)<\/b>\n\n\\param p_0 Protocol: String\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.SetServerName", help: "<b>Void SetServerName(String p_0)<\/b>\n\nHostname or ip to server to connect to. Custom ports may be specified by adding ':' and the port number after the name\/ip. Ex: '127.0.0.1:6543'\r\n\r\n\\param p_0 ServerName: String\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.SetUserName", help: "<b>Void SetUserName(String p_0)<\/b>\n\nName of user to log in with\r\n\r\n\\param p_0 UserName: String\r\n\\return String"},
{text: "NSEMailConnectionInfoExtended.SetUseSSL", help: "<b>Void SetUseSSL(Bool p_0)<\/b>\n\nUse a secure connection with the server\r\n\r\n\\param p_0 UseSSL: Bool\r\n\\return Bool"},
{text: "Void.NSEMailCustomHeader", help: "<b>NSEMailCustomHeader<\/b>\n\n"},
{text: "NSEMailCustomHeader.GetName", help: "<b>String GetName()<\/b>\n\nName of header\r\n\r\n\\return String"},
{text: "NSEMailCustomHeader.GetValues", help: "<b>String[] GetValues()<\/b>\n\n\\return StringArray"},
{text: "NSEMailCustomHeader.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of header\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSEMailCustomHeader.SetValues", help: "<b>Void SetValues(String[] p_0)<\/b>\n\n\\param p_0 Values: StringArray\r\n\\return StringArray"},
{text: "Void.NSEMailEntity", help: "<b>NSEMailEntity<\/b>\n\nAll information about an e-mail"},
{text: "NSEMailEntity.GetIsSent", help: "<b>Bool GetIsSent()<\/b>\n\nIs this a sent e-mail (not new)\r\n\r\n\\return Bool"},
{text: "NSEMailEntity.GetSent", help: "<b>DateTime GetSent()<\/b>\n\nWhen was the e-mail sent\r\n\r\n\\return DateTime"},
{text: "NSEMailEntity.GetFlags", help: "<b>Integer GetFlags()<\/b>\n\nFlag status of this mail (unread, replied, deleted )\r\n\r\n\\return Integer"},
{text: "NSEMailEntity.GetPriority", help: "<b>Integer GetPriority()<\/b>\n\nImportance of the e-mail\r\n\r\n\\return Integer"},
{text: "NSEMailEntity.GetServerId", help: "<b>Integer GetServerId()<\/b>\n\nUnique id for the e-mail on the server\r\n\r\n\\return Integer"},
{text: "NSEMailEntity.GetSize", help: "<b>Integer GetSize()<\/b>\n\nTotal size of the e-mail\r\n\r\n\\return Integer"},
{text: "NSEMailEntity.GetFrom", help: "<b>NSEMailAddress GetFrom()<\/b>\n\nWho did the e-mail originate from\r\n\r\n\\return EMailAddress"},
{text: "NSEMailEntity.GetBcc", help: "<b>NSEMailAddress[] GetBcc()<\/b>\n\nBcc recipient of e-mail\r\n\r\n\\return EMailAddressArray"},
{text: "NSEMailEntity.GetCc", help: "<b>NSEMailAddress[] GetCc()<\/b>\n\nCc recipients of e-mail\r\n\r\n\\return EMailAddressArray"},
{text: "NSEMailEntity.GetTo", help: "<b>NSEMailAddress[] GetTo()<\/b>\n\nTo recipients of e-mail\r\n\r\n\\return EMailAddressArray"},
{text: "NSEMailEntity.GetAttachments", help: "<b>NSEMailAttachment[] GetAttachments()<\/b>\n\n\\return EMailAttachmentArray"},
{text: "NSEMailEntity.GetCustomHeaderList", help: "<b>NSEMailCustomHeader[] GetCustomHeaderList()<\/b>\n\nNon standard e-mail headers\r\n\r\n\\return EMailCustomHeaderArray"},
{text: "NSEMailEntity.GetFlags", help: "<b>NSEMailFlags GetFlags()<\/b>\n\nFlag status of this mail (unread, replied, deleted )\r\n\r\n"},
{text: "NSEMailEntity.GetPriority", help: "<b>NSEMailPriority GetPriority()<\/b>\n\nImportance of the e-mail\r\n\r\n"},
{text: "NSEMailEntity.GetEMailSOInfo", help: "<b>NSEMailSOInfo GetEMailSOInfo()<\/b>\n\nGlue between SuperOffice data and an e-mail.\r\n\r\n\\return EMailSOInfo"},
{text: "NSEMailEntity.GetFolderName", help: "<b>String GetFolderName()<\/b>\n\nName of folder the e-mail belongs in\r\n\r\n\\return String"},
{text: "NSEMailEntity.GetHTMLBody", help: "<b>String GetHTMLBody()<\/b>\n\nBody formatted in HTML\r\n\r\n\\return String"},
{text: "NSEMailEntity.GetMessageID", help: "<b>String GetMessageID()<\/b>\n\nUnique id of e-mails\r\n\r\n\\return String"},
{text: "NSEMailEntity.GetPlainBody", help: "<b>String GetPlainBody()<\/b>\n\nBody formatted in plain text\r\n\r\n\\return String"},
{text: "NSEMailEntity.GetSubject", help: "<b>String GetSubject()<\/b>\n\nSubject of the e-mail\r\n\r\n\\return String"},
{text: "NSEMailEntity.SetAttachments", help: "<b>Void SetAttachments(NSEMailAttachment[] p_0)<\/b>\n\n\\param p_0 Attachments: EMailAttachmentArray\r\n\\return EMailAttachmentArray"},
{text: "NSEMailEntity.SetBcc", help: "<b>Void SetBcc(NSEMailAddress[] p_0)<\/b>\n\nBcc recipient of e-mail\r\n\r\n\\param p_0 Bcc: EMailAddressArray\r\n\\return EMailAddressArray"},
{text: "NSEMailEntity.SetCc", help: "<b>Void SetCc(NSEMailAddress[] p_0)<\/b>\n\nCc recipients of e-mail\r\n\r\n\\param p_0 Cc: EMailAddressArray\r\n\\return EMailAddressArray"},
{text: "NSEMailEntity.SetCustomHeaderList", help: "<b>Void SetCustomHeaderList(NSEMailCustomHeader[] p_0)<\/b>\n\nNon standard e-mail headers\r\n\r\n\\param p_0 CustomHeaderList: EMailCustomHeaderArray\r\n\\return EMailCustomHeaderArray"},
{text: "NSEMailEntity.SetEMailSOInfo", help: "<b>Void SetEMailSOInfo(NSEMailSOInfo p_0)<\/b>\n\nGlue between SuperOffice data and an e-mail.\r\n\r\n\\param p_0 EMailSOInfo: EMailSOInfo\r\n\\return EMailSOInfo"},
{text: "NSEMailEntity.SetFlags", help: "<b>Void SetFlags(Integer p_0)<\/b>\n\nFlag status of this mail (unread, replied, deleted )\r\n\r\n\\param p_0 Flags: Integer\r\n\\return Integer"},
{text: "NSEMailEntity.SetFlags", help: "<b>Void SetFlags(NSEMailFlags p_0)<\/b>\n\nFlag status of this mail (unread, replied, deleted )\r\n\r\n"},
{text: "NSEMailEntity.SetFolderName", help: "<b>Void SetFolderName(String p_0)<\/b>\n\nName of folder the e-mail belongs in\r\n\r\n\\param p_0 FolderName: String\r\n\\return String"},
{text: "NSEMailEntity.SetFrom", help: "<b>Void SetFrom(NSEMailAddress p_0)<\/b>\n\nWho did the e-mail originate from\r\n\r\n\\param p_0 From: EMailAddress\r\n\\return EMailAddress"},
{text: "NSEMailEntity.SetHTMLBody", help: "<b>Void SetHTMLBody(String p_0)<\/b>\n\nBody formatted in HTML\r\n\r\n\\param p_0 HTMLBody: String\r\n\\return String"},
{text: "NSEMailEntity.SetIsSent", help: "<b>Void SetIsSent(Bool p_0)<\/b>\n\nIs this a sent e-mail (not new)\r\n\r\n\\param p_0 IsSent: Bool\r\n\\return Bool"},
{text: "NSEMailEntity.SetMessageID", help: "<b>Void SetMessageID(String p_0)<\/b>\n\nUnique id of e-mails\r\n\r\n\\param p_0 MessageID: String\r\n\\return String"},
{text: "NSEMailEntity.SetPlainBody", help: "<b>Void SetPlainBody(String p_0)<\/b>\n\nBody formatted in plain text\r\n\r\n\\param p_0 PlainBody: String\r\n\\return String"},
{text: "NSEMailEntity.SetPriority", help: "<b>Void SetPriority(Integer p_0)<\/b>\n\nImportance of the e-mail\r\n\r\n\\param p_0 Priority: Integer\r\n\\return Integer"},
{text: "NSEMailEntity.SetPriority", help: "<b>Void SetPriority(NSEMailPriority p_0)<\/b>\n\nImportance of the e-mail\r\n\r\n"},
{text: "NSEMailEntity.SetSent", help: "<b>Void SetSent(DateTime p_0)<\/b>\n\nWhen was the e-mail sent\r\n\r\n\\param p_0 Sent: DateTime\r\n\\return DateTime"},
{text: "NSEMailEntity.SetServerId", help: "<b>Void SetServerId(Integer p_0)<\/b>\n\nUnique id for the e-mail on the server\r\n\r\n\\param p_0 ServerId: Integer\r\n\\return Integer"},
{text: "NSEMailEntity.SetSize", help: "<b>Void SetSize(Integer p_0)<\/b>\n\nTotal size of the e-mail\r\n\r\n\\param p_0 Size: Integer\r\n\\return Integer"},
{text: "NSEMailEntity.SetSubject", help: "<b>Void SetSubject(String p_0)<\/b>\n\nSubject of the e-mail\r\n\r\n\\param p_0 Subject: String\r\n\\return String"},
{text: "NSEMailEntity.SetTo", help: "<b>Void SetTo(NSEMailAddress[] p_0)<\/b>\n\nTo recipients of e-mail\r\n\r\n\\param p_0 To: EMailAddressArray\r\n\\return EMailAddressArray"},
{text: "Void.NSEMailEnvelope", help: "<b>NSEMailEnvelope<\/b>\n\nLimited information about one e-mail."},
{text: "NSEMailEnvelope.GetSent", help: "<b>DateTime GetSent()<\/b>\n\nWhen was the e-mail sent\r\n\r\n\\return DateTime"},
{text: "NSEMailEnvelope.GetFlags", help: "<b>Integer GetFlags()<\/b>\n\nFlag status of this mail (unread, replied, deleted )\r\n\r\n\\return Integer"},
{text: "NSEMailEnvelope.GetPriority", help: "<b>Integer GetPriority()<\/b>\n\nImportance of the e-mail\r\n\r\n\\return Integer"},
{text: "NSEMailEnvelope.GetServerId", help: "<b>Integer GetServerId()<\/b>\n\nUnique id for the e-mail on the server\r\n\r\n\\return Integer"},
{text: "NSEMailEnvelope.GetSize", help: "<b>Integer GetSize()<\/b>\n\nTotal size of the e-mail\r\n\r\n\\return Integer"},
{text: "NSEMailEnvelope.GetFrom", help: "<b>NSEMailAddress GetFrom()<\/b>\n\nWho did the e-mail originate from\r\n\r\n\\return EMailAddress"},
{text: "NSEMailEnvelope.GetTo", help: "<b>NSEMailAddress[] GetTo()<\/b>\n\nTo recipients of e-mail\r\n\r\n\\return EMailAddressArray"},
{text: "NSEMailEnvelope.GetFlags", help: "<b>NSEMailFlags GetFlags()<\/b>\n\nFlag status of this mail (unread, replied, deleted )\r\n\r\n"},
{text: "NSEMailEnvelope.GetPriority", help: "<b>NSEMailPriority GetPriority()<\/b>\n\nImportance of the e-mail\r\n\r\n"},
{text: "NSEMailEnvelope.GetEMailSOInfo", help: "<b>NSEMailSOInfo GetEMailSOInfo()<\/b>\n\nGlue between SuperOffice data and an e-mail.\r\n\r\n\\return EMailSOInfo"},
{text: "NSEMailEnvelope.GetMessageId", help: "<b>String GetMessageId()<\/b>\n\nUnique id of e-mails\r\n\r\n\\return String"},
{text: "NSEMailEnvelope.GetSubject", help: "<b>String GetSubject()<\/b>\n\nSubject of the e-mail\r\n\r\n\\return String"},
{text: "NSEMailEnvelope.SetEMailSOInfo", help: "<b>Void SetEMailSOInfo(NSEMailSOInfo p_0)<\/b>\n\nGlue between SuperOffice data and an e-mail.\r\n\r\n\\param p_0 EMailSOInfo: EMailSOInfo\r\n\\return EMailSOInfo"},
{text: "NSEMailEnvelope.SetFlags", help: "<b>Void SetFlags(Integer p_0)<\/b>\n\nFlag status of this mail (unread, replied, deleted )\r\n\r\n\\param p_0 Flags: Integer\r\n\\return Integer"},
{text: "NSEMailEnvelope.SetFlags", help: "<b>Void SetFlags(NSEMailFlags p_0)<\/b>\n\nFlag status of this mail (unread, replied, deleted )\r\n\r\n"},
{text: "NSEMailEnvelope.SetFrom", help: "<b>Void SetFrom(NSEMailAddress p_0)<\/b>\n\nWho did the e-mail originate from\r\n\r\n\\param p_0 From: EMailAddress\r\n\\return EMailAddress"},
{text: "NSEMailEnvelope.SetMessageId", help: "<b>Void SetMessageId(String p_0)<\/b>\n\nUnique id of e-mails\r\n\r\n\\param p_0 MessageId: String\r\n\\return String"},
{text: "NSEMailEnvelope.SetPriority", help: "<b>Void SetPriority(Integer p_0)<\/b>\n\nImportance of the e-mail\r\n\r\n\\param p_0 Priority: Integer\r\n\\return Integer"},
{text: "NSEMailEnvelope.SetPriority", help: "<b>Void SetPriority(NSEMailPriority p_0)<\/b>\n\nImportance of the e-mail\r\n\r\n"},
{text: "NSEMailEnvelope.SetSent", help: "<b>Void SetSent(DateTime p_0)<\/b>\n\nWhen was the e-mail sent\r\n\r\n\\param p_0 Sent: DateTime\r\n\\return DateTime"},
{text: "NSEMailEnvelope.SetServerId", help: "<b>Void SetServerId(Integer p_0)<\/b>\n\nUnique id for the e-mail on the server\r\n\r\n\\param p_0 ServerId: Integer\r\n\\return Integer"},
{text: "NSEMailEnvelope.SetSize", help: "<b>Void SetSize(Integer p_0)<\/b>\n\nTotal size of the e-mail\r\n\r\n\\param p_0 Size: Integer\r\n\\return Integer"},
{text: "NSEMailEnvelope.SetSubject", help: "<b>Void SetSubject(String p_0)<\/b>\n\nSubject of the e-mail\r\n\r\n\\param p_0 Subject: String\r\n\\return String"},
{text: "NSEMailEnvelope.SetTo", help: "<b>Void SetTo(NSEMailAddress[] p_0)<\/b>\n\nTo recipients of e-mail\r\n\r\n\\param p_0 To: EMailAddressArray\r\n\\return EMailAddressArray"},
{text: "Void.NSEMailFolder", help: "<b>NSEMailFolder<\/b>\n\nProperties for a mail folder"},
{text: "NSEMailFolder.GetSubscribed", help: "<b>Bool GetSubscribed()<\/b>\n\nIndicates if the folder is subscribed to\r\n\r\n\\return Bool"},
{text: "NSEMailFolder.GetTotalItems", help: "<b>Integer GetTotalItems()<\/b>\n\nTotal number of messages in the folder\r\n\r\n\\return Integer"},
{text: "NSEMailFolder.GetUnreadItems", help: "<b>Integer GetUnreadItems()<\/b>\n\nNumber of unread messages in the folder\r\n\r\n\\return Integer"},
{text: "NSEMailFolder.GetDelimiter", help: "<b>String GetDelimiter()<\/b>\n\nThe character which is used to delimit folder levels on the server\r\n\r\n\\return String"},
{text: "NSEMailFolder.GetFlags", help: "<b>String GetFlags()<\/b>\n\nFlags associated with the folder\r\n\r\n\\return String"},
{text: "NSEMailFolder.GetName", help: "<b>String GetName()<\/b>\n\nName of folder\r\n\r\n\\return String"},
{text: "NSEMailFolder.SetDelimiter", help: "<b>Void SetDelimiter(String p_0)<\/b>\n\nThe character which is used to delimit folder levels on the server\r\n\r\n\\param p_0 Delimiter: String\r\n\\return String"},
{text: "NSEMailFolder.SetFlags", help: "<b>Void SetFlags(String p_0)<\/b>\n\nFlags associated with the folder\r\n\r\n\\param p_0 Flags: String\r\n\\return String"},
{text: "NSEMailFolder.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of folder\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSEMailFolder.SetSubscribed", help: "<b>Void SetSubscribed(Bool p_0)<\/b>\n\nIndicates if the folder is subscribed to\r\n\r\n\\param p_0 Subscribed: Bool\r\n\\return Bool"},
{text: "NSEMailFolder.SetTotalItems", help: "<b>Void SetTotalItems(Integer p_0)<\/b>\n\nTotal number of messages in the folder\r\n\r\n\\param p_0 TotalItems: Integer\r\n\\return Integer"},
{text: "NSEMailFolder.SetUnreadItems", help: "<b>Void SetUnreadItems(Integer p_0)<\/b>\n\nNumber of unread messages in the folder\r\n\r\n\\param p_0 UnreadItems: Integer\r\n\\return Integer"},
{text: "Void.NSEMailSOInfo", help: "<b>NSEMailSOInfo<\/b>\n\nGlue between SuperOffice data and an e-mail."},
{text: "NSEMailSOInfo.GetArchived", help: "<b>Bool GetArchived()<\/b>\n\nIs this e-mail archived in SuperOffice\r\n\r\n\\return Bool"},
{text: "NSEMailSOInfo.GetAppointmentId", help: "<b>Integer GetAppointmentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSEMailSOInfo.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSEMailSOInfo.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSEMailSOInfo.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSEMailSOInfo.SetAppointmentId", help: "<b>Void SetAppointmentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AppointmentId: Integer\r\n\\return Integer"},
{text: "NSEMailSOInfo.SetArchived", help: "<b>Void SetArchived(Bool p_0)<\/b>\n\nIs this e-mail archived in SuperOffice\r\n\r\n\\param p_0 Archived: Bool\r\n\\return Bool"},
{text: "NSEMailSOInfo.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSEMailSOInfo.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSEMailSOInfo.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "Void.NSEntityElement", help: "<b>NSEntityElement<\/b>\n\n"},
{text: "NSEntityElement.GetDescription", help: "<b>String GetDescription()<\/b>\n\n"},
{text: "NSEntityElement.GetStrippedValue", help: "<b>String GetStrippedValue()<\/b>\n\n"},
{text: "NSEntityElement.GetValue", help: "<b>String GetValue()<\/b>\n\n"},
{text: "NSEntityElement.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\n"},
{text: "NSEntityElement.SetStrippedValue", help: "<b>Void SetStrippedValue(String p_0)<\/b>\n\n"},
{text: "NSEntityElement.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n"},
{text: "Void.NSEntityName", help: "<b>NSEntityName<\/b>\n\n"},
{text: "NSEntityName.GetTableDescription", help: "<b>String GetTableDescription()<\/b>\n\nName to be used in GUI, preferable a resource string\r\n\r\n\\return String"},
{text: "NSEntityName.GetTableName", help: "<b>String GetTableName()<\/b>\n\nThe name of the table in the database\r\n\r\n\\return String"},
{text: "NSEntityName.SetTableDescription", help: "<b>Void SetTableDescription(String p_0)<\/b>\n\nName to be used in GUI, preferable a resource string\r\n\r\n\\param p_0 TableDescription: String\r\n\\return String"},
{text: "NSEntityName.SetTableName", help: "<b>Void SetTableName(String p_0)<\/b>\n\nThe name of the table in the database\r\n\r\n\\param p_0 TableName: String\r\n\\return String"},
{text: "Void.NSErpConnection", help: "<b>NSErpConnection<\/b>\n\nInformation about a connection to the ERP system."},
{text: "NSErpConnection.GetActive", help: "<b>Bool GetActive()<\/b>\n\nIs this connection currently active\r\n\r\n\\return Bool"},
{text: "NSErpConnection.GetAllAccess", help: "<b>Bool GetAllAccess()<\/b>\n\nIs this connection accessible to everyone?  If not, then the ErpConnectionAccess table tells us who can access it\r\n\r\n\\return Bool"},
{text: "NSErpConnection.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIf true, the connection has been deleted and should not be shown to the users.\r\n\r\n\\return Bool"},
{text: "NSErpConnection.GetActive", help: "<b>Integer GetActive()<\/b>\n\n"},
{text: "NSErpConnection.GetErpConnectionId", help: "<b>Integer GetErpConnectionId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSErpConnection.GetErpConnectorId", help: "<b>Integer GetErpConnectorId()<\/b>\n\nThe connector that this connection should call\r\n\r\n\\return Integer"},
{text: "NSErpConnection.GetAssociateAccessIds", help: "<b>Integer[] GetAssociateAccessIds()<\/b>\n\nArray of ids containing associates that will have access to this connection.\r\n\r\n\\return IntegerArray"},
{text: "NSErpConnection.GetUserGroupAccessIds", help: "<b>Integer[] GetUserGroupAccessIds()<\/b>\n\nArray of ids containing usergroups that will have access to this connection.\r\n\r\n\\return IntegerArray"},
{text: "NSErpConnection.GetConfigFields", help: "<b>Map GetConfigFields()<\/b>\n\n"},
{text: "NSErpConnection.GetConnectionId", help: "<b>String GetConnectionId()<\/b>\n\nThe GUID that uniquely identifies this connection; passed to the Connector in every call\r\n\r\n\\return String"},
{text: "NSErpConnection.GetDisplayDescription", help: "<b>String GetDisplayDescription()<\/b>\n\nTooltip\/description shown to user; multi-language support\r\n\r\n\\return String"},
{text: "NSErpConnection.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nConnection name shown to user; multi-language support\r\n\r\n\\return String"},
{text: "NSErpConnection.GetMostRecentTimestamp", help: "<b>String GetMostRecentTimestamp()<\/b>\n\nDatetime, transaction number or other identification of the point in time of the most-recently seen actor in the ERP system\r\n\r\n\\return String"},
{text: "NSErpConnection.GetConfigFields", help: "<b>StringDictionary GetConfigFields()<\/b>\n\nThe config fields needed to establish a connection to the connector\r\n\r\n\\return StringDictionary"},
{text: "NSErpConnection.SetActive", help: "<b>Void SetActive(Bool p_0)<\/b>\n\nIs this connection currently active\r\n\r\n\\param p_0 Active: Bool\r\n\\return Bool"},
{text: "NSErpConnection.SetActive", help: "<b>Void SetActive(Integer p_0)<\/b>\n\n"},
{text: "NSErpConnection.SetAllAccess", help: "<b>Void SetAllAccess(Bool p_0)<\/b>\n\nIs this connection accessible to everyone?  If not, then the ErpConnectionAccess table tells us who can access it\r\n\r\n\\param p_0 AllAccess: Bool\r\n\\return Bool"},
{text: "NSErpConnection.SetAssociateAccessIds", help: "<b>Void SetAssociateAccessIds(Integer[] p_0)<\/b>\n\nArray of ids containing associates that will have access to this connection.\r\n\r\n\\param p_0 AssociateAccessIds: IntegerArray\r\n\\return IntegerArray"},
{text: "NSErpConnection.SetConfigFields", help: "<b>Void SetConfigFields(Map p_0)<\/b>\n\n"},
{text: "NSErpConnection.SetConfigFields", help: "<b>Void SetConfigFields(StringDictionary p_0)<\/b>\n\nThe config fields needed to establish a connection to the connector\r\n\r\n\\param p_0 ConfigFields: StringDictionary\r\n\\return StringDictionary"},
{text: "NSErpConnection.SetConnectionId", help: "<b>Void SetConnectionId(String p_0)<\/b>\n\nThe GUID that uniquely identifies this connection; passed to the Connector in every call\r\n\r\n\\param p_0 ConnectionId: String\r\n\\return String"},
{text: "NSErpConnection.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIf true, the connection has been deleted and should not be shown to the users.\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSErpConnection.SetDisplayDescription", help: "<b>Void SetDisplayDescription(String p_0)<\/b>\n\nTooltip\/description shown to user; multi-language support\r\n\r\n\\param p_0 DisplayDescription: String\r\n\\return String"},
{text: "NSErpConnection.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nConnection name shown to user; multi-language support\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSErpConnection.SetErpConnectionId", help: "<b>Void SetErpConnectionId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ErpConnectionId: Integer\r\n\\return Integer"},
{text: "NSErpConnection.SetErpConnectorId", help: "<b>Void SetErpConnectorId(Integer p_0)<\/b>\n\nThe connector that this connection should call\r\n\r\n\\param p_0 ErpConnectorId: Integer\r\n\\return Integer"},
{text: "NSErpConnection.SetMostRecentTimestamp", help: "<b>Void SetMostRecentTimestamp(String p_0)<\/b>\n\nDatetime, transaction number or other identification of the point in time of the most-recently seen actor in the ERP system\r\n\r\n\\param p_0 MostRecentTimestamp: String\r\n\\return String"},
{text: "NSErpConnection.SetUserGroupAccessIds", help: "<b>Void SetUserGroupAccessIds(Integer[] p_0)<\/b>\n\nArray of ids containing usergroups that will have access to this connection.\r\n\r\n\\param p_0 UserGroupAccessIds: IntegerArray\r\n\\return IntegerArray"},
{text: "Void.NSErpConnectionData", help: "<b>NSErpConnectionData<\/b>\n\nContains connection data and field labels for one connection"},
{text: "NSErpConnectionData.GetConnected", help: "<b>Bool GetConnected()<\/b>\n\nTrue if this entity instance has syncronized connection\r\n\r\n\\return Bool"},
{text: "NSErpConnectionData.GetCrmActorType", help: "<b>Integer GetCrmActorType()<\/b>\n\nThe crm actor type which these fields belongs to\r\n\r\n\\return Integer"},
{text: "NSErpConnectionData.GetErpActorType", help: "<b>Integer GetErpActorType()<\/b>\n\nThe erp actor type which these fields belongs to\r\n\r\n\\return Integer"},
{text: "NSErpConnectionData.GetErpActorTypes", help: "<b>Integer GetErpActorTypes()<\/b>\n\n"},
{text: "NSErpConnectionData.GetErpConnectionId", help: "<b>Integer GetErpConnectionId()<\/b>\n\nThe id of the connection\r\n\r\n\\return Integer"},
{text: "NSErpConnectionData.GetErpActorTypes", help: "<b>NSErpActorType[] GetErpActorTypes()<\/b>\n\nContains all mapped ErpActorType for this CrmActorType\r\n\r\n\\return ErpActorTypeArray"},
{text: "NSErpConnectionData.GetErpFields", help: "<b>NSFieldMetadata[] GetErpFields()<\/b>\n\nThe ERP fields that should be displayed\r\n\r\n\\return FieldMetadataArray"},
{text: "NSErpConnectionData.GetConnectionName", help: "<b>String GetConnectionName()<\/b>\n\nThe name of the connection\r\n\r\n\\return String"},
{text: "NSErpConnectionData.SetConnected", help: "<b>Void SetConnected(Bool p_0)<\/b>\n\nTrue if this entity instance has syncronized connection\r\n\r\n\\param p_0 Connected: Bool\r\n\\return Bool"},
{text: "NSErpConnectionData.SetConnectionName", help: "<b>Void SetConnectionName(String p_0)<\/b>\n\nThe name of the connection\r\n\r\n\\param p_0 ConnectionName: String\r\n\\return String"},
{text: "NSErpConnectionData.SetCrmActorType", help: "<b>Void SetCrmActorType(Integer p_0)<\/b>\n\nThe crm actor type which these fields belongs to\r\n\r\n\\param p_0 CrmActorType: Integer\r\n\\return Integer"},
{text: "NSErpConnectionData.SetErpActorType", help: "<b>Void SetErpActorType(Integer p_0)<\/b>\n\nThe erp actor type which these fields belongs to\r\n\r\n\\param p_0 ErpActorType: Integer\r\n\\return Integer"},
{text: "NSErpConnectionData.SetErpActorTypes", help: "<b>Void SetErpActorTypes(Integer p_0)<\/b>\n\n"},
{text: "NSErpConnectionData.SetErpActorTypes", help: "<b>Void SetErpActorTypes(NSErpActorType[] p_0)<\/b>\n\nContains all mapped ErpActorType for this CrmActorType\r\n\r\n\\param p_0 ErpActorTypes: ErpActorTypeArray\r\n\\return ErpActorTypeArray"},
{text: "NSErpConnectionData.SetErpConnectionId", help: "<b>Void SetErpConnectionId(Integer p_0)<\/b>\n\nThe id of the connection\r\n\r\n\\param p_0 ErpConnectionId: Integer\r\n\\return Integer"},
{text: "NSErpConnectionData.SetErpFields", help: "<b>Void SetErpFields(NSFieldMetadata[] p_0)<\/b>\n\nThe ERP fields that should be displayed\r\n\r\n\\param p_0 ErpFields: FieldMetadataArray\r\n\\return FieldMetadataArray"},
{text: "Void.NSErpSyncActorSummary", help: "<b>NSErpSyncActorSummary<\/b>\n\nSummary of the current setup of the ERP Integration, for one ERP actor"},
{text: "NSErpSyncActorSummary.GetHasMappings", help: "<b>Bool GetHasMappings()<\/b>\n\nDoes this actor type have field mappings\r\n\r\n\\return Bool"},
{text: "NSErpSyncActorSummary.GetActorType", help: "<b>Integer GetActorType()<\/b>\n\nActor type\r\n\r\n\\return Integer"},
{text: "NSErpSyncActorSummary.GetDefaults", help: "<b>String GetDefaults()<\/b>\n\nA summary of fields that have defaults\/rules for link creation\r\n\r\n\\return String"},
{text: "NSErpSyncActorSummary.GetMappings", help: "<b>String GetMappings()<\/b>\n\nA summary of fields that have mappings to or from the ERP system\r\n\r\n\\return String"},
{text: "NSErpSyncActorSummary.SetActorType", help: "<b>Void SetActorType(Integer p_0)<\/b>\n\nActor type\r\n\r\n\\param p_0 ActorType: Integer\r\n\\return Integer"},
{text: "NSErpSyncActorSummary.SetDefaults", help: "<b>Void SetDefaults(String p_0)<\/b>\n\nA summary of fields that have defaults\/rules for link creation\r\n\r\n\\param p_0 Defaults: String\r\n\\return String"},
{text: "NSErpSyncActorSummary.SetHasMappings", help: "<b>Void SetHasMappings(Bool p_0)<\/b>\n\nDoes this actor type have field mappings\r\n\r\n\\param p_0 HasMappings: Bool\r\n\\return Bool"},
{text: "NSErpSyncActorSummary.SetMappings", help: "<b>Void SetMappings(String p_0)<\/b>\n\nA summary of fields that have mappings to or from the ERP system\r\n\r\n\\param p_0 Mappings: String\r\n\\return String"},
{text: "Void.NSErpSyncActorTypeMapping", help: "<b>NSErpSyncActorTypeMapping<\/b>\n\nMapping information for one Actor, contains array of field mappings (ERP <-> SuperOffice)"},
{text: "NSErpSyncActorTypeMapping.GetIsActive", help: "<b>Bool GetIsActive()<\/b>\n\nIs this sync mapping active\r\n\r\n\\return Bool"},
{text: "NSErpSyncActorTypeMapping.GetActorTypeCrm", help: "<b>Integer GetActorTypeCrm()<\/b>\n\n"},
{text: "NSErpSyncActorTypeMapping.GetActorTypeErp", help: "<b>Integer GetActorTypeErp()<\/b>\n\n"},
{text: "NSErpSyncActorTypeMapping.GetErpConnectionId", help: "<b>Integer GetErpConnectionId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSErpSyncActorTypeMapping.GetActorTypeCrm", help: "<b>NSCrmActorType GetActorTypeCrm()<\/b>\n\nThe actor type (CRM side)\r\n\r\n\\return CrmActorType"},
{text: "NSErpSyncActorTypeMapping.GetActorTypeErp", help: "<b>NSErpActorType GetActorTypeErp()<\/b>\n\nThe actor type (ERP side)\r\n\r\n\\return ErpActorType"},
{text: "NSErpSyncActorTypeMapping.GetFieldMappings", help: "<b>NSErpSyncFieldMapping[] GetFieldMappings()<\/b>\n\nArray of individual field mappings; explicitly map to empty CrmFieldKey to indicate non-sync\r\n\r\n\\return ErpSyncFieldMappingArray"},
{text: "NSErpSyncActorTypeMapping.SetActorTypeCrm", help: "<b>Void SetActorTypeCrm(Integer p_0)<\/b>\n\n"},
{text: "NSErpSyncActorTypeMapping.SetActorTypeCrm", help: "<b>Void SetActorTypeCrm(NSCrmActorType p_0)<\/b>\n\nThe actor type (CRM side)\r\n\r\n\\param p_0 ActorTypeCrm: CrmActorType\r\n\\return CrmActorType"},
{text: "NSErpSyncActorTypeMapping.SetActorTypeErp", help: "<b>Void SetActorTypeErp(Integer p_0)<\/b>\n\n"},
{text: "NSErpSyncActorTypeMapping.SetActorTypeErp", help: "<b>Void SetActorTypeErp(NSErpActorType p_0)<\/b>\n\nThe actor type (ERP side)\r\n\r\n\\param p_0 ActorTypeErp: ErpActorType\r\n\\return ErpActorType"},
{text: "NSErpSyncActorTypeMapping.SetErpConnectionId", help: "<b>Void SetErpConnectionId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ErpConnectionId: Integer\r\n\\return Integer"},
{text: "NSErpSyncActorTypeMapping.SetFieldMappings", help: "<b>Void SetFieldMappings(NSErpSyncFieldMapping[] p_0)<\/b>\n\nArray of individual field mappings; explicitly map to empty CrmFieldKey to indicate non-sync\r\n\r\n\\param p_0 FieldMappings: ErpSyncFieldMappingArray\r\n\\return ErpSyncFieldMappingArray"},
{text: "NSErpSyncActorTypeMapping.SetIsActive", help: "<b>Void SetIsActive(Bool p_0)<\/b>\n\nIs this sync mapping active\r\n\r\n\\param p_0 IsActive: Bool\r\n\\return Bool"},
{text: "Void.NSErpSyncAgent", help: "<b>NSErpSyncAgent<\/b>\n\nServices for the ERP Integration Services feature"},
{text: "NSErpSyncAgent.BreakActorLink", help: "<b>Bool BreakActorLink(Integer p_0, Integer p_1, Integer p_2)<\/b>\n\nRemove the link between a CRM entity and an ERP entity\r\n\r\n\\param p_0 erpConnectionId: The ERP connection ID\r\n\\param p_1 crmRecordId: The ID of the CRM entity to connect to\r\n\\param p_2 crmActorType: Identifies the CRM actor type corresponding to this CRM entity\r\n\\return True if success"},
{text: "NSErpSyncAgent.CreateActorLink", help: "<b>Bool CreateActorLink(Integer p_0, Integer p_1, Integer p_2, String p_3, Integer p_4)<\/b>\n\nLink a crm entity to an erp entity\r\n\r\n\\param p_0 erpConnectionId: The ERP connection ID\r\n\\param p_1 crmRecordId: The ID of the CRM entity to connect to\r\n\\param p_2 crmActorType: Identifies the CRM actor type corresponding to this CRM entity\r\n\\param p_3 erpKey: The ERP entity identifier\r\n\\param p_4 erpActorType: The ERP actor type\r\n\\return True if success"},
{text: "NSErpSyncAgent.CreateErpActorFromCrm", help: "<b>Bool CreateErpActorFromCrm(Integer p_0, Integer p_1, Integer p_2, Integer p_3, Map p_4)<\/b>\n\n"},
{text: "NSErpSyncAgent.CreateErpActorFromCrm", help: "<b>Bool CreateErpActorFromCrm(Integer p_0, Integer p_1, Integer p_2, Integer p_3, StringDictionary p_4)<\/b>\n\nCreate ErpActor from crm entity\r\n\r\n\\param p_0 connectionId: The connection ID\r\n\\param p_1 crmEntityId: The ID of the CRM entity to create an ERP actor from\r\n\\param p_2 erpActorType: The ERP actor type\r\n\\param p_3 crmActorType: The CRM actor type\r\n\\param p_4 erpFieldKeyValues: A map of matching erp field keys and values to set for the new erp entity\r\n\\return Created ERP actor with success"},
{text: "NSErpSyncAgent.SaveErpConnectionSyncPriorities", help: "<b>Bool SaveErpConnectionSyncPriorities(Integer[] p_0)<\/b>\n\nTakes an array of the ErpConnection ids and saves these as ordered sync priorities\r\n\r\n\\param p_0 erpConnectionIds: The id put in array in the same order as the priorities\r\n\\return Returns true if new sync priorities is saved"},
{text: "NSErpSyncAgent.SupportsAdvancedSearch", help: "<b>Bool SupportsAdvancedSearch(Integer p_0, Integer p_1)<\/b>\n\nIndicates if the connection supports advanced search for the given erp actor\r\n\r\n\\param p_0 erpConnectionId: Ths id of the connection\r\n\\param p_1 erpActorType: The erp actor type to check for\r\n\\return True if advanced search is supported"},
{text: "NSErpSyncAgent.TestConnectionByConfig", help: "<b>Bool TestConnectionByConfig(Integer p_0, Map p_1)<\/b>\n\n"},
{text: "NSErpSyncAgent.TestConnectionByConfig", help: "<b>Bool TestConnectionByConfig(Integer p_0, StringDictionary p_1)<\/b>\n\nTests to see if the given connection has a valid connection to its connector\r\n\r\n\\param p_0 erpConnectionId: The id of the connector we try to connect to\r\n\\param p_1 configFields: The config fields used to test connection\r\n\\return Returns true if success"},
{text: "NSErpSyncAgent.TestConnectionById", help: "<b>Bool TestConnectionById(Integer p_0)<\/b>\n\nTests to see if we can establish a connection with the given config fields\r\n\r\n\\param p_0 erpConnectionId: The id of the connection\r\n\\return Returns true if success"},
{text: "NSErpSyncAgent.UpdateConnectionFields", help: "<b>Bool UpdateConnectionFields(Integer p_0)<\/b>\n\nGets all supported actor types, and all fields for each actor type, and save this state to the CRM database\r\n\r\n\\param p_0 erpConnectionId: The ERP connection ID\r\n\\return Success or fail"},
{text: "NSErpSyncAgent.CanDeleteErpSyncConnectorEntity", help: "<b>Integer CanDeleteErpSyncConnectorEntity(Integer p_0)<\/b>\n\nCan we delete the connector?\r\n\r\n\\param p_0 erpSyncConnectorId: The ID of the ErpSync connector to check if can be deleted\r\n\\return Enum response says ok or what is wrong"},
{text: "NSErpSyncAgent.GetCrmActorType", help: "<b>Integer GetCrmActorType(Integer p_0, Integer p_1)<\/b>\n\nRetrieves the CrmActorType that are mapped to a specific ErpActorType for this connection\r\n\r\n\\param p_0 erpConnectionId: The ERP connection ID\r\n\\param p_1 erpActorType: The ERP actor type\r\n\\return The CrmActorType"},
{text: "NSErpSyncAgent.TestConnectorUrl", help: "<b>Integer TestConnectorUrl(String p_0)<\/b>\n\nTest if connector urls anwers\r\n\r\n\\param p_0 url: The url to test connection on\r\n\\return Enum response says ok or what is wrong"},
{text: "NSErpSyncAgent.GetErpConnectionConfigFields", help: "<b>Map GetErpConnectionConfigFields(Integer p_0)<\/b>\n\n"},
{text: "NSErpSyncAgent.GetConnection", help: "<b>NSErpConnection GetConnection(Integer p_0)<\/b>\n\nReturns the specified connection.\r\n\r\n\\param p_0 erpConnectionId: Primary key of the connection\r\n\\return The connection"},
{text: "NSErpSyncAgent.SaveConnection", help: "<b>NSErpConnection SaveConnection(NSErpConnection p_0)<\/b>\n\nSaves a connection to the database.\r\n\r\n\\param p_0 connection: The connection to save.\r\n\\return The resulting connection."},
{text: "NSErpSyncAgent.GetConnectionsAndDisplayFields", help: "<b>NSErpConnectionData[] GetConnectionsAndDisplayFields(Integer p_0, Integer p_1)<\/b>\n\nGet all connection statuses and fields for a given entity\r\n\r\n\\param p_0 crmActorType: The type of the CRM entity\r\n\\param p_1 entityId: The id of the entity\r\n\\return An array of ErpConnectionData carriers"},
{text: "NSErpSyncAgent.GetActorTypeMapping", help: "<b>NSErpSyncActorTypeMapping GetActorTypeMapping(Integer p_0, Integer p_1)<\/b>\n\nGet the current mappings for one connection\/actor; connection+actor type = unique key\r\n\r\n\\param p_0 erpConnectionId: The ERP connection ID\r\n\\param p_1 actorType: The actor type\r\n\\return The current mapping from the database"},
{text: "NSErpSyncAgent.SaveActorTypeMapping", help: "<b>NSErpSyncActorTypeMapping SaveActorTypeMapping(NSErpSyncActorTypeMapping p_0)<\/b>\n\nSave mappings for a connection\/actor\r\n\r\n\\param p_0 mapping: The mapping to be saved; new mapping rows will be created in the database if needed\r\n\\return The current mapping from the database"},
{text: "NSErpSyncAgent.GetErpSyncConnectionSummary", help: "<b>NSErpSyncConnectionSummary GetErpSyncConnectionSummary(Integer p_0)<\/b>\n\nGet a summary of the current ErpSync configuration\/setup\r\n\r\n\\param p_0 erpSyncConnectionId: The ID of the ErpSync connection for which information is sought\r\n\\return Summary of connection information, and one summary element per configured actor type"},
{text: "NSErpSyncAgent.CreateDefaultErpSyncConnectorEntity", help: "<b>NSErpSyncConnectorEntity CreateDefaultErpSyncConnectorEntity()<\/b>\n\nLoading default values into a new ErpSyncConnectorEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ErpSyncConnectorEntity with default values"},
{text: "NSErpSyncAgent.GetErpSyncConnectorEntity", help: "<b>NSErpSyncConnectorEntity GetErpSyncConnectorEntity(Integer p_0)<\/b>\n\nGets a ErpSyncConnectorEntity object.\r\n\r\n\\param p_0 erpSyncConnectorEntityId: The identifier of the ErpSyncConnectorEntity object\r\n\\return ErpSyncConnectorEntity"},
{text: "NSErpSyncAgent.SaveErpSyncConnectorEntity", help: "<b>NSErpSyncConnectorEntity SaveErpSyncConnectorEntity(NSErpSyncConnectorEntity p_0)<\/b>\n\nUpdates the existing ErpSyncConnectorEntity or creates a new ErpSyncConnectorEntity if the id parameter is empty\r\n\r\n\\param p_0 erpSyncConnectorEntity: The ErpSyncConnectorEntity that is saved\r\n\\return New or updated ErpSyncConnectorEntity"},
{text: "NSErpSyncAgent.GetDefaultValueInfo", help: "<b>NSErpSyncDefaultValue GetDefaultValueInfo(Integer p_0)<\/b>\n\nGet information about default value for an ERP field\r\n\r\n\\param p_0 erpFieldId: The id of the ERP field\r\n\\return Object with information about default values"},
{text: "NSErpSyncAgent.SaveDefaultValueInfo", help: "<b>NSErpSyncDefaultValue SaveDefaultValueInfo(NSErpSyncDefaultValue p_0)<\/b>\n\nSave information about a default value for an ERP field\r\n\r\n\\param p_0 erpSyncDefaultValue: The id of the ERPfield to save\r\n\\return The newly saved ErpSyncDefaultValue"},
{text: "NSErpSyncAgent.ChangeEngineStatus", help: "<b>NSErpSyncEngineStatus ChangeEngineStatus(Bool p_0)<\/b>\n\nChange the current running\/stopped status of the Sync engine\r\n\r\n\\param p_0 run: If true, then start the engine; otherwise stop it (requests to the Batch system, may not be immediately reflected)\r\n\\return The current status of the engine"},
{text: "NSErpSyncAgent.GetEngineStatus", help: "<b>NSErpSyncEngineStatus GetEngineStatus()<\/b>\n\nGet the current status of the Sync engine\r\n\r\n\\return The current status of the engine"},
{text: "NSErpSyncAgent.GetFieldValuesFromCrm", help: "<b>NSErpSyncFieldValue[] GetFieldValuesFromCrm(Integer p_0, Integer p_1)<\/b>\n\nGet Crm Field values\r\n\r\n\\param p_0 recordId: The id of the CRM entity\r\n\\param p_1 actorTypeCrm: CRM Actor type\r\n\\return The Crm Fields"},
{text: "NSErpSyncAgent.GetFieldValuesFromErp", help: "<b>NSErpSyncFieldValue[] GetFieldValuesFromErp(Integer p_0, Integer p_1, String p_2)<\/b>\n\nGet Erp Field values\r\n\r\n\\param p_0 erpConnectionId: Erp connection id\r\n\\param p_1 actorTypeErp: ERP Actor type\r\n\\param p_2 erpKey: Primary key for the erp actor\r\n\\return The Erp Fields"},
{text: "NSErpSyncAgent.GetConfigurationFields", help: "<b>NSFieldMetadata[] GetConfigurationFields(Integer p_0)<\/b>\n\nReturns all fields needed to connect to the given connector\r\n\r\n\\param p_0 erpConnectorId: The id of the erp connector\r\n\\return The fields"},
{text: "NSErpSyncAgent.GetFieldsForNewErpActor", help: "<b>NSFieldMetadata[] GetFieldsForNewErpActor(Integer p_0, Integer p_1)<\/b>\n\nGet the fields that must be filled out when creating a new ERP actor\r\n\r\n\\param p_0 erpConnectionId: The id of the connection\r\n\\param p_1 erpActorType: The type of the ERP actor to create\r\n\\return The fields that are required for the new ERP actor"},
{text: "NSErpSyncAgent.SyncAll", help: "<b>NSPluginResponse SyncAll()<\/b>\n\nSync all active connections\r\n\r\n\\return The response"},
{text: "NSErpSyncAgent.GetErpFieldValues", help: "<b>String[] GetErpFieldValues(Integer p_0, Integer p_1, Integer p_2, String[] p_3)<\/b>\n\nGet the values for the specified fields from the ERP connection\r\n\r\n\\param p_0 erpConnectionId: The id of the connection\r\n\\param p_1 crmActorType: The type of the CRM entity\r\n\\param p_2 entityId: The id of the entity\r\n\\param p_3 fieldKeys: The fields for which you want to get the values\r\n\\return An array containing the values for the specified fields, in the same order"},
{text: "NSErpSyncAgent.ToggleErpConnectionActive", help: "<b>String[] ToggleErpConnectionActive(Integer p_0)<\/b>\n\nToggles the Active state of the connection\r\n\r\n\\param p_0 erpConnectionId: Primary key of the erp connection\r\n\\return Contains the reason for why the toggle failed. Empty if operation was successful"},
{text: "NSErpSyncAgent.GetErpConnectionConfigFields", help: "<b>StringDictionary GetErpConnectionConfigFields(Integer p_0)<\/b>\n\nReturns the config fields for the connection.\r\n\r\n\\param p_0 erpConnectionId: Primary key of the erp connection\r\n\\return Config Fields"},
{text: "NSErpSyncAgent.ChangeEngineInterval", help: "<b>Void ChangeEngineInterval(TimeSpan p_0)<\/b>\n\nChange the interval for each run of the Sync Engine\r\n\r\n\\param p_0 interval: The run interval for the engine"},
{text: "NSErpSyncAgent.ConnectActor", help: "<b>Void ConnectActor(Integer p_0, Integer p_1, Integer p_2, String p_3, Integer p_4, NSErpSyncFieldValue[] p_5)<\/b>\n\nCreate a link between Erp and Crm and set default values\r\n\r\n\\param p_0 erpConnectionId: ErpConnectionId\r\n\\param p_1 crmRecordId: CrmRecordId\r\n\\param p_2 crmActorType: The Crm Actor type\r\n\\param p_3 erpKey\r\n\\param p_4 erpActorType: The Erp Actor type\r\n\\param p_5 fieldValues: The Crm Fields"},
{text: "NSErpSyncAgent.DeleteConnection", help: "<b>Void DeleteConnection(Integer p_0)<\/b>\n\nDeletes a connection from the database.\r\n\r\n\\param p_0 erpConnectionId: Primary key of the connection\r\n\\return A void return"},
{text: "NSErpSyncAgent.DeleteErpSyncConnectorEntity", help: "<b>Void DeleteErpSyncConnectorEntity(Integer p_0)<\/b>\n\nDeletes the ErpSyncConnectorEntity\r\n\r\n\\param p_0 erpSyncConnectorEntityId: The identity of the ErpSyncConnectorEntity"},
{text: "NSErpSyncAgent.MoveErpFieldItem", help: "<b>Void MoveErpFieldItem(Integer p_0, Integer p_1, Integer p_2, Integer p_3)<\/b>\n\nMoves the rank of the erp field up or down\r\n\r\n\\param p_0 erpFieldId: The id of the erp field to move\r\n\\param p_1 direction: Positive value to increase rank, negative to decrease.\r\n\\param p_2 erpConnectionId: The id of the connection\r\n\\param p_3 erpActorType: The actor type for which we want to rank fields"},
{text: "NSErpSyncAgent.ValidateArchiveColumnConfig", help: "<b>Void ValidateArchiveColumnConfig(String p_0, Integer p_1)<\/b>\n\nClear field info from table SUPERLISTCOLUMNSIZE if field mapping changed on given connection\r\n\r\n\\param p_0 listOwner: GUI name used in archive control config\r\n\\param p_1 erpConnectionId: The ERP connection ID\r\n\\return Validated ArchiveColumnConfig"},
{text: "Void.NSErpSyncConnectionSummary", help: "<b>NSErpSyncConnectionSummary<\/b>\n\nSummary of the current setup of the ERP Integration, for one ERP connection"},
{text: "NSErpSyncConnectionSummary.GetActive", help: "<b>Bool GetActive()<\/b>\n\nIs the connection currently active\r\n\r\n\\return Bool"},
{text: "NSErpSyncConnectionSummary.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIs the connection deleted\r\n\r\n\\return Bool"},
{text: "NSErpSyncConnectionSummary.GetLastSync", help: "<b>DateTime GetLastSync()<\/b>\n\nThe time of the last sync\r\n\r\n\\return DateTime"},
{text: "NSErpSyncConnectionSummary.GetActors", help: "<b>NSErpSyncActorSummary[] GetActors()<\/b>\n\nSummaries of the configuration of the actors configured for this connection\r\n\r\n\\return ErpSyncActorSummaryArray"},
{text: "NSErpSyncConnectionSummary.GetDisplayDescription", help: "<b>String GetDisplayDescription()<\/b>\n\nTooltip\/description shown to user; multi-language support\r\n\r\n\\return String"},
{text: "NSErpSyncConnectionSummary.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nConnection name shown to user; multi-language support\r\n\r\n\\return String"},
{text: "NSErpSyncConnectionSummary.SetActive", help: "<b>Void SetActive(Bool p_0)<\/b>\n\nIs the connection currently active\r\n\r\n\\param p_0 Active: Bool\r\n\\return Bool"},
{text: "NSErpSyncConnectionSummary.SetActors", help: "<b>Void SetActors(NSErpSyncActorSummary[] p_0)<\/b>\n\nSummaries of the configuration of the actors configured for this connection\r\n\r\n\\param p_0 Actors: ErpSyncActorSummaryArray\r\n\\return ErpSyncActorSummaryArray"},
{text: "NSErpSyncConnectionSummary.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIs the connection deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSErpSyncConnectionSummary.SetDisplayDescription", help: "<b>Void SetDisplayDescription(String p_0)<\/b>\n\nTooltip\/description shown to user; multi-language support\r\n\r\n\\param p_0 DisplayDescription: String\r\n\\return String"},
{text: "NSErpSyncConnectionSummary.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nConnection name shown to user; multi-language support\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSErpSyncConnectionSummary.SetLastSync", help: "<b>Void SetLastSync(DateTime p_0)<\/b>\n\nThe time of the last sync\r\n\r\n\\param p_0 LastSync: DateTime\r\n\\return DateTime"},
{text: "Void.NSErpSyncConnectorEntity", help: "<b>NSErpSyncConnectorEntity<\/b>\n\nErp connector information"},
{text: "NSErpSyncConnectorEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nTrue if the connector is deleted\r\n\r\n\\return Bool"},
{text: "NSErpSyncConnectorEntity.GetErpConnectorId", help: "<b>Integer GetErpConnectorId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSErpSyncConnectorEntity.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nName shown in the list\r\n\r\n\\return String"},
{text: "NSErpSyncConnectorEntity.GetURL", help: "<b>String GetURL()<\/b>\n\nThe URL where the connector is located and can be called\r\n\r\n\\return String"},
{text: "NSErpSyncConnectorEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nTrue if the connector is deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSErpSyncConnectorEntity.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nName shown in the list\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSErpSyncConnectorEntity.SetErpConnectorId", help: "<b>Void SetErpConnectorId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ErpConnectorId: Integer\r\n\\return Integer"},
{text: "NSErpSyncConnectorEntity.SetURL", help: "<b>Void SetURL(String p_0)<\/b>\n\nThe URL where the connector is located and can be called\r\n\r\n\\param p_0 URL: String\r\n\\return String"},
{text: "Void.NSErpSyncDefaultValue", help: "<b>NSErpSyncDefaultValue<\/b>\n\nContains default value information for one ERP field"},
{text: "NSErpSyncDefaultValue.GetHasFirstSyncDefaultValue", help: "<b>Bool GetHasFirstSyncDefaultValue()<\/b>\n\nShould a default value be set on first sync\r\n\r\n\\return Bool"},
{text: "NSErpSyncDefaultValue.GetMandatory", help: "<b>Bool GetMandatory()<\/b>\n\nShould the user be forced to set a value (the Erp Connector may declare fields mandatory as well)\r\n\r\n\\return Bool"},
{text: "NSErpSyncDefaultValue.GetPromptUser", help: "<b>Bool GetPromptUser()<\/b>\n\nShould the field be shown in the first-sync GUI; independent of whether a default value should be set\r\n\r\n\\return Bool"},
{text: "NSErpSyncDefaultValue.GetAccess", help: "<b>Integer GetAccess()<\/b>\n\n"},
{text: "NSErpSyncDefaultValue.GetErpFieldId", help: "<b>Integer GetErpFieldId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSErpSyncDefaultValue.GetFieldType", help: "<b>Integer GetFieldType()<\/b>\n\n"},
{text: "NSErpSyncDefaultValue.GetAccess", help: "<b>NSFieldAccess GetAccess()<\/b>\n\nAccess restrictions for the field\r\n\r\n\\return FieldAccess"},
{text: "NSErpSyncDefaultValue.GetFieldType", help: "<b>NSFieldMetadataType GetFieldType()<\/b>\n\nField type\r\n\r\n\\return FieldMetadataType"},
{text: "NSErpSyncDefaultValue.GetDefaultValue", help: "<b>String GetDefaultValue()<\/b>\n\nDefault value, stored using CultureDataFormatter format if it is not a string\r\n\r\n\\return String"},
{text: "NSErpSyncDefaultValue.GetErpFieldKey", help: "<b>String GetErpFieldKey()<\/b>\n\nThe ERP field key\r\n\r\n\\return String"},
{text: "NSErpSyncDefaultValue.GetFirstSyncDefaultValue", help: "<b>String GetFirstSyncDefaultValue()<\/b>\n\nThe default value to be set, can be blank\r\n\r\n\\return String"},
{text: "NSErpSyncDefaultValue.GetListName", help: "<b>String GetListName()<\/b>\n\nThe ERP list name, if the field has a list of values supplied by the ERP Connector\r\n\r\n\\return String"},
{text: "NSErpSyncDefaultValue.SetAccess", help: "<b>Void SetAccess(Integer p_0)<\/b>\n\n"},
{text: "NSErpSyncDefaultValue.SetAccess", help: "<b>Void SetAccess(NSFieldAccess p_0)<\/b>\n\nAccess restrictions for the field\r\n\r\n\\param p_0 Access: FieldAccess\r\n\\return FieldAccess"},
{text: "NSErpSyncDefaultValue.SetDefaultValue", help: "<b>Void SetDefaultValue(String p_0)<\/b>\n\nDefault value, stored using CultureDataFormatter format if it is not a string\r\n\r\n\\param p_0 DefaultValue: String\r\n\\return String"},
{text: "NSErpSyncDefaultValue.SetErpFieldId", help: "<b>Void SetErpFieldId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ErpFieldId: Integer\r\n\\return Integer"},
{text: "NSErpSyncDefaultValue.SetErpFieldKey", help: "<b>Void SetErpFieldKey(String p_0)<\/b>\n\nThe ERP field key\r\n\r\n\\param p_0 ErpFieldKey: String\r\n\\return String"},
{text: "NSErpSyncDefaultValue.SetFieldType", help: "<b>Void SetFieldType(Integer p_0)<\/b>\n\n"},
{text: "NSErpSyncDefaultValue.SetFieldType", help: "<b>Void SetFieldType(NSFieldMetadataType p_0)<\/b>\n\nField type\r\n\r\n\\param p_0 FieldType: FieldMetadataType\r\n\\return FieldMetadataType"},
{text: "NSErpSyncDefaultValue.SetFirstSyncDefaultValue", help: "<b>Void SetFirstSyncDefaultValue(String p_0)<\/b>\n\nThe default value to be set, can be blank\r\n\r\n\\param p_0 FirstSyncDefaultValue: String\r\n\\return String"},
{text: "NSErpSyncDefaultValue.SetHasFirstSyncDefaultValue", help: "<b>Void SetHasFirstSyncDefaultValue(Bool p_0)<\/b>\n\nShould a default value be set on first sync\r\n\r\n\\param p_0 HasFirstSyncDefaultValue: Bool\r\n\\return Bool"},
{text: "NSErpSyncDefaultValue.SetListName", help: "<b>Void SetListName(String p_0)<\/b>\n\nThe ERP list name, if the field has a list of values supplied by the ERP Connector\r\n\r\n\\param p_0 ListName: String\r\n\\return String"},
{text: "NSErpSyncDefaultValue.SetMandatory", help: "<b>Void SetMandatory(Bool p_0)<\/b>\n\nShould the user be forced to set a value (the Erp Connector may declare fields mandatory as well)\r\n\r\n\\param p_0 Mandatory: Bool\r\n\\return Bool"},
{text: "NSErpSyncDefaultValue.SetPromptUser", help: "<b>Void SetPromptUser(Bool p_0)<\/b>\n\nShould the field be shown in the first-sync GUI; independent of whether a default value should be set\r\n\r\n\\param p_0 PromptUser: Bool\r\n\\return Bool"},
{text: "Void.NSErpSyncEngineStatus", help: "<b>NSErpSyncEngineStatus<\/b>\n\nStatus of the Sync engine"},
{text: "NSErpSyncEngineStatus.GetIsRunning", help: "<b>Bool GetIsRunning()<\/b>\n\nIs the engine currently running\r\n\r\n\\return Bool"},
{text: "NSErpSyncEngineStatus.GetStatusMessage", help: "<b>String GetStatusMessage()<\/b>\n\nCurrent status message from the engine\r\n\r\n\\return String"},
{text: "NSErpSyncEngineStatus.GetInterval", help: "<b>TimeSpan GetInterval()<\/b>\n\nThe interval for each iteration of the sync engine\r\n\r\n\\return TimeSpan"},
{text: "NSErpSyncEngineStatus.SetInterval", help: "<b>Void SetInterval(TimeSpan p_0)<\/b>\n\nThe interval for each iteration of the sync engine\r\n\r\n\\param p_0 Interval: TimeSpan\r\n\\return TimeSpan"},
{text: "NSErpSyncEngineStatus.SetIsRunning", help: "<b>Void SetIsRunning(Bool p_0)<\/b>\n\nIs the engine currently running\r\n\r\n\\param p_0 IsRunning: Bool\r\n\\return Bool"},
{text: "NSErpSyncEngineStatus.SetStatusMessage", help: "<b>Void SetStatusMessage(String p_0)<\/b>\n\nCurrent status message from the engine\r\n\r\n\\param p_0 StatusMessage: String\r\n\\return String"},
{text: "Void.NSErpSyncFieldMapping", help: "<b>NSErpSyncFieldMapping<\/b>\n\nMapping information for one field pair (ERP <-> SuperOffice)"},
{text: "NSErpSyncFieldMapping.GetAlreadyMapped", help: "<b>Bool GetAlreadyMapped()<\/b>\n\nIs this ERPField already mapped in some other connection? If so, then it cannot be one-way mapped TO SuperOffice here\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.GetMissingInCRM", help: "<b>Bool GetMissingInCRM()<\/b>\n\nThis field existed previously, but now CRM no longer supports it (udef change?). Probably not a good sign, unmap it...\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.GetMissingInERP", help: "<b>Bool GetMissingInERP()<\/b>\n\nThis field existed previously, but now the connection no longer supports it. Probably not a good sign, unmap it...\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.GetShowInGui", help: "<b>Bool GetShowInGui()<\/b>\n\nShould this field be shown as a (read-only!) field in the CRM Gui\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.GetShowInSearch", help: "<b>Bool GetShowInSearch()<\/b>\n\nShould this field be shown in searches\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.GetSyncToCrm", help: "<b>Bool GetSyncToCrm()<\/b>\n\nShould value changes in ERP be automatically transferred to CRM\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.GetSyncToErp", help: "<b>Bool GetSyncToErp()<\/b>\n\nShould value changes in CRM be automatically transferred to ERP\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.GetAccess", help: "<b>Integer GetAccess()<\/b>\n\n"},
{text: "NSErpSyncFieldMapping.GetErpFieldId", help: "<b>Integer GetErpFieldId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSErpSyncFieldMapping.GetFieldType", help: "<b>Integer GetFieldType()<\/b>\n\n"},
{text: "NSErpSyncFieldMapping.GetAccess", help: "<b>NSFieldAccess GetAccess()<\/b>\n\nAccess restrictions for the field\r\n\r\n\\return FieldAccess"},
{text: "NSErpSyncFieldMapping.GetFieldType", help: "<b>NSFieldMetadataType GetFieldType()<\/b>\n\nField type\r\n\r\n\\return FieldMetadataType"},
{text: "NSErpSyncFieldMapping.GetCrmDisplayName", help: "<b>String GetCrmDisplayName()<\/b>\n\nDisplay name of CRM field; ignored on Save\r\n\r\n\\return String"},
{text: "NSErpSyncFieldMapping.GetCrmDisplayTooltip", help: "<b>String GetCrmDisplayTooltip()<\/b>\n\nTooltip text for CRM field; ignored on Save\r\n\r\n\\return String"},
{text: "NSErpSyncFieldMapping.GetCrmFieldKey", help: "<b>String GetCrmFieldKey()<\/b>\n\nThe CRM field name, as implemented by the Sync entities\r\n\r\n\\return String"},
{text: "NSErpSyncFieldMapping.GetErpDisplayName", help: "<b>String GetErpDisplayName()<\/b>\n\nDisplay name of ERP field; ignored on Save\r\n\r\n\\return String"},
{text: "NSErpSyncFieldMapping.GetErpDisplayTooltip", help: "<b>String GetErpDisplayTooltip()<\/b>\n\nTooltip text for ERP field; ignored on Save\r\n\r\n\\return String"},
{text: "NSErpSyncFieldMapping.GetErpFieldKey", help: "<b>String GetErpFieldKey()<\/b>\n\nThe ERP field key\r\n\r\n\\return String"},
{text: "NSErpSyncFieldMapping.SetAccess", help: "<b>Void SetAccess(Integer p_0)<\/b>\n\n"},
{text: "NSErpSyncFieldMapping.SetAccess", help: "<b>Void SetAccess(NSFieldAccess p_0)<\/b>\n\nAccess restrictions for the field\r\n\r\n\\param p_0 Access: FieldAccess\r\n\\return FieldAccess"},
{text: "NSErpSyncFieldMapping.SetAlreadyMapped", help: "<b>Void SetAlreadyMapped(Bool p_0)<\/b>\n\nIs this ERPField already mapped in some other connection? If so, then it cannot be one-way mapped TO SuperOffice here\r\n\r\n\\param p_0 AlreadyMapped: Bool\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.SetCrmDisplayName", help: "<b>Void SetCrmDisplayName(String p_0)<\/b>\n\nDisplay name of CRM field; ignored on Save\r\n\r\n\\param p_0 CrmDisplayName: String\r\n\\return String"},
{text: "NSErpSyncFieldMapping.SetCrmDisplayTooltip", help: "<b>Void SetCrmDisplayTooltip(String p_0)<\/b>\n\nTooltip text for CRM field; ignored on Save\r\n\r\n\\param p_0 CrmDisplayTooltip: String\r\n\\return String"},
{text: "NSErpSyncFieldMapping.SetCrmFieldKey", help: "<b>Void SetCrmFieldKey(String p_0)<\/b>\n\nThe CRM field name, as implemented by the Sync entities\r\n\r\n\\param p_0 CrmFieldKey: String\r\n\\return String"},
{text: "NSErpSyncFieldMapping.SetErpDisplayName", help: "<b>Void SetErpDisplayName(String p_0)<\/b>\n\nDisplay name of ERP field; ignored on Save\r\n\r\n\\param p_0 ErpDisplayName: String\r\n\\return String"},
{text: "NSErpSyncFieldMapping.SetErpDisplayTooltip", help: "<b>Void SetErpDisplayTooltip(String p_0)<\/b>\n\nTooltip text for ERP field; ignored on Save\r\n\r\n\\param p_0 ErpDisplayTooltip: String\r\n\\return String"},
{text: "NSErpSyncFieldMapping.SetErpFieldId", help: "<b>Void SetErpFieldId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ErpFieldId: Integer\r\n\\return Integer"},
{text: "NSErpSyncFieldMapping.SetErpFieldKey", help: "<b>Void SetErpFieldKey(String p_0)<\/b>\n\nThe ERP field key\r\n\r\n\\param p_0 ErpFieldKey: String\r\n\\return String"},
{text: "NSErpSyncFieldMapping.SetFieldType", help: "<b>Void SetFieldType(Integer p_0)<\/b>\n\n"},
{text: "NSErpSyncFieldMapping.SetFieldType", help: "<b>Void SetFieldType(NSFieldMetadataType p_0)<\/b>\n\nField type\r\n\r\n\\param p_0 FieldType: FieldMetadataType\r\n\\return FieldMetadataType"},
{text: "NSErpSyncFieldMapping.SetMissingInCRM", help: "<b>Void SetMissingInCRM(Bool p_0)<\/b>\n\nThis field existed previously, but now CRM no longer supports it (udef change?). Probably not a good sign, unmap it...\r\n\r\n\\param p_0 MissingInCRM: Bool\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.SetMissingInERP", help: "<b>Void SetMissingInERP(Bool p_0)<\/b>\n\nThis field existed previously, but now the connection no longer supports it. Probably not a good sign, unmap it...\r\n\r\n\\param p_0 MissingInERP: Bool\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.SetShowInGui", help: "<b>Void SetShowInGui(Bool p_0)<\/b>\n\nShould this field be shown as a (read-only!) field in the CRM Gui\r\n\r\n\\param p_0 ShowInGui: Bool\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.SetShowInSearch", help: "<b>Void SetShowInSearch(Bool p_0)<\/b>\n\nShould this field be shown in searches\r\n\r\n\\param p_0 ShowInSearch: Bool\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.SetSyncToCrm", help: "<b>Void SetSyncToCrm(Bool p_0)<\/b>\n\nShould value changes in ERP be automatically transferred to CRM\r\n\r\n\\param p_0 SyncToCrm: Bool\r\n\\return Bool"},
{text: "NSErpSyncFieldMapping.SetSyncToErp", help: "<b>Void SetSyncToErp(Bool p_0)<\/b>\n\nShould value changes in CRM be automatically transferred to ERP\r\n\r\n\\param p_0 SyncToErp: Bool\r\n\\return Bool"},
{text: "Void.NSErpSyncFieldValue", help: "<b>NSErpSyncFieldValue<\/b>\n\n"},
{text: "NSErpSyncFieldValue.GetSyncToCrm", help: "<b>Bool GetSyncToCrm()<\/b>\n\nShould value changes in ERP be automatically transferred to CRM\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldValue.GetSyncToErp", help: "<b>Bool GetSyncToErp()<\/b>\n\nShould value changes in CRM be automatically transferred to ERP\r\n\r\n\\return Bool"},
{text: "NSErpSyncFieldValue.GetCrmFieldKey", help: "<b>String GetCrmFieldKey()<\/b>\n\nThe CRM field name, as implemented by the Sync entities\r\n\r\n\\return String"},
{text: "NSErpSyncFieldValue.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\n\\return String"},
{text: "NSErpSyncFieldValue.GetDisplayValue", help: "<b>String GetDisplayValue()<\/b>\n\n\\return String"},
{text: "NSErpSyncFieldValue.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSErpSyncFieldValue.SetCrmFieldKey", help: "<b>Void SetCrmFieldKey(String p_0)<\/b>\n\nThe CRM field name, as implemented by the Sync entities\r\n\r\n\\param p_0 CrmFieldKey: String\r\n\\return String"},
{text: "NSErpSyncFieldValue.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSErpSyncFieldValue.SetDisplayValue", help: "<b>Void SetDisplayValue(String p_0)<\/b>\n\n\\param p_0 DisplayValue: String\r\n\\return String"},
{text: "NSErpSyncFieldValue.SetSyncToCrm", help: "<b>Void SetSyncToCrm(Bool p_0)<\/b>\n\nShould value changes in ERP be automatically transferred to CRM\r\n\r\n\\param p_0 SyncToCrm: Bool\r\n\\return Bool"},
{text: "NSErpSyncFieldValue.SetSyncToErp", help: "<b>Void SetSyncToErp(Bool p_0)<\/b>\n\nShould value changes in CRM be automatically transferred to ERP\r\n\r\n\\param p_0 SyncToErp: Bool\r\n\\return Bool"},
{text: "NSErpSyncFieldValue.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSExtAppEntity", help: "<b>NSExtAppEntity<\/b>\n\nThe ext app entity contains information on an external application"},
{text: "NSExtAppEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nTrue if the application is marked as deleted\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetOnCentral", help: "<b>Bool GetOnCentral()<\/b>\n\nIs the application visible when user is on central database\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetOnSalesMarketingPocket", help: "<b>Bool GetOnSalesMarketingPocket()<\/b>\n\nIs the webpanel visible when user is on pocket client\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetOnSatellite", help: "<b>Bool GetOnSatellite()<\/b>\n\nIs the application visible when user is on a satellite\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetOnTravel", help: "<b>Bool GetOnTravel()<\/b>\n\nIs the application visible when user is on travel\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetShowInAddressBar", help: "<b>Bool GetShowInAddressBar()<\/b>\n\nDoes the webpanel have an address bar\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetShowInMenuBar", help: "<b>Bool GetShowInMenuBar()<\/b>\n\nDoes the application have a menu bar\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetShowInStatusBar", help: "<b>Bool GetShowInStatusBar()<\/b>\n\nDoes the webpanel have a status bar\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetShowInToolBar", help: "<b>Bool GetShowInToolBar()<\/b>\n\nDoes the webpanel have a toolbar\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetWaitToFinish", help: "<b>Bool GetWaitToFinish()<\/b>\n\nTrue if the application shall wait for fininsh event\r\n\r\n\\return Bool"},
{text: "NSExtAppEntity.GetExtAppId", help: "<b>Integer GetExtAppId()<\/b>\n\nThe identity of the external app\r\n\r\n\\return Integer"},
{text: "NSExtAppEntity.GetIcon", help: "<b>Integer GetIcon()<\/b>\n\nThe id of the icon of the external app\r\n\r\n\\return Integer"},
{text: "NSExtAppEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nThe rank of the application\r\n\r\n\\return Integer"},
{text: "NSExtAppEntity.GetShowState", help: "<b>Integer GetShowState()<\/b>\n\nThe application is shown in which state Minimized, Maximized or Restored\r\n\r\n\\return Integer"},
{text: "NSExtAppEntity.GetVisibleIn", help: "<b>Integer GetVisibleIn()<\/b>\n\nThe application is visible in\r\n\r\n\\return Integer"},
{text: "NSExtAppEntity.GetExecuteOnEvent", help: "<b>NSExecuteOnEvent GetExecuteOnEvent()<\/b>\n\nEvents that cause automatic execution of this app\r\n\r\n\\return ExecuteOnEvent"},
{text: "NSExtAppEntity.GetFilename", help: "<b>String GetFilename()<\/b>\n\nFilename of the programfile\r\n\r\n\\return String"},
{text: "NSExtAppEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the web panel\r\n\r\n\\return String"},
{text: "NSExtAppEntity.GetParameters", help: "<b>String GetParameters()<\/b>\n\n<template variable> <other template variable>\r\n\r\n\\return String"},
{text: "NSExtAppEntity.GetPath", help: "<b>String GetPath()<\/b>\n\nPath where the programfile is located; if empty, PATH is used\r\n\r\n\\return String"},
{text: "NSExtAppEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nThe tooltip of the web panel\r\n\r\n\\return String"},
{text: "NSExtAppEntity.GetWorkdir", help: "<b>String GetWorkdir()<\/b>\n\nDirectory set to current when loading the application, if different from application's own\r\n\r\n\\return String"},
{text: "NSExtAppEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nTrue if the application is marked as deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetExecuteOnEvent", help: "<b>Void SetExecuteOnEvent(NSExecuteOnEvent p_0)<\/b>\n\nEvents that cause automatic execution of this app\r\n\r\n\\param p_0 ExecuteOnEvent: ExecuteOnEvent\r\n\\return ExecuteOnEvent"},
{text: "NSExtAppEntity.SetExtAppId", help: "<b>Void SetExtAppId(Integer p_0)<\/b>\n\nThe identity of the external app\r\n\r\n\\param p_0 ExtAppId: Integer\r\n\\return Integer"},
{text: "NSExtAppEntity.SetFilename", help: "<b>Void SetFilename(String p_0)<\/b>\n\nFilename of the programfile\r\n\r\n\\param p_0 Filename: String\r\n\\return String"},
{text: "NSExtAppEntity.SetIcon", help: "<b>Void SetIcon(Integer p_0)<\/b>\n\nThe id of the icon of the external app\r\n\r\n\\param p_0 Icon: Integer\r\n\\return Integer"},
{text: "NSExtAppEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the web panel\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSExtAppEntity.SetOnCentral", help: "<b>Void SetOnCentral(Bool p_0)<\/b>\n\nIs the application visible when user is on central database\r\n\r\n\\param p_0 OnCentral: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetOnSalesMarketingPocket", help: "<b>Void SetOnSalesMarketingPocket(Bool p_0)<\/b>\n\nIs the webpanel visible when user is on pocket client\r\n\r\n\\param p_0 OnSalesMarketingPocket: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetOnSatellite", help: "<b>Void SetOnSatellite(Bool p_0)<\/b>\n\nIs the application visible when user is on a satellite\r\n\r\n\\param p_0 OnSatellite: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetOnTravel", help: "<b>Void SetOnTravel(Bool p_0)<\/b>\n\nIs the application visible when user is on travel\r\n\r\n\\param p_0 OnTravel: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetParameters", help: "<b>Void SetParameters(String p_0)<\/b>\n\n<template variable> <other template variable>\r\n\r\n\\param p_0 Parameters: String\r\n\\return String"},
{text: "NSExtAppEntity.SetPath", help: "<b>Void SetPath(String p_0)<\/b>\n\nPath where the programfile is located; if empty, PATH is used\r\n\r\n\\param p_0 Path: String\r\n\\return String"},
{text: "NSExtAppEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nThe rank of the application\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSExtAppEntity.SetShowInAddressBar", help: "<b>Void SetShowInAddressBar(Bool p_0)<\/b>\n\nDoes the webpanel have an address bar\r\n\r\n\\param p_0 ShowInAddressBar: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetShowInMenuBar", help: "<b>Void SetShowInMenuBar(Bool p_0)<\/b>\n\nDoes the application have a menu bar\r\n\r\n\\param p_0 ShowInMenuBar: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetShowInStatusBar", help: "<b>Void SetShowInStatusBar(Bool p_0)<\/b>\n\nDoes the webpanel have a status bar\r\n\r\n\\param p_0 ShowInStatusBar: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetShowInToolBar", help: "<b>Void SetShowInToolBar(Bool p_0)<\/b>\n\nDoes the webpanel have a toolbar\r\n\r\n\\param p_0 ShowInToolBar: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetShowState", help: "<b>Void SetShowState(Integer p_0)<\/b>\n\nThe application is shown in which state Minimized, Maximized or Restored\r\n\r\n\\param p_0 ShowState: Integer\r\n\\return Integer"},
{text: "NSExtAppEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nThe tooltip of the web panel\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSExtAppEntity.SetVisibleIn", help: "<b>Void SetVisibleIn(Integer p_0)<\/b>\n\nThe application is visible in\r\n\r\n\\param p_0 VisibleIn: Integer\r\n\\return Integer"},
{text: "NSExtAppEntity.SetWaitToFinish", help: "<b>Void SetWaitToFinish(Bool p_0)<\/b>\n\nTrue if the application shall wait for fininsh event\r\n\r\n\\param p_0 WaitToFinish: Bool\r\n\\return Bool"},
{text: "NSExtAppEntity.SetWorkdir", help: "<b>Void SetWorkdir(String p_0)<\/b>\n\nDirectory set to current when loading the application, if different from application's own\r\n\r\n\\param p_0 Workdir: String\r\n\\return String"},
{text: "Void.NSExtendedLicenseInfo", help: "<b>NSExtendedLicenseInfo<\/b>\n\n"},
{text: "NSExtendedLicenseInfo.GetCanBeActivated", help: "<b>Bool GetCanBeActivated()<\/b>\n\n\\return Bool"},
{text: "NSExtendedLicenseInfo.GetAccumulatedNextCheckDate", help: "<b>DateTime GetAccumulatedNextCheckDate()<\/b>\n\n\\return DateTime"},
{text: "NSExtendedLicenseInfo.GetExtendedModuleLicenses", help: "<b>NSExtendedModuleLicense[] GetExtendedModuleLicenses()<\/b>\n\n\\return ExtendedModuleLicenseArray"},
{text: "NSExtendedLicenseInfo.GetCurrent", help: "<b>NSLicenseInfo GetCurrent()<\/b>\n\n\\return LicenseInfo"},
{text: "NSExtendedLicenseInfo.GetNew", help: "<b>NSLicenseInfo GetNew()<\/b>\n\n\\return LicenseInfo"},
{text: "NSExtendedLicenseInfo.GetReason", help: "<b>String GetReason()<\/b>\n\n\\return String"},
{text: "NSExtendedLicenseInfo.SetAccumulatedNextCheckDate", help: "<b>Void SetAccumulatedNextCheckDate(DateTime p_0)<\/b>\n\n\\param p_0 AccumulatedNextCheckDate: DateTime\r\n\\return DateTime"},
{text: "NSExtendedLicenseInfo.SetCanBeActivated", help: "<b>Void SetCanBeActivated(Bool p_0)<\/b>\n\n\\param p_0 CanBeActivated: Bool\r\n\\return Bool"},
{text: "NSExtendedLicenseInfo.SetCurrent", help: "<b>Void SetCurrent(NSLicenseInfo p_0)<\/b>\n\n\\param p_0 Current: LicenseInfo\r\n\\return LicenseInfo"},
{text: "NSExtendedLicenseInfo.SetExtendedModuleLicenses", help: "<b>Void SetExtendedModuleLicenses(NSExtendedModuleLicense[] p_0)<\/b>\n\n\\param p_0 ExtendedModuleLicenses: ExtendedModuleLicenseArray\r\n\\return ExtendedModuleLicenseArray"},
{text: "NSExtendedLicenseInfo.SetNew", help: "<b>Void SetNew(NSLicenseInfo p_0)<\/b>\n\n\\param p_0 New: LicenseInfo\r\n\\return LicenseInfo"},
{text: "NSExtendedLicenseInfo.SetReason", help: "<b>Void SetReason(String p_0)<\/b>\n\n\\param p_0 Reason: String\r\n\\return String"},
{text: "Void.NSExtendedModuleLicense", help: "<b>NSExtendedModuleLicense<\/b>\n\n"},
{text: "NSExtendedModuleLicense.GetNumberOfLicensesAdded", help: "<b>Integer GetNumberOfLicensesAdded()<\/b>\n\n\\return Integer"},
{text: "NSExtendedModuleLicense.GetNumberOfLicensesFree", help: "<b>Integer GetNumberOfLicensesFree()<\/b>\n\n\\return Integer"},
{text: "NSExtendedModuleLicense.GetNumberOfLicensesInUse", help: "<b>Integer GetNumberOfLicensesInUse()<\/b>\n\n\\return Integer"},
{text: "NSExtendedModuleLicense.GetNumberOfLicensesNewFree", help: "<b>Integer GetNumberOfLicensesNewFree()<\/b>\n\n\\return Integer"},
{text: "NSExtendedModuleLicense.GetNumberOfLicensesNewTotal", help: "<b>Integer GetNumberOfLicensesNewTotal()<\/b>\n\n\\return Integer"},
{text: "NSExtendedModuleLicense.GetNumberOfLicensesTotal", help: "<b>Integer GetNumberOfLicensesTotal()<\/b>\n\n\\return Integer"},
{text: "NSExtendedModuleLicense.GetCurrent", help: "<b>NSModuleLicense GetCurrent()<\/b>\n\n\\return ModuleLicense"},
{text: "NSExtendedModuleLicense.GetNew", help: "<b>NSModuleLicense GetNew()<\/b>\n\n\\return ModuleLicense"},
{text: "NSExtendedModuleLicense.SetCurrent", help: "<b>Void SetCurrent(NSModuleLicense p_0)<\/b>\n\n\\param p_0 Current: ModuleLicense\r\n\\return ModuleLicense"},
{text: "NSExtendedModuleLicense.SetNew", help: "<b>Void SetNew(NSModuleLicense p_0)<\/b>\n\n\\param p_0 New: ModuleLicense\r\n\\return ModuleLicense"},
{text: "NSExtendedModuleLicense.SetNumberOfLicensesAdded", help: "<b>Void SetNumberOfLicensesAdded(Integer p_0)<\/b>\n\n\\param p_0 NumberOfLicensesAdded: Integer\r\n\\return Integer"},
{text: "NSExtendedModuleLicense.SetNumberOfLicensesFree", help: "<b>Void SetNumberOfLicensesFree(Integer p_0)<\/b>\n\n\\param p_0 NumberOfLicensesFree: Integer\r\n\\return Integer"},
{text: "NSExtendedModuleLicense.SetNumberOfLicensesInUse", help: "<b>Void SetNumberOfLicensesInUse(Integer p_0)<\/b>\n\n\\param p_0 NumberOfLicensesInUse: Integer\r\n\\return Integer"},
{text: "NSExtendedModuleLicense.SetNumberOfLicensesNewFree", help: "<b>Void SetNumberOfLicensesNewFree(Integer p_0)<\/b>\n\n\\param p_0 NumberOfLicensesNewFree: Integer\r\n\\return Integer"},
{text: "NSExtendedModuleLicense.SetNumberOfLicensesNewTotal", help: "<b>Void SetNumberOfLicensesNewTotal(Integer p_0)<\/b>\n\n\\param p_0 NumberOfLicensesNewTotal: Integer\r\n\\return Integer"},
{text: "NSExtendedModuleLicense.SetNumberOfLicensesTotal", help: "<b>Void SetNumberOfLicensesTotal(Integer p_0)<\/b>\n\n\\param p_0 NumberOfLicensesTotal: Integer\r\n\\return Integer"},
{text: "Void.NSFavourite", help: "<b>NSFavourite<\/b>\n\nFavourite carrier."},
{text: "NSFavourite.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nId of the associate this favourite belongs to.\r\n\r\n\\return Integer"},
{text: "NSFavourite.GetRecordId", help: "<b>Integer GetRecordId()<\/b>\n\nId of the record this favourite belongs to.\r\n\r\n\\return Integer"},
{text: "NSFavourite.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\nExtra information for this favourite.\r\n\r\n\\return String"},
{text: "NSFavourite.GetTableName", help: "<b>String GetTableName()<\/b>\n\nName of the table this favourite belongs to.\r\n\r\n\\return String"},
{text: "NSFavourite.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nId of the associate this favourite belongs to.\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSFavourite.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\nExtra information for this favourite.\r\n\r\n\\param p_0 ExtraInfo: String\r\n\\return String"},
{text: "NSFavourite.SetRecordId", help: "<b>Void SetRecordId(Integer p_0)<\/b>\n\nId of the record this favourite belongs to.\r\n\r\n\\param p_0 RecordId: Integer\r\n\\return Integer"},
{text: "NSFavourite.SetTableName", help: "<b>Void SetTableName(String p_0)<\/b>\n\nName of the table this favourite belongs to.\r\n\r\n\\param p_0 TableName: String\r\n\\return String"},
{text: "Void.NSFavouriteAgent", help: "<b>NSFavouriteAgent<\/b>\n\nAgent used for retrieveing and setting favourites"},
{text: "NSFavouriteAgent.IsFavourite", help: "<b>Bool IsFavourite(String p_0, Integer p_1, Integer p_2)<\/b>\n\nChecks if a record in a table is a favourite for an associate\r\n\r\n\\param p_0 tableName: Table name, transformed to and from numeric table id by the service layer.\r\n\\param p_1 recordId\r\n\\param p_2 associateId"},
{text: "NSFavouriteAgent.ToggleFavourite", help: "<b>Bool ToggleFavourite(String p_0, Integer p_1, Integer p_2, String p_3)<\/b>\n\nToggle a record in a table as a favourite for an associate\r\n\r\n\\param p_0 tableName: Table name, transformed to and from numeric table id by the service layer.\r\n\\param p_1 recordId\r\n\\param p_2 associateId\r\n\\param p_3 extraInfo\r\n\\return Return the new value, true if added, false if removed"},
{text: "NSFavouriteAgent.GetFavourites", help: "<b>NSFavourite[] GetFavourites(String p_0, Integer p_1)<\/b>\n\nGet all favourites for a table and associate\r\n\r\n\\param p_0 tableName: Table name, transformed to and from numeric table id by the service layer.\r\n\\param p_1 associateId"},
{text: "NSFavouriteAgent.AddFavourite", help: "<b>Void AddFavourite(String p_0, Integer p_1, Integer p_2, String p_3)<\/b>\n\nAdd a record in a table as a favourite for an associate\r\n\r\n\\param p_0 tableName: Table name, transformed to and from numeric table id by the service layer.\r\n\\param p_1 recordId\r\n\\param p_2 associateId\r\n\\param p_3 extraInfo"},
{text: "NSFavouriteAgent.AddFavourites", help: "<b>Void AddFavourites(String p_0, Integer[] p_1, Integer p_2, String p_3)<\/b>\n\nAdd a list of record ids as favourites for an associate\r\n\r\n\\param p_0 tableName: Table name, transformed to and from numeric table id by the service layer.\r\n\\param p_1 recordIds\r\n\\param p_2 associateId\r\n\\param p_3 extraInfo"},
{text: "NSFavouriteAgent.RemoveAllFavourites", help: "<b>Void RemoveAllFavourites(String p_0, Integer p_1)<\/b>\n\nRemove all favourites for a table and associate\r\n\r\n\\param p_0 tableName: Table name, transformed to and from numeric table id by the service layer.\r\n\\param p_1 associateId"},
{text: "NSFavouriteAgent.RemoveFavourite", help: "<b>Void RemoveFavourite(String p_0, Integer p_1, Integer p_2)<\/b>\n\nRemove favourite for a table, record id and associate\r\n\r\n\\param p_0 tableName: Table name, transformed to and from numeric table id by the service layer.\r\n\\param p_1 recordId\r\n\\param p_2 associateId"},
{text: "NSFavouriteAgent.RemoveFavouritesById", help: "<b>Void RemoveFavouritesById(Integer[] p_0)<\/b>\n\nRemove favourite using favourite id\r\n\r\n\\param p_0 favouriteIds: Ids of favourite rows to delete"},
{text: "Void.NSFieldMetadata", help: "<b>NSFieldMetadata<\/b>\n\nThis is used to populate the Admin configuration dialog for a connection. The call to the ERP Connector’s GetConfigurationFields method returns a list of fields and field types. The Admin client builds a dialog with these fields"},
{text: "NSFieldMetadata.GetShowInSearch", help: "<b>Bool GetShowInSearch()<\/b>\n\nTrue if this field is displayed in search result\r\n\r\n\\return Bool"},
{text: "NSFieldMetadata.GetAccess", help: "<b>Integer GetAccess()<\/b>\n\nAccess restrictions on the field\r\n\r\n\\return Integer"},
{text: "NSFieldMetadata.GetFieldType", help: "<b>Integer GetFieldType()<\/b>\n\nString, int, decimal, etc.\r\n\r\n\\return Integer"},
{text: "NSFieldMetadata.GetMaxLength", help: "<b>Integer GetMaxLength()<\/b>\n\nMaximum length for strings, if set. 0 means no restriction. (Though sooner or later something will no doubt overflow if you pile on the gigabytes.)\r\n\r\n\\return Integer"},
{text: "NSFieldMetadata.GetRank", help: "<b>Integer GetRank()<\/b>\n\nA way to set the order of the fields. Lowest value will be displayed first\/over the fields with other values.\r\n\r\n\\return Integer"},
{text: "NSFieldMetadata.GetDefaultValue", help: "<b>String GetDefaultValue()<\/b>\n\nA default value for the field.\r\n\r\n\\return String"},
{text: "NSFieldMetadata.GetDisplayDescription", help: "<b>String GetDisplayDescription()<\/b>\n\nTooltip for the field name.\r\n\r\n\\return String"},
{text: "NSFieldMetadata.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nLocalized field name – shown in the GUI\r\n\r\n\\return String"},
{text: "NSFieldMetadata.GetFieldKey", help: "<b>String GetFieldKey()<\/b>\n\nInternal key\/name of the field. Used as the key in the ConnectionConfigField values when TestConnection is called.\r\n\r\n\\return String"},
{text: "NSFieldMetadata.GetListName", help: "<b>String GetListName()<\/b>\n\nMDO List provider name for list fields\r\n\r\n\\return String"},
{text: "NSFieldMetadata.SetAccess", help: "<b>Void SetAccess(Integer p_0)<\/b>\n\nAccess restrictions on the field\r\n\r\n\\param p_0 Access: Integer\r\n\\return Integer"},
{text: "NSFieldMetadata.SetDefaultValue", help: "<b>Void SetDefaultValue(String p_0)<\/b>\n\nA default value for the field.\r\n\r\n\\param p_0 DefaultValue: String\r\n\\return String"},
{text: "NSFieldMetadata.SetDisplayDescription", help: "<b>Void SetDisplayDescription(String p_0)<\/b>\n\nTooltip for the field name.\r\n\r\n\\param p_0 DisplayDescription: String\r\n\\return String"},
{text: "NSFieldMetadata.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nLocalized field name – shown in the GUI\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSFieldMetadata.SetFieldKey", help: "<b>Void SetFieldKey(String p_0)<\/b>\n\nInternal key\/name of the field. Used as the key in the ConnectionConfigField values when TestConnection is called.\r\n\r\n\\param p_0 FieldKey: String\r\n\\return String"},
{text: "NSFieldMetadata.SetFieldType", help: "<b>Void SetFieldType(Integer p_0)<\/b>\n\nString, int, decimal, etc.\r\n\r\n\\param p_0 FieldType: Integer\r\n\\return Integer"},
{text: "NSFieldMetadata.SetListName", help: "<b>Void SetListName(String p_0)<\/b>\n\nMDO List provider name for list fields\r\n\r\n\\param p_0 ListName: String\r\n\\return String"},
{text: "NSFieldMetadata.SetMaxLength", help: "<b>Void SetMaxLength(Integer p_0)<\/b>\n\nMaximum length for strings, if set. 0 means no restriction. (Though sooner or later something will no doubt overflow if you pile on the gigabytes.)\r\n\r\n\\param p_0 MaxLength: Integer\r\n\\return Integer"},
{text: "NSFieldMetadata.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nA way to set the order of the fields. Lowest value will be displayed first\/over the fields with other values.\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSFieldMetadata.SetShowInSearch", help: "<b>Void SetShowInSearch(Bool p_0)<\/b>\n\nTrue if this field is displayed in search result\r\n\r\n\\param p_0 ShowInSearch: Bool\r\n\\return Bool"},
{text: "Void.NSFieldProperty", help: "<b>NSFieldProperty<\/b>\n\n"},
{text: "NSFieldProperty.GetFieldLength", help: "<b>Integer GetFieldLength()<\/b>\n\n"},
{text: "NSFieldProperty.GetLength", help: "<b>Integer GetLength()<\/b>\n\n"},
{text: "NSFieldProperty.GetFieldRight", help: "<b>NSFieldRight GetFieldRight()<\/b>\n\n"},
{text: "NSFieldProperty.GetFieldType", help: "<b>String GetFieldType()<\/b>\n\n"},
{text: "NSFieldProperty.GetType", help: "<b>String GetType()<\/b>\n\n"},
{text: "NSFieldProperty.SetFieldLength", help: "<b>Void SetFieldLength(Integer p_0)<\/b>\n\n"},
{text: "NSFieldProperty.SetFieldRight", help: "<b>Void SetFieldRight(NSFieldRight p_0)<\/b>\n\n"},
{text: "NSFieldProperty.SetFieldType", help: "<b>Void SetFieldType(String p_0)<\/b>\n\n"},
{text: "NSFieldProperty.SetLength", help: "<b>Void SetLength(Integer p_0)<\/b>\n\n"},
{text: "NSFieldProperty.SetType", help: "<b>Void SetType(String p_0)<\/b>\n\n"},
{text: "Void.NSFieldRight", help: "<b>NSFieldRight<\/b>\n\n"},
{text: "NSFieldRight.GetFieldRight", help: "<b>Integer GetFieldRight()<\/b>\n\n"},
{text: "NSFieldRight.GetMask", help: "<b>Integer GetMask()<\/b>\n\n"},
{text: "NSFieldRight.GetReason", help: "<b>String GetReason()<\/b>\n\n"},
{text: "NSFieldRight.SetFieldRight", help: "<b>Void SetFieldRight(Integer p_0)<\/b>\n\n"},
{text: "NSFieldRight.SetMask", help: "<b>Void SetMask(Integer p_0)<\/b>\n\n"},
{text: "NSFieldRight.SetReason", help: "<b>Void SetReason(String p_0)<\/b>\n\n"},
{text: "Void.NSFindAgent", help: "<b>NSFindAgent<\/b>\n\n"},
{text: "NSFindAgent.GetDefaultDesiredColumns", help: "<b>NSArchiveColumnInfo[] GetDefaultDesiredColumns(String p_0, String p_1, String p_2)<\/b>\n\nCalculate the default desired columns, i.e., the result columns for a given search. The search is defined by a storage type, provider name and storage key, which are used to fetch the corresponding restrictions from the database (in the same way as Find does). If you want to specify the restriction directly, use the GetDefaultDesiredColumnsFromRestrictions method instead. This is the algorithm that is used by the Find service method.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of the provider to calculate default desired columns for\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\return Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100.\r\n"},
{text: "NSFindAgent.GetDefaultDesiredColumnsFromRestrictions", help: "<b>NSArchiveColumnInfo[] GetDefaultDesiredColumnsFromRestrictions(String p_0, NSArchiveRestrictionInfo[] p_1)<\/b>\n\nCalculate the default desired columns, i.e., the result columns for a given search. The search is defined by a provider name and a set of restrictions. This is the algorithm that is used by the Find service method.\r\n\r\n\\param p_0 providerName: Name of the provider to calculate default desired columns for\r\n\\param p_1 restrictions: Restriction to use in the calculation of default desired columns\r\n\\return Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100.\r\n"},
{text: "NSFindAgent.GetDefaultDesiredColumnsFromRestrictions2", help: "<b>NSArchiveColumnInfo[] GetDefaultDesiredColumnsFromRestrictions2(String p_0, String p_1)<\/b>\n\nCalculate the default desired columns, i.e., the result columns for a given search. The search is defined by a provider name and a set of restrictions. This is the algorithm that is used by the Find service method.\r\n\r\n\\param p_0 providerName: Name of the provider to calculate default desired columns for\r\n\\param p_1 restrictions: Restriction to use in the calculation of default desired columns\r\n\\return Column information for the default desired columns, fully populated. Percentage-specified column widths sum to exactly 100."},
{text: "NSFindAgent.GetDefaultOrderBy", help: "<b>NSArchiveOrderByInfo[] GetDefaultOrderBy(String p_0, String p_1, String p_2)<\/b>\n\nCalculate the default orderby columns for a given provider and a search. The search is specified by a storage type, provider name and storage key, and is fetched from the database. Default desired columns are then calculated for the search, and those columns are then used as the basis for calculating an order by. If you want to specify the desired columns directly, use the GetDefaultOrderByFromDesiredColumns method instead.  This is the same algorithm that is used by the Find service method.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Provider name to calculate default orderby for\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\return Orderby information\r\n"},
{text: "NSFindAgent.GetDefaultOrderByFromDesiredColumns", help: "<b>NSArchiveOrderByInfo[] GetDefaultOrderByFromDesiredColumns(String p_0, String[] p_1)<\/b>\n\nCalculate the default orderby columns for a given provider and a set of desired columns. This is the same algorithm that is used by the Find service method.\r\n\r\n\\param p_0 providerName: Provider name to calculate default orderby for\r\n\\param p_1 desiredColumns: Desired columns (return fields), used in the orderby calculation. You can generally only order by columns that have been set as 'desired'.\r\n\\return Orderby information\r\n"},
{text: "NSFindAgent.PopulateRestrictions", help: "<b>NSArchiveRestrictionInfo[] PopulateRestrictions(String p_0, NSArchiveRestrictionInfo[] p_1)<\/b>\n\nTake an incoming set of minimally populated restrictions (name + operator is required), and populate all the other parts of the ArchiveRestrictionInfo structure. This includes column information, display values (including list value lookup), and calculated\/default values where the value hints specify read-only (R).\r\n\r\n\\param p_0 providerName: Provider name to use for populating column information\r\n\\param p_1 restrictions: Restrictions to populate. The Name and Operator fields have to have valid content, and Values should be set as appropriate. Other fields can be left blank or null. If a ColumnInfo is already set, it will not be overwritten.\r\n\\return Fully populated restrictions in the same order as the incoming restrictions.\r\n"},
{text: "NSFindAgent.GetCriteriaInformation", help: "<b>NSCriteriaInformation GetCriteriaInformation(String p_0, String p_1, String p_2, String[] p_3)<\/b>\n\nGet criteria information from a set of saved criteria. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 staticColumns: Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.\r\n\\return The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control\r\n"},
{text: "NSFindAgent.GetCriteriaInformationWithContext", help: "<b>NSCriteriaInformation GetCriteriaInformationWithContext(String p_0, String p_1, String p_2, String[] p_3, String p_4)<\/b>\n\nGet criteria information from a set of saved criteria. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 staticColumns: Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.\r\n\\param p_4 context: Optional context that can be used by FindProvider\r\n\\return The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control"},
{text: "NSFindAgent.GetSpecifiedCriteriaInformationWithDefaults", help: "<b>NSCriteriaInformation GetSpecifiedCriteriaInformationWithDefaults(String p_0, String p_1, String p_2, String[] p_3, String[] p_4)<\/b>\n\nGet criteria information from a set of saved criteria, for a specific set of columns. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 desiredColumnNames: Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.\r\n\\param p_4 staticColumns: Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.\r\n\\return The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.\r\n"},
{text: "NSFindAgent.GetSpecifiedCriteriaInformationWithDefaultsWithContext", help: "<b>NSCriteriaInformation GetSpecifiedCriteriaInformationWithDefaultsWithContext(String p_0, String p_1, String p_2, String[] p_3, String[] p_4, String p_5)<\/b>\n\nGet criteria information from a set of saved criteria, for a specific set of columns. The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 desiredColumnNames: Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.\r\n\\param p_4 staticColumns: Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.\r\n\\param p_5 context: Optional context that can be used by FindProvider\r\n\\return The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control. ALL columns specified in the call will be present in the results; those that do not have corresponding criteria set will have empty values and the default (first) operator, with the IsActive flag set to false."},
{text: "NSFindAgent.SaveRestrictionsAndGetCriteriaInformation", help: "<b>NSCriteriaInformation SaveRestrictionsAndGetCriteriaInformation(String p_0, String p_1, String p_2, NSArchiveRestrictionInfo[] p_3, String[] p_4)<\/b>\n\nSave an array of restrictions for later use as search criteria (including as dynamic selection and Find). Then, return the same result as a call to GetCriteriaInformation would have done. The purpose is to encapsulate saving and updating of a GUI in one round trip.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria\r\n\\param p_3 restrictions: Array of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.\r\n\\param p_4 staticColumns: Optional array of restrictions that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.\r\n\\return The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control\r\n"},
{text: "NSFindAgent.SaveRestrictionsAndGetCriteriaInformation2", help: "<b>NSCriteriaInformation SaveRestrictionsAndGetCriteriaInformation2(String p_0, String p_1, String p_2, String p_3, String p_4)<\/b>\n\nSave an array of restrictions for later use as search criteria (including as dynamic selection and Find). Then, return the same result as a call to GetCriteriaInformation would have done. The purpose is to encapsulate saving and updating of a GUI in one round trip.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria\r\n\\param p_3 restrictions: String of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.\r\n\\param p_4 staticColumns: Optional string of comma-separated columns that are to be EXCLUDED from the CriteriaArchiveRows part of the result. In the Find dialogs, that corresponds to the 'static' fields, to avoid duplicating them in the 'Match also' criteria list. This array can be null, indicating that all restrictions should be included in the criteria list.\r\n\\return The result contains the restrictions in two forms: fully populated ArchiveRestrictionInfo objects, used to display details and for saving changes; and as a list suitable for an Archive control"},
{text: "NSFindAgent.Find", help: "<b>NSFindResults Find(String p_0, String p_1, String p_2, Integer p_3, Integer p_4)<\/b>\n\nExecute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby columns are also calculated by the system.<para\/>The other variants of the Find method allow you greater control over the individual aspects of the process.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 pageSize: Size of result set pages\r\n\\param p_4 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows.\r\n"},
{text: "NSFindAgent.FindFromRestrictions", help: "<b>NSFindResults FindFromRestrictions(NSArchiveRestrictionInfo[] p_0, String p_1, Integer p_2, Integer p_3)<\/b>\n\nExecute a Find operation and return a page of results. The criteria for the Find are passed in directly, not fetched by a restriction storage provider. The columns of the result are calculated based on the restriction.\r\n\r\n\\param p_0 restrictions: Array of restrictions specifying the search. Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 pageSize: Size of result set pages\r\n\\param p_3 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows.\r\n"},
{text: "NSFindAgent.FindFromRestrictions2", help: "<b>NSFindResults FindFromRestrictions2(String p_0, String p_1, Integer p_2, Integer p_3)<\/b>\n\nExecute a Find operation and return a page of results. The criteria for the Find are passed in directly, not fetched by a restriction storage provider. The columns of the result are calculated based on the restriction.\r\n\r\n\\param p_0 restrictions: String of restrictions specifying the search. e.g. \"name='SuperOffice'\" Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 pageSize: Size of result set pages\r\n\\param p_3 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows."},
{text: "NSFindAgent.FindFromRestrictionsColumns", help: "<b>NSFindResults FindFromRestrictionsColumns(NSArchiveRestrictionInfo[] p_0, String p_1, String[] p_2, Integer p_3, Integer p_4)<\/b>\n\nExecute a Find operation and return a page of results. <para\/>The criteria for the Find are passed in directly, not fetched by a restriction storage provider. <para\/>The desired columns of the result set are also passed in directly.<para\/>The orderby information is calculated by the system.<para\/>Use the GetCriteriaInformation and GetDefaultDesiredColumns service methods to let the system calculate these values, if you want to use or modify them.\r\n\r\n\\param p_0 restrictions: Array of restrictions specifying the search. Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 desiredColumns: Array of column names desired for the result. Each name must match a column offered by the given archive provider.\r\n\\param p_3 pageSize: Size of result set pages\r\n\\param p_4 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows.\r\n"},
{text: "NSFindAgent.FindFromRestrictionsColumns2", help: "<b>NSFindResults FindFromRestrictionsColumns2(String p_0, String p_1, String p_2, Integer p_3, Integer p_4)<\/b>\n\nExecute a Find operation and return a page of results. <para\/>The criteria for the Find are passed in directly, not fetched by a restriction storage provider. <para\/>The desired columns of the result set are also passed in directly.<para\/>The orderby information is calculated by the system.<para\/>Use the GetCriteriaInformation and GetDefaultDesiredColumns service methods to let the system calculate these values, if you want to use or modify them.\r\n\r\n\\param p_0 restrictions: String of restrictions specifying the search. e.g.:\"name begins 'Super'\". Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 desiredColumns: Array of column names desired for the result. Each name must match a column offered by the given archive provider.\r\n\\param p_3 pageSize: Size of result set pages\r\n\\param p_4 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows."},
{text: "NSFindAgent.FindFromRestrictionsColumnsOrderBy", help: "<b>NSFindResults FindFromRestrictionsColumnsOrderBy(NSArchiveRestrictionInfo[] p_0, String p_1, String[] p_2, NSArchiveOrderByInfo[] p_3, Integer p_4, Integer p_5)<\/b>\n\nExecute a Find operation and return a page of results. <para\/>The criteria for the Find are passed in directly, not fetched by a restriction storage provider. <para\/>The desired columns of the result set are also passed in directly.<para\/>The orderby information is also passed in directly.<para\/>Use the GetCriteriaInformation, GetDefaultDesiredColumns and GetDefaultOrderBy service methods to let the system calculate these values, if you want to use or modify them.\r\n\r\n\\param p_0 restrictions: Array of restrictions specifying the search. Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 desiredColumns: Array of column names desired for the result. Each name must match a column offered by the given archive provider.\r\n\\param p_3 orderBy: Array of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.\r\n\\param p_4 pageSize: Size of result set pages\r\n\\param p_5 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows.\r\n"},
{text: "NSFindAgent.FindFromRestrictionsColumnsOrderBy2", help: "<b>NSFindResults FindFromRestrictionsColumnsOrderBy2(String p_0, String p_1, String p_2, String p_3, Integer p_4, Integer p_5)<\/b>\n\nExecute a Find operation and return a page of results. <para\/>The criteria for the Find are passed in directly, not fetched by a restriction storage provider. <para\/>The desired columns of the result set are also passed in directly.<para\/>The orderby information is also passed in directly.<para\/>Use the GetCriteriaInformation, GetDefaultDesiredColumns and GetDefaultOrderBy service methods to let the system calculate these values, if you want to use or modify them.\r\n\r\n\\param p_0 restrictions: String of restrictions specifying the search. Each restriction must match a column of the  given archive provider, and that column must have its CanRestrictBy property set to true.\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 desiredColumns: Comma separated list of column names desired for the result. Each name must match a column offered by the given archive provider.\r\n\\param p_3 orderBy: String of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.\r\n\\param p_4 pageSize: Size of result set pages\r\n\\param p_5 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows."},
{text: "NSFindAgent.FindOrderBy", help: "<b>NSFindResults FindOrderBy(String p_0, String p_1, String p_2, Integer p_3, Integer p_4, NSArchiveOrderByInfo[] p_5)<\/b>\n\nExecute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby parameter is used for sorting the results.<para\/>The other variants of the Find method allow you greater control over the individual aspects of the process.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 pageSize: Size of result set pages\r\n\\param p_4 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\param p_5 orderBy: Array of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.\r\n\\return Results from search, containing column information and result rows.\r\n"},
{text: "NSFindAgent.FindOrderBy2", help: "<b>NSFindResults FindOrderBy2(String p_0, String p_1, String p_2, Integer p_3, Integer p_4, String p_5)<\/b>\n\nExecute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. The columns of the result are calculated based on the restriction. The orderby parameter is used for sorting the results.<para\/>The other variants of the Find method allow you greater control over the individual aspects of the process.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 pageSize: Size of result set pages\r\n\\param p_4 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\param p_5 orderBy: Comma separated list of order by specifications. \"name asc, dept desc\" If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.\r\n\\return Results from search, containing column information and result rows."},
{text: "NSFindAgent.FindWithColumns", help: "<b>NSFindResults FindWithColumns(String p_0, String p_1, String p_2, String[] p_3, Integer p_4, Integer p_5, NSArchiveOrderByInfo[] p_6)<\/b>\n\nExecute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 desiredColumns: Array of column names desired for the result. Each name must match a column offered by the given archive provider.\r\n\\param p_4 pageSize: Size of result set pages\r\n\\param p_5 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\param p_6 orderBy: Array of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.\r\n\\return Results from search, containing column information and result rows.\r\n"},
{text: "NSFindAgent.FindWithExtraRestrictions", help: "<b>NSFindResults FindWithExtraRestrictions(String p_0, String p_1, String p_2, NSArchiveRestrictionInfo[] p_3, NSArchiveOrderByInfo[] p_4, String[] p_5, Integer p_6, Integer p_7)<\/b>\n\nExecute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. In addition an extra set of restrictions can be added to the search. These restrictions will not be saved, they are only valid for the current search. Extra restrictions will override restrictions with the same key already stored on the storagekey.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 extraRestrictions: Extra restrictions to append to the the search. These will override saved restrictions with the same key.\r\n\\param p_4 orderBy: Array of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.\r\n\\param p_5 desiredColumns: Array of column names desired for the result. Each name must match a column offered by the given archive provider.\r\n\\param p_6 pageSize: Size of result set pages\r\n\\param p_7 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows.\r\n"},
{text: "NSFindAgent.FindWithExtraRestrictions2", help: "<b>NSFindResults FindWithExtraRestrictions2(String p_0, String p_1, String p_2, String p_3, String p_4, String p_5, Integer p_6, Integer p_7)<\/b>\n\nExecute a Find operation and return a page of results. The criteria for the Find are fetched from the restriction storage provider according to the given parameters. In addition an extra set of restrictions can be added to the search. These restrictions will not be saved, they are only valid for the current search. Extra restrictions will override restrictions with the same key already stored on the storagekey.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\param p_3 extraRestrictions: Extra restrictions to append to the the search. These will override saved restrictions with the same key.\r\n\\param p_4 orderBy: Comma separated list of order by specifications. If it is null or empty, the row order is unspecified, database dependent, and might not be the same from call to call, depending on query execution plans. The unspecified order willgenerally not vary within pages of the same query.\r\n\\param p_5 desiredColumns: Comma separated list of column names desired for the result. Each name must match a column offered by the given archive provider.\r\n\\param p_6 pageSize: Size of result set pages\r\n\\param p_7 pageNumber: Result set page to return, 0 is the first page. When a call returns no rows, no further pages are available.\r\n\\return Results from search, containing column information and result rows."},
{text: "NSFindAgent.GetAvailableRestrictionColumns", help: "<b>String[] GetAvailableRestrictionColumns(String p_0, String p_1)<\/b>\n\nGet a list of the column names corresponding to available restrictions for a certain archive provider and restriction storage provider. Such columns have CanRestrict set to true, and are supported by the given restriction storage provider.\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is to execute the search and return the result columns\/rows\r\n\\return Array of column names, corresponding to support restrictions for the given archive and restriction storage providers.\r\n"},
{text: "NSFindAgent.SaveRestrictions", help: "<b>Void SaveRestrictions(String p_0, String p_1, String p_2, NSArchiveRestrictionInfo[] p_3)<\/b>\n\nSave an array of restrictions for later use as search criteria (including as dynamic selection and Find).\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria\r\n\\param p_3 restrictions: Array of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.\r\n\\return This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip\r\n"},
{text: "NSFindAgent.SaveRestrictions2", help: "<b>Void SaveRestrictions2(String p_0, String p_1, String p_2, String p_3)<\/b>\n\nSave an array of restrictions for later use as search criteria (including as dynamic selection and Find).\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria\r\n\\param p_3 restrictions: String of restrictions. \"name = 'SuperOffice'\" The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.\r\n\\return This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip"},
{text: "NSFindAgent.SaveRestrictionsWithContext", help: "<b>Void SaveRestrictionsWithContext(String p_0, String p_1, String p_2, NSArchiveRestrictionInfo[] p_3, String p_4)<\/b>\n\nSave an array of restrictions for later use as search criteria (including as dynamic selection and Find).\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria\r\n\\param p_3 restrictions: Array of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.\r\n\\param p_4 context: Optional context that can be used by FindProvider\r\n\\return This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip"},
{text: "NSFindAgent.SaveRestrictionsWithContext2", help: "<b>Void SaveRestrictionsWithContext2(String p_0, String p_1, String p_2, String p_3, String p_4)<\/b>\n\nSave an array of restrictions for later use as search criteria (including as dynamic selection and Find).\r\n\r\n\\param p_0 storageType: Restriction storage type specification, either 'Criteria' or 'Reporter' (or possible extensions)\r\n\\param p_1 providerName: Name of archive provider that is the intended consumer of the restrictions\r\n\\param p_2 storageKey: Storage key to be interpreted by the restriction storage provider, when it saves the restrictions as criteria\r\n\\param p_3 restrictions: String of restrictions. The ColumnInfo member and the DisplayValues members need NOT be populated; it is enough to provide a name, operator and any values the operator may need. The IsActive is also saved. Values should be encoded using the CultureDataFormatter to ensure compatibility across cultures.\r\n\\param p_4 context: Optional context that can be used by FindProvider\r\n\\return This service call just saves the restrictions. See SaveRestrictionsAndGetCriteriaInformation if you would like the restrictions returned as criteria immediately, in one roundtrip"},
{text: "Void.NSFindResults", help: "<b>NSFindResults<\/b>\n\nResult carrier for the Find operation. It contains a set of column specifications, and a set of row, where each row contains the columns. The row set is the result of carrying out some search operation."},
{text: "NSFindResults.GetRowCount", help: "<b>Integer GetRowCount()<\/b>\n\nCount of rows, independent of paging. If you order up page 1 with page size 50, the row count may still be 279, that being the number of rows that would have been returned in a  paging-off situation\r\n\r\n\\return Integer"},
{text: "NSFindResults.GetArchiveColumns", help: "<b>NSArchiveColumnInfo[] GetArchiveColumns()<\/b>\n\nArray of ColumnInfo column specifications\r\n\r\n\\return ArchiveColumnInfoArray"},
{text: "NSFindResults.GetArchiveRows", help: "<b>NSArchiveListItem[] GetArchiveRows()<\/b>\n\nArray of archive list items, i.e., the service layer carrier for archive rows. These are the find results, represented as archive rows\r\n\r\n\\return ArchiveListItemArray"},
{text: "NSFindResults.SetArchiveColumns", help: "<b>Void SetArchiveColumns(NSArchiveColumnInfo[] p_0)<\/b>\n\nArray of ColumnInfo column specifications\r\n\r\n\\param p_0 ArchiveColumns: ArchiveColumnInfoArray\r\n\\return ArchiveColumnInfoArray"},
{text: "NSFindResults.SetArchiveRows", help: "<b>Void SetArchiveRows(NSArchiveListItem[] p_0)<\/b>\n\nArray of archive list items, i.e., the service layer carrier for archive rows. These are the find results, represented as archive rows\r\n\r\n\\param p_0 ArchiveRows: ArchiveListItemArray\r\n\\return ArchiveListItemArray"},
{text: "NSFindResults.SetRowCount", help: "<b>Void SetRowCount(Integer p_0)<\/b>\n\nCount of rows, independent of paging. If you order up page 1 with page size 50, the row count may still be 279, that being the number of rows that would have been returned in a  paging-off situation\r\n\r\n\\param p_0 RowCount: Integer\r\n\\return Integer"},
{text: "Void.NSForeignAppEntity", help: "<b>NSForeignAppEntity<\/b>\n\n"},
{text: "NSForeignAppEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSForeignAppEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSForeignAppEntity.GetForeignAppId", help: "<b>Integer GetForeignAppId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSForeignAppEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nThe person that created the foreign application.\r\n\r\n\\return Associate"},
{text: "NSForeignAppEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nThe person that last updated this foreign application.\r\n\r\n\\return Associate"},
{text: "NSForeignAppEntity.GetDevices", help: "<b>NSForeignDevice[] GetDevices()<\/b>\n\nThe devices that belong to this foreign app.\r\n\r\n\\return ForeignDeviceArray"},
{text: "NSForeignAppEntity.GetName", help: "<b>String GetName()<\/b>\n\nName of foreign application\r\n\r\n\\return String"},
{text: "NSForeignAppEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nThe person that created the foreign application.\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSForeignAppEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSForeignAppEntity.SetDevices", help: "<b>Void SetDevices(NSForeignDevice[] p_0)<\/b>\n\nThe devices that belong to this foreign app.\r\n\r\n\\param p_0 Devices: ForeignDeviceArray\r\n\\return ForeignDeviceArray"},
{text: "NSForeignAppEntity.SetForeignAppId", help: "<b>Void SetForeignAppId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ForeignAppId: Integer\r\n\\return Integer"},
{text: "NSForeignAppEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of foreign application\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSForeignAppEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nThe person that last updated this foreign application.\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSForeignAppEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "Void.NSForeignDevice", help: "<b>NSForeignDevice<\/b>\n\nSaves a foreign device belonging to the ForeignDevice and application name specified."},
{text: "NSForeignDevice.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSForeignDevice.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSForeignDevice.GetForeignAppId", help: "<b>Integer GetForeignAppId()<\/b>\n\nReference to foregin application (device type)\r\n\r\n\\return Integer"},
{text: "NSForeignDevice.GetForeignDeviceId", help: "<b>Integer GetForeignDeviceId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSForeignDevice.GetAssociateFullName", help: "<b>String GetAssociateFullName()<\/b>\n\nThe person owning the Foreign Device\r\n\r\n\\return String"},
{text: "NSForeignDevice.GetCreatedBy", help: "<b>String GetCreatedBy()<\/b>\n\nThe person that created the device.\r\n\r\n\\return String"},
{text: "NSForeignDevice.GetDeviceIdentifier", help: "<b>String GetDeviceIdentifier()<\/b>\n\nOptional unique id of device (Palm pilot device ID, etc)\r\n\r\n\\return String"},
{text: "NSForeignDevice.GetName", help: "<b>String GetName()<\/b>\n\nName of device\r\n\r\n\\return String"},
{text: "NSForeignDevice.GetUpdatedBy", help: "<b>String GetUpdatedBy()<\/b>\n\nThe person that last updated this device.\r\n\r\n\\return String"},
{text: "NSForeignDevice.SetAssociateFullName", help: "<b>Void SetAssociateFullName(String p_0)<\/b>\n\nThe person owning the Foreign Device\r\n\r\n\\param p_0 AssociateFullName: String\r\n\\return String"},
{text: "NSForeignDevice.SetCreatedBy", help: "<b>Void SetCreatedBy(String p_0)<\/b>\n\nThe person that created the device.\r\n\r\n\\param p_0 CreatedBy: String\r\n\\return String"},
{text: "NSForeignDevice.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSForeignDevice.SetDeviceIdentifier", help: "<b>Void SetDeviceIdentifier(String p_0)<\/b>\n\nOptional unique id of device (Palm pilot device ID, etc)\r\n\r\n\\param p_0 DeviceIdentifier: String\r\n\\return String"},
{text: "NSForeignDevice.SetForeignAppId", help: "<b>Void SetForeignAppId(Integer p_0)<\/b>\n\nReference to foregin application (device type)\r\n\r\n\\param p_0 ForeignAppId: Integer\r\n\\return Integer"},
{text: "NSForeignDevice.SetForeignDeviceId", help: "<b>Void SetForeignDeviceId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ForeignDeviceId: Integer\r\n\\return Integer"},
{text: "NSForeignDevice.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of device\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSForeignDevice.SetUpdatedBy", help: "<b>Void SetUpdatedBy(String p_0)<\/b>\n\nThe person that last updated this device.\r\n\r\n\\param p_0 UpdatedBy: String\r\n\\return String"},
{text: "NSForeignDevice.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "Void.NSForeignKey", help: "<b>NSForeignKey<\/b>\n\n"},
{text: "NSForeignKey.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSForeignKey.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSForeignKey.GetRecordId", help: "<b>Integer GetRecordId()<\/b>\n\nRecord in the referenced table\r\n\r\n\\return Integer"},
{text: "NSForeignKey.GetCreatedBy", help: "<b>String GetCreatedBy()<\/b>\n\nName of the person that created the foreign key\r\n\r\n\\return String"},
{text: "NSForeignKey.GetKey", help: "<b>String GetKey()<\/b>\n\nSubkey (optional)\r\n\r\n\\return String"},
{text: "NSForeignKey.GetTableName", help: "<b>String GetTableName()<\/b>\n\nTable name, transformed to and from numeric table id by the service layer\r\n\r\n\\return String"},
{text: "NSForeignKey.GetUpdatedBy", help: "<b>String GetUpdatedBy()<\/b>\n\nName of the person that last updated the foreign key\r\n\r\n\\return String"},
{text: "NSForeignKey.GetValue", help: "<b>String GetValue()<\/b>\n\nKey value\r\n\r\n\\return String"},
{text: "NSForeignKey.SetCreatedBy", help: "<b>Void SetCreatedBy(String p_0)<\/b>\n\nName of the person that created the foreign key\r\n\r\n\\param p_0 CreatedBy: String\r\n\\return String"},
{text: "NSForeignKey.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSForeignKey.SetKey", help: "<b>Void SetKey(String p_0)<\/b>\n\nSubkey (optional)\r\n\r\n\\param p_0 Key: String\r\n\\return String"},
{text: "NSForeignKey.SetRecordId", help: "<b>Void SetRecordId(Integer p_0)<\/b>\n\nRecord in the referenced table\r\n\r\n\\param p_0 RecordId: Integer\r\n\\return Integer"},
{text: "NSForeignKey.SetTableName", help: "<b>Void SetTableName(String p_0)<\/b>\n\nTable name, transformed to and from numeric table id by the service layer\r\n\r\n\\param p_0 TableName: String\r\n\\return String"},
{text: "NSForeignKey.SetUpdatedBy", help: "<b>Void SetUpdatedBy(String p_0)<\/b>\n\nName of the person that last updated the foreign key\r\n\r\n\\param p_0 UpdatedBy: String\r\n\\return String"},
{text: "NSForeignKey.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSForeignKey.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nKey value\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSForeignSystemAgent", help: "<b>NSForeignSystemAgent<\/b>\n\nCollection of all services that works with Foreign key data (Key\/Value pairs)"},
{text: "NSForeignSystemAgent.CreateDefaultForeignAppEntity", help: "<b>NSForeignAppEntity CreateDefaultForeignAppEntity()<\/b>\n\nLoading default values into a new ForeignAppEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ForeignAppEntity with default values\r\n"},
{text: "NSForeignSystemAgent.GetAppByName", help: "<b>NSForeignAppEntity GetAppByName(String p_0)<\/b>\n\nGets the ForeignApp with the given name.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\return The ForeignApp that matches the name.\r\n"},
{text: "NSForeignSystemAgent.GetForeignAppEntity", help: "<b>NSForeignAppEntity GetForeignAppEntity(Integer p_0)<\/b>\n\nGets a ForeignAppEntity object.\r\n\r\n\\param p_0 foreignAppEntityId: The identifier of the ForeignAppEntity object\r\n\\return ForeignAppEntity\r\n"},
{text: "NSForeignSystemAgent.SaveForeignAppEntity", help: "<b>NSForeignAppEntity SaveForeignAppEntity(NSForeignAppEntity p_0)<\/b>\n\nUpdates the existing ForeignAppEntity or creates a new ForeignAppEntity if the id parameter is empty\r\n\r\n\\param p_0 foreignAppEntity: The ForeignAppEntity that is saved\r\n\\return New or updated ForeignAppEntity"},
{text: "NSForeignSystemAgent.GetDeviceByIdentifier", help: "<b>NSForeignDevice GetDeviceByIdentifier(String p_0, String p_1, String p_2)<\/b>\n\nGets a ForeignDevice with deviceName and deviceIdentifier that belongs to the application with applicationName.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 deviceIdentifier: Optional unique id of device (Palm pilot device ID, version number, etc)\r\n\\return The ForeignDevice.\r\n"},
{text: "NSForeignSystemAgent.GetDeviceByName", help: "<b>NSForeignDevice GetDeviceByName(String p_0, String p_1)<\/b>\n\nGets a ForeignDevice with deviceName that belongs to the application with applicationName.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\return The ForeignDevice.\r\n"},
{text: "NSForeignSystemAgent.GetForeignDevice", help: "<b>NSForeignDevice GetForeignDevice(Integer p_0)<\/b>\n\nGets a ForeignDevice object.\r\n\r\n\\param p_0 foreignDeviceId: The identifier of the ForeignDevice object\r\n\\return ForeignDevice\r\n"},
{text: "NSForeignSystemAgent.SaveForeignDevice", help: "<b>NSForeignDevice SaveForeignDevice(NSForeignDevice p_0, String p_1)<\/b>\n\nSaves a foreign device for an foreign application\r\n\r\n\\param p_0 foreignDevice: Foreign device to save\r\n\\param p_1 applicationName: The name of the foreign application.\r\n\\return Returns the saved foreign device\r\n"},
{text: "NSForeignSystemAgent.GetApplicationDevices", help: "<b>NSForeignDevice[] GetApplicationDevices(String p_0)<\/b>\n\nGets all devices that belong to a foreign application.\r\n\r\n\\param p_0 applicationName: The foreign application name\r\n\\return Array of ForeignDevices\r\n"},
{text: "NSForeignSystemAgent.GetKey", help: "<b>NSForeignKey GetKey(String p_0, String p_1, String p_2, String p_3, Integer p_4)<\/b>\n\nReturning a foreign key by its key name, that belongs to the specified device and application. A table name and record ID can also be specified.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 keyName: The name of the foreign key.\r\n\\param p_3 tableName: Table name, transformed to and from numeric table id by the service layer.<p\/>Use an empty string to indicate that your key is not bound to any specific table.\r\n\\param p_4 recordId: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.\r\n\\return The ForeignKey.\r\n"},
{text: "NSForeignSystemAgent.GetKeyByValue", help: "<b>NSForeignKey GetKeyByValue(String p_0, String p_1, String p_2, String p_3, String p_4)<\/b>\n\nGet a foreignkey based on its name and value, that belongs to the specified device and application.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 keyName: The name of the foreign key.\r\n\\param p_3 keyValue: Foreignkey value\r\n\\param p_4 tableName: Table name, transformed to and from numeric table id by the service layer.<p\/>Use an empty string to indicate that your key is not bound to any specific table.\r\n\\return The ForeignKey.\r\n"},
{text: "NSForeignSystemAgent.GetKeyOnDeviceIdentifier", help: "<b>NSForeignKey GetKeyOnDeviceIdentifier(String p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5)<\/b>\n\nReturning a foreign key by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 deviceIdentifier: The device identifier.\r\n\\param p_3 keyName: The name of the foreign key.\r\n\\param p_4 tableName: Table name, transformed to and from numeric table id by the service layer.<p\/>Use an empty string to indicate that your key is not bound to any specific table.\r\n\\param p_5 recordId: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.\r\n\\return The ForeignKey.\r\n"},
{text: "NSForeignSystemAgent.SaveForeignKey", help: "<b>NSForeignKey SaveForeignKey(NSForeignKey p_0, String p_1, String p_2, String p_3)<\/b>\n\nSaves a key belonging to the ForeignApp and ForeignDevice specified.\r\n\r\n\\param p_0 foreignKey: Foreign key to save\r\n\\param p_1 applicationName\r\n\\param p_2 deviceName: The name of the foreign device.\r\n\\param p_3 deviceIdentifier: The device identifier. Optional if device identifier is not used.\r\n\\return The new or updated ForeignKey\r\n"},
{text: "NSForeignSystemAgent.GetApplicationKeys", help: "<b>NSForeignKey[] GetApplicationKeys(String p_0)<\/b>\n\nReturns all ForeignKeys that belong to an application.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\return Array of all ForeignKeys in the ForeignApp.\r\n"},
{text: "NSForeignSystemAgent.GetDeviceKeys", help: "<b>NSForeignKey[] GetDeviceKeys(String p_0, String p_1)<\/b>\n\nReturns all ForeignKeys that belong to a device.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\return Array of all ForeignKeys in the ForeignDevice.\r\n"},
{text: "NSForeignSystemAgent.GetDeviceKeysOnDeviceIdentifier", help: "<b>NSForeignKey[] GetDeviceKeysOnDeviceIdentifier(String p_0, String p_1, String p_2)<\/b>\n\nReturns all ForeignKeys that belong to a device with a given deviceIdentifier.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 deviceIdentifier: Identifier for a unique grouping of keys within a device.\r\n\\return Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.\r\n"},
{text: "NSForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTable", help: "<b>NSForeignKey[] GetDeviceKeysOnDeviceIdentifierTable(String p_0, String p_1, String p_2, String p_3)<\/b>\n\nReturns all ForeignKeys that belong to a device with a given deviceIdentifier and table name.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 deviceIdentifier: Identifier for a unique grouping of keys within a device.\r\n\\param p_3 tableName: Table name, transformed to and from numeric table id by the service layer.<p\/>Use an empty string to indicate that your key is not bound to any specific table.\r\n\\return Array of all ForeignKeys in the ForeignDevice that belong to the DeviceIdentifier.\r\n"},
{text: "NSForeignSystemAgent.GetDeviceKeysOnDeviceIdentifierTableRecordId", help: "<b>NSForeignKey[] GetDeviceKeysOnDeviceIdentifierTableRecordId(String p_0, String p_1, String p_2, String p_3, Integer p_4)<\/b>\n\nReturns all ForeignKeys that belong to a device with a given deviceIdentifier and table name, as well as record id.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 deviceIdentifier: Identifier for a unique grouping of keys within a device.\r\n\\param p_3 tableName: Table name, transformed to and from numeric table id by the service layer.<p\/>Use an empty string to indicate that your key is not bound to any specific table.\r\n\\param p_4 recordId: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.\r\n\\return Array of all ForeignKeys in the ForeignDevice that match the criteria\r\n"},
{text: "NSForeignSystemAgent.GetKeyValue", help: "<b>String GetKeyValue(String p_0, String p_1, String p_2, String p_3, Integer p_4)<\/b>\n\nGets the string value of a ForeignKey, that belongs to the specified device and application. A table name and record ID can also be specified.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 keyName: The name of the foreign key.\r\n\\param p_3 tableName: Table name, transformed to and from numeric table id by the service layer.<p\/>Use an empty string to indicate that your key is not bound to any specific table.\r\n\\param p_4 recordId: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.\r\n\\return The ForeignKey value as string.\r\n"},
{text: "NSForeignSystemAgent.GetKeyValueOnDeviceIdentifier", help: "<b>String GetKeyValueOnDeviceIdentifier(String p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5)<\/b>\n\nReturning a foreign key string value by its key name and device identifier, that belongs to the specified device and application. A table name and record ID can also be specified.\r\n\r\n\\param p_0 applicationName: The name of the foreign application.\r\n\\param p_1 deviceName: The name of the foreign device.\r\n\\param p_2 deviceIdentifier: The device identifier.\r\n\\param p_3 keyName: The name of the foreign key.\r\n\\param p_4 tableName: Table name, transformed to and from numeric table id by the service layer.<p\/>Use an empty string to indicate that your key is not bound to any specific table.\r\n\\param p_5 recordId: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.\r\n\\return The ForeignKey's string value.\r\n"},
{text: "NSForeignSystemAgent.DeleteForeignAppEntity", help: "<b>Void DeleteForeignAppEntity(Integer p_0)<\/b>\n\nDeletes the ForeignAppEntity\r\n\r\n\\param p_0 foreignAppEntityId: The identity of the ForeignAppEntity\r\n"},
{text: "NSForeignSystemAgent.DeleteForeignDevice", help: "<b>Void DeleteForeignDevice(NSForeignDevice p_0, String p_1)<\/b>\n\nDeletes a foreign device from an application\r\n\r\n\\param p_0 foreignDevice: foreign device to delete\r\n\\param p_1 applicationName: Name of application to delete from\r\n"},
{text: "NSForeignSystemAgent.DeleteForeignKey", help: "<b>Void DeleteForeignKey(NSForeignKey p_0, String p_1, String p_2, String p_3, String p_4, Integer p_5)<\/b>\n\nDeletes all specified occurrences of a key, belonging to the ForeignApp and ForeignDevice, table and record specified. Specifying a blank table name will delete ALL keys of the given name; specifying a recordId of 0 will delete ALL keys of the given name for the given table.\r\n\r\n\\param p_0 foreignKey\r\n\\param p_1 applicationName: The name of the foreign application.\r\n\\param p_2 deviceName: The name of the foreign device.\r\n\\param p_3 deviceIdentifier: The device identifier. Optional if device identifier is not used.\r\n\\param p_4 tableName: Table name, transformed to and from numeric table id by the service layer.<p\/>Use an empty string to delete ALL keys that otherwise match; this may be dangerous and can take a long time if there are many items to delete.\r\n\\param p_5 recordId: Id of record that this key refers to. If the table name was blank, then this parameter must be 0. It can also be 0 to mean that the foreign key record was not bound to any particular record of the target table.<p\/>Specifying a zero recordId will remove the recordId restriction and delete all keys that otherwise match.\r\n"},
{text: "NSForeignSystemAgent.SaveForeignAppEntity", help: "<b>Void SaveForeignAppEntity(NSForeignAppEntity p_0)<\/b>\n\nUpdates the existing ForeignAppEntity or creates a new ForeignAppEntity if the id parameter is empty\r\n\r\n\\param p_0 foreignAppEntity: The ForeignAppEntity that is saved.\r\n\\return New or updated ForeignAppEntity\r\n"},
{text: "Void.NSFreeText", help: "<b>NSFreeText<\/b>\n\nUsed to manage freetext search."},
{text: "NSFreeText.GetAutoEnableTravelAreas", help: "<b>Bool GetAutoEnableTravelAreas()<\/b>\n\nAutomatically enable freetext search for new travel areas\r\n\r\n\\return Bool"},
{text: "NSFreeText.GetFreeTextEnabled", help: "<b>Bool GetFreeTextEnabled()<\/b>\n\nTrue if freetext search enabled\r\n\r\n\\return Bool"},
{text: "NSFreeText.GetLastGenerated", help: "<b>DateTime GetLastGenerated()<\/b>\n\nLast time search has been generated\r\n\r\n\\return DateTime"},
{text: "NSFreeText.GetCountWords", help: "<b>Integer GetCountWords()<\/b>\n\nCount of unique search words\r\n\r\n\\return Integer"},
{text: "NSFreeText.GetMultiWordOperator", help: "<b>Integer GetMultiWordOperator()<\/b>\n\nStarts with, contains or exact match\r\n\r\n\\return Integer"},
{text: "NSFreeText.GetOccurrences", help: "<b>Integer GetOccurrences()<\/b>\n\nTotal count of search words\r\n\r\n\\return Integer"},
{text: "NSFreeText.GetSingleWordOperator", help: "<b>Integer GetSingleWordOperator()<\/b>\n\nStarts with, contains or exact match\r\n\r\n\\return Integer"},
{text: "NSFreeText.SetAutoEnableTravelAreas", help: "<b>Void SetAutoEnableTravelAreas(Bool p_0)<\/b>\n\nAutomatically enable freetext search for new travel areas\r\n\r\n\\param p_0 AutoEnableTravelAreas: Bool\r\n\\return Bool"},
{text: "NSFreeText.SetCountWords", help: "<b>Void SetCountWords(Integer p_0)<\/b>\n\nCount of unique search words\r\n\r\n\\param p_0 CountWords: Integer\r\n\\return Integer"},
{text: "NSFreeText.SetFreeTextEnabled", help: "<b>Void SetFreeTextEnabled(Bool p_0)<\/b>\n\nTrue if freetext search enabled\r\n\r\n\\param p_0 FreeTextEnabled: Bool\r\n\\return Bool"},
{text: "NSFreeText.SetLastGenerated", help: "<b>Void SetLastGenerated(DateTime p_0)<\/b>\n\nLast time search has been generated\r\n\r\n\\param p_0 LastGenerated: DateTime\r\n\\return DateTime"},
{text: "NSFreeText.SetMultiWordOperator", help: "<b>Void SetMultiWordOperator(Integer p_0)<\/b>\n\nStarts with, contains or exact match\r\n\r\n\\param p_0 MultiWordOperator: Integer\r\n\\return Integer"},
{text: "NSFreeText.SetOccurrences", help: "<b>Void SetOccurrences(Integer p_0)<\/b>\n\nTotal count of search words\r\n\r\n\\param p_0 Occurrences: Integer\r\n\\return Integer"},
{text: "NSFreeText.SetSingleWordOperator", help: "<b>Void SetSingleWordOperator(Integer p_0)<\/b>\n\nStarts with, contains or exact match\r\n\r\n\\param p_0 SingleWordOperator: Integer\r\n\\return Integer"},
{text: "Void.NSFreeTextAgent", help: "<b>NSFreeTextAgent<\/b>\n\nThis agent can be used to manage the free text system"},
{text: "NSFreeTextAgent.RegenerateIndex", help: "<b>NSBatchTaskInfo RegenerateIndex(Bool p_0)<\/b>\n\nWipe and regenerate the freetext index by scanning the database (freetext search will be unavailable while this operation runs\r\n\r\n\\param p_0 runAsBatch: If true, then execute the regeneration as a Batch Task; the service call will return immediately. Otherwise wait until the task completes, may cause a timeout if called as a Web Service\r\n\\return Information about the batch task, if batch execution was requested. Otherwise null"},
{text: "NSFreeTextAgent.GetStatus", help: "<b>NSFreeText GetStatus()<\/b>\n\nReturns status for the freetext search words\r\n\r\n\\return The freetext status"},
{text: "NSFreeTextAgent.GetSuggestedStopWords", help: "<b>NSMDOListItem[] GetSuggestedStopWords(Integer p_0)<\/b>\n\nReturns the top used words in the freetext index table, sorted as most used first\r\n\r\n\\param p_0 countWords: The count of words that will be returned\r\n\\return The most used words"},
{text: "NSFreeTextAgent.GetStopWordList", help: "<b>String[] GetStopWordList()<\/b>\n\nReturns the list of stop words\r\n\r\n\\return The list of stop words"},
{text: "NSFreeTextAgent.AddWords", help: "<b>Void AddWords(String p_0)<\/b>\n\nAdds the words in the string to the stop word list\r\n\r\n\\param p_0 stopWords: The stop words to add\r\n\\return This method has no return value"},
{text: "NSFreeTextAgent.DeleteStopWordsById", help: "<b>Void DeleteStopWordsById(Integer[] p_0)<\/b>\n\nDelete the stop words with these ids\r\n\r\n\\param p_0 stopWordIds: The ids of the stopwords to delete\r\n\\return This method has no return value"},
{text: "NSFreeTextAgent.SetAutoEnableTravelAreas", help: "<b>Void SetAutoEnableTravelAreas(Bool p_0)<\/b>\n\nAutomatically enable freetext search for new travel areas? true or false\r\n\r\n\\param p_0 autoEnable: If true, auto enable\r\n\\return This method has no return value"},
{text: "NSFreeTextAgent.SetEnabled", help: "<b>Void SetEnabled(Bool p_0)<\/b>\n\nSets freetext search to enabled (true) or disabled (false)\r\n\r\n\\param p_0 enabled: If enabled true, else false\r\n\\return This method has no return value"},
{text: "NSFreeTextAgent.SetMultiWordOperator", help: "<b>Void SetMultiWordOperator(Integer p_0)<\/b>\n\nSets the operator used when matching multiple words\r\n\r\n\\param p_0 freeTextOperator: The operator\r\n\\return No return value"},
{text: "NSFreeTextAgent.SetSingleWordOperator", help: "<b>Void SetSingleWordOperator(Integer p_0)<\/b>\n\nSets the operator used when matching single words\r\n\r\n\\param p_0 freeTextOperator: The operator\r\n\\return This method has no return value"},
{text: "Void.NSGrantedModuleLicense", help: "<b>NSGrantedModuleLicense<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetIsHidden", help: "<b>Bool GetIsHidden()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetIsUnrestricted", help: "<b>Bool GetIsUnrestricted()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetExpiryDate", help: "<b>DateTime GetExpiryDate()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetExtraFlags", help: "<b>Integer GetExtraFlags()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetLicenseNumber", help: "<b>Integer GetLicenseNumber()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetLicenseType", help: "<b>Integer GetLicenseType()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetModuleId", help: "<b>Integer GetModuleId()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetOwnerId", help: "<b>Integer GetOwnerId()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetSortOrder", help: "<b>Integer GetSortOrder()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetDescription", help: "<b>String GetDescription()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetName", help: "<b>String GetName()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetOwnerDescription", help: "<b>String GetOwnerDescription()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetOwnerName", help: "<b>String GetOwnerName()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.GetVersion", help: "<b>String GetVersion()<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetExpiryDate", help: "<b>Void SetExpiryDate(DateTime p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetExtraFlags", help: "<b>Void SetExtraFlags(Integer p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetIsHidden", help: "<b>Void SetIsHidden(Bool p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetIsUnrestricted", help: "<b>Void SetIsUnrestricted(Bool p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetLicenseNumber", help: "<b>Void SetLicenseNumber(Integer p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetLicenseType", help: "<b>Void SetLicenseType(Integer p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetModuleId", help: "<b>Void SetModuleId(Integer p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetOwnerDescription", help: "<b>Void SetOwnerDescription(String p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetOwnerId", help: "<b>Void SetOwnerId(Integer p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetOwnerName", help: "<b>Void SetOwnerName(String p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetSortOrder", help: "<b>Void SetSortOrder(Integer p_0)<\/b>\n\n"},
{text: "NSGrantedModuleLicense.SetVersion", help: "<b>Void SetVersion(String p_0)<\/b>\n\n"},
{text: "Void.NSHeadingEntity", help: "<b>NSHeadingEntity<\/b>\n\nThe heading entity contains generic list item information"},
{text: "NSHeadingEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nTrue if the heading is marked as deleted\r\n\r\n\\return Bool"},
{text: "NSHeadingEntity.GetHeadingId", help: "<b>Integer GetHeadingId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSHeadingEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSHeadingEntity.GetUdListDefinitionId", help: "<b>Integer GetUdListDefinitionId()<\/b>\n\nThe id of the list which this heading belongs to\r\n\r\n\\return Integer"},
{text: "NSHeadingEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe visible heading\r\n\r\n\\return String"},
{text: "NSHeadingEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSHeadingEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nTrue if the heading is marked as deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSHeadingEntity.SetHeadingId", help: "<b>Void SetHeadingId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 HeadingId: Integer\r\n\\return Integer"},
{text: "NSHeadingEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe visible heading\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSHeadingEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSHeadingEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSHeadingEntity.SetUdListDefinitionId", help: "<b>Void SetUdListDefinitionId(Integer p_0)<\/b>\n\nThe id of the list which this heading belongs to\r\n\r\n\\param p_0 UdListDefinitionId: Integer\r\n\\return Integer"},
{text: "Void.NSHistory", help: "<b>NSHistory<\/b>\n\nThe usage history of the currently logged in user is represented as History objects."},
{text: "NSHistory.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nOwner of history list\r\n\r\n\\return Integer"},
{text: "NSHistory.GetHistoryId", help: "<b>Integer GetHistoryId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSHistory.GetId", help: "<b>Integer GetId()<\/b>\n\nId of the history item, for instance a contact id. Represents the history table's RecordId field, if the item is based on a history table record\r\n\r\n\\return Integer"},
{text: "NSHistory.GetRank", help: "<b>Integer GetRank()<\/b>\n\nSort order, indexed so it can used for sorting in the query\r\n\r\n\\return Integer"},
{text: "NSHistory.GetHistoryName", help: "<b>String GetHistoryName()<\/b>\n\nThe name of the history list, for instance contact. Represents the history table's TableId field\r\n\r\n\\return String"},
{text: "NSHistory.GetItemInfo", help: "<b>String GetItemInfo()<\/b>\n\nExtra information on the history item, e.g. The Associate Type for an associate or other relevant info.\r\n\r\n\\return String"},
{text: "NSHistory.GetName", help: "<b>String GetName()<\/b>\n\nName of the history item, for instance contact name\r\n\r\n\\return String"},
{text: "NSHistory.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nOwner of history list\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSHistory.SetHistoryId", help: "<b>Void SetHistoryId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 HistoryId: Integer\r\n\\return Integer"},
{text: "NSHistory.SetHistoryName", help: "<b>Void SetHistoryName(String p_0)<\/b>\n\nThe name of the history list, for instance contact. Represents the history table's TableId field\r\n\r\n\\param p_0 HistoryName: String\r\n\\return String"},
{text: "NSHistory.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nId of the history item, for instance a contact id. Represents the history table's RecordId field, if the item is based on a history table record\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSHistory.SetItemInfo", help: "<b>Void SetItemInfo(String p_0)<\/b>\n\nExtra information on the history item, e.g. The Associate Type for an associate or other relevant info.\r\n\r\n\\param p_0 ItemInfo: String\r\n\\return String"},
{text: "NSHistory.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of the history item, for instance contact name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSHistory.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nSort order, indexed so it can used for sorting in the query\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "Void.NSHistoryRequest", help: "<b>NSHistoryRequest<\/b>\n\nSpecification for a request for history information, by id. It is possible to ask for rights for a new record (insert), but then you need to supply the parent ID for entities that have parents (projectmember, selectionmember, person)"},
{text: "NSHistoryRequest.GetRequestForNewRecord", help: "<b>Bool GetRequestForNewRecord()<\/b>\n\nAre we requesting insert rights? If true, then EntityorParentId is taken to mean parent id\r\n\r\n\\return Bool"},
{text: "NSHistoryRequest.GetEntityOrParentId", help: "<b>Integer GetEntityOrParentId()<\/b>\n\nID of entity to get history for, or parent entity id if requesting insert rights for an entity that has a parent\r\n\r\n\\return Integer"},
{text: "NSHistoryRequest.GetEntityName", help: "<b>String GetEntityName()<\/b>\n\nName of entity to get history for\r\n\r\n\\return String"},
{text: "NSHistoryRequest.SetEntityName", help: "<b>Void SetEntityName(String p_0)<\/b>\n\nName of entity to get history for\r\n\r\n\\param p_0 EntityName: String\r\n\\return String"},
{text: "NSHistoryRequest.SetEntityOrParentId", help: "<b>Void SetEntityOrParentId(Integer p_0)<\/b>\n\nID of entity to get history for, or parent entity id if requesting insert rights for an entity that has a parent\r\n\r\n\\param p_0 EntityOrParentId: Integer\r\n\\return Integer"},
{text: "NSHistoryRequest.SetRequestForNewRecord", help: "<b>Void SetRequestForNewRecord(Bool p_0)<\/b>\n\nAre we requesting insert rights? If true, then EntityorParentId is taken to mean parent id\r\n\r\n\\param p_0 RequestForNewRecord: Bool\r\n\\return Bool"},
{text: "Void.NSImage", help: "<b>NSImage<\/b>\n\n"},
{text: "NSImage.GetImage", help: "<b>Byte[] GetImage()<\/b>\n\n"},
{text: "NSImage.SetImage", help: "<b>Void SetImage(Byte[] p_0)<\/b>\n\n"},
{text: "Void.NSImportAgent", help: "<b>NSImportAgent<\/b>\n\nThis agent can be used to import data into the system"},
{text: "NSImportAgent.SaveImport", help: "<b>Integer[] SaveImport(NSImportLine[] p_0, String[] p_1, Bool p_2, String p_3, String p_4)<\/b>\n\nDo the actual import\r\n\r\n\\param p_0 importLines: The rows that will be imported\r\n\\param p_1 columnDefinition: An array of the columndefinitions, like firstname, lastname, ...\r\n\\param p_2 createSelection: true if a selection of the imported entities shall be made\r\n\\param p_3 culture: The current culture used in the import. Used to match language specific strings\r\n\\param p_4 context: Optional context for the import.\r\n\\return First part: the id of the selection created after the import, 0 if no selection is created. Second part: The number of rows actually imported"},
{text: "NSImportAgent.CreateErpImportData", help: "<b>NSImportErpData CreateErpImportData(NSArchiveRestrictionInfo[] p_0, String[] p_1, Integer p_2, Integer p_3)<\/b>\n\nPopulates the ImportLines and columnDefs basedfrom erp system\r\n\r\n\\param p_0 restriction: Archive restrictions.\r\n\\param p_1 columns: Columns.\r\n\\param p_2 connectionId: Connection id for Erp system\r\n\\param p_3 erpActorType: Erp Actor type\r\n\\return The ImportLines and ColumnDefs"},
{text: "NSImportAgent.CreateDefaultImportLine", help: "<b>NSImportLine CreateDefaultImportLine(Integer p_0)<\/b>\n\nCreate a new empty import row with x count of values\r\n\r\n\\param p_0 countColumns: The count of values that will can be filled out\r\n\\return A new ImportLine"},
{text: "NSImportAgent.PreviewImport", help: "<b>NSImportLine[] PreviewImport(NSImportLine[] p_0, String[] p_1, String p_2, String p_3)<\/b>\n\nPreview the import\r\n\r\n\\param p_0 importLines: The rows that will be manipulated and according to Import rules\r\n\\param p_1 columnDefinition: An array of the columndefinitions, like firstname, lastname, ...\r\n\\param p_2 culture: The current culture used in the import. Used to match language specific strings\r\n\\param p_3 context: Optional context for the import.\r\n\\return An array of the the rows that can be imported, manipulated according to Import rules given"},
{text: "Void.NSImportColumnInfo", help: "<b>NSImportColumnInfo<\/b>\n\nColumn info for importlines."},
{text: "NSImportColumnInfo.GetLocked", help: "<b>Bool GetLocked()<\/b>\n\nIf true disable the option of choose column\r\n\r\n\\return Bool"},
{text: "NSImportColumnInfo.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nDisplay name of the column\r\n\r\n\\return String"},
{text: "NSImportColumnInfo.GetName", help: "<b>String GetName()<\/b>\n\nName of the column\r\n\r\n\\return String"},
{text: "NSImportColumnInfo.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nDisplay name of the column\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSImportColumnInfo.SetLocked", help: "<b>Void SetLocked(Bool p_0)<\/b>\n\nIf true disable the option of choose column\r\n\r\n\\param p_0 Locked: Bool\r\n\\return Bool"},
{text: "NSImportColumnInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of the column\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "Void.NSImportErpData", help: "<b>NSImportErpData<\/b>\n\nUsed to import data into the system. Representing one entity that will be imported."},
{text: "NSImportErpData.GetColumnInfos", help: "<b>NSImportColumnInfo[] GetColumnInfos()<\/b>\n\nArray of column definitions\r\n\r\n\\return ImportColumnInfoArray"},
{text: "NSImportErpData.GetImportLines", help: "<b>NSImportLine[] GetImportLines()<\/b>\n\nAn array of Import lines\r\n\r\n\\return ImportLineArray"},
{text: "NSImportErpData.SetColumnInfos", help: "<b>Void SetColumnInfos(NSImportColumnInfo[] p_0)<\/b>\n\nArray of column definitions\r\n\r\n\\param p_0 ColumnInfos: ImportColumnInfoArray\r\n\\return ImportColumnInfoArray"},
{text: "NSImportErpData.SetImportLines", help: "<b>Void SetImportLines(NSImportLine[] p_0)<\/b>\n\nAn array of Import lines\r\n\r\n\\param p_0 ImportLines: ImportLineArray\r\n\\return ImportLineArray"},
{text: "Void.NSImportLine", help: "<b>NSImportLine<\/b>\n\nUsed to import data into the system. Representing one entity that will be imported."},
{text: "NSImportLine.GetSelected", help: "<b>Bool GetSelected()<\/b>\n\nTrue if the entity shall be imported, false if the entity shall be ignored\r\n\r\n\\return Bool"},
{text: "NSImportLine.GetOperation", help: "<b>Integer GetOperation()<\/b>\n\nWhich operation will be used? This is a read-only property\r\n\r\n\\return Integer"},
{text: "NSImportLine.GetType", help: "<b>Integer GetType()<\/b>\n\nWhich entity type will be created? This is a read-only property\r\n\r\n\\return Integer"},
{text: "NSImportLine.GetExternalKey", help: "<b>String GetExternalKey()<\/b>\n\nOptional external primary key for the row\r\n\r\n\\return String"},
{text: "NSImportLine.GetValues", help: "<b>String[] GetValues()<\/b>\n\nAn array of the values that will be imported on the entity\r\n\r\n\\return StringArray"},
{text: "NSImportLine.SetExternalKey", help: "<b>Void SetExternalKey(String p_0)<\/b>\n\nOptional external primary key for the row\r\n\r\n\\param p_0 ExternalKey: String\r\n\\return String"},
{text: "NSImportLine.SetOperation", help: "<b>Void SetOperation(Integer p_0)<\/b>\n\nWhich operation will be used? This is a read-only property\r\n\r\n\\param p_0 Operation: Integer\r\n\\return Integer"},
{text: "NSImportLine.SetSelected", help: "<b>Void SetSelected(Bool p_0)<\/b>\n\nTrue if the entity shall be imported, false if the entity shall be ignored\r\n\r\n\\param p_0 Selected: Bool\r\n\\return Bool"},
{text: "NSImportLine.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nWhich entity type will be created? This is a read-only property\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSImportLine.SetValues", help: "<b>Void SetValues(String[] p_0)<\/b>\n\nAn array of the values that will be imported on the entity\r\n\r\n\\param p_0 Values: StringArray\r\n\\return StringArray"},
{text: "Void.NSIncomingMessage", help: "<b>NSIncomingMessage<\/b>\n\nDetails about a message to be sent"},
{text: "NSIncomingMessage.GetContent", help: "<b>String GetContent()<\/b>\n\nContent, or body, of the message.\r\n\r\n\\return String"},
{text: "NSIncomingMessage.GetFormat", help: "<b>String GetFormat()<\/b>\n\nFormat of the content\r\n\r\n\\return String"},
{text: "NSIncomingMessage.GetFrom", help: "<b>String GetFrom()<\/b>\n\nWho the message is from.  This can vary from provider to provider and can for SMS typically be a phone number or a string.  This is mail address on the form of an e-mail.\r\n\r\n\\return String"},
{text: "NSIncomingMessage.GetPlugin", help: "<b>String GetPlugin()<\/b>\n\nName of plugin\r\n\r\n\\return String"},
{text: "NSIncomingMessage.GetSessionKey", help: "<b>String GetSessionKey()<\/b>\n\nSession key used for threading.\r\n\r\n\\return String"},
{text: "NSIncomingMessage.GetTo", help: "<b>String GetTo()<\/b>\n\nAddress of the recipient. This can be in the form of phone number or email.\r\n\r\n\\return String"},
{text: "NSIncomingMessage.SetContent", help: "<b>Void SetContent(String p_0)<\/b>\n\nContent, or body, of the message.\r\n\r\n\\param p_0 Content: String\r\n\\return String"},
{text: "NSIncomingMessage.SetFormat", help: "<b>Void SetFormat(String p_0)<\/b>\n\nFormat of the content\r\n\r\n\\param p_0 Format: String\r\n\\return String"},
{text: "NSIncomingMessage.SetFrom", help: "<b>Void SetFrom(String p_0)<\/b>\n\nWho the message is from.  This can vary from provider to provider and can for SMS typically be a phone number or a string.  This is mail address on the form of an e-mail.\r\n\r\n\\param p_0 From: String\r\n\\return String"},
{text: "NSIncomingMessage.SetPlugin", help: "<b>Void SetPlugin(String p_0)<\/b>\n\nName of plugin\r\n\r\n\\param p_0 Plugin: String\r\n\\return String"},
{text: "NSIncomingMessage.SetSessionKey", help: "<b>Void SetSessionKey(String p_0)<\/b>\n\nSession key used for threading.\r\n\r\n\\param p_0 SessionKey: String\r\n\\return String"},
{text: "NSIncomingMessage.SetTo", help: "<b>Void SetTo(String p_0)<\/b>\n\nAddress of the recipient. This can be in the form of phone number or email.\r\n\r\n\\param p_0 To: String\r\n\\return String"},
{text: "Void.NSLanguageInfo", help: "<b>NSLanguageInfo<\/b>\n\n"},
{text: "NSLanguageInfo.GetIsBuiltIn", help: "<b>Bool GetIsBuiltIn()<\/b>\n\nHas this row been inserted by SuperOffice priming data\r\n\r\n\\return Bool"},
{text: "NSLanguageInfo.GetLanguageInfoId", help: "<b>Integer GetLanguageInfoId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSLanguageInfo.GetLCID", help: "<b>Integer GetLCID()<\/b>\n\nLanguage\/culture id as a numeric .NET code\r\n\r\n\\return Integer"},
{text: "NSLanguageInfo.GetEnglishName", help: "<b>String GetEnglishName()<\/b>\n\nEnglish name of this language (Norwegian)\r\n\r\n\\return String"},
{text: "NSLanguageInfo.GetNativeName", help: "<b>String GetNativeName()<\/b>\n\nThe native name of this language (Norsk Bokmål)\r\n\r\n\\return String"},
{text: "NSLanguageInfo.GetThreeLetterISOLanguageName", help: "<b>String GetThreeLetterISOLanguageName()<\/b>\n\nISO 3-letter abbreviation\r\n\r\n\\return String"},
{text: "NSLanguageInfo.GetTwoLetterISOLanguageName", help: "<b>String GetTwoLetterISOLanguageName()<\/b>\n\nISO 2-letter abbreviation\r\n\r\n\\return String"},
{text: "NSLanguageInfo.SetEnglishName", help: "<b>Void SetEnglishName(String p_0)<\/b>\n\nEnglish name of this language (Norwegian)\r\n\r\n\\param p_0 EnglishName: String\r\n\\return String"},
{text: "NSLanguageInfo.SetIsBuiltIn", help: "<b>Void SetIsBuiltIn(Bool p_0)<\/b>\n\nHas this row been inserted by SuperOffice priming data\r\n\r\n\\param p_0 IsBuiltIn: Bool\r\n\\return Bool"},
{text: "NSLanguageInfo.SetLanguageInfoId", help: "<b>Void SetLanguageInfoId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 LanguageInfoId: Integer\r\n\\return Integer"},
{text: "NSLanguageInfo.SetLCID", help: "<b>Void SetLCID(Integer p_0)<\/b>\n\nLanguage\/culture id as a numeric .NET code\r\n\r\n\\param p_0 LCID: Integer\r\n\\return Integer"},
{text: "NSLanguageInfo.SetNativeName", help: "<b>Void SetNativeName(String p_0)<\/b>\n\nThe native name of this language (Norsk Bokmål)\r\n\r\n\\param p_0 NativeName: String\r\n\\return String"},
{text: "NSLanguageInfo.SetThreeLetterISOLanguageName", help: "<b>Void SetThreeLetterISOLanguageName(String p_0)<\/b>\n\nISO 3-letter abbreviation\r\n\r\n\\param p_0 ThreeLetterISOLanguageName: String\r\n\\return String"},
{text: "NSLanguageInfo.SetTwoLetterISOLanguageName", help: "<b>Void SetTwoLetterISOLanguageName(String p_0)<\/b>\n\nISO 2-letter abbreviation\r\n\r\n\\param p_0 TwoLetterISOLanguageName: String\r\n\\return String"},
{text: "Void.NSLicenseAgent", help: "<b>NSLicenseAgent<\/b>\n\n"},
{text: "NSLicenseAgent.GetLicenseStatusFromLicenseServer", help: "<b>NSCheckLicenseStatusResult GetLicenseStatusFromLicenseServer(String p_0)<\/b>\n\nGet License from the license server for a particular module owner.\r\n\r\n\\param p_0 ownerName: Name of the module owner to get license from.\r\n\\return License from the database, from the license server and with usage.\r\n"},
{text: "NSLicenseAgent.GetLicenseFromDB", help: "<b>NSExtendedLicenseInfo GetLicenseFromDB(String p_0)<\/b>\n\nGet license, with usage, as it is stored in the database for one particular module owner.\r\n\r\n\\param p_0 ownerName: Name of the module owner.\r\n\\return License, with usage, as it is stored in the database.\r\n"},
{text: "NSLicenseAgent.GetLicenseFromFile", help: "<b>NSExtendedLicenseInfo GetLicenseFromFile(String p_0)<\/b>\n\nLoad a new license from file\r\n\r\n\\param p_0 fileContent: Content of the license file as read.\r\n"},
{text: "NSLicenseAgent.GetLicenseFromLicenseServer", help: "<b>NSExtendedLicenseInfo GetLicenseFromLicenseServer(String p_0)<\/b>\n\n\r\n\r\n\\param p_0 ownerName\r\n"},
{text: "NSLicenseAgent.GetLicenseForAllOwnersFromDB", help: "<b>NSExtendedLicenseInfo[] GetLicenseForAllOwnersFromDB()<\/b>\n\nGet all licenses, with usage, from all module owners as they are stored in the database\r\n\r\n"},
{text: "NSLicenseAgent.GetSatelliteLicenses", help: "<b>NSLicenseOwner[] GetSatelliteLicenses(Integer p_0)<\/b>\n\nObtain information about satellite module licenses\r\n\r\n\\param p_0 satelliteId: Satellite id to check for satellite module licenses\r\n\\return Satellite module licenses grouped by owners.\r\n"},
{text: "NSLicenseAgent.GetUserLicenses", help: "<b>NSLicenseOwner[] GetUserLicenses(Integer p_0)<\/b>\n\nObtain information about associate module licenses\r\n\r\n\\param p_0 associateId: Associate id to check for associate module licenses\r\n\\return Associate module licenses grouped by owners.\r\n"},
{text: "NSLicenseAgent.ActivateLicenseInfo", help: "<b>NSLicenseResult ActivateLicenseInfo(NSExtendedLicenseInfo p_0)<\/b>\n\nSave a new license to the database.\r\n\r\n\\param p_0 newLicense: New license to save to the database.\r\n"},
{text: "NSLicenseAgent.ChangeSerialNumber", help: "<b>NSLicenseResult ChangeSerialNumber(String p_0, String p_1)<\/b>\n\nChange the new serial number for the installation.\r\n\r\n\\param p_0 newCompanyName: The new company name\r\n\\param p_1 newSerialNumber: New serial number to change to.\r\n"},
{text: "NSLicenseAgent.RemoveLicenseFromDB", help: "<b>NSLicenseResult RemoveLicenseFromDB(String p_0)<\/b>\n\nRemove the license from a particular module owner from the database.  It is not permitted to remove licenses from SuperOffice\r\n\r\n\\param p_0 moduleOwner: Name of the module owner to remove license from."},
{text: "NSLicenseAgent.ValidateLicenseInfo", help: "<b>NSLicenseResult ValidateLicenseInfo(NSExtendedLicenseInfo p_0)<\/b>\n\nValidate that a license is consistant.\r\n\r\n\\param p_0 licenseInfo: License to validate consistancy for\r\n"},
{text: "NSLicenseAgent.GetUserLicensesMDOList", help: "<b>NSSelectableMDOListItem[] GetUserLicensesMDOList()<\/b>\n\nGet all licenses in a MDOListItem structure.\r\n\r\n\\return Hierarchical structure of user licenses."},
{text: "NSLicenseAgent.GetModuleLicenseHistoryFromLicenseServer", help: "<b>String GetModuleLicenseHistoryFromLicenseServer(NSExtendedLicenseInfo p_0, NSExtendedModuleLicense p_1)<\/b>\n\nGet details about a license from the license server.\r\n\r\n\\param p_0 licenseInfo: Description of the license\r\n\\param p_1 moduleLicense: Information about a particular module to get information for.\r\n\\return Information about a particular license module.\r\n"},
{text: "NSLicenseAgent.GetShopUrl", help: "<b>String GetShopUrl(String p_0)<\/b>\n\nGet the shop URL for the specified module owner. This can be used to redirect user to the web shop.\r\n\r\n\\param p_0 ownerName: Name of the module owner.\r\n\\return The URL which contains the shop for the specified module owner."},
{text: "Void.NSLicenseInfo", help: "<b>NSLicenseInfo<\/b>\n\nRepresents all licenses for this owner at this site."},
{text: "NSLicenseInfo.GetAdminWarningDate", help: "<b>DateTime GetAdminWarningDate()<\/b>\n\nWhen should nagging begin (for instance, during login to SoAdmin)\r\n\r\n\\return DateTime"},
{text: "NSLicenseInfo.GetExpiryDate", help: "<b>DateTime GetExpiryDate()<\/b>\n\nExpiration date, 0 = forever\r\n\r\n\\return DateTime"},
{text: "NSLicenseInfo.GetGraceDate", help: "<b>DateTime GetGraceDate()<\/b>\n\nReal expiration date, when the given module actually stops working. Modules that normally update data should switch to read-only mode. Modules that only read anyway, should disable themselves in some other way\r\n\r\n\\return DateTime"},
{text: "NSLicenseInfo.GetMaintenanceDate", help: "<b>DateTime GetMaintenanceDate()<\/b>\n\nExpiration date for maintenance. After this date, upgrades should refuse to install.\r\n\r\n\\return DateTime"},
{text: "NSLicenseInfo.GetNextCheckDate", help: "<b>DateTime GetNextCheckDate()<\/b>\n\nWhen should the system next check with the license issuer\r\n\r\n\\return DateTime"},
{text: "NSLicenseInfo.GetDeploymentType", help: "<b>Integer GetDeploymentType()<\/b>\n\nType of deployment\r\n\r\n\\return Integer"},
{text: "NSLicenseInfo.GetExtraFlags", help: "<b>Integer GetExtraFlags()<\/b>\n\nUnspecified extra flags of license, part of checksum\r\n\r\n\\return Integer"},
{text: "NSLicenseInfo.GetModuleLicenses", help: "<b>NSModuleLicense[] GetModuleLicenses()<\/b>\n\nThe module licenses.\r\n\r\n\\return ModuleLicenseArray"},
{text: "NSLicenseInfo.GetPublicKey", help: "<b>NSSignedPublicKey GetPublicKey()<\/b>\n\nThe public key used to verify licenses owned by this owner.\r\n\r\n\\return SignedPublicKey"},
{text: "NSLicenseInfo.GetCompanyName", help: "<b>String GetCompanyName()<\/b>\n\nName of the database owner company.\r\n\r\n\\return String"},
{text: "NSLicenseInfo.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\n"},
{text: "NSLicenseInfo.GetLicenseUrl", help: "<b>String GetLicenseUrl()<\/b>\n\nThe url that will provide keycodes for all modules owned by this owner\r\n\r\n\\return String"},
{text: "NSLicenseInfo.GetLicenseVersion", help: "<b>String GetLicenseVersion()<\/b>\n\nThe url that will provide keycodes for all modules owned by this owner\r\n\r\n\\return String"},
{text: "NSLicenseInfo.GetOwnerDescription", help: "<b>String GetOwnerDescription()<\/b>\n\nHuman-readable description of owner, shown in GUI, default language. Additional languages can be added to LocaleText, resource type 26\r\n\r\n\\return String"},
{text: "NSLicenseInfo.GetOwnerName", help: "<b>String GetOwnerName()<\/b>\n\nThe name of the module owner, not visible in GUI but used in the code. OwnerName SUPEROFFICE is reserved and may NEVER be used by partners. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\r\n\r\n\\return String"},
{text: "NSLicenseInfo.GetProductDescription", help: "<b>String GetProductDescription()<\/b>\n\nDescription of type of product\r\n\r\n\\return String"},
{text: "NSLicenseInfo.GetProductType", help: "<b>String GetProductType()<\/b>\n\nType of product\r\n\r\n\\return String"},
{text: "NSLicenseInfo.GetSerialNr", help: "<b>String GetSerialNr()<\/b>\n\nSerial number. e.g.: 1010000014.\r\n\r\n\\return String"},
{text: "NSLicenseInfo.GetSignature", help: "<b>String GetSignature()<\/b>\n\nSignature of all non-zero-amount moduleLicense rows referring to this owner\r\n\r\n\\return String"},
{text: "NSLicenseInfo.SetAdminWarningDate", help: "<b>Void SetAdminWarningDate(DateTime p_0)<\/b>\n\nWhen should nagging begin (for instance, during login to SoAdmin)\r\n\r\n\\param p_0 AdminWarningDate: DateTime\r\n\\return DateTime"},
{text: "NSLicenseInfo.SetCompanyName", help: "<b>Void SetCompanyName(String p_0)<\/b>\n\nName of the database owner company.\r\n\r\n\\param p_0 CompanyName: String\r\n\\return String"},
{text: "NSLicenseInfo.SetDeploymentType", help: "<b>Void SetDeploymentType(Integer p_0)<\/b>\n\nType of deployment\r\n\r\n\\param p_0 DeploymentType: Integer\r\n\\return Integer"},
{text: "NSLicenseInfo.SetExpiryDate", help: "<b>Void SetExpiryDate(DateTime p_0)<\/b>\n\nExpiration date, 0 = forever\r\n\r\n\\param p_0 ExpiryDate: DateTime\r\n\\return DateTime"},
{text: "NSLicenseInfo.SetExtraFlags", help: "<b>Void SetExtraFlags(Integer p_0)<\/b>\n\nUnspecified extra flags of license, part of checksum\r\n\r\n\\param p_0 ExtraFlags: Integer\r\n\\return Integer"},
{text: "NSLicenseInfo.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\n"},
{text: "NSLicenseInfo.SetGraceDate", help: "<b>Void SetGraceDate(DateTime p_0)<\/b>\n\nReal expiration date, when the given module actually stops working. Modules that normally update data should switch to read-only mode. Modules that only read anyway, should disable themselves in some other way\r\n\r\n\\param p_0 GraceDate: DateTime\r\n\\return DateTime"},
{text: "NSLicenseInfo.SetLicenseUrl", help: "<b>Void SetLicenseUrl(String p_0)<\/b>\n\nThe url that will provide keycodes for all modules owned by this owner\r\n\r\n\\param p_0 LicenseUrl: String\r\n\\return String"},
{text: "NSLicenseInfo.SetLicenseVersion", help: "<b>Void SetLicenseVersion(String p_0)<\/b>\n\nThe url that will provide keycodes for all modules owned by this owner\r\n\r\n\\param p_0 LicenseVersion: String\r\n\\return String"},
{text: "NSLicenseInfo.SetMaintenanceDate", help: "<b>Void SetMaintenanceDate(DateTime p_0)<\/b>\n\nExpiration date for maintenance. After this date, upgrades should refuse to install.\r\n\r\n\\param p_0 MaintenanceDate: DateTime\r\n\\return DateTime"},
{text: "NSLicenseInfo.SetModuleLicenses", help: "<b>Void SetModuleLicenses(NSModuleLicense[] p_0)<\/b>\n\nThe module licenses.\r\n\r\n\\param p_0 ModuleLicenses: ModuleLicenseArray\r\n\\return ModuleLicenseArray"},
{text: "NSLicenseInfo.SetNextCheckDate", help: "<b>Void SetNextCheckDate(DateTime p_0)<\/b>\n\nWhen should the system next check with the license issuer\r\n\r\n\\param p_0 NextCheckDate: DateTime\r\n\\return DateTime"},
{text: "NSLicenseInfo.SetOwnerDescription", help: "<b>Void SetOwnerDescription(String p_0)<\/b>\n\nHuman-readable description of owner, shown in GUI, default language. Additional languages can be added to LocaleText, resource type 26\r\n\r\n\\param p_0 OwnerDescription: String\r\n\\return String"},
{text: "NSLicenseInfo.SetOwnerName", help: "<b>Void SetOwnerName(String p_0)<\/b>\n\nThe name of the module owner, not visible in GUI but used in the code. OwnerName SUPEROFFICE is reserved and may NEVER be used by partners. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\r\n\r\n\\param p_0 OwnerName: String\r\n\\return String"},
{text: "NSLicenseInfo.SetProductDescription", help: "<b>Void SetProductDescription(String p_0)<\/b>\n\nDescription of type of product\r\n\r\n\\param p_0 ProductDescription: String\r\n\\return String"},
{text: "NSLicenseInfo.SetProductType", help: "<b>Void SetProductType(String p_0)<\/b>\n\nType of product\r\n\r\n\\param p_0 ProductType: String\r\n\\return String"},
{text: "NSLicenseInfo.SetPublicKey", help: "<b>Void SetPublicKey(NSSignedPublicKey p_0)<\/b>\n\nThe public key used to verify licenses owned by this owner.\r\n\r\n\\param p_0 PublicKey: SignedPublicKey\r\n\\return SignedPublicKey"},
{text: "NSLicenseInfo.SetSerialNr", help: "<b>Void SetSerialNr(String p_0)<\/b>\n\nSerial number. e.g.: 1010000014.\r\n\r\n\\param p_0 SerialNr: String\r\n\\return String"},
{text: "NSLicenseInfo.SetSignature", help: "<b>Void SetSignature(String p_0)<\/b>\n\nSignature of all non-zero-amount moduleLicense rows referring to this owner\r\n\r\n\\param p_0 Signature: String\r\n\\return String"},
{text: "Void.NSLicenseOwner", help: "<b>NSLicenseOwner<\/b>\n\n"},
{text: "NSLicenseOwner.GetRestrictedModuleLicenses", help: "<b>NSModuleLicenseLink[] GetRestrictedModuleLicenses()<\/b>\n\n\\return ModuleLicenseLinkArray"},
{text: "NSLicenseOwner.GetUnrestrictedModuleLicenses", help: "<b>NSModuleLicenseLink[] GetUnrestrictedModuleLicenses()<\/b>\n\nThe unrestricted module licenses that this license owner\r\n\r\n\\return ModuleLicenseLinkArray"},
{text: "NSLicenseOwner.GetDescription", help: "<b>String GetDescription()<\/b>\n\n\\return String"},
{text: "NSLicenseOwner.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the license owner\r\n\r\n\\return String"},
{text: "NSLicenseOwner.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSLicenseOwner.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the license owner\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSLicenseOwner.SetRestrictedModuleLicenses", help: "<b>Void SetRestrictedModuleLicenses(NSModuleLicenseLink[] p_0)<\/b>\n\n\\param p_0 RestrictedModuleLicenses: ModuleLicenseLinkArray\r\n\\return ModuleLicenseLinkArray"},
{text: "NSLicenseOwner.SetUnrestrictedModuleLicenses", help: "<b>Void SetUnrestrictedModuleLicenses(NSModuleLicenseLink[] p_0)<\/b>\n\nThe unrestricted module licenses that this license owner\r\n\r\n\\param p_0 UnrestrictedModuleLicenses: ModuleLicenseLinkArray\r\n\\return ModuleLicenseLinkArray"},
{text: "Void.NSLicenseResult", help: "<b>NSLicenseResult<\/b>\n\n"},
{text: "NSLicenseResult.GetSucceeded", help: "<b>Bool GetSucceeded()<\/b>\n\n\\return Bool"},
{text: "NSLicenseResult.GetReason", help: "<b>String GetReason()<\/b>\n\n\\return String"},
{text: "NSLicenseResult.SetReason", help: "<b>Void SetReason(String p_0)<\/b>\n\n\\param p_0 Reason: String\r\n\\return String"},
{text: "NSLicenseResult.SetSucceeded", help: "<b>Void SetSucceeded(Bool p_0)<\/b>\n\n\\param p_0 Succeeded: Bool\r\n\\return Bool"},
{text: "Void.NSLink", help: "<b>NSLink<\/b>\n\n"},
{text: "NSLink.GetId", help: "<b>Integer GetId()<\/b>\n\nId of the entity the link points to (The destination\/target entity primary key)\r\n\r\n\\return Integer"},
{text: "NSLink.GetLinkId", help: "<b>Integer GetLinkId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSLink.GetDescription", help: "<b>String GetDescription()<\/b>\n\nLink description.\r\n\r\n\\return String"},
{text: "NSLink.GetEntityName", help: "<b>String GetEntityName()<\/b>\n\nName of the entity the link points to (The destination\/target entity)\r\n\r\n\\return String"},
{text: "NSLink.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\nExtrainfo for link. Use for information that does not have a primary key\r\n\r\n\\return String"},
{text: "NSLink.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nLink description.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSLink.SetEntityName", help: "<b>Void SetEntityName(String p_0)<\/b>\n\nName of the entity the link points to (The destination\/target entity)\r\n\r\n\\param p_0 EntityName: String\r\n\\return String"},
{text: "NSLink.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\nExtrainfo for link. Use for information that does not have a primary key\r\n\r\n\\param p_0 ExtraInfo: String\r\n\\return String"},
{text: "NSLink.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nId of the entity the link points to (The destination\/target entity primary key)\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSLink.SetLinkId", help: "<b>Void SetLinkId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 LinkId: Integer\r\n\\return Integer"},
{text: "Void.NSListAgent", help: "<b>NSListAgent<\/b>\n\nCollection of all services that works with Lists. These are typical lists of data shown in dropdown list, checkbox lists, etc."},
{text: "NSListAgent.ChangeCurrency", help: "<b>Float ChangeCurrency(Float p_0, String p_1, String p_2)<\/b>\n\nRecalculates the amount to the new currency.\r\n\r\n\\param p_0 amount: The amount in the old currency\r\n\\param p_1 fromCurrency: The old currency\r\n\\param p_2 toCurrency: The new currency\r\n\\return Amount in new currency\r\n"},
{text: "NSListAgent.GetDocumentTemplateProperties", help: "<b>Map GetDocumentTemplateProperties(Integer p_0, String[] p_1)<\/b>\n\n"},
{text: "NSListAgent.CreateDefaultAmountClassEntity", help: "<b>NSAmountClassEntity CreateDefaultAmountClassEntity()<\/b>\n\nLoading default values into a new AmountClassEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New AmountClassEntity with default values"},
{text: "NSListAgent.GetAmountClassEntity", help: "<b>NSAmountClassEntity GetAmountClassEntity(Integer p_0)<\/b>\n\nGets a AmountClassEntity object.\r\n\r\n\\param p_0 amountClassEntityId: The identifier of the AmountClassEntity object\r\n\\return AmountClassEntity"},
{text: "NSListAgent.SaveAmountClassEntity", help: "<b>NSAmountClassEntity SaveAmountClassEntity(NSAmountClassEntity p_0)<\/b>\n\nUpdates the existing AmountClassEntity or creates a new AmountClassEntity if the id parameter is empty\r\n\r\n\\param p_0 amountClassEntity: The AmountClassEntity that is saved\r\n\\return New or updated AmountClassEntity"},
{text: "NSListAgent.GetBusiness", help: "<b>NSBusiness GetBusiness(Integer p_0)<\/b>\n\nGets a Business object.\r\n\r\n\\param p_0 businessId: The identifier of the Business object\r\n\\return Business\r\n"},
{text: "NSListAgent.GetBusinesses", help: "<b>NSBusiness[] GetBusinesses()<\/b>\n\nReturns all available businesses that a contact could have.\r\n\r\n\\return An array of all available businesses\r\n"},
{text: "NSListAgent.GetBusinessList", help: "<b>NSBusiness[] GetBusinessList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetBusinessList", help: "<b>NSBusinessList[] GetBusinessList(Integer[] p_0)<\/b>\n\nGets an array of Business objects.\r\n\r\n\\param p_0 businessIds: The identifiers of the Business object\r\n\\return Array of Business objects\r\n"},
{text: "NSListAgent.GetCategory", help: "<b>NSCategory GetCategory(Integer p_0)<\/b>\n\nGets a Category object.\r\n\r\n\\param p_0 categoryId: The identifier of the Category object\r\n\\return Category\r\n"},
{text: "NSListAgent.GetCategories", help: "<b>NSCategory[] GetCategories()<\/b>\n\nReturns all categories a contact could belong to\r\n\r\n\\return An array of all available categories\r\n"},
{text: "NSListAgent.GetCategoryList", help: "<b>NSCategory[] GetCategoryList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetCategoryList", help: "<b>NSCategoryList[] GetCategoryList(Integer[] p_0)<\/b>\n\nGets an array of Category objects.\r\n\r\n\\param p_0 categoryIds: The identifiers of the Category object\r\n\\return Array of Category objects\r\n"},
{text: "NSListAgent.GetCompetitor", help: "<b>NSCompetitor GetCompetitor(Integer p_0)<\/b>\n\nGets a Competitor object.\r\n\r\n\\param p_0 competitorId: The identifier of the Competitor object\r\n\\return Competitor\r\n"},
{text: "NSListAgent.GetCompetitorList", help: "<b>NSCompetitor[] GetCompetitorList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetCompetitors", help: "<b>NSCompetitor[] GetCompetitors()<\/b>\n\nReturns all competitors\r\n\r\n"},
{text: "NSListAgent.GetCompetitorList", help: "<b>NSCompetitorList[] GetCompetitorList(Integer[] p_0)<\/b>\n\nGets an array of Competitor objects.\r\n\r\n\\param p_0 competitorIds: The identifiers of the Competitor object\r\n\\return Array of Competitor objects\r\n"},
{text: "NSListAgent.CreateDefaultCountry", help: "<b>NSCountry CreateDefaultCountry()<\/b>\n\nGets a new country\r\n\r\n\\return A new country with default values"},
{text: "NSListAgent.GetCountry", help: "<b>NSCountry GetCountry(Integer p_0)<\/b>\n\nGets a Country object.\r\n\r\n\\param p_0 countryId: The identifier of the Country object\r\n\\return Country\r\n"},
{text: "NSListAgent.SaveCountry", help: "<b>NSCountry SaveCountry(NSCountry p_0)<\/b>\n\nSaves a country\r\n\r\n\\param p_0 country: The country to save\r\n\\return The country that is saved"},
{text: "NSListAgent.GetCountries", help: "<b>NSCountry[] GetCountries()<\/b>\n\nReturns all available countries a contact or person could belong to.\r\n\r\n\\return An array of all available countries\r\n"},
{text: "NSListAgent.GetCountryList", help: "<b>NSCountry[] GetCountryList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetCountryList", help: "<b>NSCountryList[] GetCountryList(Integer[] p_0)<\/b>\n\nGets an array of Country objects.\r\n\r\n\\param p_0 countryIds: The identifiers of the Country object\r\n\\return Array of Country objects\r\n"},
{text: "NSListAgent.GetCredited", help: "<b>NSCredited GetCredited(Integer p_0)<\/b>\n\nGets a Credited object.\r\n\r\n\\param p_0 creditedId: The identifier of the Credited object\r\n\\return Credited\r\n"},
{text: "NSListAgent.GetCreditedList", help: "<b>NSCredited[] GetCreditedList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetCrediteds", help: "<b>NSCredited[] GetCrediteds()<\/b>\n\nReturns all credited\r\n\r\n"},
{text: "NSListAgent.GetCreditedList", help: "<b>NSCreditedList[] GetCreditedList(Integer[] p_0)<\/b>\n\nGets an array of Credited objects.\r\n\r\n\\param p_0 creditedIds: The identifiers of the Credited object\r\n\\return Array of Credited objects\r\n"},
{text: "NSListAgent.GetCurrency", help: "<b>NSCurrency GetCurrency(Integer p_0)<\/b>\n\nGets a Currency object.\r\n\r\n\\param p_0 currencyId: The identifier of the Currency object\r\n\\return Currency\r\n"},
{text: "NSListAgent.GetOurCurrency", help: "<b>NSCurrency GetOurCurrency()<\/b>\n\nGets the Our currency object if currency is enabled\r\n\r\n\\return Our currency\r\n"},
{text: "NSListAgent.GetOwnerCompanysCurrency", help: "<b>NSCurrency GetOwnerCompanysCurrency()<\/b>\n\n\r\n\r\n"},
{text: "NSListAgent.GetCurrencies", help: "<b>NSCurrency[] GetCurrencies()<\/b>\n\nReturns all currencies\r\n\r\n\\return Array of currencies\r\n"},
{text: "NSListAgent.GetCurrencyList", help: "<b>NSCurrency[] GetCurrencyList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.CreateDefaultCurrencyEntity", help: "<b>NSCurrencyEntity CreateDefaultCurrencyEntity()<\/b>\n\nLoading default values into a new CurrencyEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New CurrencyEntity with default values"},
{text: "NSListAgent.GetBaseCurrency", help: "<b>NSCurrencyEntity GetBaseCurrency()<\/b>\n\nGet the base currency"},
{text: "NSListAgent.GetCurrencyEntity", help: "<b>NSCurrencyEntity GetCurrencyEntity(Integer p_0)<\/b>\n\nGets a CurrencyEntity object.\r\n\r\n\\param p_0 currencyEntityId: The identifier of the CurrencyEntity object\r\n\\return CurrencyEntity"},
{text: "NSListAgent.SaveCurrencyEntity", help: "<b>NSCurrencyEntity SaveCurrencyEntity(NSCurrencyEntity p_0)<\/b>\n\nUpdates the existing CurrencyEntity or creates a new CurrencyEntity if the id parameter is empty\r\n\r\n\\param p_0 currencyEntity: The CurrencyEntity that is saved\r\n\\return New or updated CurrencyEntity"},
{text: "NSListAgent.GetCurrencyList", help: "<b>NSCurrencyList[] GetCurrencyList(Integer[] p_0)<\/b>\n\nGets an array of Currency objects.\r\n\r\n\\param p_0 currencyIds: The identifiers of the Currency object\r\n\\return Array of Currency objects\r\n"},
{text: "NSListAgent.GetCustomerLanguage", help: "<b>NSCustomerLanguage GetCustomerLanguage(Integer p_0)<\/b>\n\nGets a CustomerLanguage object.\r\n\r\n\\param p_0 customerLanguageId: The identifier of the CustomerLanguage object\r\n\\return CustomerLanguage\r\n"},
{text: "NSListAgent.GetCustomerLanguageList", help: "<b>NSCustomerLanguage[] GetCustomerLanguageList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetCustomerLanguages", help: "<b>NSCustomerLanguage[] GetCustomerLanguages()<\/b>\n\n\r\n\r\n"},
{text: "NSListAgent.GetCustomerLanguageList", help: "<b>NSCustomerLanguageList[] GetCustomerLanguageList(Integer[] p_0)<\/b>\n\nGets an array of CustomerLanguage objects.\r\n\r\n\\param p_0 customerLanguageIds: The identifiers of the CustomerLanguage object\r\n\\return Array of CustomerLanguage objects\r\n"},
{text: "NSListAgent.GetDeliveryTerm", help: "<b>NSDeliveryTerm GetDeliveryTerm(Integer p_0)<\/b>\n\nGets a DeliveryTerm object.\r\n\r\n\\param p_0 deliveryTermId: The identifier of the DeliveryTerm object\r\n\\return DeliveryTerm"},
{text: "NSListAgent.GetDeliveryTerms", help: "<b>NSDeliveryTerm[] GetDeliveryTerms()<\/b>\n\nReturns all DeliveryTerms in SuperOffice db.\r\n\r\n\\return An array of all available DeliveryTerms"},
{text: "NSListAgent.GetDeliveryType", help: "<b>NSDeliveryType GetDeliveryType(Integer p_0)<\/b>\n\nGets a DeliveryType object.\r\n\r\n\\param p_0 deliveryTypeId: The identifier of the DeliveryType object\r\n\\return DeliveryType"},
{text: "NSListAgent.GetDeliveryTypes", help: "<b>NSDeliveryType[] GetDeliveryTypes()<\/b>\n\nReturns all DeliveryTypes in SuperOffice db.\r\n\r\n\\return An array of all available DeliveryType"},
{text: "NSListAgent.GetDepartment", help: "<b>NSDepartment GetDepartment(Integer p_0)<\/b>\n\nGets a Department object.\r\n\r\n\\param p_0 departmentId: The identifier of the Department object\r\n\\return Department\r\n"},
{text: "NSListAgent.GetDepartmentList", help: "<b>NSDepartment[] GetDepartmentList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetDepartments", help: "<b>NSDepartment[] GetDepartments()<\/b>\n\nGetting all departments\/user groups for the internal phone list with the user's colleagues.\r\n\r\n\\return Returns all departments."},
{text: "NSListAgent.GetDepartmentList", help: "<b>NSDepartmentList[] GetDepartmentList(Integer[] p_0)<\/b>\n\nGets an array of Department objects.\r\n\r\n\\param p_0 departmentIds: The identifiers of the Department object\r\n\\return Array of Department objects\r\n"},
{text: "NSListAgent.GetDocumentTemplate", help: "<b>NSDocumentTemplate GetDocumentTemplate(Integer p_0)<\/b>\n\nGets a DocumentTemplate object.\r\n\r\n\\param p_0 documentTemplateId: The identifier of the DocumentTemplate object\r\n\\return DocumentTemplate\r\n"},
{text: "NSListAgent.GetDocumentTemplateList", help: "<b>NSDocumentTemplate[] GetDocumentTemplateList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetDocumentTemplates", help: "<b>NSDocumentTemplate[] GetDocumentTemplates()<\/b>\n\nReturns all available document templates\r\n\r\n\\return Array of DocumentTemplates\r\n"},
{text: "NSListAgent.CreateDefaultDocumentTemplateEntity", help: "<b>NSDocumentTemplateEntity CreateDefaultDocumentTemplateEntity()<\/b>\n\nLoading default values into a new DocumentTemplateEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New DocumentTemplateEntity with default values"},
{text: "NSListAgent.GetDocumentTemplateEntity", help: "<b>NSDocumentTemplateEntity GetDocumentTemplateEntity(Integer p_0)<\/b>\n\nGets a DocumentTemplateEntity object.\r\n\r\n\\param p_0 documentTemplateEntityId: The identifier of the DocumentTemplateEntity object\r\n\\return DocumentTemplateEntity"},
{text: "NSListAgent.SaveDocumentTemplateEntity", help: "<b>NSDocumentTemplateEntity SaveDocumentTemplateEntity(NSDocumentTemplateEntity p_0)<\/b>\n\nUpdates the existing DocumentTemplateEntity or creates a new DocumentTemplateEntity if the id parameter is empty\r\n\r\n\\param p_0 documentTemplateEntity: The DocumentTemplateEntity that is saved\r\n\\return New or updated DocumentTemplateEntity"},
{text: "NSListAgent.SetDocumentTemplateFromDocumentTemplate", help: "<b>NSDocumentTemplateEntity SetDocumentTemplateFromDocumentTemplate(Integer p_0, NSDocumentTemplateEntity p_1)<\/b>\n\nCreate a new document template based on another template\r\n\r\n\\param p_0 sourceDocumentTemplateId: The document template to copy contents from.\r\n\\param p_1 documentTemplateEntity: The new document template entity\r\n\\return The new document template entity"},
{text: "NSListAgent.SetDocumentTemplateStream", help: "<b>NSDocumentTemplateEntity SetDocumentTemplateStream(NSDocumentTemplateEntity p_0, NSStream p_1, String p_2, Integer p_3)<\/b>\n\nStore a document template from its stream. Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid.\r\n\r\n\\param p_0 documentTemplateEntity: The document entity object that the binary data (document) should be stored to. Its file name may be amended by this call, see the return value\r\n\\param p_1 stream: The document as a stream.\r\n\\param p_2 languageCode: The language code ('en-US', 'nb-NO', etc). Use empty string if not supported or used.\r\n\\param p_3 pluginId: The plugin id to store the template with. 0 for SOArc\r\n\\return Since there is a potential for a name conflict (the file name stored by the document entity earlier may prove to be invalid), the (possibly amended) document entity is returned. The client should not assume that any earlier, cached entity information is valid."},
{text: "NSListAgent.GetDocumentTemplateList", help: "<b>NSDocumentTemplateList[] GetDocumentTemplateList(Integer[] p_0)<\/b>\n\nGets an array of DocumentTemplate objects.\r\n\r\n\\param p_0 documentTemplateIds: The identifiers of the DocumentTemplate object\r\n\\return Array of DocumentTemplate objects\r\n"},
{text: "NSListAgent.CreateDefaultExtAppEntity", help: "<b>NSExtAppEntity CreateDefaultExtAppEntity()<\/b>\n\nLoading default values into a new ExtAppEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ExtAppEntity with default values"},
{text: "NSListAgent.GetExtAppEntity", help: "<b>NSExtAppEntity GetExtAppEntity(Integer p_0)<\/b>\n\nGets a ExtAppEntity object.\r\n\r\n\\param p_0 extAppEntityId: The identifier of the ExtAppEntity object\r\n\\return ExtAppEntity"},
{text: "NSListAgent.SaveExtAppEntity", help: "<b>NSExtAppEntity SaveExtAppEntity(NSExtAppEntity p_0)<\/b>\n\nUpdates the existing ExtAppEntity or creates a new ExtAppEntity if the id parameter is empty\r\n\r\n\\param p_0 extAppEntity: The ExtAppEntity that is saved\r\n\\return New or updated ExtAppEntity"},
{text: "NSListAgent.CreateDefaultHeadingEntity", help: "<b>NSHeadingEntity CreateDefaultHeadingEntity()<\/b>\n\nLoading default values into a new HeadingEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New HeadingEntity with default values"},
{text: "NSListAgent.CreateDefaultHeadingFromListDefinition", help: "<b>NSHeadingEntity CreateDefaultHeadingFromListDefinition(Integer p_0)<\/b>\n\nGet a heading for the specified list defintion\r\n\r\n\\param p_0 udListDefinitionId: The id of the list definition, indicating which list to get the item from\r\n\\return The loaded heading"},
{text: "NSListAgent.GetHeadingEntity", help: "<b>NSHeadingEntity GetHeadingEntity(Integer p_0)<\/b>\n\nGets a HeadingEntity object.\r\n\r\n\\param p_0 headingEntityId: The identifier of the HeadingEntity object\r\n\\return HeadingEntity"},
{text: "NSListAgent.SaveHeadingEntity", help: "<b>NSHeadingEntity SaveHeadingEntity(NSHeadingEntity p_0)<\/b>\n\nUpdates the existing HeadingEntity or creates a new HeadingEntity if the id parameter is empty\r\n\r\n\\param p_0 headingEntity: The HeadingEntity that is saved\r\n\\return New or updated HeadingEntity"},
{text: "NSListAgent.GetLanguageInfo", help: "<b>NSLanguageInfo GetLanguageInfo(Integer p_0)<\/b>\n\nGets a LanguageInfo object.\r\n\r\n\\param p_0 languageInfoId: The identifier of the LanguageInfo object\r\n\\return LanguageInfo\r\n"},
{text: "NSListAgent.GetInstalledLanguages", help: "<b>NSLanguageInfo[] GetInstalledLanguages()<\/b>\n\nReturns the list of all languages installed in this database.\r\n\r\n\\return Array of installed languages\r\n"},
{text: "NSListAgent.GetLanguageInfoList", help: "<b>NSLanguageInfo[] GetLanguageInfoList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetLanguageInfoList", help: "<b>NSLanguageInfoList[] GetLanguageInfoList(Integer[] p_0)<\/b>\n\nGets an array of LanguageInfo objects.\r\n\r\n\\param p_0 languageInfoIds: The identifiers of the LanguageInfo object\r\n\\return Array of LanguageInfo objects\r\n"},
{text: "NSListAgent.GetLink", help: "<b>NSLink GetLink(Integer p_0)<\/b>\n\nGets a Link object.\r\n\r\n\\param p_0 linkId: The identifier of the Link object\r\n\\return Link\r\n"},
{text: "NSListAgent.GetLinkList", help: "<b>NSLink[] GetLinkList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetLinkList", help: "<b>NSLinkList[] GetLinkList(Integer[] p_0)<\/b>\n\nGets an array of Link objects.\r\n\r\n\\param p_0 linkIds: The identifiers of the Link object\r\n\\return Array of Link objects\r\n"},
{text: "NSListAgent.CreateDefaultListEntity", help: "<b>NSListEntity CreateDefaultListEntity()<\/b>\n\nLoading default values into a new ListEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ListEntity with default values"},
{text: "NSListAgent.GetListEntity", help: "<b>NSListEntity GetListEntity(Integer p_0)<\/b>\n\nGets a ListEntity object.\r\n\r\n\\param p_0 listEntityId: The identifier of the ListEntity object\r\n\\return ListEntity"},
{text: "NSListAgent.SaveListEntity", help: "<b>NSListEntity SaveListEntity(NSListEntity p_0)<\/b>\n\nUpdates the existing ListEntity or creates a new ListEntity if the id parameter is empty\r\n\r\n\\param p_0 listEntity: The ListEntity that is saved\r\n\\return New or updated ListEntity"},
{text: "NSListAgent.CreateDefaultListItemEntity", help: "<b>NSListItemEntity CreateDefaultListItemEntity()<\/b>\n\nLoading default values into a new ListItemEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ListItemEntity with default values"},
{text: "NSListAgent.GetFromListDefinition", help: "<b>NSListItemEntity GetFromListDefinition(Integer p_0, Integer p_1)<\/b>\n\nGet a list item for the specified list defintion\r\n\r\n\\param p_0 id: The identity of the list item to load\r\n\\param p_1 udListDefinitionId: The id of the list definition, indicating which list to get the item from. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.\r\n\\return The loaded list item"},
{text: "NSListAgent.SaveListItemEntity", help: "<b>NSListItemEntity SaveListItemEntity(NSListItemEntity p_0)<\/b>\n\nUpdates the existing ListItemEntity or creates a new ListItemEntity if the id parameter is empty\r\n\r\n\\param p_0 listItemEntity: The ListItemEntity that is saved\r\n\\return New or updated ListItemEntity"},
{text: "NSListAgent.GetLocalizedText", help: "<b>NSLocalizedText GetLocalizedText(Integer p_0)<\/b>\n\nGets a LocalizedText object.\r\n\r\n\\param p_0 localizedTextId: The identifier of the LocalizedText object\r\n\\return LocalizedText\r\n"},
{text: "NSListAgent.GetLocalizedTextByType", help: "<b>NSLocalizedText GetLocalizedTextByType(Integer p_0, Integer p_1, Integer p_2)<\/b>\n\nReturns a localized text based on the resource id for the selected language.\r\n\r\n\\param p_0 textType: Type of the localized text\r\n\\param p_1 resourceId: The resource id. This id has different meaning based on the LocalizedTextType.\r\n\\param p_2 languageId: The LCID number of the language.\r\n\\return A LocalizedText carrier.\r\n"},
{text: "NSListAgent.GetLocalizedTextList", help: "<b>NSLocalizedText[] GetLocalizedTextList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetLocalizedTexts", help: "<b>NSLocalizedText[] GetLocalizedTexts()<\/b>\n\nGets all localized texts in the CRM database.\r\n\r\n\\return Array of LocalizedText objects\r\n"},
{text: "NSListAgent.GetLocalizedTextsByLanguageId", help: "<b>NSLocalizedText[] GetLocalizedTextsByLanguageId(Integer p_0)<\/b>\n\nGets all localized text belonging to a specific language.\r\n\r\n\\param p_0 languageId: The LCID number of the language.\r\n\\return Array of LocalizedText objects\r\n"},
{text: "NSListAgent.GetLocalizedTextsByType", help: "<b>NSLocalizedText[] GetLocalizedTextsByType(Integer p_0)<\/b>\n\n"},
{text: "NSListAgent.GetLocalizedTextsByType", help: "<b>NSLocalizedText[] GetLocalizedTextsByType(Integer[] p_0)<\/b>\n\nGets localized text by their type\r\n\r\n\\param p_0 textTypes: Array of LocalizedTextTypes. If null all texts are returned.\r\n\\return Array of LocalizedText objects\r\n"},
{text: "NSListAgent.GetLocalizedTextList", help: "<b>NSLocalizedTextList[] GetLocalizedTextList(Integer[] p_0)<\/b>\n\nGets an array of LocalizedText objects.\r\n\r\n\\param p_0 localizedTextIds: The identifiers of the LocalizedText object\r\n\\return Array of LocalizedText objects\r\n"},
{text: "NSListAgent.GetMrMrs", help: "<b>NSMrMrs GetMrMrs(Integer p_0)<\/b>\n\nGets a MrMrs object.\r\n\r\n\\param p_0 mrMrsId: The identifier of the MrMrs object\r\n\\return MrMrs\r\n"},
{text: "NSListAgent.GetMrMrses", help: "<b>NSMrMrs[] GetMrMrses()<\/b>\n\nReturns all Items from the MrMrs table sorted by their value.\r\n\r\n\\return All items from the MrMrs table sorted by their value\r\n"},
{text: "NSListAgent.GetMrMrsList", help: "<b>NSMrMrs[] GetMrMrsList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetMrMrsList", help: "<b>NSMrMrsList[] GetMrMrsList(Integer[] p_0)<\/b>\n\nGets an array of MrMrs objects.\r\n\r\n\\param p_0 mrMrsIds: The identifiers of the MrMrs object\r\n\\return Array of MrMrs objects\r\n"},
{text: "NSListAgent.GetPaymentTerm", help: "<b>NSPaymentTerm GetPaymentTerm(Integer p_0)<\/b>\n\nGets a PaymentTerm object.\r\n\r\n\\param p_0 paymentTermId: The identifier of the PaymentTerm object\r\n\\return PaymentTerm"},
{text: "NSListAgent.GetPaymentTerms", help: "<b>NSPaymentTerm[] GetPaymentTerms()<\/b>\n\nReturns all PaymentTerms in SuperOffice db.\r\n\r\n\\return An array of all available PaymentTerms"},
{text: "NSListAgent.GetPaymentType", help: "<b>NSPaymentType GetPaymentType(Integer p_0)<\/b>\n\nGets a PaymentType object.\r\n\r\n\\param p_0 paymentTypeId: The identifier of the PaymentType object\r\n\\return PaymentType"},
{text: "NSListAgent.GetPaymentTypes", help: "<b>NSPaymentType[] GetPaymentTypes()<\/b>\n\nReturns all PaymentTypes in SuperOffice db.\r\n\r\n\\return An array of all available PaymentTypes"},
{text: "NSListAgent.GetPosition", help: "<b>NSPosition GetPosition(Integer p_0)<\/b>\n\nGets a Position object.\r\n\r\n\\param p_0 positionId: The identifier of the Position object\r\n\\return Position\r\n"},
{text: "NSListAgent.GetPositionList", help: "<b>NSPosition[] GetPositionList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetPositions", help: "<b>NSPosition[] GetPositions()<\/b>\n\nReturns all the positions a person could have.\r\n\r\n\\return An array of all available positions\r\n"},
{text: "NSListAgent.GetPositionList", help: "<b>NSPositionList[] GetPositionList(Integer[] p_0)<\/b>\n\nGets an array of Position objects.\r\n\r\n\\param p_0 positionIds: The identifiers of the Position object\r\n\\return Array of Position objects\r\n"},
{text: "NSListAgent.GetPriority", help: "<b>NSPriority GetPriority(Integer p_0)<\/b>\n\nGets a Priority object.\r\n\r\n\\param p_0 priorityId: The identifier of the Priority object\r\n\\return Priority\r\n"},
{text: "NSListAgent.GetPriorities", help: "<b>NSPriority[] GetPriorities()<\/b>\n\nReturns all priorities an appointment could have.\r\n\r\n\\return An array of all available priorities\r\n"},
{text: "NSListAgent.GetPriorityList", help: "<b>NSPriority[] GetPriorityList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetPriorityList", help: "<b>NSPriorityList[] GetPriorityList(Integer[] p_0)<\/b>\n\nGets an array of Priority objects.\r\n\r\n\\param p_0 priorityIds: The identifiers of the Priority object\r\n\\return Array of Priority objects\r\n"},
{text: "NSListAgent.GetProductCategory", help: "<b>NSProductCategory GetProductCategory(Integer p_0)<\/b>\n\nGets a ProductCategory object.\r\n\r\n\\param p_0 productCategoryId: The identifier of the ProductCategory object\r\n\\return ProductCategory"},
{text: "NSListAgent.GetProductCategories", help: "<b>NSProductCategory[] GetProductCategories()<\/b>\n\nReturns all ProductCategories in SuperOffice list.\r\n\r\n\\return An array of all available ProductCategory"},
{text: "NSListAgent.GetProductFamily", help: "<b>NSProductFamily GetProductFamily(Integer p_0)<\/b>\n\nGets a ProductFamily object.\r\n\r\n\\param p_0 productFamilyId: The identifier of the ProductFamily object\r\n\\return ProductFamily"},
{text: "NSListAgent.GetProductFamilies", help: "<b>NSProductFamily[] GetProductFamilies()<\/b>\n\nReturns all ProductFamily in SuperOffice list.\r\n\r\n\\return An array of all available ProductFamilies"},
{text: "NSListAgent.GetProductType", help: "<b>NSProductType GetProductType(Integer p_0)<\/b>\n\nGets a ProductType object.\r\n\r\n\\param p_0 productTypeId: The identifier of the ProductType object\r\n\\return ProductType"},
{text: "NSListAgent.GetProductTypes", help: "<b>NSProductType[] GetProductTypes()<\/b>\n\nReturns all ProductTypes in SuperOffice list.\r\n\r\n\\return An array of all available ProductTypes"},
{text: "NSListAgent.GetProjectStatus", help: "<b>NSProjectStatus GetProjectStatus(Integer p_0)<\/b>\n\nGets a ProjectStatus object.\r\n\r\n\\param p_0 projectStatusId: The identifier of the ProjectStatus object\r\n\\return ProjectStatus\r\n"},
{text: "NSListAgent.GetProjectStatuses", help: "<b>NSProjectStatus[] GetProjectStatuses()<\/b>\n\nGets all items from the Project Status (ProjStatus) table.\r\n\r\n\\return List of all Project statuses.\r\n"},
{text: "NSListAgent.GetProjectStatusList", help: "<b>NSProjectStatus[] GetProjectStatusList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetProjectStatusList", help: "<b>NSProjectStatusList[] GetProjectStatusList(Integer[] p_0)<\/b>\n\nGets an array of ProjectStatus objects.\r\n\r\n\\param p_0 projectStatusIds: The identifiers of the ProjectStatus object\r\n\\return Array of ProjectStatus objects\r\n"},
{text: "NSListAgent.GetProjectType", help: "<b>NSProjectType GetProjectType(Integer p_0)<\/b>\n\nGets a ProjectType object.\r\n\r\n\\param p_0 projectTypeId: The identifier of the ProjectType object\r\n\\return ProjectType\r\n"},
{text: "NSListAgent.GetProjectTypeList", help: "<b>NSProjectType[] GetProjectTypeList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetProjectTypes", help: "<b>NSProjectType[] GetProjectTypes()<\/b>\n\nGets all items from the Project Type (ProjType) table.\r\n\r\n\\return List of all project types.\r\n"},
{text: "NSListAgent.CreateDefaultProjectTypeEntity", help: "<b>NSProjectTypeEntity CreateDefaultProjectTypeEntity()<\/b>\n\nLoading default values into a new ProjectTypeEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ProjectTypeEntity with default values"},
{text: "NSListAgent.GetProjectTypeEntity", help: "<b>NSProjectTypeEntity GetProjectTypeEntity(Integer p_0)<\/b>\n\nGets a ProjectTypeEntity object.\r\n\r\n\\param p_0 projectTypeEntityId: The identifier of the ProjectTypeEntity object\r\n\\return ProjectTypeEntity"},
{text: "NSListAgent.SaveProjectTypeEntity", help: "<b>NSProjectTypeEntity SaveProjectTypeEntity(NSProjectTypeEntity p_0)<\/b>\n\nUpdates the existing ProjectTypeEntity or creates a new ProjectTypeEntity if the id parameter is empty\r\n\r\n\\param p_0 projectTypeEntity: The ProjectTypeEntity that is saved\r\n\\return New or updated ProjectTypeEntity"},
{text: "NSListAgent.GetProjectTypeList", help: "<b>NSProjectTypeList[] GetProjectTypeList(Integer[] p_0)<\/b>\n\nGets an array of ProjectType objects.\r\n\r\n\\param p_0 projectTypeIds: The identifiers of the ProjectType object\r\n\\return Array of ProjectType objects\r\n"},
{text: "NSListAgent.GetRating", help: "<b>NSRating GetRating(Integer p_0)<\/b>\n\nGets a Rating object.\r\n\r\n\\param p_0 ratingId: The identifier of the Rating object\r\n\\return Rating\r\n"},
{text: "NSListAgent.GetRatingList", help: "<b>NSRating[] GetRatingList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetRatings", help: "<b>NSRating[] GetRatings()<\/b>\n\nReturns all ratings\r\n\r\n\\return Array of ratings\r\n"},
{text: "NSListAgent.GetRatingList", help: "<b>NSRatingList[] GetRatingList(Integer[] p_0)<\/b>\n\nGets an array of Rating objects.\r\n\r\n\\param p_0 ratingIds: The identifiers of the Rating object\r\n\\return Array of Rating objects\r\n"},
{text: "NSListAgent.GetReason", help: "<b>NSReason GetReason(Integer p_0)<\/b>\n\nGets a Reason object.\r\n\r\n\\param p_0 reasonId: The identifier of the Reason object\r\n\\return Reason\r\n"},
{text: "NSListAgent.GetReasonList", help: "<b>NSReason[] GetReasonList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetReasons", help: "<b>NSReason[] GetReasons()<\/b>\n\nReturns all reasons\r\n\r\n\\return Array of reasons\r\n"},
{text: "NSListAgent.GetReasonList", help: "<b>NSReasonList[] GetReasonList(Integer[] p_0)<\/b>\n\nGets an array of Reason objects.\r\n\r\n\\param p_0 reasonIds: The identifiers of the Reason object\r\n\\return Array of Reason objects\r\n"},
{text: "NSListAgent.GetReasonSold", help: "<b>NSReasonSold GetReasonSold(Integer p_0)<\/b>\n\nGets a ReasonSold object.\r\n\r\n\\param p_0 reasonSoldId: The identifier of the ReasonSold object\r\n\\return ReasonSold\r\n"},
{text: "NSListAgent.GetReasonSoldList", help: "<b>NSReasonSold[] GetReasonSoldList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetReasonSoldList", help: "<b>NSReasonSoldList[] GetReasonSoldList(Integer[] p_0)<\/b>\n\nGets an array of ReasonSold objects.\r\n\r\n\\param p_0 reasonSoldIds: The identifiers of the ReasonSold object\r\n\\return Array of ReasonSold objects\r\n"},
{text: "NSListAgent.GetReasonStalled", help: "<b>NSReasonStalled GetReasonStalled(Integer p_0)<\/b>\n\nGets a ReasonStalled object.\r\n\r\n\\param p_0 reasonStalledId: The identifier of the ReasonStalled object\r\n\\return ReasonStalled\r\n"},
{text: "NSListAgent.GetReasonStalledList", help: "<b>NSReasonStalled[] GetReasonStalledList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetReasonStalledList", help: "<b>NSReasonStalledList[] GetReasonStalledList(Integer[] p_0)<\/b>\n\nGets an array of ReasonStalled objects.\r\n\r\n\\param p_0 reasonStalledIds: The identifiers of the ReasonStalled object\r\n\\return Array of ReasonStalled objects\r\n"},
{text: "NSListAgent.CreateDefaultRelationDefinitionEntity", help: "<b>NSRelationDefinitionEntity CreateDefaultRelationDefinitionEntity()<\/b>\n\nLoading default values into a new RelationDefinitionEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New RelationDefinitionEntity with default values"},
{text: "NSListAgent.GetRelationDefinitionEntity", help: "<b>NSRelationDefinitionEntity GetRelationDefinitionEntity(Integer p_0)<\/b>\n\nGets a RelationDefinitionEntity object.\r\n\r\n\\param p_0 relationDefinitionEntityId: The identifier of the RelationDefinitionEntity object\r\n\\return RelationDefinitionEntity"},
{text: "NSListAgent.SaveRelationDefinitionEntity", help: "<b>NSRelationDefinitionEntity SaveRelationDefinitionEntity(NSRelationDefinitionEntity p_0)<\/b>\n\nUpdates the existing RelationDefinitionEntity or creates a new RelationDefinitionEntity if the id parameter is empty\r\n\r\n\\param p_0 relationDefinitionEntity: The RelationDefinitionEntity that is saved\r\n\\return New or updated RelationDefinitionEntity"},
{text: "NSListAgent.CreateDefaultResourceEntity", help: "<b>NSResourceEntity CreateDefaultResourceEntity()<\/b>\n\nLoading default values into a new ResourceEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ResourceEntity with default values"},
{text: "NSListAgent.GetResourceEntity", help: "<b>NSResourceEntity GetResourceEntity(Integer p_0)<\/b>\n\nGets a ResourceEntity object.\r\n\r\n\\param p_0 resourceEntityId: The identifier of the ResourceEntity object\r\n\\return ResourceEntity"},
{text: "NSListAgent.SaveResourceEntity", help: "<b>NSResourceEntity SaveResourceEntity(NSResourceEntity p_0)<\/b>\n\nUpdates the existing ResourceEntity or creates a new ResourceEntity if the id parameter is empty\r\n\r\n\\param p_0 resourceEntity: The ResourceEntity that is saved\r\n\\return New or updated ResourceEntity"},
{text: "NSListAgent.CreateDefaultSaleStageEntity", help: "<b>NSSaleStageEntity CreateDefaultSaleStageEntity()<\/b>\n\nLoading default values into a new SaleStageEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New SaleStageEntity with default values"},
{text: "NSListAgent.GetSaleStageEntity", help: "<b>NSSaleStageEntity GetSaleStageEntity(Integer p_0)<\/b>\n\nGets a SaleStageEntity object.\r\n\r\n\\param p_0 saleStageEntityId: The identifier of the SaleStageEntity object\r\n\\return SaleStageEntity"},
{text: "NSListAgent.SaveSaleStageEntity", help: "<b>NSSaleStageEntity SaveSaleStageEntity(NSSaleStageEntity p_0)<\/b>\n\nUpdates the existing SaleStageEntity or creates a new SaleStageEntity if the id parameter is empty\r\n\r\n\\param p_0 saleStageEntity: The SaleStageEntity that is saved\r\n\\return New or updated SaleStageEntity"},
{text: "NSListAgent.GetSaleType", help: "<b>NSSaleType GetSaleType(Integer p_0)<\/b>\n\nGets a SaleType object.\r\n\r\n\\param p_0 saleTypeId: The identifier of the SaleType object\r\n\\return SaleType\r\n"},
{text: "NSListAgent.GetSaleTypeList", help: "<b>NSSaleType[] GetSaleTypeList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.CreateDefaultSaleTypeEntity", help: "<b>NSSaleTypeEntity CreateDefaultSaleTypeEntity()<\/b>\n\nLoading default values into a new SaleTypeEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New SaleTypeEntity with default values"},
{text: "NSListAgent.GetSaleTypeEntity", help: "<b>NSSaleTypeEntity GetSaleTypeEntity(Integer p_0)<\/b>\n\nGets a SaleTypeEntity object.\r\n\r\n\\param p_0 saleTypeEntityId: The identifier of the SaleTypeEntity object\r\n\\return SaleTypeEntity"},
{text: "NSListAgent.SaveSaleTypeEntity", help: "<b>NSSaleTypeEntity SaveSaleTypeEntity(NSSaleTypeEntity p_0)<\/b>\n\nUpdates the existing SaleTypeEntity or creates a new SaleTypeEntity if the id parameter is empty\r\n\r\n\\param p_0 saleTypeEntity: The SaleTypeEntity that is saved\r\n\\return New or updated SaleTypeEntity"},
{text: "NSListAgent.GetSaleTypeList", help: "<b>NSSaleTypeList[] GetSaleTypeList(Integer[] p_0)<\/b>\n\nGets an array of SaleType objects.\r\n\r\n\\param p_0 saleTypeIds: The identifiers of the SaleType object\r\n\\return Array of SaleType objects\r\n"},
{text: "NSListAgent.GetHeadings", help: "<b>NSSelectableMDOListItem[] GetHeadings(Integer p_0, Integer p_1, Bool p_2)<\/b>\n\nGets a selectable MDO list of the headings for this list item\r\n\r\n\\param p_0 udListDefinitionId: The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.\r\n\\param p_1 listItemId: The id of the list item\r\n\\param p_2 showDeleted: Set to true if you want deleted headings\r\n\\return Array of headings"},
{text: "NSListAgent.GetVisibleForUserGroups", help: "<b>NSSelectableMDOListItem[] GetVisibleForUserGroups(Integer p_0, Integer p_1)<\/b>\n\nGets a selectable MDO list of the user groups for this list item\r\n\r\n\\param p_0 udListDefinitionId: The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.\r\n\\param p_1 listItemId: The id of the list item\r\n\\return Array of user groups"},
{text: "NSListAgent.GetSelectionCategory", help: "<b>NSSelectionCategory GetSelectionCategory(Integer p_0)<\/b>\n\nGets a SelectionCategory object.\r\n\r\n\\param p_0 selectionCategoryId: The identifier of the SelectionCategory object\r\n\\return SelectionCategory\r\n"},
{text: "NSListAgent.GetSelectionCategoryList", help: "<b>NSSelectionCategory[] GetSelectionCategoryList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetSelectionCategoryList", help: "<b>NSSelectionCategoryList[] GetSelectionCategoryList(Integer[] p_0)<\/b>\n\nGets an array of SelectionCategory objects.\r\n\r\n\\param p_0 selectionCategoryIds: The identifiers of the SelectionCategory object\r\n\\return Array of SelectionCategory objects\r\n"},
{text: "NSListAgent.GetSource", help: "<b>NSSource GetSource(Integer p_0)<\/b>\n\nGets a Source object.\r\n\r\n\\param p_0 sourceId: The identifier of the Source object\r\n\\return Source\r\n"},
{text: "NSListAgent.GetSourceList", help: "<b>NSSource[] GetSourceList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetSources", help: "<b>NSSource[] GetSources()<\/b>\n\nReturns all sources\r\n\r\n\\return Array of sources\r\n"},
{text: "NSListAgent.GetSourceList", help: "<b>NSSourceList[] GetSourceList(Integer[] p_0)<\/b>\n\nGets an array of Source objects.\r\n\r\n\\param p_0 sourceIds: The identifiers of the Source object\r\n\\return Array of Source objects\r\n"},
{text: "NSListAgent.GetDocumentTemplateTask", help: "<b>NSTask GetDocumentTemplateTask(Integer p_0)<\/b>\n\nReturns a Document Template list item as a TaskListItem. The appointment's task is a Document template item when the appointment is a document.\r\n\r\n\\param p_0 documentTemplateId: Id of the document template, i.e. the Appointment.TaskIdx\r\n\\return Document Template item as TaskListItem.\r\n"},
{text: "NSListAgent.GetTask", help: "<b>NSTask GetTask(Integer p_0)<\/b>\n\nGets a Task object.\r\n\r\n\\param p_0 taskId: The identifier of the Task object\r\n\\return Task\r\n"},
{text: "NSListAgent.GetDocumentTemplatesTasks", help: "<b>NSTask[] GetDocumentTemplatesTasks()<\/b>\n\nThe appointment's task is a Document template item when the appointment is a document.\r\n\r\n\\return Document Template list as a array of Tasks\r\n"},
{text: "NSListAgent.GetTaskList", help: "<b>NSTask[] GetTaskList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetTasks", help: "<b>NSTask[] GetTasks()<\/b>\n\nReturns all appointment tasks\r\n\r\n\\return An array of all available tasks\r\n"},
{text: "NSListAgent.GetTaskList", help: "<b>NSTaskList[] GetTaskList(Integer[] p_0)<\/b>\n\nGets an array of Task objects.\r\n\r\n\\param p_0 taskIds: The identifiers of the Task object\r\n\\return Array of Task objects\r\n"},
{text: "NSListAgent.GetTicketPriority", help: "<b>NSTicketPriority GetTicketPriority(Integer p_0)<\/b>\n\nGets a TicketPriority object.\r\n\r\n\\param p_0 ticketPriorityId: The identifier of the TicketPriority object\r\n\\return TicketPriority\r\n"},
{text: "NSListAgent.GetTicketPriorities", help: "<b>NSTicketPriority[] GetTicketPriorities()<\/b>\n\n\r\n\r\n"},
{text: "NSListAgent.GetTicketPriorityList", help: "<b>NSTicketPriority[] GetTicketPriorityList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSListAgent.GetTicketPriorityList", help: "<b>NSTicketPriorityList[] GetTicketPriorityList(Integer[] p_0)<\/b>\n\nGets an array of TicketPriority objects.\r\n\r\n\\param p_0 ticketPriorityIds: The identifiers of the TicketPriority object\r\n\\return Array of TicketPriority objects\r\n"},
{text: "NSListAgent.CreateDefaultWebPanelEntity", help: "<b>NSWebPanelEntity CreateDefaultWebPanelEntity()<\/b>\n\nLoading default values into a new WebPanelEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New WebPanelEntity with default values"},
{text: "NSListAgent.GetWebPanelByProgId", help: "<b>NSWebPanelEntity GetWebPanelByProgId(String p_0)<\/b>\n\nGet a web panel using the ProgId key that was specified when it was created\r\n\r\n\\param p_0 progId: String key that can be used to uniquely retrieve the panel, set in the WebPanelEntity when saving\r\n\\return The Web panel information"},
{text: "NSListAgent.GetWebPanelEntity", help: "<b>NSWebPanelEntity GetWebPanelEntity(Integer p_0)<\/b>\n\nGets a WebPanelEntity object.\r\n\r\n\\param p_0 webPanelEntityId: The identifier of the WebPanelEntity object\r\n\\return WebPanelEntity"},
{text: "NSListAgent.SaveWebPanelEntity", help: "<b>NSWebPanelEntity SaveWebPanelEntity(NSWebPanelEntity p_0)<\/b>\n\nUpdates the existing WebPanelEntity or creates a new WebPanelEntity if the id parameter is empty\r\n\r\n\\param p_0 webPanelEntity: The WebPanelEntity that is saved\r\n\\return New or updated WebPanelEntity"},
{text: "NSListAgent.GetAppWebPanels", help: "<b>NSWebPanelEntity[] GetAppWebPanels()<\/b>\n\nGet all web panels owned by your app; works in Online only, for registered Apps that send a valid ApplicationToken\r\n\r\n\\return List of all web panels owned by the current App"},
{text: "NSListAgent.GetWebPanelList", help: "<b>NSWebPanelEntity[] GetWebPanelList()<\/b>\n\nReturn a list of all web panels.\r\n\r\n\\return List of all web panels"},
{text: "NSListAgent.GenerateNavigationUrl", help: "<b>String GenerateNavigationUrl(Integer p_0, String p_1)<\/b>\n\nThis methods generates the navigation URL to be used to navigate to the panel\r\n\r\n\\param p_0 visibleIn: The visble in\/navigation to generate for\r\n\\param p_1 windowName: The name of the web panel window\r\n\\return The navigation url"},
{text: "NSListAgent.GetDocumentTemplateExtension", help: "<b>String GetDocumentTemplateExtension(Integer p_0)<\/b>\n\nGet the file extension for the document template\r\n\r\n\\param p_0 documentTemplateId: The primary key of the document template\r\n\\return Extension including '.'"},
{text: "NSListAgent.GetDocumentTemplateUrl", help: "<b>String GetDocumentTemplateUrl(Integer p_0, Bool p_1, String p_2)<\/b>\n\nGet a url to the document template\r\n\r\n\\param p_0 documentTemplateId: The id of the template\r\n\\param p_1 writableUrl: Get a writeable url to the document template?\r\n\\param p_2 languageCode: The language code ('en-US', 'nb-NO', etc). Use empty string if not supported or used.\r\n\\return The URL to the document template"},
{text: "NSListAgent.GetDocumentTemplateLanguages", help: "<b>String[] GetDocumentTemplateLanguages(Integer p_0)<\/b>\n\nGet the supported languages for a document template\r\n\r\n\\param p_0 documentTemplateId: The id of the document template\r\n\\return Returns the languages as ISO cultures (en-US, no)"},
{text: "NSListAgent.GetDocumentTemplateUsedInProjectStage", help: "<b>String[] GetDocumentTemplateUsedInProjectStage(Integer p_0)<\/b>\n\nGet a String array of names in project guide that this template is used in\r\n\r\n\\param p_0 documentTemplateId: The id of the template\r\n\\return The name of the projectguides that use this template"},
{text: "NSListAgent.GetDocumentTemplateUsedInSalesStage", help: "<b>String[] GetDocumentTemplateUsedInSalesStage(Integer p_0)<\/b>\n\nGet a String array of names in sales guide that this template is used in\r\n\r\n\\param p_0 documentTemplateId: The id of the template\r\n\\return The name of the salesguides that use this template"},
{text: "NSListAgent.GetDocumentTemplateProperties", help: "<b>StringDictionary GetDocumentTemplateProperties(Integer p_0, String[] p_1)<\/b>\n\nGet document template properties\r\n\r\n\\param p_0 documentTemplateId: The primary key id of the document template\r\n\\param p_1 requestedProperties: An array of properties to get the values for\r\n\\return Dictionary of key=value pairs of requested properties"},
{text: "NSListAgent.CreateDefaultDocumentTemplateLanguage", help: "<b>Void CreateDefaultDocumentTemplateLanguage(Integer p_0, String p_1)<\/b>\n\nCreate a new document template language based on an existing template\r\n\r\n\\param p_0 documentTemplateId: The id of the document template\r\n\\param p_1 languageCode: The language code ('en-US, 'nb-NO', etc)\r\n\\return Returns nothing - throws on error"},
{text: "NSListAgent.DeleteAppWebPanels", help: "<b>Void DeleteAppWebPanels()<\/b>\n\nPermanentely delete all web panels owned by your app; works in Online only, for registered Apps that send a valid ApplicationToken; otherwise nothing happens\r\n\r\n\\return This method has no return value"},
{text: "NSListAgent.DeleteDocumentTemplateLanguage", help: "<b>Void DeleteDocumentTemplateLanguage(Integer p_0, String p_1)<\/b>\n\nDeletes language variant of the document template\r\n\r\n\\param p_0 documentTemplateId: The id of the document template\r\n\\param p_1 languageCode: The language code ('en-US, 'nb-NO', etc)"},
{text: "NSListAgent.DeleteProjectStatus", help: "<b>Void DeleteProjectStatus(Integer p_0)<\/b>\n\nDeletes a project status\r\n\r\n\\param p_0 projectStatusId: The project status id to delete\r\n\\return No return"},
{text: "NSListAgent.DeleteResourceEntity", help: "<b>Void DeleteResourceEntity(Integer p_0)<\/b>\n\nDeletes the ResourceEntity\r\n\r\n\\param p_0 resourceEntityId: The identity of the ResourceEntity"},
{text: "NSListAgent.DeleteWebPanel", help: "<b>Void DeleteWebPanel(Integer p_0)<\/b>\n\nHard-delete (real, permanent DELETE in the database) the given web panel. Use with care!\r\n\r\n\\param p_0 id: Database id of web panel to delete\r\n\\return This method has no return value"},
{text: "NSListAgent.MoveListItem", help: "<b>Void MoveListItem(Integer p_0, Integer p_1, Integer p_2)<\/b>\n\nMove a list item up or down in the list based on rank\r\n\r\n\\param p_0 udListDefinitionId: Id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.\r\n\\param p_1 listItemId: Id of the list item\r\n\\param p_2 direction: -1 moves the item up one position, 1 moves the item down one position"},
{text: "NSListAgent.SetHeadingsForListItem", help: "<b>Void SetHeadingsForListItem(Integer p_0, Integer p_1, Integer[] p_2, Bool p_3)<\/b>\n\nSet headings which this list item should be listed under\r\n\r\n\\param p_0 udListDefinitionId: The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.\r\n\\param p_1 listItemId: The id of the list item\r\n\\param p_2 headingIds: The ids of the headings to set for this list item\r\n\\param p_3 enable: Set to true to enable, false to disable"},
{text: "NSListAgent.SetRankOnHeadings", help: "<b>Void SetRankOnHeadings(Integer p_0, Integer[] p_1)<\/b>\n\nSet rank order on headings\r\n\r\n\\param p_0 udListDefinitionId: The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.\r\n\\param p_1 headingIds: The ids of the headings in the order you want"},
{text: "NSListAgent.SetRankOnProjectActivity", help: "<b>Void SetRankOnProjectActivity(Integer p_0, Integer[] p_1)<\/b>\n\nSet rank order on project activity\r\n\r\n\\param p_0 projectTypeStatusLinkId: The id of the list\r\n\\param p_1 itemsIds: The ids of the items in the order you want"},
{text: "NSListAgent.SetRankOnProjectDocument", help: "<b>Void SetRankOnProjectDocument(Integer p_0, Integer[] p_1)<\/b>\n\nSet rank order on project document\r\n\r\n\\param p_0 projectTypeStatusLinkId: The id of the list\r\n\\param p_1 itemsIds: The ids of the items in the order you want"},
{text: "NSListAgent.SetRankOnSaleActivity", help: "<b>Void SetRankOnSaleActivity(Integer p_0, Integer[] p_1)<\/b>\n\nSet rank order on sale activity\r\n\r\n\\param p_0 saleTypeStageLinkId: The id of the list\r\n\\param p_1 itemsIds: The ids of the items in the order you want"},
{text: "NSListAgent.SetRankOnSaleDocument", help: "<b>Void SetRankOnSaleDocument(Integer p_0, Integer[] p_1)<\/b>\n\nSet rank order on project document\r\n\r\n\\param p_0 saleTypeStageLinkId: The id of the list\r\n\\param p_1 itemsIds: The ids of the items in the order you want"},
{text: "NSListAgent.SetVisibleForUserGroup", help: "<b>Void SetVisibleForUserGroup(Integer p_0, Integer p_1, Integer[] p_2, Bool p_3)<\/b>\n\nSet a group which this list item should be visible for\r\n\r\n\\param p_0 udListDefinitionId: The id of the list. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.\r\n\\param p_1 listItemId: The id of the list item\r\n\\param p_2 userGroupId: The id of the user group to set for this list item\r\n\\param p_3 enable: Set to true to enable, false to disable"},
{text: "NSListAgent.SortListItems", help: "<b>Void SortListItems(Integer p_0, String p_1)<\/b>\n\nSort the list items in a given list alphabetically\r\n\r\n\\param p_0 udListDefinitionId: Id of the list you want to sort. Negative numbers indicate TableNumber value instead of UDListDefId. e.g. -64 = category.\r\n\\param p_1 cultureName: Sort list in this language"},
{text: "Void.NSListEntity", help: "<b>NSListEntity<\/b>\n\nThe list entity contains information about a specific list"},
{text: "NSListEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nTrue if the list item is marked as deleted\r\n\r\n\\return Bool"},
{text: "NSListEntity.GetInUseByUserDefinedFields", help: "<b>Bool GetInUseByUserDefinedFields()<\/b>\n\nTrue if this in use by one or more udfields\r\n\r\n\\return Bool"},
{text: "NSListEntity.GetIsCustomList", help: "<b>Bool GetIsCustomList()<\/b>\n\nIndicates if this is a custom list or a standard list\r\n\r\n\\return Bool"},
{text: "NSListEntity.GetIsMDOList", help: "<b>Bool GetIsMDOList()<\/b>\n\nIndicates if this is a MDO list\r\n\r\n\\return Bool"},
{text: "NSListEntity.GetUseGroupsAndHeadings", help: "<b>Bool GetUseGroupsAndHeadings()<\/b>\n\nIndicates if this list should use groups and headings\r\n\r\n\\return Bool"},
{text: "NSListEntity.GetId", help: "<b>Integer GetId()<\/b>\n\nThe identity of the list\r\n\r\n\\return Integer"},
{text: "NSListEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nThe rank of the list\r\n\r\n\\return Integer"},
{text: "NSListEntity.GetListType", help: "<b>String GetListType()<\/b>\n\nThe type of this list, often indicated by the database name, but not necessarily\r\n\r\n\\return String"},
{text: "NSListEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the list\r\n\r\n\\return String"},
{text: "NSListEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nThe tooltip of the list\r\n\r\n\\return String"},
{text: "NSListEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nTrue if the list item is marked as deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSListEntity.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nThe identity of the list\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSListEntity.SetInUseByUserDefinedFields", help: "<b>Void SetInUseByUserDefinedFields(Bool p_0)<\/b>\n\nTrue if this in use by one or more udfields\r\n\r\n\\param p_0 InUseByUserDefinedFields: Bool\r\n\\return Bool"},
{text: "NSListEntity.SetIsCustomList", help: "<b>Void SetIsCustomList(Bool p_0)<\/b>\n\nIndicates if this is a custom list or a standard list\r\n\r\n\\param p_0 IsCustomList: Bool\r\n\\return Bool"},
{text: "NSListEntity.SetIsMDOList", help: "<b>Void SetIsMDOList(Bool p_0)<\/b>\n\nIndicates if this is a MDO list\r\n\r\n\\param p_0 IsMDOList: Bool\r\n\\return Bool"},
{text: "NSListEntity.SetListType", help: "<b>Void SetListType(String p_0)<\/b>\n\nThe type of this list, often indicated by the database name, but not necessarily\r\n\r\n\\param p_0 ListType: String\r\n\\return String"},
{text: "NSListEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the list\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSListEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nThe rank of the list\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSListEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nThe tooltip of the list\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSListEntity.SetUseGroupsAndHeadings", help: "<b>Void SetUseGroupsAndHeadings(Bool p_0)<\/b>\n\nIndicates if this list should use groups and headings\r\n\r\n\\param p_0 UseGroupsAndHeadings: Bool\r\n\\return Bool"},
{text: "Void.NSListItemEntity", help: "<b>NSListItemEntity<\/b>\n\nThe list item entity contains generic list item information"},
{text: "NSListItemEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nTrue if the list item is marked as deleted\r\n\r\n\\return Bool"},
{text: "NSListItemEntity.GetId", help: "<b>Integer GetId()<\/b>\n\nThe identity of the list item\r\n\r\n\\return Integer"},
{text: "NSListItemEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nThe rank of the list item\r\n\r\n\\return Integer"},
{text: "NSListItemEntity.GetUdListDefinitionId", help: "<b>Integer GetUdListDefinitionId()<\/b>\n\nThe id of the list which this list item belongs to\r\n\r\n\\return Integer"},
{text: "NSListItemEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the list item\r\n\r\n\\return String"},
{text: "NSListItemEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nThe tooltip of the list item\r\n\r\n\\return String"},
{text: "NSListItemEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nTrue if the list item is marked as deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSListItemEntity.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nThe identity of the list item\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSListItemEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the list item\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSListItemEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nThe rank of the list item\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSListItemEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nThe tooltip of the list item\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSListItemEntity.SetUdListDefinitionId", help: "<b>Void SetUdListDefinitionId(Integer p_0)<\/b>\n\nThe id of the list which this list item belongs to\r\n\r\n\\param p_0 UdListDefinitionId: Integer\r\n\\return Integer"},
{text: "Void.NSLocalizedField", help: "<b>NSLocalizedField<\/b>\n\nCarrier object for LocalizedField.\r\n\r\n"},
{text: "NSLocalizedField.GetValueLength", help: "<b>Integer GetValueLength()<\/b>\n\nDatabase length of the value\r\n\r\n"},
{text: "NSLocalizedField.GetAddressType", help: "<b>String GetAddressType()<\/b>\n\n\r\n\r\n"},
{text: "NSLocalizedField.GetLabel", help: "<b>String GetLabel()<\/b>\n\nThe label of the field\r\n\r\n"},
{text: "NSLocalizedField.GetName", help: "<b>String GetName()<\/b>\n\nName of the value field\r\n\r\n"},
{text: "NSLocalizedField.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nThe tooltip\r\n\r\n"},
{text: "NSLocalizedField.GetValue", help: "<b>String GetValue()<\/b>\n\nThe field's value\r\n\r\n"},
{text: "NSLocalizedField.SetAddressType", help: "<b>Void SetAddressType(String p_0)<\/b>\n\n\r\n\r\n"},
{text: "NSLocalizedField.SetLabel", help: "<b>Void SetLabel(String p_0)<\/b>\n\nThe label of the field\r\n\r\n"},
{text: "NSLocalizedField.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of the value field\r\n\r\n"},
{text: "NSLocalizedField.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nThe tooltip\r\n\r\n"},
{text: "NSLocalizedField.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nThe field's value\r\n\r\n"},
{text: "NSLocalizedField.SetValueLength", help: "<b>Void SetValueLength(Integer p_0)<\/b>\n\nDatabase length of the value\r\n\r\n"},
{text: "Void.NSLocalizedText", help: "<b>NSLocalizedText<\/b>\n\n"},
{text: "NSLocalizedText.GetIsBuiltIn", help: "<b>Bool GetIsBuiltIn()<\/b>\n\n1 = this row is populated and maintained by SuperOffice\r\n\r\n\\return Bool"},
{text: "NSLocalizedText.GetLanguageId", help: "<b>Integer GetLanguageId()<\/b>\n\nLanguage id as LCID value\r\n\r\n\\return Integer"},
{text: "NSLocalizedText.GetLocalizedTextId", help: "<b>Integer GetLocalizedTextId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSLocalizedText.GetResourceId", help: "<b>Integer GetResourceId()<\/b>\n\nResource ID\r\n\r\n\\return Integer"},
{text: "NSLocalizedText.GetType", help: "<b>Integer GetType()<\/b>\n\nThe type of the text string, e.g. Field label, Udef label, etc.\r\n\r\n\\return Integer"},
{text: "NSLocalizedText.GetText", help: "<b>String GetText()<\/b>\n\nThe text string itself\r\n\r\n\\return String"},
{text: "NSLocalizedText.SetIsBuiltIn", help: "<b>Void SetIsBuiltIn(Bool p_0)<\/b>\n\n1 = this row is populated and maintained by SuperOffice\r\n\r\n\\param p_0 IsBuiltIn: Bool\r\n\\return Bool"},
{text: "NSLocalizedText.SetLanguageId", help: "<b>Void SetLanguageId(Integer p_0)<\/b>\n\nLanguage id as LCID value\r\n\r\n\\param p_0 LanguageId: Integer\r\n\\return Integer"},
{text: "NSLocalizedText.SetLocalizedTextId", help: "<b>Void SetLocalizedTextId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 LocalizedTextId: Integer\r\n\\return Integer"},
{text: "NSLocalizedText.SetResourceId", help: "<b>Void SetResourceId(Integer p_0)<\/b>\n\nResource ID\r\n\r\n\\param p_0 ResourceId: Integer\r\n\\return Integer"},
{text: "NSLocalizedText.SetText", help: "<b>Void SetText(String p_0)<\/b>\n\nThe text string itself\r\n\r\n\\param p_0 Text: String\r\n\\return String"},
{text: "NSLocalizedText.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nThe type of the text string, e.g. Field label, Udef label, etc.\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "Void.NSMailMergeSettings", help: "<b>NSMailMergeSettings<\/b>\n\nSettings specifying what selection to perform the mailmerge on, what merge document to use etc."},
{text: "NSMailMergeSettings.GetAlwaysUseCustomAttention", help: "<b>Bool GetAlwaysUseCustomAttention()<\/b>\n\nShould custom attention always be used? If false, only use custom attention where there is no default.\r\n\r\n\\return Bool"},
{text: "NSMailMergeSettings.GetIncludeNoMailingsRecipient", help: "<b>Bool GetIncludeNoMailingsRecipient()<\/b>\n\nInclude recipients that are marked with NoMailings\r\n\r\n\\return Bool"},
{text: "NSMailMergeSettings.GetIncludeRetiredRecipients", help: "<b>Bool GetIncludeRetiredRecipients()<\/b>\n\nInclude recipients that are marked as retired\r\n\r\n\\return Bool"},
{text: "NSMailMergeSettings.GetIncludeStoppedRecipients", help: "<b>Bool GetIncludeStoppedRecipients()<\/b>\n\nInclude recipients that are marked with stop\r\n\r\n\\return Bool"},
{text: "NSMailMergeSettings.GetIsTemporarySelection", help: "<b>Bool GetIsTemporarySelection()<\/b>\n\nIf true, the selection is a temporary selection that can be deleted later.\r\n\r\n\\return Bool"},
{text: "NSMailMergeSettings.GetSaveDocument", help: "<b>Bool GetSaveDocument()<\/b>\n\nShould we save a reference to the merge document on each recipient.\r\n\r\n\\return Bool"},
{text: "NSMailMergeSettings.GetSynchronous", help: "<b>Bool GetSynchronous()<\/b>\n\n\\return Bool"},
{text: "NSMailMergeSettings.GetTestOnly", help: "<b>Bool GetTestOnly()<\/b>\n\nIf true, do the merge task, but use current user as target, instead of selection members\r\n\r\n\\return Bool"},
{text: "NSMailMergeSettings.GetAddCompanyInterest", help: "<b>Integer GetAddCompanyInterest()<\/b>\n\nAdd this company interest to each company recipient.\r\n\r\n\\return Integer"},
{text: "NSMailMergeSettings.GetAddPersonInterest", help: "<b>Integer GetAddPersonInterest()<\/b>\n\nAdd this person interest to each person recipient.\r\n\r\n\\return Integer"},
{text: "NSMailMergeSettings.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nIdentity of document to be used as merge draft.\r\n\r\n\\return Integer"},
{text: "NSMailMergeSettings.GetMailMergeDeliveryType", help: "<b>Integer GetMailMergeDeliveryType()<\/b>\n\nHow the merged document is delivered to the recipients.\r\n\r\n\\return Integer"},
{text: "NSMailMergeSettings.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nIdentity of project to use as source for recipients.\r\n\r\n\\return Integer"},
{text: "NSMailMergeSettings.GetRemoveCompanyInterest", help: "<b>Integer GetRemoveCompanyInterest()<\/b>\n\nRemove this company interest on each company recipient.\r\n\r\n\\return Integer"},
{text: "NSMailMergeSettings.GetRemovePersonInterest", help: "<b>Integer GetRemovePersonInterest()<\/b>\n\nRemove this person interest on each person recipient.\r\n\r\n\\return Integer"},
{text: "NSMailMergeSettings.GetSelectionId", help: "<b>Integer GetSelectionId()<\/b>\n\nIdentity of selection to use as source for recipients.\r\n\r\n\\return Integer"},
{text: "NSMailMergeSettings.GetTaskEntity", help: "<b>NSMailMergeTask GetTaskEntity()<\/b>\n\nIf specified, register a task on recipients using properties from this object.\r\n\r\n\\return MailMergeTask"},
{text: "NSMailMergeSettings.GetCustomAttention", help: "<b>String GetCustomAttention()<\/b>\n\nCustom value for attention.\r\n\r\n\\return String"},
{text: "NSMailMergeSettings.GetCustomMailBody", help: "<b>String GetCustomMailBody()<\/b>\n\nIf specified, use this value as default mail body.\r\n\r\n\\return String"},
{text: "NSMailMergeSettings.GetCustomMailSubject", help: "<b>String GetCustomMailSubject()<\/b>\n\nIf specified, use this value as default mail subject.\r\n\r\n\\return String"},
{text: "NSMailMergeSettings.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\nUsed to store additional information for the delivery systems.\n\t\/\/\/\r\n\r\n\\return String"},
{text: "NSMailMergeSettings.SetAddCompanyInterest", help: "<b>Void SetAddCompanyInterest(Integer p_0)<\/b>\n\nAdd this company interest to each company recipient.\r\n\r\n\\param p_0 AddCompanyInterest: Integer\r\n\\return Integer"},
{text: "NSMailMergeSettings.SetAddPersonInterest", help: "<b>Void SetAddPersonInterest(Integer p_0)<\/b>\n\nAdd this person interest to each person recipient.\r\n\r\n\\param p_0 AddPersonInterest: Integer\r\n\\return Integer"},
{text: "NSMailMergeSettings.SetAlwaysUseCustomAttention", help: "<b>Void SetAlwaysUseCustomAttention(Bool p_0)<\/b>\n\nShould custom attention always be used? If false, only use custom attention where there is no default.\r\n\r\n\\param p_0 AlwaysUseCustomAttention: Bool\r\n\\return Bool"},
{text: "NSMailMergeSettings.SetCustomAttention", help: "<b>Void SetCustomAttention(String p_0)<\/b>\n\nCustom value for attention.\r\n\r\n\\param p_0 CustomAttention: String\r\n\\return String"},
{text: "NSMailMergeSettings.SetCustomMailBody", help: "<b>Void SetCustomMailBody(String p_0)<\/b>\n\nIf specified, use this value as default mail body.\r\n\r\n\\param p_0 CustomMailBody: String\r\n\\return String"},
{text: "NSMailMergeSettings.SetCustomMailSubject", help: "<b>Void SetCustomMailSubject(String p_0)<\/b>\n\nIf specified, use this value as default mail subject.\r\n\r\n\\param p_0 CustomMailSubject: String\r\n\\return String"},
{text: "NSMailMergeSettings.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nIdentity of document to be used as merge draft.\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSMailMergeSettings.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\nUsed to store additional information for the delivery systems.\n\t\/\/\/\r\n\r\n\\param p_0 ExtraInfo: String\r\n\\return String"},
{text: "NSMailMergeSettings.SetIncludeNoMailingsRecipient", help: "<b>Void SetIncludeNoMailingsRecipient(Bool p_0)<\/b>\n\nInclude recipients that are marked with NoMailings\r\n\r\n\\param p_0 IncludeNoMailingsRecipient: Bool\r\n\\return Bool"},
{text: "NSMailMergeSettings.SetIncludeRetiredRecipients", help: "<b>Void SetIncludeRetiredRecipients(Bool p_0)<\/b>\n\nInclude recipients that are marked as retired\r\n\r\n\\param p_0 IncludeRetiredRecipients: Bool\r\n\\return Bool"},
{text: "NSMailMergeSettings.SetIncludeStoppedRecipients", help: "<b>Void SetIncludeStoppedRecipients(Bool p_0)<\/b>\n\nInclude recipients that are marked with stop\r\n\r\n\\param p_0 IncludeStoppedRecipients: Bool\r\n\\return Bool"},
{text: "NSMailMergeSettings.SetIsTemporarySelection", help: "<b>Void SetIsTemporarySelection(Bool p_0)<\/b>\n\nIf true, the selection is a temporary selection that can be deleted later.\r\n\r\n\\param p_0 IsTemporarySelection: Bool\r\n\\return Bool"},
{text: "NSMailMergeSettings.SetMailMergeDeliveryType", help: "<b>Void SetMailMergeDeliveryType(Integer p_0)<\/b>\n\nHow the merged document is delivered to the recipients.\r\n\r\n\\param p_0 MailMergeDeliveryType: Integer\r\n\\return Integer"},
{text: "NSMailMergeSettings.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nIdentity of project to use as source for recipients.\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSMailMergeSettings.SetRemoveCompanyInterest", help: "<b>Void SetRemoveCompanyInterest(Integer p_0)<\/b>\n\nRemove this company interest on each company recipient.\r\n\r\n\\param p_0 RemoveCompanyInterest: Integer\r\n\\return Integer"},
{text: "NSMailMergeSettings.SetRemovePersonInterest", help: "<b>Void SetRemovePersonInterest(Integer p_0)<\/b>\n\nRemove this person interest on each person recipient.\r\n\r\n\\param p_0 RemovePersonInterest: Integer\r\n\\return Integer"},
{text: "NSMailMergeSettings.SetSaveDocument", help: "<b>Void SetSaveDocument(Bool p_0)<\/b>\n\nShould we save a reference to the merge document on each recipient.\r\n\r\n\\param p_0 SaveDocument: Bool\r\n\\return Bool"},
{text: "NSMailMergeSettings.SetSelectionId", help: "<b>Void SetSelectionId(Integer p_0)<\/b>\n\nIdentity of selection to use as source for recipients.\r\n\r\n\\param p_0 SelectionId: Integer\r\n\\return Integer"},
{text: "NSMailMergeSettings.SetSynchronous", help: "<b>Void SetSynchronous(Bool p_0)<\/b>\n\n\\param p_0 Synchronous: Bool\r\n\\return Bool"},
{text: "NSMailMergeSettings.SetTaskEntity", help: "<b>Void SetTaskEntity(NSMailMergeTask p_0)<\/b>\n\nIf specified, register a task on recipients using properties from this object.\r\n\r\n\\param p_0 TaskEntity: MailMergeTask\r\n\\return MailMergeTask"},
{text: "NSMailMergeSettings.SetTestOnly", help: "<b>Void SetTestOnly(Bool p_0)<\/b>\n\nIf true, do the merge task, but use current user as target, instead of selection members\r\n\r\n\\param p_0 TestOnly: Bool\r\n\\return Bool"},
{text: "Void.NSMailMergeTask", help: "<b>NSMailMergeTask<\/b>\n\nProperties describing a task to create on recipients of a mail merge"},
{text: "NSMailMergeTask.GetSingleEntryOnEachCompany", help: "<b>Bool GetSingleEntryOnEachCompany()<\/b>\n\nShould we only create one task on each company? If false, separate tasks will be created for all persons from the same company.\r\n\r\n\\return Bool"},
{text: "NSMailMergeTask.GetStartDate", help: "<b>DateTime GetStartDate()<\/b>\n\nWhen the task should start\r\n\r\n\\return DateTime"},
{text: "NSMailMergeTask.GetCompleted", help: "<b>Integer GetCompleted()<\/b>\n\nCompleted status for task\r\n\r\n\\return Integer"},
{text: "NSMailMergeTask.GetDuration", help: "<b>Integer GetDuration()<\/b>\n\nDuration of task\r\n\r\n\\return Integer"},
{text: "NSMailMergeTask.GetOwnerAssociateId", help: "<b>Integer GetOwnerAssociateId()<\/b>\n\nAssociate identity of who should be set as owner of the task.  If value is 0, the recipient owner(our contact) will be used.\r\n\r\n\\return Integer"},
{text: "NSMailMergeTask.GetPriorityId", help: "<b>Integer GetPriorityId()<\/b>\n\nPriority of task\r\n\r\n\\return Integer"},
{text: "NSMailMergeTask.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nProject identity to set on task\r\n\r\n\\return Integer"},
{text: "NSMailMergeTask.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nSale identity to set on task\r\n\r\n\\return Integer"},
{text: "NSMailMergeTask.GetTypeId", help: "<b>Integer GetTypeId()<\/b>\n\nType identity to set on task\r\n\r\n\\return Integer"},
{text: "NSMailMergeTask.GetVisibleFor", help: "<b>NSVisibleFor GetVisibleFor()<\/b>\n\nWho the task should be visible for\r\n\r\n\\return VisibleFor"},
{text: "NSMailMergeTask.GetDescription", help: "<b>String GetDescription()<\/b>\n\nText describing task\r\n\r\n\\return String"},
{text: "NSMailMergeTask.SetCompleted", help: "<b>Void SetCompleted(Integer p_0)<\/b>\n\nCompleted status for task\r\n\r\n\\param p_0 Completed: Integer\r\n\\return Integer"},
{text: "NSMailMergeTask.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nText describing task\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSMailMergeTask.SetDuration", help: "<b>Void SetDuration(Integer p_0)<\/b>\n\nDuration of task\r\n\r\n\\param p_0 Duration: Integer\r\n\\return Integer"},
{text: "NSMailMergeTask.SetOwnerAssociateId", help: "<b>Void SetOwnerAssociateId(Integer p_0)<\/b>\n\nAssociate identity of who should be set as owner of the task.  If value is 0, the recipient owner(our contact) will be used.\r\n\r\n\\param p_0 OwnerAssociateId: Integer\r\n\\return Integer"},
{text: "NSMailMergeTask.SetPriorityId", help: "<b>Void SetPriorityId(Integer p_0)<\/b>\n\nPriority of task\r\n\r\n\\param p_0 PriorityId: Integer\r\n\\return Integer"},
{text: "NSMailMergeTask.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nProject identity to set on task\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSMailMergeTask.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nSale identity to set on task\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSMailMergeTask.SetSingleEntryOnEachCompany", help: "<b>Void SetSingleEntryOnEachCompany(Bool p_0)<\/b>\n\nShould we only create one task on each company? If false, separate tasks will be created for all persons from the same company.\r\n\r\n\\param p_0 SingleEntryOnEachCompany: Bool\r\n\\return Bool"},
{text: "NSMailMergeTask.SetStartDate", help: "<b>Void SetStartDate(DateTime p_0)<\/b>\n\nWhen the task should start\r\n\r\n\\param p_0 StartDate: DateTime\r\n\\return DateTime"},
{text: "NSMailMergeTask.SetTypeId", help: "<b>Void SetTypeId(Integer p_0)<\/b>\n\nType identity to set on task\r\n\r\n\\param p_0 TypeId: Integer\r\n\\return Integer"},
{text: "NSMailMergeTask.SetVisibleFor", help: "<b>Void SetVisibleFor(NSVisibleFor p_0)<\/b>\n\nWho the task should be visible for\r\n\r\n\\param p_0 VisibleFor: VisibleFor\r\n\\return VisibleFor"},
{text: "Void.NSMDOAgent", help: "<b>NSMDOAgent<\/b>\n\n"},
{text: "NSMDOAgent.GetListIdByListName", help: "<b>Integer GetListIdByListName(String p_0)<\/b>\n\nRetrieve the UdListDefinition id of a list, by its name. Not all lists have such an ID, but those that are based on tables do (the list name is then the same as the table name)\r\n\r\n\\param p_0 name: The list name, same as the table name for lists that are backed by tables\r\n\\return List id in the UdListDefinition table"},
{text: "NSMDOAgent.GetListItem", help: "<b>NSMDOListItem GetListItem(String p_0, Integer p_1)<\/b>\n\nReturns a single list item\r\n\r\n\\param p_0 listName: Conceptual name of the MDO list\r\n\\param p_1 id: Id of list item\r\n\\return Single MDO list item"},
{text: "NSMDOAgent.GetList", help: "<b>NSMDOListItem[] GetList(String p_0, Bool p_1, String p_2, Bool p_3)<\/b>\n\nMethod to get a MDO list.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list-\r\n\\param p_1 forceFlatList: Force the list to be flat\r\n\\param p_2 additionalInfo: Additional info to the MDO provider\r\n\\param p_3 onlyHistory: If true, return only history items\r\n\\return Array of MDOListItem\r\n"},
{text: "NSMDOAgent.GetListWithHistory", help: "<b>NSMDOListItem[] GetListWithHistory(String p_0, Bool p_1, String p_2, Integer[] p_3, Bool p_4)<\/b>\n\nMethod to get a MDO list with own history list.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list-\r\n\\param p_1 forceFlatList: Force the list to be flat\r\n\\param p_2 additionalInfo: Additional info to the MDO provider\r\n\\param p_3 historyItems: An array of ids, used to get the history list\r\n\\param p_4 onlyHistory: If true, return only history items\r\n\\return Array of MDOListItem\r\n"},
{text: "NSMDOAgent.GetListWithRestriction", help: "<b>NSMDOListItem[] GetListWithRestriction(String p_0, String p_1, String p_2)<\/b>\n\nMethod to get a MDO list with restrictions.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list-\r\n\\param p_1 additionalInfo: Additional info to the MDO provider\r\n\\param p_2 searchValue: the value used to restrict the list\r\n\\return Array of MDOListItem\r\n"},
{text: "NSMDOAgent.GetSimpleList", help: "<b>NSMDOListItem[] GetSimpleList(String p_0)<\/b>\n\nMethod returns a simple flat MDO List.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list-\r\n\\return Array of MDOListItem\r\n"},
{text: "NSMDOAgent.GetSelectableList", help: "<b>NSSelectableMDOListItem[] GetSelectableList(String p_0, Bool p_1, String p_2, Bool p_3)<\/b>\n\nMethod to get a Selectable MDO list.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list.\r\n\\param p_1 forceFlatList: Force the list to be flat\r\n\\param p_2 additionalInfo: Additional info to the MDO provider\r\n\\param p_3 onlyHistory: If true, return only history items\r\n\\return Array of SelectableMDOListItem\r\n"},
{text: "NSMDOAgent.GetSelectableListWithHistory", help: "<b>NSSelectableMDOListItem[] GetSelectableListWithHistory(String p_0, Bool p_1, String p_2, Integer[] p_3, Bool p_4)<\/b>\n\nMethod to get a Selectable MDO list with own history list.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list.\r\n\\param p_1 forceFlatList: Force the list to be flat\r\n\\param p_2 additionalInfo: Additional info to the MDO provider\r\n\\param p_3 historyItems: An array of ids, used to get the history list\r\n\\param p_4 onlyHistory: If true, return only history items\r\n\\return Array of SelectableMDOListItem\r\n"},
{text: "NSMDOAgent.GetSelectableListWithRestriction", help: "<b>NSSelectableMDOListItem[] GetSelectableListWithRestriction(String p_0, String p_1, String p_2)<\/b>\n\nMethod to get a Selectable MDO list with restrictions.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list\r\n\\param p_1 additionalInfo: Additional info to the MDO provider\r\n\\param p_2 searchValue: the value used to restrict the list\r\n\\return Array of SelectableMDOListItem\r\n"},
{text: "NSMDOAgent.GetSelectableSimpleList", help: "<b>NSSelectableMDOListItem[] GetSelectableSimpleList(String p_0)<\/b>\n\nMethod returns a flat Selectable MDO List.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list\r\n\\return Array of SelectableMDOListItem\r\n"},
{text: "NSMDOAgent.SetSelected", help: "<b>NSSelectableMDOListItem[] SetSelected(String p_0, String p_1, NSSelectableMDOListItem[] p_2)<\/b>\n\nSaves the selected values as selected by their given list representation.\r\n\r\n\\param p_0 name: Conceptual name of the MDO list\r\n\\param p_1 additionalInfo: Additional info to the MDO provider\r\n\\param p_2 selectableMDOList: Items to be updated\r\n\\return Array of updated SelectableMDOListItems\r\n"},
{text: "NSMDOAgent.GetListNames", help: "<b>String[] GetListNames()<\/b>\n\nReturns a list of all MDO List names. These names can also be used with the Archive agent as ProviderNames.\r\n\r\n\\return Array of list names."},
{text: "Void.NSMDOListItem", help: "<b>NSMDOListItem<\/b>\n\n"},
{text: "NSMDOListItem.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nThe deleted status of the ListItem\r\n\r\n\\return Bool"},
{text: "NSMDOListItem.GetColorBlock", help: "<b>Integer GetColorBlock()<\/b>\n\nThe color indicator of the ListItem color block\r\n\r\n\\return Integer"},
{text: "NSMDOListItem.GetId", help: "<b>Integer GetId()<\/b>\n\nThe Id of the ListItem\r\n\r\n\\return Integer"},
{text: "NSMDOListItem.GetRank", help: "<b>Integer GetRank()<\/b>\n\nThe rank of the ListItem\r\n\r\n\\return Integer"},
{text: "NSMDOListItem.GetChildItems", help: "<b>NSMDOListItem[] GetChildItems()<\/b>\n\nThe child items of the MDOListItem\r\n\r\n\\return MDOListItemArray"},
{text: "NSMDOListItem.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\nExtra information added to the ListItem. Could be information such as sort order etc or other meta data. Custom field.\r\n\r\n\\return String"},
{text: "NSMDOListItem.GetIconHint", help: "<b>String GetIconHint()<\/b>\n\nThe Icon hint of the ListItem. Custom field.\r\n\r\n\\return String"},
{text: "NSMDOListItem.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the ListItem\r\n\r\n\\return String"},
{text: "NSMDOListItem.GetStyleHint", help: "<b>String GetStyleHint()<\/b>\n\nStyle hint indicating, information such as background color etc. Custom field.\r\n\r\n\\return String"},
{text: "NSMDOListItem.GetToolTip", help: "<b>String GetToolTip()<\/b>\n\nThe tooltip of the ListItem\r\n\r\n\\return String"},
{text: "NSMDOListItem.GetType", help: "<b>String GetType()<\/b>\n\nThe type of the ListItem. Custom field.\r\n\r\n\\return String"},
{text: "NSMDOListItem.SetChildItems", help: "<b>Void SetChildItems(NSMDOListItem[] p_0)<\/b>\n\nThe child items of the MDOListItem\r\n\r\n\\param p_0 ChildItems: MDOListItemArray\r\n\\return MDOListItemArray"},
{text: "NSMDOListItem.SetColorBlock", help: "<b>Void SetColorBlock(Integer p_0)<\/b>\n\nThe color indicator of the ListItem color block\r\n\r\n\\param p_0 ColorBlock: Integer\r\n\\return Integer"},
{text: "NSMDOListItem.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nThe deleted status of the ListItem\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSMDOListItem.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\nExtra information added to the ListItem. Could be information such as sort order etc or other meta data. Custom field.\r\n\r\n\\param p_0 ExtraInfo: String\r\n\\return String"},
{text: "NSMDOListItem.SetIconHint", help: "<b>Void SetIconHint(String p_0)<\/b>\n\nThe Icon hint of the ListItem. Custom field.\r\n\r\n\\param p_0 IconHint: String\r\n\\return String"},
{text: "NSMDOListItem.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nThe Id of the ListItem\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSMDOListItem.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the ListItem\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSMDOListItem.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nThe rank of the ListItem\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSMDOListItem.SetStyleHint", help: "<b>Void SetStyleHint(String p_0)<\/b>\n\nStyle hint indicating, information such as background color etc. Custom field.\r\n\r\n\\param p_0 StyleHint: String\r\n\\return String"},
{text: "NSMDOListItem.SetToolTip", help: "<b>Void SetToolTip(String p_0)<\/b>\n\nThe tooltip of the ListItem\r\n\r\n\\param p_0 ToolTip: String\r\n\\return String"},
{text: "NSMDOListItem.SetType", help: "<b>Void SetType(String p_0)<\/b>\n\nThe type of the ListItem. Custom field.\r\n\r\n\\param p_0 Type: String\r\n\\return String"},
{text: "Void.NSMessageDeliveryStatus", help: "<b>NSMessageDeliveryStatus<\/b>\n\nClass used to describe the message status."},
{text: "NSMessageDeliveryStatus.GetMessagingId", help: "<b>Integer GetMessagingId()<\/b>\n\nId to the outgoing message table\n\t\/\/\/\r\n\r\n\\return Integer"},
{text: "NSMessageDeliveryStatus.GetStatus", help: "<b>Integer GetStatus()<\/b>\n\nCurrent message status\r\n\r\n\\return Integer"},
{text: "NSMessageDeliveryStatus.GetStatusDescription", help: "<b>String GetStatusDescription()<\/b>\n\nString describing the current message status.\r\n\r\n\\return String"},
{text: "NSMessageDeliveryStatus.SetMessagingId", help: "<b>Void SetMessagingId(Integer p_0)<\/b>\n\nId to the outgoing message table\n\t\/\/\/\r\n\r\n\\param p_0 MessagingId: Integer\r\n\\return Integer"},
{text: "NSMessageDeliveryStatus.SetStatus", help: "<b>Void SetStatus(Integer p_0)<\/b>\n\nCurrent message status\r\n\r\n\\param p_0 Status: Integer\r\n\\return Integer"},
{text: "NSMessageDeliveryStatus.SetStatusDescription", help: "<b>Void SetStatusDescription(String p_0)<\/b>\n\nString describing the current message status.\r\n\r\n\\param p_0 StatusDescription: String\r\n\\return String"},
{text: "Void.NSMessagingAgent", help: "<b>NSMessagingAgent<\/b>\n\n"},
{text: "NSMessagingAgent.GetDeliveryStatus", help: "<b>NSMessageDeliveryStatus[] GetDeliveryStatus(Integer[] p_0)<\/b>\n\nGet delivery status\r\n\r\n\\param p_0 messagingIds: Array of messaging ids."},
{text: "NSMessagingAgent.SendMessages", help: "<b>NSMessageDeliveryStatus[] SendMessages(String p_0, NSOutgoingMessage[] p_1)<\/b>\n\nSend an array of messages\r\n\r\n\\param p_0 plugin: Name of plugin to use.\r\n\\param p_1 outgoingMessages: Array of outgoing messages you want to send.\r\n\\return Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages."},
{text: "NSMessagingAgent.SendMessagesWithConfig", help: "<b>NSMessageDeliveryStatus[] SendMessagesWithConfig(String p_0, NSOutgoingMessage[] p_1, StringDictionary p_2)<\/b>\n\nSend an array of messages using given config\r\n\r\n\\param p_0 plugin: Name of plugin to use.\r\n\\param p_1 outgoingMessages: Array of outgoing messages you want to send.\r\n\\param p_2 config: Config values used by the plugin.\r\n\\return Array of MessageDeliveryStatus. Length of the array is equal to the number of outgoing messages."},
{text: "NSMessagingAgent.GetPlugins", help: "<b>NSProviderInfo[] GetPlugins()<\/b>\n\n"},
{text: "NSMessagingAgent.CreateMessage", help: "<b>Void CreateMessage(NSIncomingMessage p_0)<\/b>\n\nCreate a new message and insert it in the message queue. (inbox)\r\n\r\n\\param p_0 incomingMessage"},
{text: "NSMessagingAgent.SetDeliveryStatus", help: "<b>Void SetDeliveryStatus(String p_0, String p_1, Integer p_2, String p_3)<\/b>\n\nSet or change the delivery status on an outgoing messsage.\r\n\r\n\\param p_0 plugin: Name of plugin\r\n\\param p_1 externalMessageId: External message id known to plugin.\r\n\\param p_2 status: Delivery status\r\n\\param p_3 statusDescription: String describing delivery status."},
{text: "Void.NSModuleLicense", help: "<b>NSModuleLicense<\/b>\n\nRepresents a single module license info."},
{text: "NSModuleLicense.GetIsHidden", help: "<b>Bool GetIsHidden()<\/b>\n\nIf true, then this module should not appear in GUI and is not assignable by users\r\n\r\n\\return Bool"},
{text: "NSModuleLicense.GetUnrestricted", help: "<b>Bool GetUnrestricted()<\/b>\n\nIf true, then there is no licenseNumber limit on how many of these modules may be assigned\r\n\r\n\\return Bool"},
{text: "NSModuleLicense.GetAllowedUserType", help: "<b>Integer GetAllowedUserType()<\/b>\n\nAllowed associate type for user licenses: internal(0), external(4).\r\n\r\n\\return Integer"},
{text: "NSModuleLicense.GetExtraFlags", help: "<b>Integer GetExtraFlags()<\/b>\n\nUnspecified extra flags of license, part of checksum. Value=1 means this a 'user plan'; such licenses cause the admin gui to switch to radiobutton view\r\n\r\n\\return Integer"},
{text: "NSModuleLicense.GetLicenseType", help: "<b>Integer GetLicenseType()<\/b>\n\n"},
{text: "NSModuleLicense.GetNumberOfLicenses", help: "<b>Integer GetNumberOfLicenses()<\/b>\n\nNumber of licenses purchased.\r\n\r\n\\return Integer"},
{text: "NSModuleLicense.GetSortOrder", help: "<b>Integer GetSortOrder()<\/b>\n\nOrdering value - generated by SuperLicense and transferred here. Must be followed for signatures to be correct\r\n\r\n\\return Integer"},
{text: "NSModuleLicense.GetLicenseType", help: "<b>NSLicenseType GetLicenseType()<\/b>\n\nEntire system, per database, or per associate\r\n\r\n\\return LicenseType"},
{text: "NSModuleLicense.GetAllowedUserType", help: "<b>NSUserType GetAllowedUserType()<\/b>\n\n"},
{text: "NSModuleLicense.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\nFree field, can be used by the module owner (example: host domain, for eJournal). NOTE: For rows with extraFlags=1 this field contains the list of modules that this plan comprises\r\n\r\n\\return String"},
{text: "NSModuleLicense.GetModuleDescription", help: "<b>String GetModuleDescription()<\/b>\n\nHuman-readable description of module, shown in GUI, default language. Additional languages can be added to LocaleText, resource type 25\r\n\r\n\\return String"},
{text: "NSModuleLicense.GetModuleName", help: "<b>String GetModuleName()<\/b>\n\nThe name of the module, not visible in GUI but used in the code. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\r\n\r\n\\return String"},
{text: "NSModuleLicense.GetModuleTooltip", help: "<b>String GetModuleTooltip()<\/b>\n\nTooltip text, anything you want; shown when the cursor hovers over the line in the GUI. Default language. Additional languages can be added to LocaleText, resource type 27\r\n\r\n\\return String"},
{text: "NSModuleLicense.GetModuleVersion", help: "<b>String GetModuleVersion()<\/b>\n\nVersion string for this module\r\n\r\n\\return String"},
{text: "NSModuleLicense.GetOwnerName", help: "<b>String GetOwnerName()<\/b>\n\nThe name of the module owner, not visible in GUI but used in the code. OwnerName SUPEROFFICE is reserved and may NEVER be used by partners. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\r\n\r\n\\return String"},
{text: "NSModuleLicense.GetPrerequisiteModuleName", help: "<b>String GetPrerequisiteModuleName()<\/b>\n\nIf set, specifies a module license needed before this license can be granted\r\n\r\n\\return String"},
{text: "NSModuleLicense.GetSignature", help: "<b>String GetSignature()<\/b>\n\nSignature that verifies that this row is correctly transferred from SuperLicense\r\n\r\n\\return String"},
{text: "NSModuleLicense.SetAllowedUserType", help: "<b>Void SetAllowedUserType(Integer p_0)<\/b>\n\nAllowed associate type for user licenses: internal(0), external(4).\r\n\r\n\\param p_0 AllowedUserType: Integer\r\n\\return Integer"},
{text: "NSModuleLicense.SetAllowedUserType", help: "<b>Void SetAllowedUserType(NSUserType p_0)<\/b>\n\n"},
{text: "NSModuleLicense.SetExtraFlags", help: "<b>Void SetExtraFlags(Integer p_0)<\/b>\n\nUnspecified extra flags of license, part of checksum. Value=1 means this a 'user plan'; such licenses cause the admin gui to switch to radiobutton view\r\n\r\n\\param p_0 ExtraFlags: Integer\r\n\\return Integer"},
{text: "NSModuleLicense.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\nFree field, can be used by the module owner (example: host domain, for eJournal). NOTE: For rows with extraFlags=1 this field contains the list of modules that this plan comprises\r\n\r\n\\param p_0 ExtraInfo: String\r\n\\return String"},
{text: "NSModuleLicense.SetIsHidden", help: "<b>Void SetIsHidden(Bool p_0)<\/b>\n\nIf true, then this module should not appear in GUI and is not assignable by users\r\n\r\n\\param p_0 IsHidden: Bool\r\n\\return Bool"},
{text: "NSModuleLicense.SetLicenseType", help: "<b>Void SetLicenseType(Integer p_0)<\/b>\n\n"},
{text: "NSModuleLicense.SetLicenseType", help: "<b>Void SetLicenseType(NSLicenseType p_0)<\/b>\n\nEntire system, per database, or per associate\r\n\r\n\\param p_0 LicenseType: LicenseType\r\n\\return LicenseType"},
{text: "NSModuleLicense.SetModuleDescription", help: "<b>Void SetModuleDescription(String p_0)<\/b>\n\nHuman-readable description of module, shown in GUI, default language. Additional languages can be added to LocaleText, resource type 25\r\n\r\n\\param p_0 ModuleDescription: String\r\n\\return String"},
{text: "NSModuleLicense.SetModuleName", help: "<b>Void SetModuleName(String p_0)<\/b>\n\nThe name of the module, not visible in GUI but used in the code. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\r\n\r\n\\param p_0 ModuleName: String\r\n\\return String"},
{text: "NSModuleLicense.SetModuleTooltip", help: "<b>Void SetModuleTooltip(String p_0)<\/b>\n\nTooltip text, anything you want; shown when the cursor hovers over the line in the GUI. Default language. Additional languages can be added to LocaleText, resource type 27\r\n\r\n\\param p_0 ModuleTooltip: String\r\n\\return String"},
{text: "NSModuleLicense.SetModuleVersion", help: "<b>Void SetModuleVersion(String p_0)<\/b>\n\nVersion string for this module\r\n\r\n\\param p_0 ModuleVersion: String\r\n\\return String"},
{text: "NSModuleLicense.SetNumberOfLicenses", help: "<b>Void SetNumberOfLicenses(Integer p_0)<\/b>\n\nNumber of licenses purchased.\r\n\r\n\\param p_0 NumberOfLicenses: Integer\r\n\\return Integer"},
{text: "NSModuleLicense.SetOwnerName", help: "<b>Void SetOwnerName(String p_0)<\/b>\n\nThe name of the module owner, not visible in GUI but used in the code. OwnerName SUPEROFFICE is reserved and may NEVER be used by partners. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\r\n\r\n\\param p_0 OwnerName: String\r\n\\return String"},
{text: "NSModuleLicense.SetPrerequisiteModuleName", help: "<b>Void SetPrerequisiteModuleName(String p_0)<\/b>\n\nIf set, specifies a module license needed before this license can be granted\r\n\r\n\\param p_0 PrerequisiteModuleName: String\r\n\\return String"},
{text: "NSModuleLicense.SetSignature", help: "<b>Void SetSignature(String p_0)<\/b>\n\nSignature that verifies that this row is correctly transferred from SuperLicense\r\n\r\n\\param p_0 Signature: String\r\n\\return String"},
{text: "NSModuleLicense.SetSortOrder", help: "<b>Void SetSortOrder(Integer p_0)<\/b>\n\nOrdering value - generated by SuperLicense and transferred here. Must be followed for signatures to be correct\r\n\r\n\\param p_0 SortOrder: Integer\r\n\\return Integer"},
{text: "NSModuleLicense.SetUnrestricted", help: "<b>Void SetUnrestricted(Bool p_0)<\/b>\n\nIf true, then there is no licenseNumber limit on how many of these modules may be assigned\r\n\r\n\\param p_0 Unrestricted: Bool\r\n\\return Bool"},
{text: "Void.NSModuleLicenseLink", help: "<b>NSModuleLicenseLink<\/b>\n\n"},
{text: "NSModuleLicenseLink.GetAssigned", help: "<b>Bool GetAssigned()<\/b>\n\nIs the module license assigned to a given user\r\n\r\n\\return Bool"},
{text: "NSModuleLicenseLink.GetCanAssign", help: "<b>Bool GetCanAssign()<\/b>\n\nCan a specific user assign this module license\r\n\r\n\\return Bool"},
{text: "NSModuleLicenseLink.GetUnrestricted", help: "<b>Bool GetUnrestricted()<\/b>\n\nIs this module license restricted or unrestricted\r\n\r\n\\return Bool"},
{text: "NSModuleLicenseLink.GetFree", help: "<b>Integer GetFree()<\/b>\n\nThe number of licenses that are free to be assigned\r\n\r\n\\return Integer"},
{text: "NSModuleLicenseLink.GetInUse", help: "<b>Integer GetInUse()<\/b>\n\nThe total number of licenses (of a given license module) that are occupied\r\n\r\n\\return Integer"},
{text: "NSModuleLicenseLink.GetModuleLicenseId", help: "<b>Integer GetModuleLicenseId()<\/b>\n\nThe identifier of the module license\r\n\r\n\\return Integer"},
{text: "NSModuleLicenseLink.GetSortOrder", help: "<b>Integer GetSortOrder()<\/b>\n\n\\return Integer"},
{text: "NSModuleLicenseLink.GetTotal", help: "<b>Integer GetTotal()<\/b>\n\nThe total number of module licenses. In other words the number of free license added to the number of licenses in use equals the total number of licenses\r\n\r\n\\return Integer"},
{text: "NSModuleLicenseLink.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe description of the module license\r\n\r\n\\return String"},
{text: "NSModuleLicenseLink.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the module license\r\n\r\n\\return String"},
{text: "NSModuleLicenseLink.GetPrerequisiteModuleName", help: "<b>String GetPrerequisiteModuleName()<\/b>\n\n\\return String"},
{text: "NSModuleLicenseLink.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nThe tooltip to be shown in some gui with details on the module license\r\n\r\n\\return String"},
{text: "NSModuleLicenseLink.SetAssigned", help: "<b>Void SetAssigned(Bool p_0)<\/b>\n\nIs the module license assigned to a given user\r\n\r\n\\param p_0 Assigned: Bool\r\n\\return Bool"},
{text: "NSModuleLicenseLink.SetCanAssign", help: "<b>Void SetCanAssign(Bool p_0)<\/b>\n\nCan a specific user assign this module license\r\n\r\n\\param p_0 CanAssign: Bool\r\n\\return Bool"},
{text: "NSModuleLicenseLink.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe description of the module license\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSModuleLicenseLink.SetFree", help: "<b>Void SetFree(Integer p_0)<\/b>\n\nThe number of licenses that are free to be assigned\r\n\r\n\\param p_0 Free: Integer\r\n\\return Integer"},
{text: "NSModuleLicenseLink.SetInUse", help: "<b>Void SetInUse(Integer p_0)<\/b>\n\nThe total number of licenses (of a given license module) that are occupied\r\n\r\n\\param p_0 InUse: Integer\r\n\\return Integer"},
{text: "NSModuleLicenseLink.SetModuleLicenseId", help: "<b>Void SetModuleLicenseId(Integer p_0)<\/b>\n\nThe identifier of the module license\r\n\r\n\\param p_0 ModuleLicenseId: Integer\r\n\\return Integer"},
{text: "NSModuleLicenseLink.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the module license\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSModuleLicenseLink.SetPrerequisiteModuleName", help: "<b>Void SetPrerequisiteModuleName(String p_0)<\/b>\n\n\\param p_0 PrerequisiteModuleName: String\r\n\\return String"},
{text: "NSModuleLicenseLink.SetSortOrder", help: "<b>Void SetSortOrder(Integer p_0)<\/b>\n\n\\param p_0 SortOrder: Integer\r\n\\return Integer"},
{text: "NSModuleLicenseLink.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nThe tooltip to be shown in some gui with details on the module license\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSModuleLicenseLink.SetTotal", help: "<b>Void SetTotal(Integer p_0)<\/b>\n\nThe total number of module licenses. In other words the number of free license added to the number of licenses in use equals the total number of licenses\r\n\r\n\\param p_0 Total: Integer\r\n\\return Integer"},
{text: "NSModuleLicenseLink.SetUnrestricted", help: "<b>Void SetUnrestricted(Bool p_0)<\/b>\n\nIs this module license restricted or unrestricted\r\n\r\n\\param p_0 Unrestricted: Bool\r\n\\return Bool"},
{text: "Void.NSMrMrs", help: "<b>NSMrMrs<\/b>\n\n"},
{text: "NSMrMrs.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSMrMrs.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSMrMrs.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSMrMrs.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSMrMrs.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSMrMrs.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSMultiAlarmData", help: "<b>NSMultiAlarmData<\/b>\n\n"},
{text: "NSMultiAlarmData.GetPollingInterval", help: "<b>Integer GetPollingInterval()<\/b>\n\n\\return Integer"},
{text: "NSMultiAlarmData.GetSilentAfter", help: "<b>Integer GetSilentAfter()<\/b>\n\n\\return Integer"},
{text: "NSMultiAlarmData.GetAlarms", help: "<b>NSAlarmData[] GetAlarms()<\/b>\n\n\\return AlarmDataArray"},
{text: "NSMultiAlarmData.SetAlarms", help: "<b>Void SetAlarms(NSAlarmData[] p_0)<\/b>\n\n\\param p_0 Alarms: AlarmDataArray\r\n\\return AlarmDataArray"},
{text: "NSMultiAlarmData.SetPollingInterval", help: "<b>Void SetPollingInterval(Integer p_0)<\/b>\n\n\\param p_0 PollingInterval: Integer\r\n\\return Integer"},
{text: "NSMultiAlarmData.SetSilentAfter", help: "<b>Void SetSilentAfter(Integer p_0)<\/b>\n\n\\param p_0 SilentAfter: Integer\r\n\\return Integer"},
{text: "Void.NSNavigatorAgent", help: "<b>NSNavigatorAgent<\/b>\n\n"},
{text: "NSNavigatorAgent.GetNavigatorCompany", help: "<b>NSNavigatorCompany GetNavigatorCompany(Integer p_0)<\/b>\n\nGets a NavigatorCompany object.\r\n\r\n\\param p_0 navigatorCompanyId: The identifier of the NavigatorCompany object\r\n\\return NavigatorCompany\r\n"},
{text: "NSNavigatorAgent.GetNavigatorCompanies", help: "<b>NSNavigatorCompany[] GetNavigatorCompanies(String p_0)<\/b>\n\n\r\n\r\n\\param p_0 name\r\n"},
{text: "NSNavigatorAgent.GetNavigatorCompanyList", help: "<b>NSNavigatorCompany[] GetNavigatorCompanyList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSNavigatorAgent.GetNavigatorCompanyList", help: "<b>NSNavigatorCompanyList[] GetNavigatorCompanyList(Integer[] p_0)<\/b>\n\nGets an array of NavigatorCompany objects.\r\n\r\n\\param p_0 navigatorCompanyIds: The identifiers of the NavigatorCompany object\r\n\\return Array of NavigatorCompany objects\r\n"},
{text: "Void.NSNavigatorCompany", help: "<b>NSNavigatorCompany<\/b>\n\n"},
{text: "NSNavigatorCompany.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSNavigatorCompany.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSNavigatorCompany.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSNavigatorCompany.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSNavigatorCompany.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSNavigatorCompany.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSNumberAllocationAgent", help: "<b>NSNumberAllocationAgent<\/b>\n\nThis agent can be used to manage number allocation"},
{text: "NSNumberAllocationAgent.GetNumberEachTemplate", help: "<b>Bool GetNumberEachTemplate()<\/b>\n\nReturns true or false if Automatically create new counters for new document templates\r\n\r\n\\return Is NumberEachTemplate?"},
{text: "NSNumberAllocationAgent.CreateDefaultRefCountEntity", help: "<b>NSRefCountEntity CreateDefaultRefCountEntity()<\/b>\n\nLoading default values into a new RefCountEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New RefCountEntity with default values"},
{text: "NSNumberAllocationAgent.GetRefCountEntity", help: "<b>NSRefCountEntity GetRefCountEntity(Integer p_0)<\/b>\n\nGets a RefCountEntity object.\r\n\r\n\\param p_0 refCountEntityId: The identifier of the RefCountEntity object\r\n\\return RefCountEntity"},
{text: "NSNumberAllocationAgent.SaveRefCountEntity", help: "<b>NSRefCountEntity SaveRefCountEntity(NSRefCountEntity p_0)<\/b>\n\nUpdates the existing RefCountEntity or creates a new RefCountEntity if the id parameter is empty\r\n\r\n\\param p_0 refCountEntity: The RefCountEntity that is saved\r\n\\return New or updated RefCountEntity"},
{text: "NSNumberAllocationAgent.DeleteRefCountEntity", help: "<b>Void DeleteRefCountEntity(Integer p_0)<\/b>\n\nDeletes the RefCountEntity\r\n\r\n\\param p_0 refCountEntityId: The identity of the RefCountEntity"},
{text: "NSNumberAllocationAgent.SaveDefaultNumbering", help: "<b>Void SaveDefaultNumbering(NSRefCountEntity p_0)<\/b>\n\nSaves default numbering values in preferences\r\n\r\n\\param p_0 refCountEntity: The refCountEntity that holds the values that will be saved\r\n\\return void"},
{text: "NSNumberAllocationAgent.SetNumberEachTemplate", help: "<b>Void SetNumberEachTemplate(Bool p_0)<\/b>\n\nSaves true or false if Automatically create new counters for new document templates\r\n\r\n\\param p_0 setValue: true or false if Automatically create new counters for new document templates\r\n\\return void"},
{text: "Void.NSOutgoingMessage", help: "<b>NSOutgoingMessage<\/b>\n\nDetails about a message to be sent"},
{text: "NSOutgoingMessage.GetParentMessagingId", help: "<b>Integer GetParentMessagingId()<\/b>\n\nId to the previous outgoing message related to this one. Used from message threading.\r\n\r\n\\return Integer"},
{text: "NSOutgoingMessage.GetContent", help: "<b>String GetContent()<\/b>\n\nContent, or body, of the message.\r\n\r\n\\return String"},
{text: "NSOutgoingMessage.GetFormat", help: "<b>String GetFormat()<\/b>\n\nFormat of content\r\n\r\n\\return String"},
{text: "NSOutgoingMessage.GetFrom", help: "<b>String GetFrom()<\/b>\n\nWho the message is from.  This can vary from provider to provider and can for SMS typically be a phone number or a string.  This is mail address on the form of an e-mail.\r\n\r\n\\return String"},
{text: "NSOutgoingMessage.GetSuggestedSessionKey", help: "<b>String GetSuggestedSessionKey()<\/b>\n\n\\return String"},
{text: "NSOutgoingMessage.GetTo", help: "<b>String GetTo()<\/b>\n\nAddress of the recipient. This can be in the form of phone number or email.\r\n\r\n\\return String"},
{text: "NSOutgoingMessage.SetContent", help: "<b>Void SetContent(String p_0)<\/b>\n\nContent, or body, of the message.\r\n\r\n\\param p_0 Content: String\r\n\\return String"},
{text: "NSOutgoingMessage.SetFormat", help: "<b>Void SetFormat(String p_0)<\/b>\n\nFormat of content\r\n\r\n\\param p_0 Format: String\r\n\\return String"},
{text: "NSOutgoingMessage.SetFrom", help: "<b>Void SetFrom(String p_0)<\/b>\n\nWho the message is from.  This can vary from provider to provider and can for SMS typically be a phone number or a string.  This is mail address on the form of an e-mail.\r\n\r\n\\param p_0 From: String\r\n\\return String"},
{text: "NSOutgoingMessage.SetParentMessagingId", help: "<b>Void SetParentMessagingId(Integer p_0)<\/b>\n\nId to the previous outgoing message related to this one. Used from message threading.\r\n\r\n\\param p_0 ParentMessagingId: Integer\r\n\\return Integer"},
{text: "NSOutgoingMessage.SetSuggestedSessionKey", help: "<b>Void SetSuggestedSessionKey(String p_0)<\/b>\n\n\\param p_0 SuggestedSessionKey: String\r\n\\return String"},
{text: "NSOutgoingMessage.SetTo", help: "<b>Void SetTo(String p_0)<\/b>\n\nAddress of the recipient. This can be in the form of phone number or email.\r\n\r\n\\param p_0 To: String\r\n\\return String"},
{text: "Void.NSParticipantInfo", help: "<b>NSParticipantInfo<\/b>\n\nClass representing an appointment participant."},
{text: "NSParticipantInfo.GetSendEmail", help: "<b>Bool GetSendEmail()<\/b>\n\nTrue if the participant has been sent an email or should be sent an email\r\n\r\n\\return Bool"},
{text: "NSParticipantInfo.GetSendEmail", help: "<b>Boolean GetSendEmail()<\/b>\n\n"},
{text: "NSParticipantInfo.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nAssociate id of the participant if the participant is an associate (or resource)\r\n\r\n\\return Integer"},
{text: "NSParticipantInfo.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nContact id of the participant if the participant is an associate or person\r\n\r\n\\return Integer"},
{text: "NSParticipantInfo.GetEmailId", help: "<b>Integer GetEmailId()<\/b>\n\nThe email id of the email belonging to the appointment record belonging to this person\r\n\r\n\\return Integer"},
{text: "NSParticipantInfo.GetInvitationStatus", help: "<b>Integer GetInvitationStatus()<\/b>\n\nThe participant status for the appointment\r\n\r\n\\return Integer"},
{text: "NSParticipantInfo.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPerson id of the participant if the participant is a person\r\n\r\n\\return Integer"},
{text: "NSParticipantInfo.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nAssociate id of the participant if the participant is an associate (or resource)\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSParticipantInfo.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nContact id of the participant if the participant is an associate or person\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSParticipantInfo.SetEmailId", help: "<b>Void SetEmailId(Integer p_0)<\/b>\n\nThe email id of the email belonging to the appointment record belonging to this person\r\n\r\n\\param p_0 EmailId: Integer\r\n\\return Integer"},
{text: "NSParticipantInfo.SetInvitationStatus", help: "<b>Void SetInvitationStatus(Integer p_0)<\/b>\n\nThe participant status for the appointment\r\n\r\n\\param p_0 InvitationStatus: Integer\r\n\\return Integer"},
{text: "NSParticipantInfo.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPerson id of the participant if the participant is a person\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSParticipantInfo.SetSendEmail", help: "<b>Void SetSendEmail(Bool p_0)<\/b>\n\nTrue if the participant has been sent an email or should be sent an email\r\n\r\n\\param p_0 SendEmail: Bool\r\n\\return Bool"},
{text: "NSParticipantInfo.SetSendEmail", help: "<b>Void SetSendEmail(Boolean p_0)<\/b>\n\n"},
{text: "Void.NSParticipantSyncData", help: "<b>NSParticipantSyncData<\/b>\n\n"},
{text: "NSParticipantSyncData.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nContact ID of owning contact, may be 0\r\n\r\n\\return Integer"},
{text: "NSParticipantSyncData.GetParticipantStatus", help: "<b>Integer GetParticipantStatus()<\/b>\n\nThe appointment status for this participant.\r\n\r\n\\return Integer"},
{text: "NSParticipantSyncData.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\return Integer"},
{text: "NSParticipantSyncData.GetPersonAddress", help: "<b>NSAddressSyncData GetPersonAddress()<\/b>\n\n\\return AddressSyncData"},
{text: "NSParticipantSyncData.GetPostalAddress", help: "<b>NSAddressSyncData GetPostalAddress()<\/b>\n\n\\return AddressSyncData"},
{text: "NSParticipantSyncData.GetStreetAddress", help: "<b>NSAddressSyncData GetStreetAddress()<\/b>\n\n\\return AddressSyncData"},
{text: "NSParticipantSyncData.GetContactBusiness", help: "<b>String GetContactBusiness()<\/b>\n\nThe business that the contact is associated with. The GUI forces the user to enter a business type.\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetContactCategory", help: "<b>String GetContactCategory()<\/b>\n\nThe category that is set on the company. The GUI forces the user to enter a category type\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetContactCountry", help: "<b>String GetContactCountry()<\/b>\n\n\\return String"},
{text: "NSParticipantSyncData.GetContactDepartment", help: "<b>String GetContactDepartment()<\/b>\n\nDepartment\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetContactFullName", help: "<b>String GetContactFullName()<\/b>\n\n\\return String"},
{text: "NSParticipantSyncData.GetContactName", help: "<b>String GetContactName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetCountry", help: "<b>String GetCountry()<\/b>\n\nThe country this contact is located in. The country a contact is saved with, affects the phone number format, and the address layout.\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonAcademicTitle", help: "<b>String GetPersonAcademicTitle()<\/b>\n\nAcademic title, populated from Salutation list but can be overwritten with anything at all\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonCountry", help: "<b>String GetPersonCountry()<\/b>\n\nThe country this contact person is located in.\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonFirstName", help: "<b>String GetPersonFirstName()<\/b>\n\nFirst name\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonFormalName", help: "<b>String GetPersonFormalName()<\/b>\n\nGet formal name for a person, as used in labels. (Full name + person title + academic title)\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonFullName", help: "<b>String GetPersonFullName()<\/b>\n\nThe person's full name localized to the current culture\/country.  (internal name used in clients for employees)\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonLastname", help: "<b>String GetPersonLastname()<\/b>\n\nLast name\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonMiddleName", help: "<b>String GetPersonMiddleName()<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonMrmrs", help: "<b>String GetPersonMrmrs()<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonPosition", help: "<b>String GetPersonPosition()<\/b>\n\nThe position. This is a predefined SuperOffice value, different from Title\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetPersonTitle", help: "<b>String GetPersonTitle()<\/b>\n\nTitle\r\n\r\n\\return String"},
{text: "NSParticipantSyncData.GetContactUrl", help: "<b>String[] GetContactUrl()<\/b>\n\nThe contact's internet adresses\r\n\r\n\\return StringArray"},
{text: "NSParticipantSyncData.GetEMail", help: "<b>String[] GetEMail()<\/b>\n\n\\return StringArray"},
{text: "NSParticipantSyncData.GetMessenger", help: "<b>String[] GetMessenger()<\/b>\n\n\\return StringArray"},
{text: "NSParticipantSyncData.GetPhoneContact", help: "<b>String[] GetPhoneContact()<\/b>\n\nReturns a collection of office phone numbers that belong to the contact person.\r\n\r\n\\return StringArray"},
{text: "NSParticipantSyncData.GetPhoneDirect", help: "<b>String[] GetPhoneDirect()<\/b>\n\n\\return StringArray"},
{text: "NSParticipantSyncData.GetPhoneFax", help: "<b>String[] GetPhoneFax()<\/b>\n\nReturns a collection of fax numbers that belong to the contact person.\r\n\r\n\\return StringArray"},
{text: "NSParticipantSyncData.GetPhoneMobile", help: "<b>String[] GetPhoneMobile()<\/b>\n\nReturns a collection of mobile phone numbers that belong to the contact person.\r\n\r\n\\return StringArray"},
{text: "NSParticipantSyncData.GetPhonePrivate", help: "<b>String[] GetPhonePrivate()<\/b>\n\nReturns a collection of phone numbers that belong to the contact person.\r\n\r\n\\return StringArray"},
{text: "NSParticipantSyncData.GetUrl", help: "<b>String[] GetUrl()<\/b>\n\nThe urls related to this person.\r\n\r\n\\return StringArray"},
{text: "NSParticipantSyncData.GetVoip", help: "<b>String[] GetVoip()<\/b>\n\n\\return StringArray"},
{text: "NSParticipantSyncData.SetContactBusiness", help: "<b>Void SetContactBusiness(String p_0)<\/b>\n\nThe business that the contact is associated with. The GUI forces the user to enter a business type.\r\n\r\n\\param p_0 ContactBusiness: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetContactCategory", help: "<b>Void SetContactCategory(String p_0)<\/b>\n\nThe category that is set on the company. The GUI forces the user to enter a category type\r\n\r\n\\param p_0 ContactCategory: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetContactCountry", help: "<b>Void SetContactCountry(String p_0)<\/b>\n\n\\param p_0 ContactCountry: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetContactDepartment", help: "<b>Void SetContactDepartment(String p_0)<\/b>\n\nDepartment\r\n\r\n\\param p_0 ContactDepartment: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetContactFullName", help: "<b>Void SetContactFullName(String p_0)<\/b>\n\n\\param p_0 ContactFullName: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nContact ID of owning contact, may be 0\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSParticipantSyncData.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetContactUrl", help: "<b>Void SetContactUrl(String[] p_0)<\/b>\n\nThe contact's internet adresses\r\n\r\n\\param p_0 ContactUrl: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetCountry", help: "<b>Void SetCountry(String p_0)<\/b>\n\nThe country this contact is located in. The country a contact is saved with, affects the phone number format, and the address layout.\r\n\r\n\\param p_0 Country: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetEMail", help: "<b>Void SetEMail(String[] p_0)<\/b>\n\n\\param p_0 EMail: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetMessenger", help: "<b>Void SetMessenger(String[] p_0)<\/b>\n\n\\param p_0 Messenger: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetParticipantStatus", help: "<b>Void SetParticipantStatus(Integer p_0)<\/b>\n\nThe appointment status for this participant.\r\n\r\n\\param p_0 ParticipantStatus: Integer\r\n\\return Integer"},
{text: "NSParticipantSyncData.SetPersonAcademicTitle", help: "<b>Void SetPersonAcademicTitle(String p_0)<\/b>\n\nAcademic title, populated from Salutation list but can be overwritten with anything at all\r\n\r\n\\param p_0 PersonAcademicTitle: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonAddress", help: "<b>Void SetPersonAddress(NSAddressSyncData p_0)<\/b>\n\n\\param p_0 PersonAddress: AddressSyncData\r\n\\return AddressSyncData"},
{text: "NSParticipantSyncData.SetPersonCountry", help: "<b>Void SetPersonCountry(String p_0)<\/b>\n\nThe country this contact person is located in.\r\n\r\n\\param p_0 PersonCountry: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonFirstName", help: "<b>Void SetPersonFirstName(String p_0)<\/b>\n\nFirst name\r\n\r\n\\param p_0 PersonFirstName: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonFormalName", help: "<b>Void SetPersonFormalName(String p_0)<\/b>\n\nGet formal name for a person, as used in labels. (Full name + person title + academic title)\r\n\r\n\\param p_0 PersonFormalName: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonFullName", help: "<b>Void SetPersonFullName(String p_0)<\/b>\n\nThe person's full name localized to the current culture\/country.  (internal name used in clients for employees)\r\n\r\n\\param p_0 PersonFullName: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPerson ID of person the appointment is with, may be 0\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSParticipantSyncData.SetPersonLastname", help: "<b>Void SetPersonLastname(String p_0)<\/b>\n\nLast name\r\n\r\n\\param p_0 PersonLastname: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonMiddleName", help: "<b>Void SetPersonMiddleName(String p_0)<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\param p_0 PersonMiddleName: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonMrmrs", help: "<b>Void SetPersonMrmrs(String p_0)<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\param p_0 PersonMrmrs: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonPosition", help: "<b>Void SetPersonPosition(String p_0)<\/b>\n\nThe position. This is a predefined SuperOffice value, different from Title\r\n\r\n\\param p_0 PersonPosition: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPersonTitle", help: "<b>Void SetPersonTitle(String p_0)<\/b>\n\nTitle\r\n\r\n\\param p_0 PersonTitle: String\r\n\\return String"},
{text: "NSParticipantSyncData.SetPhoneContact", help: "<b>Void SetPhoneContact(String[] p_0)<\/b>\n\nReturns a collection of office phone numbers that belong to the contact person.\r\n\r\n\\param p_0 PhoneContact: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetPhoneDirect", help: "<b>Void SetPhoneDirect(String[] p_0)<\/b>\n\n\\param p_0 PhoneDirect: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetPhoneFax", help: "<b>Void SetPhoneFax(String[] p_0)<\/b>\n\nReturns a collection of fax numbers that belong to the contact person.\r\n\r\n\\param p_0 PhoneFax: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetPhoneMobile", help: "<b>Void SetPhoneMobile(String[] p_0)<\/b>\n\nReturns a collection of mobile phone numbers that belong to the contact person.\r\n\r\n\\param p_0 PhoneMobile: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetPhonePrivate", help: "<b>Void SetPhonePrivate(String[] p_0)<\/b>\n\nReturns a collection of phone numbers that belong to the contact person.\r\n\r\n\\param p_0 PhonePrivate: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetPostalAddress", help: "<b>Void SetPostalAddress(NSAddressSyncData p_0)<\/b>\n\n\\param p_0 PostalAddress: AddressSyncData\r\n\\return AddressSyncData"},
{text: "NSParticipantSyncData.SetStreetAddress", help: "<b>Void SetStreetAddress(NSAddressSyncData p_0)<\/b>\n\n\\param p_0 StreetAddress: AddressSyncData\r\n\\return AddressSyncData"},
{text: "NSParticipantSyncData.SetUrl", help: "<b>Void SetUrl(String[] p_0)<\/b>\n\nThe urls related to this person.\r\n\r\n\\param p_0 Url: StringArray\r\n\\return StringArray"},
{text: "NSParticipantSyncData.SetVoip", help: "<b>Void SetVoip(String[] p_0)<\/b>\n\n\\param p_0 Voip: StringArray\r\n\\return StringArray"},
{text: "Void.NSPaymentTerm", help: "<b>NSPaymentTerm<\/b>\n\nThe built-in payment terms list. Used by the SuperOffice Quote Connector to categorize quote versions."},
{text: "NSPaymentTerm.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSPaymentTerm.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSPaymentTerm.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSPaymentTerm.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSPaymentTerm.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSPaymentTerm.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSPaymentType", help: "<b>NSPaymentType<\/b>\n\nThe built-in payment types list. Used by the SuperOffice Quote Connector in quote versions."},
{text: "NSPaymentType.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSPaymentType.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSPaymentType.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSPaymentType.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSPaymentType.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSPaymentType.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSPerson", help: "<b>NSPerson<\/b>\n\n"},
{text: "NSPerson.GetUsePersonAddress", help: "<b>Bool GetUsePersonAddress()<\/b>\n\nIf 1, use person's address for mailing instead of company address\r\n\r\n\\return Bool"},
{text: "NSPerson.GetActiveErpLinks", help: "<b>Integer GetActiveErpLinks()<\/b>\n\nHow many active ERP links are there for this person?\r\n\r\n\\return Integer"},
{text: "NSPerson.GetActiveInterests", help: "<b>Integer GetActiveInterests()<\/b>\n\nNumber of records in pintr table; select count(*) from pintr pi where pi.person_id = this.person_id == activeInterests is always true\r\n\r\n\\return Integer"},
{text: "NSPerson.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nId of the item's owner (Associate id)\r\n\r\n\\return Integer"},
{text: "NSPerson.GetContactCountryId", help: "<b>Integer GetContactCountryId()<\/b>\n\nThe persons contact country id\r\n\r\n\\return Integer"},
{text: "NSPerson.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nOwning contact ID\r\n\r\n\\return Integer"},
{text: "NSPerson.GetCountryId", help: "<b>Integer GetCountryId()<\/b>\n\nCountry\r\n\r\n\\return Integer"},
{text: "NSPerson.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSPerson.GetRank", help: "<b>Integer GetRank()<\/b>\n\nDisplay sort sequence for default sort order\r\n\r\n\\return Integer"},
{text: "NSPerson.GetRetired", help: "<b>Integer GetRetired()<\/b>\n\n1 = the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\return Integer"},
{text: "NSPerson.GetAssociateName", help: "<b>String GetAssociateName()<\/b>\n\nName of the person's owner\r\n\r\n\\return String"},
{text: "NSPerson.GetContactDepartment", help: "<b>String GetContactDepartment()<\/b>\n\nThe persons contact department\r\n\r\n\\return String"},
{text: "NSPerson.GetContactFax", help: "<b>String GetContactFax()<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\return String"},
{text: "NSPerson.GetContactFullName", help: "<b>String GetContactFullName()<\/b>\n\n\\return String"},
{text: "NSPerson.GetContactName", help: "<b>String GetContactName()<\/b>\n\nThe persons contact name\r\n\r\n\\return String"},
{text: "NSPerson.GetContactOrgNr", help: "<b>String GetContactOrgNr()<\/b>\n\nThe persons contact organization number\r\n\r\n\\return String"},
{text: "NSPerson.GetContactPhone", help: "<b>String GetContactPhone()<\/b>\n\nReturns the direct phone that belong to the persons contact.\r\n\r\n\\return String"},
{text: "NSPerson.GetDescription", help: "<b>String GetDescription()<\/b>\n\nGet the persons full name (internal name used in clients for employees).\r\n\r\n\\return String"},
{text: "NSPerson.GetDirectPhone", help: "<b>String GetDirectPhone()<\/b>\n\nReturns the direct phone that belong to the contact person.\r\n\r\n\\return String"},
{text: "NSPerson.GetEmail", help: "<b>String GetEmail()<\/b>\n\nReturns the email that belong to the contact person.\r\n\r\n\\return String"},
{text: "NSPerson.GetEmailName", help: "<b>String GetEmailName()<\/b>\n\nVisible field\r\n\r\n\\return String"},
{text: "NSPerson.GetFaxPhone", help: "<b>String GetFaxPhone()<\/b>\n\nReturns the fax phone that belong to the contact person.\r\n\r\n\\return String"},
{text: "NSPerson.GetFirstname", help: "<b>String GetFirstname()<\/b>\n\nFirst name\r\n\r\n\\return String"},
{text: "NSPerson.GetFormalName", help: "<b>String GetFormalName()<\/b>\n\nGet formal name for a person, as used in labels. (Full name + person title + academic title)\r\n\r\n\\return String"},
{text: "NSPerson.GetFullName", help: "<b>String GetFullName()<\/b>\n\nGet the persons full name (internal name used in clients for employees).\r\n\r\n\\return String"},
{text: "NSPerson.GetKanafname", help: "<b>String GetKanafname()<\/b>\n\nKana first name, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPerson.GetKanalname", help: "<b>String GetKanalname()<\/b>\n\nKana last name, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPerson.GetLastname", help: "<b>String GetLastname()<\/b>\n\nLast name\r\n\r\n\\return String"},
{text: "NSPerson.GetMiddleName", help: "<b>String GetMiddleName()<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\return String"},
{text: "NSPerson.GetMobilePhone", help: "<b>String GetMobilePhone()<\/b>\n\nReturns the mobile phone that belong to the contact person.\r\n\r\n\\return String"},
{text: "NSPerson.GetMrmrs", help: "<b>String GetMrmrs()<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\return String"},
{text: "NSPerson.GetPosition", help: "<b>String GetPosition()<\/b>\n\nThe position. This is a predefined SuperOffice value, different from Title\r\n\r\n\\return String"},
{text: "NSPerson.GetPost1", help: "<b>String GetPost1()<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPerson.GetPost2", help: "<b>String GetPost2()<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPerson.GetPost3", help: "<b>String GetPost3()<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPerson.GetTitle", help: "<b>String GetTitle()<\/b>\n\nTitle\r\n\r\n\\return String"},
{text: "NSPerson.SetActiveErpLinks", help: "<b>Void SetActiveErpLinks(Integer p_0)<\/b>\n\nHow many active ERP links are there for this person?\r\n\r\n\\param p_0 ActiveErpLinks: Integer\r\n\\return Integer"},
{text: "NSPerson.SetActiveInterests", help: "<b>Void SetActiveInterests(Integer p_0)<\/b>\n\nNumber of records in pintr table; select count(*) from pintr pi where pi.person_id = this.person_id == activeInterests is always true\r\n\r\n\\param p_0 ActiveInterests: Integer\r\n\\return Integer"},
{text: "NSPerson.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nId of the item's owner (Associate id)\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSPerson.SetAssociateName", help: "<b>Void SetAssociateName(String p_0)<\/b>\n\nName of the person's owner\r\n\r\n\\param p_0 AssociateName: String\r\n\\return String"},
{text: "NSPerson.SetContactCountryId", help: "<b>Void SetContactCountryId(Integer p_0)<\/b>\n\nThe persons contact country id\r\n\r\n\\param p_0 ContactCountryId: Integer\r\n\\return Integer"},
{text: "NSPerson.SetContactDepartment", help: "<b>Void SetContactDepartment(String p_0)<\/b>\n\nThe persons contact department\r\n\r\n\\param p_0 ContactDepartment: String\r\n\\return String"},
{text: "NSPerson.SetContactFax", help: "<b>Void SetContactFax(String p_0)<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\param p_0 ContactFax: String\r\n\\return String"},
{text: "NSPerson.SetContactFullName", help: "<b>Void SetContactFullName(String p_0)<\/b>\n\n\\param p_0 ContactFullName: String\r\n\\return String"},
{text: "NSPerson.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nOwning contact ID\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSPerson.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nThe persons contact name\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSPerson.SetContactOrgNr", help: "<b>Void SetContactOrgNr(String p_0)<\/b>\n\nThe persons contact organization number\r\n\r\n\\param p_0 ContactOrgNr: String\r\n\\return String"},
{text: "NSPerson.SetContactPhone", help: "<b>Void SetContactPhone(String p_0)<\/b>\n\nReturns the direct phone that belong to the persons contact.\r\n\r\n\\param p_0 ContactPhone: String\r\n\\return String"},
{text: "NSPerson.SetCountryId", help: "<b>Void SetCountryId(Integer p_0)<\/b>\n\nCountry\r\n\r\n\\param p_0 CountryId: Integer\r\n\\return Integer"},
{text: "NSPerson.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nGet the persons full name (internal name used in clients for employees).\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSPerson.SetDirectPhone", help: "<b>Void SetDirectPhone(String p_0)<\/b>\n\nReturns the direct phone that belong to the contact person.\r\n\r\n\\param p_0 DirectPhone: String\r\n\\return String"},
{text: "NSPerson.SetEmail", help: "<b>Void SetEmail(String p_0)<\/b>\n\nReturns the email that belong to the contact person.\r\n\r\n\\param p_0 Email: String\r\n\\return String"},
{text: "NSPerson.SetEmailName", help: "<b>Void SetEmailName(String p_0)<\/b>\n\nVisible field\r\n\r\n\\param p_0 EmailName: String\r\n\\return String"},
{text: "NSPerson.SetFaxPhone", help: "<b>Void SetFaxPhone(String p_0)<\/b>\n\nReturns the fax phone that belong to the contact person.\r\n\r\n\\param p_0 FaxPhone: String\r\n\\return String"},
{text: "NSPerson.SetFirstname", help: "<b>Void SetFirstname(String p_0)<\/b>\n\nFirst name\r\n\r\n\\param p_0 Firstname: String\r\n\\return String"},
{text: "NSPerson.SetFormalName", help: "<b>Void SetFormalName(String p_0)<\/b>\n\nGet formal name for a person, as used in labels. (Full name + person title + academic title)\r\n\r\n\\param p_0 FormalName: String\r\n\\return String"},
{text: "NSPerson.SetFullName", help: "<b>Void SetFullName(String p_0)<\/b>\n\nGet the persons full name (internal name used in clients for employees).\r\n\r\n\\param p_0 FullName: String\r\n\\return String"},
{text: "NSPerson.SetKanafname", help: "<b>Void SetKanafname(String p_0)<\/b>\n\nKana first name, used in Japanese versions only\r\n\r\n\\param p_0 Kanafname: String\r\n\\return String"},
{text: "NSPerson.SetKanalname", help: "<b>Void SetKanalname(String p_0)<\/b>\n\nKana last name, used in Japanese versions only\r\n\r\n\\param p_0 Kanalname: String\r\n\\return String"},
{text: "NSPerson.SetLastname", help: "<b>Void SetLastname(String p_0)<\/b>\n\nLast name\r\n\r\n\\param p_0 Lastname: String\r\n\\return String"},
{text: "NSPerson.SetMiddleName", help: "<b>Void SetMiddleName(String p_0)<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\param p_0 MiddleName: String\r\n\\return String"},
{text: "NSPerson.SetMobilePhone", help: "<b>Void SetMobilePhone(String p_0)<\/b>\n\nReturns the mobile phone that belong to the contact person.\r\n\r\n\\param p_0 MobilePhone: String\r\n\\return String"},
{text: "NSPerson.SetMrmrs", help: "<b>Void SetMrmrs(String p_0)<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\param p_0 Mrmrs: String\r\n\\return String"},
{text: "NSPerson.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSPerson.SetPosition", help: "<b>Void SetPosition(String p_0)<\/b>\n\nThe position. This is a predefined SuperOffice value, different from Title\r\n\r\n\\param p_0 Position: String\r\n\\return String"},
{text: "NSPerson.SetPost1", help: "<b>Void SetPost1(String p_0)<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\param p_0 Post1: String\r\n\\return String"},
{text: "NSPerson.SetPost2", help: "<b>Void SetPost2(String p_0)<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\param p_0 Post2: String\r\n\\return String"},
{text: "NSPerson.SetPost3", help: "<b>Void SetPost3(String p_0)<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\param p_0 Post3: String\r\n\\return String"},
{text: "NSPerson.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nDisplay sort sequence for default sort order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSPerson.SetRetired", help: "<b>Void SetRetired(Integer p_0)<\/b>\n\n1 = the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\param p_0 Retired: Integer\r\n\\return Integer"},
{text: "NSPerson.SetTitle", help: "<b>Void SetTitle(String p_0)<\/b>\n\nTitle\r\n\r\n\\param p_0 Title: String\r\n\\return String"},
{text: "NSPerson.SetUsePersonAddress", help: "<b>Void SetUsePersonAddress(Bool p_0)<\/b>\n\nIf 1, use person's address for mailing instead of company address\r\n\r\n\\param p_0 UsePersonAddress: Bool\r\n\\return Bool"},
{text: "Void.NSPersonAgent", help: "<b>NSPersonAgent<\/b>\n\nCollection of all services that works with Person data."},
{text: "NSPersonAgent.IsNumberValid", help: "<b>Bool IsNumberValid(Integer p_0, String p_1)<\/b>\n\nChecks if the number is unique or required.  The setting is configured from admin under system options.\r\n\r\n\\param p_0 contactId\r\n\\param p_1 number\r\n"},
{text: "NSPersonAgent.NormalizeRanks", help: "<b>Bool NormalizeRanks(Integer p_0)<\/b>\n\nNomralize the ranks for all persons that belong to a contact. This means that the persons will be sorted according to their current rank values, and the ranks will be made monotonically increasing from 1.\r\n\r\n\\param p_0 contactId: Id of contact whose persons are to be rank normalized\r\n\\return The reutrn value is true if the operation suceeded, either because all persons were already normalized, or because normalization was done. It is false if Sentry blocks any required changes.\r\n"},
{text: "NSPersonAgent.SetPersonRank", help: "<b>Bool SetPersonRank(Integer p_0, Integer p_1)<\/b>\n\nDirectly set the rank field of a person record, adjusting all other person records under the same contact as needed.<para\/>This call may affect multiple records, potentially all person records belonging to one contact.<para\/>You must have write access for to affected records for this method to succeed.\r\n\r\n\\param p_0 personId: Id of person to change\r\n\\param p_1 desiredRank: Desired rank to set, legal values are from 1 to the number of person records on this contact. Out of range values will be moved to the closest valid value and processed.\r\n\\return If movement occurred, or the person already had exactly the desired rank value, then the return value will be true. If movement did not occur, for any other reason, the return value is false.\r\n"},
{text: "NSPersonAgent.ChangePersonRank", help: "<b>Integer ChangePersonRank(Integer p_0, Bool p_1)<\/b>\n\nMove one person up or down in the ranking in the Person Archive, if possible.<para\/>The person record that has rank = 1 is the primary contact for a company, and is the one used in situations where no person has been explicitly chosen (such as in selections).<para\/>This method corresponds to the move up\/move down functions in the person archive in the contact panel.<para\/>This method always affects two records.\r\n\r\n\\param p_0 personId: Primary key of person record to move up or down. You must have write access both to this record AND to whatever record is adjacent in the direction you want to move.\r\n\\param p_1 moveUp: If true, the given person is moved to an earlier rank (lower numeric rank value, down to a limit of 1; up in the GUI if sorted by ascending rank). If false, movement is to later priority (higher numeric rank value).\r\n\\return If movement occurred, the return value will be the ID of the OTHER person that got moved. A GUI should switch the positions of the original person ID and this return value.<para\/>If no movement occurred, for any reason,  0 is returned.\r\n"},
{text: "NSPersonAgent.GetAddress", help: "<b>NSAddress GetAddress(Integer p_0)<\/b>\n\nGets the person's localized address.\r\n\r\n\\param p_0 personId: The person id\r\n\\return The address as LocalizedField[][].\r\n"},
{text: "NSPersonAgent.GetAddressByCountry", help: "<b>NSAddress GetAddressByCountry(Integer p_0, Integer p_1)<\/b>\n\nGets the person's localized address.\r\n\r\n\\param p_0 personId: The person id\r\n\\param p_1 countryId\r\n\\return The address as LocalizedField[][].\r\n"},
{text: "NSPersonAgent.GetPhones", help: "<b>NSEntityElement[] GetPhones(Integer p_0)<\/b>\n\nReturning all phones that belong to a person, ordered by the phone type.\r\n\r\n\\param p_0 personId: The person id\r\n\\return An array of Phones\r\n"},
{text: "NSPersonAgent.GetPersonImage", help: "<b>NSImage GetPersonImage(Integer p_0)<\/b>\n\nReturns the person image that is displayed in the CRM application.\r\n\r\n\\param p_0 personId: The person id of the person the image belongs to.\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)\r\n"},
{text: "NSPersonAgent.GetAddress", help: "<b>NSLocalizedField[][] GetAddress(Integer p_0)<\/b>\n\n"},
{text: "NSPersonAgent.GetAddressByCountry", help: "<b>NSLocalizedField[][] GetAddressByCountry(Integer p_0, Integer p_1)<\/b>\n\n"},
{text: "NSPersonAgent.GetMyOwner", help: "<b>NSPerson GetMyOwner()<\/b>\n\nGet the owner of the logged in person.\r\n\r\n\\return Person\r\n"},
{text: "NSPersonAgent.GetOwnerOnPersonId", help: "<b>NSPerson GetOwnerOnPersonId(Integer p_0)<\/b>\n\nGet the owner of the person by id.\r\n\r\n\\param p_0 personId\r\n\\return Person\r\n"},
{text: "NSPersonAgent.GetPerson", help: "<b>NSPerson GetPerson(Integer p_0)<\/b>\n\nGets a Person object.\r\n\r\n\\param p_0 personId: The identifier of the Person object\r\n\\return Person\r\n"},
{text: "NSPersonAgent.GetColleagues", help: "<b>NSPerson[] GetColleagues()<\/b>\n\nGets the persons working in the same company as the logged on user.\r\n\r\n\\return Colleagues.\r\n"},
{text: "NSPersonAgent.GetColleaguesByDepartment", help: "<b>NSPerson[] GetColleaguesByDepartment(Integer p_0)<\/b>\n\nGets the persons working in a specific department in the same company as the logged on user. Departments can be retrieved with the PhoneList.DepartmentList service.\r\n\r\n\\param p_0 departmentId: The department id.\r\n\\return PersonList with colleagues.\r\n"},
{text: "NSPersonAgent.GetColleaguesBySource", help: "<b>NSPerson[] GetColleaguesBySource(Integer p_0, Integer p_1)<\/b>\n\nGets the persons working in the same company as the logged on user. The list of person could be retrieved from the history list, the diary view list, or from all sources.\r\n\r\n\\param p_0 sourceType: The “source” the colleagues should be retrieved from. <see cref=\"AssociateSourceType\"\/> for more information.\r\n\\param p_1 count\r\n\\return Colleagues.\r\n"},
{text: "NSPersonAgent.GetPersonList", help: "<b>NSPerson[] GetPersonList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSPersonAgent.GetPersonsFromContact", help: "<b>NSPerson[] GetPersonsFromContact(Integer p_0)<\/b>\n\nReturns all the persons belonging to a contact.\r\n\r\n\\param p_0 contactId: The project id\r\n\\return The persons belonging to a contact.\r\n"},
{text: "NSPersonAgent.GetPersonsFromProject", help: "<b>NSPerson[] GetPersonsFromProject(Integer p_0)<\/b>\n\nReturns all the persons belonging to a project.\r\n\r\n\\param p_0 projectId: The project id\r\n\\return The persons belonging to a project.\r\n"},
{text: "NSPersonAgent.ChangeCountry", help: "<b>NSPersonEntity ChangeCountry(NSPersonEntity p_0, Integer p_1)<\/b>\n\nChange country regenerates the default values and localized information such as phone number and address format for this entity.\r\n\r\n\\param p_0 personEntity: The PersonEntity to change country on\r\n\\param p_1 toCountryId: The country to switch to\r\n\\return The PersonEntity\r\n"},
{text: "NSPersonAgent.CreateDefaultByContactId", help: "<b>NSPersonEntity CreateDefaultByContactId(Integer p_0)<\/b>\n\nCreates a PersonEntity with default values based on the contactId.\r\n\r\n\\param p_0 contactId: Contact id of the person\r\n"},
{text: "NSPersonAgent.CreateDefaultFromCredential", help: "<b>NSPersonEntity CreateDefaultFromCredential(Integer p_0, String p_1, String p_2, String p_3)<\/b>\n\nCreates a PersonEntity with default values based on the contactId and credentials.\r\n\r\n\\param p_0 contactId: Contact id of the person\r\n\\param p_1 credentialType: Type of credentials, corresponding to name of plugin and type in the credentials table.\r\n\\param p_2 credentialValue: This is the actuall value of the credentials.  This will typically be the password or teh users SID in active directory\r\n\\param p_3 credentialDisplayValue: The value displayed to the user. this will typically be the users login name in active directory.\r\n"},
{text: "NSPersonAgent.CreateDefaultPersonEntity", help: "<b>NSPersonEntity CreateDefaultPersonEntity()<\/b>\n\nLoading default values into a new PersonEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New PersonEntity with default values\r\n"},
{text: "NSPersonAgent.GetMyPerson", help: "<b>NSPersonEntity GetMyPerson()<\/b>\n\nGets the person info belonging to the currently logged on user.\r\n\r\n\\return The PersonEntity\r\n"},
{text: "NSPersonAgent.GetPersonEntity", help: "<b>NSPersonEntity GetPersonEntity(Integer p_0)<\/b>\n\nGets a PersonEntity object.\r\n\r\n\\param p_0 personEntityId: The identifier of the PersonEntity object\r\n\\return PersonEntity\r\n"},
{text: "NSPersonAgent.GetSalesRep", help: "<b>NSPersonEntity GetSalesRep(String p_0, String p_1, String p_2, String p_3, String p_4)<\/b>\n\nReturns the sales representative for an external user. If this method is accessed with anonymous authentication the external user is recognized by contact and name, or by email, or phone number. If the external user is recognized as an CRM5 user (internal or external) the input fields can be left blank.\r\n\r\n\\param p_0 contactName: The company name of the person requesting his sales representative. May be empty if email or phone is provided.\r\n\\param p_1 personFirstname: The firstname of the person requesting his sales representative. May be empty if email or phone is provided.\r\n\\param p_2 personLastname: The lastname of the person requesting his sales representative. May be empty if email or phone is provided.\r\n\\param p_3 emailAddress: The email address of the person requesting his sales representative. May be empty if phone, or contact and person name is provided.\r\n\\param p_4 phoneNumber: The phone number of the person requesting his sales representative. May be empty if email, or contact and person name is provided.\r\n\\return The PersonEntity of the sales rep.\r\n"},
{text: "NSPersonAgent.SavePersonEntity", help: "<b>NSPersonEntity SavePersonEntity(NSPersonEntity p_0)<\/b>\n\nUpdates the existing PersonEntity or creates a new PersonEntity if the id parameter is empty\r\n\r\n\\param p_0 personEntity: The PersonEntity that is saved\r\n\\return New or updated PersonEntity"},
{text: "NSPersonAgent.GetPersonList", help: "<b>NSPersonList[] GetPersonList(Integer[] p_0)<\/b>\n\nGets an array of Person objects.\r\n\r\n\\param p_0 personIds: The identifiers of the Person object\r\n\\return Array of Person objects\r\n"},
{text: "NSPersonAgent.ResolvePersonFromInfo", help: "<b>NSResolvedPerson ResolvePersonFromInfo(Integer p_0, String p_1, String[] p_2, String[] p_3)<\/b>\n\nGet a person from the provided information. If the person does not exist, it will be created on demand.\r\n\r\n\\param p_0 contactId: The contact Id of the contact which the person belongs to. Cannot be 0.\r\n\\param p_1 personName: The full name of the person to be resolved. Optional.\r\n\\param p_2 phoneNumbers: Phone numbers registered on the person. Optional.\r\n\\param p_3 emails: Email-addresses registered on the person. Optional.\r\n\\return The results of the resolve-operation."},
{text: "NSPersonAgent.DeletePersonEntity", help: "<b>Void DeletePersonEntity(Integer p_0)<\/b>\n\nDeletes the PersonEntity\r\n\r\n\\param p_0 personEntityId: The identity of the PersonEntity\r\n"},
{text: "NSPersonAgent.Merge", help: "<b>Void Merge(Integer p_0, Integer p_1, DateTime p_2, Bool p_3, Bool p_4)<\/b>\n\nMerge two persons. The destination person will remain\r\n\r\n\\param p_0 sourcePersonId: The identifier for the person which will be merged into the destination person\r\n\\param p_1 destinationPersonId: The identifier for the person which will remain after the merge\r\n\\param p_2 moveAfterDate: Only merge activites after this date\r\n\\param p_3 deleteSource: If true, the source person will be deleted after the merge. If false, it will have its retired flag set\r\n\\param p_4 replaceEmptyFieldsOnDestination: If true, empty fields on destination will be replaced by values from source.\r\n"},
{text: "NSPersonAgent.Move", help: "<b>Void Move(Integer p_0, Integer p_1, DateTime p_2)<\/b>\n\nMove a person to a specified contact\r\n\r\n\\param p_0 personId: The identifier for the person\r\n\\param p_1 destinationContactId: The identifier for the contact which the person will be moved to\r\n\\param p_2 moveAfterDate: Only move activites after this date\r\n"},
{text: "NSPersonAgent.SavePersonEntity", help: "<b>Void SavePersonEntity(NSPersonEntity p_0)<\/b>\n\nUpdates the existing PersonEntity or creates a new PersonEntity if the id parameter is empty\r\n\r\n\\param p_0 personEntity: The PersonEntity that is saved.\r\n\\return New or updated PersonEntity\r\n"},
{text: "NSPersonAgent.SetPersonImage", help: "<b>Void SetPersonImage(Integer p_0, NSImage p_1)<\/b>\n\nStores the person image that is displayed in the CRM application.\r\n\r\n\\param p_0 personId: The person id of the person the image belongs to.\r\n\\param p_1 image: The image that is stored on the person (System.Drawing.Image)\r\n"},
{text: "Void.NSPersonEntity", help: "<b>NSPersonEntity<\/b>\n\nThe Person Service. The service implements all services working with the Person object."},
{text: "NSPersonEntity.GetIsAssociate", help: "<b>Bool GetIsAssociate()<\/b>\n\nChecks if the person object is an associate. The property is read-only.\r\n\r\n\\return Bool"},
{text: "NSPersonEntity.GetNoMailing", help: "<b>Bool GetNoMailing()<\/b>\n\nSpam filter. Indicates if this person should retrieve advertising.\r\n\r\n\\return Bool"},
{text: "NSPersonEntity.GetRetired", help: "<b>Bool GetRetired()<\/b>\n\nTrue if the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\return Bool"},
{text: "NSPersonEntity.GetUsePersonAddress", help: "<b>Bool GetUsePersonAddress()<\/b>\n\nTrue if the person's address should be used as mailing address, instead of the contact's address.\r\n\r\n\\return Bool"},
{text: "NSPersonEntity.GetBirthDate", help: "<b>DateTime GetBirthDate()<\/b>\n\nThe Person birth date as Date\r\n\r\n\\return DateTime"},
{text: "NSPersonEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered date\r\n\r\n\\return DateTime"},
{text: "NSPersonEntity.GetDbiLastModified", help: "<b>DateTime GetDbiLastModified()<\/b>\n\nWhen the entry was last modified.\r\n\r\n\\return DateTime"},
{text: "NSPersonEntity.GetDbiLastSyncronized", help: "<b>DateTime GetDbiLastSyncronized()<\/b>\n\nLast external syncronization.\r\n\r\n\\return DateTime"},
{text: "NSPersonEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated date\r\n\r\n\\return DateTime"},
{text: "NSPersonEntity.GetActiveErpLinks", help: "<b>Integer GetActiveErpLinks()<\/b>\n\nHow many active ERP links are there for this person?\r\n\r\n\\return Integer"},
{text: "NSPersonEntity.GetActiveInterests", help: "<b>Integer GetActiveInterests()<\/b>\n\nThe number of active interests.\r\n\r\n\\return Integer"},
{text: "NSPersonEntity.GetBlockEmarketing", help: "<b>Integer GetBlockEmarketing()<\/b>\n\nDo not send E-marketing materials to this person\r\n\r\n"},
{text: "NSPersonEntity.GetDbiAgentId", help: "<b>Integer GetDbiAgentId()<\/b>\n\nIntegration agent (eJournal)\r\n\r\n\\return Integer"},
{text: "NSPersonEntity.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSPersonEntity.GetSentInfo", help: "<b>Integer GetSentInfo()<\/b>\n\nHas information on username\/password been sent (ejournal)\r\n\r\n\\return Integer"},
{text: "NSPersonEntity.GetShowContactTickets", help: "<b>Integer GetShowContactTickets()<\/b>\n\nShould tickets related to the company be shown to this person\r\n\r\n\\return Integer"},
{text: "NSPersonEntity.GetSource", help: "<b>Integer GetSource()<\/b>\n\nHow did we get this person? For future integration needs\r\n\r\n\\return Integer"},
{text: "NSPersonEntity.GetExtraFields", help: "<b>Map GetExtraFields()<\/b>\n\n\\return Map"},
{text: "NSPersonEntity.GetUserDefinedFields", help: "<b>Map GetUserDefinedFields()<\/b>\n\n\\return Map"},
{text: "NSPersonEntity.GetAddress", help: "<b>NSAddress GetAddress()<\/b>\n\nStructure holding formatted address data. The layout of the array structure indicates the layout of the localized address.\r\n\r\n\\return Address"},
{text: "NSPersonEntity.GetAssociate", help: "<b>NSAssociate GetAssociate()<\/b>\n\nThe associate owning this person (similar to contact.Associate) - usually blank. Use the Person.Contact.Associate instead.  Intended for use when individual persons are created (i.e. when Person.Contact is blank)\r\n\r\n\\return Associate"},
{text: "NSPersonEntity.GetCorrespondingAssociate", help: "<b>NSAssociate GetCorrespondingAssociate()<\/b>\n\nThe associate corresponding to this person. Will be empty if the person is not a user (internal associate user, external user).\r\n\r\n\\return Associate"},
{text: "NSPersonEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nThe user that created the person object\r\n\r\n\\return Associate"},
{text: "NSPersonEntity.GetSupportAssociate", help: "<b>NSAssociate GetSupportAssociate()<\/b>\n\n\\return Associate"},
{text: "NSPersonEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nThe person that last updated the person object\r\n\r\n\\return Associate"},
{text: "NSPersonEntity.GetBusiness", help: "<b>NSBusiness GetBusiness()<\/b>\n\nPerson's business - usually blank. Use Contact.Business instead. Intended for use when individual persons are created. (i.e. when Person.Contact is blank)\r\n\r\n\\return Business"},
{text: "NSPersonEntity.GetCategory", help: "<b>NSCategory GetCategory()<\/b>\n\nPerson's category. Usually null. Refer to the Contact.Category instead.  Intended for use when individual persons are created. (i.e. when Person.Contact is blank)\r\n\r\n\\return Category"},
{text: "NSPersonEntity.GetContact", help: "<b>NSContact GetContact()<\/b>\n\nThe contact the contact person is registered on. This is required.\r\n\r\n\\return Contact"},
{text: "NSPersonEntity.GetCountry", help: "<b>NSCountry GetCountry()<\/b>\n\nThe country this contact person is located in.\r\n\r\n\\return Country"},
{text: "NSPersonEntity.GetCustomerLanguage", help: "<b>NSCustomerLanguage GetCustomerLanguage()<\/b>\n\n\\return CustomerLanguage"},
{text: "NSPersonEntity.GetChatEmails", help: "<b>NSEntityElement[] GetChatEmails()<\/b>\n\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetEmails", help: "<b>NSEntityElement[] GetEmails()<\/b>\n\nA collection of the person's emails\r\n\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetFaxes", help: "<b>NSEntityElement[] GetFaxes()<\/b>\n\nReturns a collection of fax numbers that belong to the contact person.\r\n\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetInternetPhones", help: "<b>NSEntityElement[] GetInternetPhones()<\/b>\n\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetMobilePhones", help: "<b>NSEntityElement[] GetMobilePhones()<\/b>\n\nReturns a collection of mobile phone numbers that belong to the contact person.\r\n\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetOfficePhones", help: "<b>NSEntityElement[] GetOfficePhones()<\/b>\n\nReturns a collection of office phone numbers that belong to the contact person.\r\n\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetOtherPhones", help: "<b>NSEntityElement[] GetOtherPhones()<\/b>\n\nReturns a collection of pagers that belong to the contact person.\r\n\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetPagers", help: "<b>NSEntityElement[] GetPagers()<\/b>\n\n"},
{text: "NSPersonEntity.GetPrivatePhones", help: "<b>NSEntityElement[] GetPrivatePhones()<\/b>\n\nReturns a collection of phone numbers that belong to the contact person.\r\n\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetUrls", help: "<b>NSEntityElement[] GetUrls()<\/b>\n\nThe urls related to this person.\r\n\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.GetAddress", help: "<b>NSLocalizedField[][] GetAddress()<\/b>\n\n"},
{text: "NSPersonEntity.GetPosition", help: "<b>NSPosition GetPosition()<\/b>\n\nThe position. This is a predefined SuperOffice value, different from Title\r\n\r\n\\return Position"},
{text: "NSPersonEntity.GetInterests", help: "<b>NSSelectableMDOListItem[] GetInterests()<\/b>\n\nThe person's available and selected interests.\r\n\r\n\\return SelectableMDOListItemArray"},
{text: "NSPersonEntity.GetTicketPriority", help: "<b>NSTicketPriority GetTicketPriority()<\/b>\n\n\\return TicketPriority"},
{text: "NSPersonEntity.GetUserInfo", help: "<b>NSUserInfo GetUserInfo()<\/b>\n\nInformation about the user if this person is a user.  If IsAssociate (e.g. is user is true) the UserInfo will be provided.\r\n\r\n\\return UserInfo"},
{text: "NSPersonEntity.GetDbiKey", help: "<b>String GetDbiKey()<\/b>\n\nThe primary key for the integrated entry in the external datasource.\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetFirstname", help: "<b>String GetFirstname()<\/b>\n\nFirst name\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetFormalName", help: "<b>String GetFormalName()<\/b>\n\nGet formal name for a person, as used in labels. (Full name + person title + academic title)\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetFullName", help: "<b>String GetFullName()<\/b>\n\nThe person's full name localized to the current culture\/country.  (internal name used in clients for employees)\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetKanafname", help: "<b>String GetKanafname()<\/b>\n\nKana first name, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetKanalname", help: "<b>String GetKanalname()<\/b>\n\nKana last name, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetLastname", help: "<b>String GetLastname()<\/b>\n\nLast name\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetMiddleName", help: "<b>String GetMiddleName()<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetMrmrs", help: "<b>String GetMrmrs()<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetPersonNumber", help: "<b>String GetPersonNumber()<\/b>\n\nAlphanumeric user field\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetPost1", help: "<b>String GetPost1()<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetPost2", help: "<b>String GetPost2()<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetPost3", help: "<b>String GetPost3()<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetSalutation", help: "<b>String GetSalutation()<\/b>\n\nAcademic title, populated from Salutation list but can be overwritten with anything at all\r\n\r\n\\return String"},
{text: "NSPersonEntity.GetTitle", help: "<b>String GetTitle()<\/b>\n\nTitle\r\n\r\n\\return String"},
{text: "NSPersonEntity.SetActiveErpLinks", help: "<b>Void SetActiveErpLinks(Integer p_0)<\/b>\n\nHow many active ERP links are there for this person?\r\n\r\n\\param p_0 ActiveErpLinks: Integer\r\n\\return Integer"},
{text: "NSPersonEntity.SetActiveInterests", help: "<b>Void SetActiveInterests(Integer p_0)<\/b>\n\nThe number of active interests.\r\n\r\n\\param p_0 ActiveInterests: Integer\r\n\\return Integer"},
{text: "NSPersonEntity.SetAddress", help: "<b>Void SetAddress(NSAddress p_0)<\/b>\n\nStructure holding formatted address data. The layout of the array structure indicates the layout of the localized address.\r\n\r\n\\param p_0 Address: Address\r\n\\return Address"},
{text: "NSPersonEntity.SetAddress", help: "<b>Void SetAddress(NSLocalizedField[][] p_0)<\/b>\n\n"},
{text: "NSPersonEntity.SetAssociate", help: "<b>Void SetAssociate(NSAssociate p_0)<\/b>\n\nThe associate owning this person (similar to contact.Associate) - usually blank. Use the Person.Contact.Associate instead.  Intended for use when individual persons are created (i.e. when Person.Contact is blank)\r\n\r\n\\param p_0 Associate: Associate\r\n\\return Associate"},
{text: "NSPersonEntity.SetBirthDate", help: "<b>Void SetBirthDate(DateTime p_0)<\/b>\n\nThe Person birth date as Date\r\n\r\n\\param p_0 BirthDate: DateTime\r\n\\return DateTime"},
{text: "NSPersonEntity.SetBlockEmarketing", help: "<b>Void SetBlockEmarketing(Integer p_0)<\/b>\n\nDo not send E-marketing materials to this person\r\n\r\n"},
{text: "NSPersonEntity.SetBusiness", help: "<b>Void SetBusiness(NSBusiness p_0)<\/b>\n\nPerson's business - usually blank. Use Contact.Business instead. Intended for use when individual persons are created. (i.e. when Person.Contact is blank)\r\n\r\n\\param p_0 Business: Business\r\n\\return Business"},
{text: "NSPersonEntity.SetCategory", help: "<b>Void SetCategory(NSCategory p_0)<\/b>\n\nPerson's category. Usually null. Refer to the Contact.Category instead.  Intended for use when individual persons are created. (i.e. when Person.Contact is blank)\r\n\r\n\\param p_0 Category: Category\r\n\\return Category"},
{text: "NSPersonEntity.SetChatEmails", help: "<b>Void SetChatEmails(NSEntityElement[] p_0)<\/b>\n\n\\param p_0 ChatEmails: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetContact", help: "<b>Void SetContact(NSContact p_0)<\/b>\n\nThe contact the contact person is registered on. This is required.\r\n\r\n\\param p_0 Contact: Contact\r\n\\return Contact"},
{text: "NSPersonEntity.SetCorrespondingAssociate", help: "<b>Void SetCorrespondingAssociate(NSAssociate p_0)<\/b>\n\nThe associate corresponding to this person. Will be empty if the person is not a user (internal associate user, external user).\r\n\r\n\\param p_0 CorrespondingAssociate: Associate\r\n\\return Associate"},
{text: "NSPersonEntity.SetCountry", help: "<b>Void SetCountry(NSCountry p_0)<\/b>\n\nThe country this contact person is located in.\r\n\r\n\\param p_0 Country: Country\r\n\\return Country"},
{text: "NSPersonEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nThe user that created the person object\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSPersonEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered date\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSPersonEntity.SetCustomerLanguage", help: "<b>Void SetCustomerLanguage(NSCustomerLanguage p_0)<\/b>\n\n\\param p_0 CustomerLanguage: CustomerLanguage\r\n\\return CustomerLanguage"},
{text: "NSPersonEntity.SetDbiAgentId", help: "<b>Void SetDbiAgentId(Integer p_0)<\/b>\n\nIntegration agent (eJournal)\r\n\r\n\\param p_0 DbiAgentId: Integer\r\n\\return Integer"},
{text: "NSPersonEntity.SetDbiKey", help: "<b>Void SetDbiKey(String p_0)<\/b>\n\nThe primary key for the integrated entry in the external datasource.\r\n\r\n\\param p_0 DbiKey: String\r\n\\return String"},
{text: "NSPersonEntity.SetDbiLastModified", help: "<b>Void SetDbiLastModified(DateTime p_0)<\/b>\n\nWhen the entry was last modified.\r\n\r\n\\param p_0 DbiLastModified: DateTime\r\n\\return DateTime"},
{text: "NSPersonEntity.SetDbiLastSyncronized", help: "<b>Void SetDbiLastSyncronized(DateTime p_0)<\/b>\n\nLast external syncronization.\r\n\r\n\\param p_0 DbiLastSyncronized: DateTime\r\n\\return DateTime"},
{text: "NSPersonEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSPersonEntity.SetEmails", help: "<b>Void SetEmails(NSEntityElement[] p_0)<\/b>\n\nA collection of the person's emails\r\n\r\n\\param p_0 Emails: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetExtraFields", help: "<b>Void SetExtraFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSPersonEntity.SetFaxes", help: "<b>Void SetFaxes(NSEntityElement[] p_0)<\/b>\n\nReturns a collection of fax numbers that belong to the contact person.\r\n\r\n\\param p_0 Faxes: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetFirstname", help: "<b>Void SetFirstname(String p_0)<\/b>\n\nFirst name\r\n\r\n\\param p_0 Firstname: String\r\n\\return String"},
{text: "NSPersonEntity.SetFormalName", help: "<b>Void SetFormalName(String p_0)<\/b>\n\nGet formal name for a person, as used in labels. (Full name + person title + academic title)\r\n\r\n\\param p_0 FormalName: String\r\n\\return String"},
{text: "NSPersonEntity.SetFullName", help: "<b>Void SetFullName(String p_0)<\/b>\n\nThe person's full name localized to the current culture\/country.  (internal name used in clients for employees)\r\n\r\n\\param p_0 FullName: String\r\n\\return String"},
{text: "NSPersonEntity.SetInterests", help: "<b>Void SetInterests(NSSelectableMDOListItem[] p_0)<\/b>\n\nThe person's available and selected interests.\r\n\r\n\\param p_0 Interests: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSPersonEntity.SetInternetPhones", help: "<b>Void SetInternetPhones(NSEntityElement[] p_0)<\/b>\n\n\\param p_0 InternetPhones: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetIsAssociate", help: "<b>Void SetIsAssociate(Bool p_0)<\/b>\n\nChecks if the person object is an associate. The property is read-only.\r\n\r\n\\param p_0 IsAssociate: Bool\r\n\\return Bool"},
{text: "NSPersonEntity.SetKanafname", help: "<b>Void SetKanafname(String p_0)<\/b>\n\nKana first name, used in Japanese versions only\r\n\r\n\\param p_0 Kanafname: String\r\n\\return String"},
{text: "NSPersonEntity.SetKanalname", help: "<b>Void SetKanalname(String p_0)<\/b>\n\nKana last name, used in Japanese versions only\r\n\r\n\\param p_0 Kanalname: String\r\n\\return String"},
{text: "NSPersonEntity.SetLastname", help: "<b>Void SetLastname(String p_0)<\/b>\n\nLast name\r\n\r\n\\param p_0 Lastname: String\r\n\\return String"},
{text: "NSPersonEntity.SetMiddleName", help: "<b>Void SetMiddleName(String p_0)<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\param p_0 MiddleName: String\r\n\\return String"},
{text: "NSPersonEntity.SetMobilePhones", help: "<b>Void SetMobilePhones(NSEntityElement[] p_0)<\/b>\n\nReturns a collection of mobile phone numbers that belong to the contact person.\r\n\r\n\\param p_0 MobilePhones: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetMrmrs", help: "<b>Void SetMrmrs(String p_0)<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\param p_0 Mrmrs: String\r\n\\return String"},
{text: "NSPersonEntity.SetNoMailing", help: "<b>Void SetNoMailing(Bool p_0)<\/b>\n\nSpam filter. Indicates if this person should retrieve advertising.\r\n\r\n\\param p_0 NoMailing: Bool\r\n\\return Bool"},
{text: "NSPersonEntity.SetOfficePhones", help: "<b>Void SetOfficePhones(NSEntityElement[] p_0)<\/b>\n\nReturns a collection of office phone numbers that belong to the contact person.\r\n\r\n\\param p_0 OfficePhones: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetOtherPhones", help: "<b>Void SetOtherPhones(NSEntityElement[] p_0)<\/b>\n\nReturns a collection of pagers that belong to the contact person.\r\n\r\n\\param p_0 OtherPhones: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetPagers", help: "<b>Void SetPagers(NSEntityElement[] p_0)<\/b>\n\n"},
{text: "NSPersonEntity.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSPersonEntity.SetPersonNumber", help: "<b>Void SetPersonNumber(String p_0)<\/b>\n\nAlphanumeric user field\r\n\r\n\\param p_0 PersonNumber: String\r\n\\return String"},
{text: "NSPersonEntity.SetPosition", help: "<b>Void SetPosition(NSPosition p_0)<\/b>\n\nThe position. This is a predefined SuperOffice value, different from Title\r\n\r\n\\param p_0 Position: Position\r\n\\return Position"},
{text: "NSPersonEntity.SetPost1", help: "<b>Void SetPost1(String p_0)<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\param p_0 Post1: String\r\n\\return String"},
{text: "NSPersonEntity.SetPost2", help: "<b>Void SetPost2(String p_0)<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\param p_0 Post2: String\r\n\\return String"},
{text: "NSPersonEntity.SetPost3", help: "<b>Void SetPost3(String p_0)<\/b>\n\nPostal address, used in Japanese versions only\r\n\r\n\\param p_0 Post3: String\r\n\\return String"},
{text: "NSPersonEntity.SetPrivatePhones", help: "<b>Void SetPrivatePhones(NSEntityElement[] p_0)<\/b>\n\nReturns a collection of phone numbers that belong to the contact person.\r\n\r\n\\param p_0 PrivatePhones: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetRetired", help: "<b>Void SetRetired(Bool p_0)<\/b>\n\nTrue if the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\param p_0 Retired: Bool\r\n\\return Bool"},
{text: "NSPersonEntity.SetSalutation", help: "<b>Void SetSalutation(String p_0)<\/b>\n\nAcademic title, populated from Salutation list but can be overwritten with anything at all\r\n\r\n\\param p_0 Salutation: String\r\n\\return String"},
{text: "NSPersonEntity.SetSentInfo", help: "<b>Void SetSentInfo(Integer p_0)<\/b>\n\nHas information on username\/password been sent (ejournal)\r\n\r\n\\param p_0 SentInfo: Integer\r\n\\return Integer"},
{text: "NSPersonEntity.SetShowContactTickets", help: "<b>Void SetShowContactTickets(Integer p_0)<\/b>\n\nShould tickets related to the company be shown to this person\r\n\r\n\\param p_0 ShowContactTickets: Integer\r\n\\return Integer"},
{text: "NSPersonEntity.SetSource", help: "<b>Void SetSource(Integer p_0)<\/b>\n\nHow did we get this person? For future integration needs\r\n\r\n\\param p_0 Source: Integer\r\n\\return Integer"},
{text: "NSPersonEntity.SetSupportAssociate", help: "<b>Void SetSupportAssociate(NSAssociate p_0)<\/b>\n\n\\param p_0 SupportAssociate: Associate\r\n\\return Associate"},
{text: "NSPersonEntity.SetTicketPriority", help: "<b>Void SetTicketPriority(NSTicketPriority p_0)<\/b>\n\n\\param p_0 TicketPriority: TicketPriority\r\n\\return TicketPriority"},
{text: "NSPersonEntity.SetTitle", help: "<b>Void SetTitle(String p_0)<\/b>\n\nTitle\r\n\r\n\\param p_0 Title: String\r\n\\return String"},
{text: "NSPersonEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nThe person that last updated the person object\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSPersonEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated date\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSPersonEntity.SetUrls", help: "<b>Void SetUrls(NSEntityElement[] p_0)<\/b>\n\nThe urls related to this person.\r\n\r\n\\param p_0 Urls: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSPersonEntity.SetUsePersonAddress", help: "<b>Void SetUsePersonAddress(Bool p_0)<\/b>\n\nTrue if the person's address should be used as mailing address, instead of the contact's address.\r\n\r\n\\param p_0 UsePersonAddress: Bool\r\n\\return Bool"},
{text: "NSPersonEntity.SetUserDefinedFields", help: "<b>Void SetUserDefinedFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSPersonEntity.SetUserInfo", help: "<b>Void SetUserInfo(NSUserInfo p_0)<\/b>\n\nInformation about the user if this person is a user.  If IsAssociate (e.g. is user is true) the UserInfo will be provided.\r\n\r\n\\param p_0 UserInfo: UserInfo\r\n\\return UserInfo"},
{text: "Void.NSPhoneListAgent", help: "<b>NSPhoneListAgent<\/b>\n\nCollection of all services for searching for person or contact (company) phone numbers."},
{text: "NSPhoneListAgent.AddToFavorites", help: "<b>Integer AddToFavorites(Integer p_0)<\/b>\n\nAdds a new contact to the history\/favorites. Returns the rank of the new history item. If the contact already existed in the history, it isn't added but the rank is updated.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\return The rank of the history item\r\n"},
{text: "NSPhoneListAgent.GetContactPhones", help: "<b>NSPhoneListItem[] GetContactPhones(Integer p_0)<\/b>\n\nReturns an array of phone list items for all the persons belonging to a contact (company). The in-parameter must be a valid contact-id.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\return The contacts phone list.\r\n"},
{text: "NSPhoneListAgent.GetDepartmentPhones", help: "<b>NSPhoneListItem[] GetDepartmentPhones(Integer p_0)<\/b>\n\nReturns an array of phone list items with the in-parameter as restriction. The in-parameter must be a valid department id (UserGroupId).\r\n\r\n\\param p_0 departmentId: The department to get the phone list for\r\n\\return The department phone list\r\n"},
{text: "NSPhoneListAgent.GetFavoritesPhones", help: "<b>NSPhoneListItem[] GetFavoritesPhones()<\/b>\n\nReturns an array of phone list items with the Contacts in the users favorites dropdown list.\r\n\r\n\\return The favorite contact phone list\r\n"},
{text: "NSPhoneListAgent.Search", help: "<b>NSPhoneListItem[] Search(String p_0)<\/b>\n\nSearching the phone list. Using default search preferences or the preferences already set by the PhoneListPreferences Service\r\n\r\n\\param p_0 searchString: The search string\r\n\\return The resulting phone list\r\n"},
{text: "NSPhoneListAgent.SearchWithPreferences", help: "<b>NSPhoneListItem[] SearchWithPreferences(String p_0, NSPhoneListPreferences p_1)<\/b>\n\nSearching the phone list. Search is based on the supplied preferences.\r\n\r\n\\param p_0 searchString: The search string.\r\n\\param p_1 preferences: The search preferences\r\n\\return The resulting phone list.\r\n"},
{text: "NSPhoneListAgent.GetPreferences", help: "<b>NSPhoneListPreferences GetPreferences()<\/b>\n\nGetting Phone List Preferences from the CRM 5 user preferences\r\n\r\n\\return The Phone List Preferences\r\n"},
{text: "NSPhoneListAgent.SetPreferences", help: "<b>Void SetPreferences(NSPhoneListPreferences p_0)<\/b>\n\nSetting Phone List Preferences to the CRM 5 user preferences\r\n\r\n\\param p_0 preferences: The preference that is set as user preferences\r\n"},
{text: "Void.NSPhoneListItem", help: "<b>NSPhoneListItem<\/b>\n\n"},
{text: "NSPhoneListItem.GetId", help: "<b>Integer GetId()<\/b>\n\nThe contact or person's id\r\n\r\n\\return Integer"},
{text: "NSPhoneListItem.GetName", help: "<b>String GetName()<\/b>\n\nThe contact or person's name\r\n\r\n\\return String"},
{text: "NSPhoneListItem.GetPersonCellPhone", help: "<b>String GetPersonCellPhone()<\/b>\n\nPerson Cell Phone\r\n\r\n\\return String"},
{text: "NSPhoneListItem.GetPersonDirectPhone", help: "<b>String GetPersonDirectPhone()<\/b>\n\nPerson Direct Phone\r\n\r\n\\return String"},
{text: "NSPhoneListItem.GetPersonEmail", help: "<b>String GetPersonEmail()<\/b>\n\nThe address itself\r\n\r\n\\return String"},
{text: "NSPhoneListItem.GetPersonFaxNumber", help: "<b>String GetPersonFaxNumber()<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\return String"},
{text: "NSPhoneListItem.GetPersonPagerNumber", help: "<b>String GetPersonPagerNumber()<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\return String"},
{text: "NSPhoneListItem.GetPersonPrivatePhone", help: "<b>String GetPersonPrivatePhone()<\/b>\n\nPerson Private Phone\r\n\r\n\\return String"},
{text: "NSPhoneListItem.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSPhoneListItem.GetUniqueId", help: "<b>String GetUniqueId()<\/b>\n\nProperty setting a unique id indicating if this is a person or contact\r\n\r\n\\return String"},
{text: "NSPhoneListItem.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nThe contact or person's id\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSPhoneListItem.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe contact or person's name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSPhoneListItem.SetPersonCellPhone", help: "<b>Void SetPersonCellPhone(String p_0)<\/b>\n\nPerson Cell Phone\r\n\r\n\\param p_0 PersonCellPhone: String\r\n\\return String"},
{text: "NSPhoneListItem.SetPersonDirectPhone", help: "<b>Void SetPersonDirectPhone(String p_0)<\/b>\n\nPerson Direct Phone\r\n\r\n\\param p_0 PersonDirectPhone: String\r\n\\return String"},
{text: "NSPhoneListItem.SetPersonEmail", help: "<b>Void SetPersonEmail(String p_0)<\/b>\n\nThe address itself\r\n\r\n\\param p_0 PersonEmail: String\r\n\\return String"},
{text: "NSPhoneListItem.SetPersonFaxNumber", help: "<b>Void SetPersonFaxNumber(String p_0)<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\param p_0 PersonFaxNumber: String\r\n\\return String"},
{text: "NSPhoneListItem.SetPersonPagerNumber", help: "<b>Void SetPersonPagerNumber(String p_0)<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\param p_0 PersonPagerNumber: String\r\n\\return String"},
{text: "NSPhoneListItem.SetPersonPrivatePhone", help: "<b>Void SetPersonPrivatePhone(String p_0)<\/b>\n\nPerson Private Phone\r\n\r\n\\param p_0 PersonPrivatePhone: String\r\n\\return String"},
{text: "NSPhoneListItem.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSPhoneListItem.SetUniqueId", help: "<b>Void SetUniqueId(String p_0)<\/b>\n\nProperty setting a unique id indicating if this is a person or contact\r\n\r\n\\param p_0 UniqueId: String\r\n\\return String"},
{text: "Void.NSPhoneListPreferences", help: "<b>NSPhoneListPreferences<\/b>\n\nSearch preferences for a phone list search"},
{text: "NSPhoneListPreferences.GetSearchCompany", help: "<b>Bool GetSearchCompany()<\/b>\n\nTrue if you want to search for Companies by their name.\r\n\r\n\\return Bool"},
{text: "NSPhoneListPreferences.GetSearchDepartment", help: "<b>Bool GetSearchDepartment()<\/b>\n\nTrue if you want to search for Departments where your colleagues work.\r\n\r\n\\return Bool"},
{text: "NSPhoneListPreferences.GetSearchFirstname", help: "<b>Bool GetSearchFirstname()<\/b>\n\nTrue if you want to search for Persons by their firstname.\r\n\r\n\\return Bool"},
{text: "NSPhoneListPreferences.GetSearchLastname", help: "<b>Bool GetSearchLastname()<\/b>\n\nTrue if you want to search for Persons by their lastname.\r\n\r\n\\return Bool"},
{text: "NSPhoneListPreferences.GetSearchModeCompany", help: "<b>Integer GetSearchModeCompany()<\/b>\n\nThe Company name search type, e.g. BeginsWith, Contains, Endswith, Matches\r\n\r\n\\return Integer"},
{text: "NSPhoneListPreferences.GetSearchModeDepartment", help: "<b>Integer GetSearchModeDepartment()<\/b>\n\nThe Department search type, e.g. BeginsWith, Contains, Endswith, Matches\r\n\r\n\\return Integer"},
{text: "NSPhoneListPreferences.GetSearchModeFirstname", help: "<b>Integer GetSearchModeFirstname()<\/b>\n\nThe firstname search type, e.g. BeginsWith, Contains, Endswith, Matches\r\n\r\n\\return Integer"},
{text: "NSPhoneListPreferences.GetSearchModeLastname", help: "<b>Integer GetSearchModeLastname()<\/b>\n\nThe lastname search type, e.g. BeginsWith, Contains, Endswith, Matches\r\n\r\n\\return Integer"},
{text: "NSPhoneListPreferences.SetSearchCompany", help: "<b>Void SetSearchCompany(Bool p_0)<\/b>\n\nTrue if you want to search for Companies by their name.\r\n\r\n\\param p_0 SearchCompany: Bool\r\n\\return Bool"},
{text: "NSPhoneListPreferences.SetSearchDepartment", help: "<b>Void SetSearchDepartment(Bool p_0)<\/b>\n\nTrue if you want to search for Departments where your colleagues work.\r\n\r\n\\param p_0 SearchDepartment: Bool\r\n\\return Bool"},
{text: "NSPhoneListPreferences.SetSearchFirstname", help: "<b>Void SetSearchFirstname(Bool p_0)<\/b>\n\nTrue if you want to search for Persons by their firstname.\r\n\r\n\\param p_0 SearchFirstname: Bool\r\n\\return Bool"},
{text: "NSPhoneListPreferences.SetSearchLastname", help: "<b>Void SetSearchLastname(Bool p_0)<\/b>\n\nTrue if you want to search for Persons by their lastname.\r\n\r\n\\param p_0 SearchLastname: Bool\r\n\\return Bool"},
{text: "NSPhoneListPreferences.SetSearchModeCompany", help: "<b>Void SetSearchModeCompany(Integer p_0)<\/b>\n\nThe Company name search type, e.g. BeginsWith, Contains, Endswith, Matches\r\n\r\n\\param p_0 SearchModeCompany: Integer\r\n\\return Integer"},
{text: "NSPhoneListPreferences.SetSearchModeDepartment", help: "<b>Void SetSearchModeDepartment(Integer p_0)<\/b>\n\nThe Department search type, e.g. BeginsWith, Contains, Endswith, Matches\r\n\r\n\\param p_0 SearchModeDepartment: Integer\r\n\\return Integer"},
{text: "NSPhoneListPreferences.SetSearchModeFirstname", help: "<b>Void SetSearchModeFirstname(Integer p_0)<\/b>\n\nThe firstname search type, e.g. BeginsWith, Contains, Endswith, Matches\r\n\r\n\\param p_0 SearchModeFirstname: Integer\r\n\\return Integer"},
{text: "NSPhoneListPreferences.SetSearchModeLastname", help: "<b>Void SetSearchModeLastname(Integer p_0)<\/b>\n\nThe lastname search type, e.g. BeginsWith, Contains, Endswith, Matches\r\n\r\n\\param p_0 SearchModeLastname: Integer\r\n\\return Integer"},
{text: "Void.NSPluginResponse", help: "<b>NSPluginResponse<\/b>\n\nPluginResponse exists to be able to respond with more than just a true\/false, but also an explanation. Such an explanation can be displayed on for instance a disabled “Place Order” button."},
{text: "NSPluginResponse.GetIsOk", help: "<b>Bool GetIsOk()<\/b>\n\nAnswer to the question \/ An indication if the operation went well.\r\n\r\n\\return Bool"},
{text: "NSPluginResponse.GetChanges", help: "<b>NSChangedData GetChanges()<\/b>\n\nTablename\/recordid of data changed by this method, that the client may need to reload\r\n\r\n\\return ChangedData"},
{text: "NSPluginResponse.GetErrorCode", help: "<b>String GetErrorCode()<\/b>\n\nAn error code, if available.\r\n\r\n\\return String"},
{text: "NSPluginResponse.GetTechExplanation", help: "<b>String GetTechExplanation()<\/b>\n\nAlways in English\r\n\r\n\\return String"},
{text: "NSPluginResponse.GetUserExplanation", help: "<b>String GetUserExplanation()<\/b>\n\nA localized explanation to the answer.\r\n\r\n\\return String"},
{text: "NSPluginResponse.SetChanges", help: "<b>Void SetChanges(NSChangedData p_0)<\/b>\n\nTablename\/recordid of data changed by this method, that the client may need to reload\r\n\r\n\\param p_0 Changes: ChangedData\r\n\\return ChangedData"},
{text: "NSPluginResponse.SetErrorCode", help: "<b>Void SetErrorCode(String p_0)<\/b>\n\nAn error code, if available.\r\n\r\n\\param p_0 ErrorCode: String\r\n\\return String"},
{text: "NSPluginResponse.SetIsOk", help: "<b>Void SetIsOk(Bool p_0)<\/b>\n\nAnswer to the question \/ An indication if the operation went well.\r\n\r\n\\param p_0 IsOk: Bool\r\n\\return Bool"},
{text: "NSPluginResponse.SetTechExplanation", help: "<b>Void SetTechExplanation(String p_0)<\/b>\n\nAlways in English\r\n\r\n\\param p_0 TechExplanation: String\r\n\\return String"},
{text: "NSPluginResponse.SetUserExplanation", help: "<b>Void SetUserExplanation(String p_0)<\/b>\n\nA localized explanation to the answer.\r\n\r\n\\param p_0 UserExplanation: String\r\n\\return String"},
{text: "Void.NSPluginUrlResponse", help: "<b>NSPluginUrlResponse<\/b>\n\nPluginUrlResponse exists to be able to respond with more than just a true\/false, but also an explanation. Such an explanation can be displayed on for instance a disabled “Place Order” button. In addition, an URL can be returned, which the GUI should navigate to\/display if it is non-blank. The URL can be an SoProtocol or http(s)"},
{text: "NSPluginUrlResponse.GetIsOk", help: "<b>Bool GetIsOk()<\/b>\n\nAnswer to the question \/ An indication if the operation went well.\r\n\r\n\\return Bool"},
{text: "NSPluginUrlResponse.GetChanges", help: "<b>NSChangedData GetChanges()<\/b>\n\nTablename\/recordid of data changed by this method, that the client may need to reload\r\n\r\n\\return ChangedData"},
{text: "NSPluginUrlResponse.GetErrorCode", help: "<b>String GetErrorCode()<\/b>\n\nAn error code, if available.\r\n\r\n\\return String"},
{text: "NSPluginUrlResponse.GetTechExplanation", help: "<b>String GetTechExplanation()<\/b>\n\nAlways in English\r\n\r\n\\return String"},
{text: "NSPluginUrlResponse.GetUrl", help: "<b>String GetUrl()<\/b>\n\nUrl that the GUI should navigato to\/open, if non-blank. The GUI cannot enforce any rules subsequent to opening the requested url.\r\n\r\n\\return String"},
{text: "NSPluginUrlResponse.GetUserExplanation", help: "<b>String GetUserExplanation()<\/b>\n\nA localized explanation to the answer.\r\n\r\n\\return String"},
{text: "NSPluginUrlResponse.SetChanges", help: "<b>Void SetChanges(NSChangedData p_0)<\/b>\n\nTablename\/recordid of data changed by this method, that the client may need to reload\r\n\r\n\\param p_0 Changes: ChangedData\r\n\\return ChangedData"},
{text: "NSPluginUrlResponse.SetErrorCode", help: "<b>Void SetErrorCode(String p_0)<\/b>\n\nAn error code, if available.\r\n\r\n\\param p_0 ErrorCode: String\r\n\\return String"},
{text: "NSPluginUrlResponse.SetIsOk", help: "<b>Void SetIsOk(Bool p_0)<\/b>\n\nAnswer to the question \/ An indication if the operation went well.\r\n\r\n\\param p_0 IsOk: Bool\r\n\\return Bool"},
{text: "NSPluginUrlResponse.SetTechExplanation", help: "<b>Void SetTechExplanation(String p_0)<\/b>\n\nAlways in English\r\n\r\n\\param p_0 TechExplanation: String\r\n\\return String"},
{text: "NSPluginUrlResponse.SetUrl", help: "<b>Void SetUrl(String p_0)<\/b>\n\nUrl that the GUI should navigato to\/open, if non-blank. The GUI cannot enforce any rules subsequent to opening the requested url.\r\n\r\n\\param p_0 Url: String\r\n\\return String"},
{text: "NSPluginUrlResponse.SetUserExplanation", help: "<b>Void SetUserExplanation(String p_0)<\/b>\n\nA localized explanation to the answer.\r\n\r\n\\param p_0 UserExplanation: String\r\n\\return String"},
{text: "Void.NSPocketAgent", help: "<b>NSPocketAgent<\/b>\n\nAgent with Pocket specific functionality"},
{text: "NSPocketAgent.GetPocketStartupData", help: "<b>NSPocketStartupData GetPocketStartupData(String[] p_0)<\/b>\n\n\\param p_0 tables: Tables to check for license\r\n\\return Startup data for pocket"},
{text: "Void.NSPocketStartupData", help: "<b>NSPocketStartupData<\/b>\n\nThe Pocket Service. The service implements pocket specific stuff, like consolidated post-login stuff."},
{text: "NSPocketStartupData.GetNotificationsCount", help: "<b>Integer GetNotificationsCount()<\/b>\n\nNumber of new invitations\r\n\r\n\\return Integer"},
{text: "NSPocketStartupData.GetOverdueSalesCount", help: "<b>Integer GetOverdueSalesCount()<\/b>\n\nNumber of overdued sales for current user\r\n\r\n\\return Integer"},
{text: "NSPocketStartupData.GetTableRights", help: "<b>NSETableRight[] GetTableRights()<\/b>\n\nList of tablerights for logged in user, in the same order as the Tables array parameter\r\n\r\n\\return ETableRightArray"},
{text: "NSPocketStartupData.GetPocketPreferences", help: "<b>NSPreference[] GetPocketPreferences()<\/b>\n\nAll Pocket specific preferences, including WebPanels defined by the user in Pocket\r\n\r\n\\return PreferenceArray"},
{text: "NSPocketStartupData.GetBaseLocaleTimeZoneData", help: "<b>NSTimeZoneData GetBaseLocaleTimeZoneData()<\/b>\n\n\\return TimeZoneData"},
{text: "NSPocketStartupData.GetPhoneLocaleTimeZoneData", help: "<b>NSTimeZoneData GetPhoneLocaleTimeZoneData()<\/b>\n\n\\return TimeZoneData"},
{text: "NSPocketStartupData.GetSystemWebPanels", help: "<b>NSWebPanelEntity[] GetSystemWebPanels()<\/b>\n\nWeb panels defined in Admin client, set to be shown in Pocket client\r\n\r\n\\return WebPanelEntityArray"},
{text: "NSPocketStartupData.SetBaseLocaleTimeZoneData", help: "<b>Void SetBaseLocaleTimeZoneData(NSTimeZoneData p_0)<\/b>\n\n\\param p_0 BaseLocaleTimeZoneData: TimeZoneData\r\n\\return TimeZoneData"},
{text: "NSPocketStartupData.SetNotificationsCount", help: "<b>Void SetNotificationsCount(Integer p_0)<\/b>\n\nNumber of new invitations\r\n\r\n\\param p_0 NotificationsCount: Integer\r\n\\return Integer"},
{text: "NSPocketStartupData.SetOverdueSalesCount", help: "<b>Void SetOverdueSalesCount(Integer p_0)<\/b>\n\nNumber of overdued sales for current user\r\n\r\n\\param p_0 OverdueSalesCount: Integer\r\n\\return Integer"},
{text: "NSPocketStartupData.SetPhoneLocaleTimeZoneData", help: "<b>Void SetPhoneLocaleTimeZoneData(NSTimeZoneData p_0)<\/b>\n\n\\param p_0 PhoneLocaleTimeZoneData: TimeZoneData\r\n\\return TimeZoneData"},
{text: "NSPocketStartupData.SetPocketPreferences", help: "<b>Void SetPocketPreferences(NSPreference[] p_0)<\/b>\n\nAll Pocket specific preferences, including WebPanels defined by the user in Pocket\r\n\r\n\\param p_0 PocketPreferences: PreferenceArray\r\n\\return PreferenceArray"},
{text: "NSPocketStartupData.SetSystemWebPanels", help: "<b>Void SetSystemWebPanels(NSWebPanelEntity[] p_0)<\/b>\n\nWeb panels defined in Admin client, set to be shown in Pocket client\r\n\r\n\\param p_0 SystemWebPanels: WebPanelEntityArray\r\n\\return WebPanelEntityArray"},
{text: "NSPocketStartupData.SetTableRights", help: "<b>Void SetTableRights(NSETableRight[] p_0)<\/b>\n\nList of tablerights for logged in user, in the same order as the Tables array parameter\r\n\r\n\\param p_0 TableRights: ETableRightArray\r\n\\return ETableRightArray"},
{text: "Void.NSPosition", help: "<b>NSPosition<\/b>\n\n"},
{text: "NSPosition.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSPosition.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSPosition.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSPosition.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSPosition.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSPosition.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSPreference", help: "<b>NSPreference<\/b>\n\nOne preference item, which contains a specification (section\/key), the raw string value, and the level at which this value was found."},
{text: "NSPreference.GetDisplayType", help: "<b>Integer GetDisplayType()<\/b>\n\nDisplay type, populated when asked for.\r\n\r\n\\return Integer"},
{text: "NSPreference.GetLevel", help: "<b>Integer GetLevel()<\/b>\n\nPreference level, using the standard enumerated type. Undefined is returned for preferences that do not have a current setting.\r\n\r\n"},
{text: "NSPreference.GetPrefDescId", help: "<b>Integer GetPrefDescId()<\/b>\n\nThe id of the prefdesc this preference is connected to\r\n\r\n\\return Integer"},
{text: "NSPreference.GetTargetId", help: "<b>Integer GetTargetId()<\/b>\n\nThe id of the target row. The table it points at is specified by the preference type.\r\n\r\n\\return Integer"},
{text: "NSPreference.GetUserPreferenceId", help: "<b>Integer GetUserPreferenceId()<\/b>\n\nThe id of the user preference\r\n\r\n\\return Integer"},
{text: "NSPreference.GetLevel", help: "<b>NSPreferenceLevel GetLevel()<\/b>\n\nPreference level, using the standard enumerated type. Undefined is returned for preferences that do not have a current setting.\r\n\r\n\\return PreferenceLevel"},
{text: "NSPreference.GetSpecification", help: "<b>NSPreferenceSpec GetSpecification()<\/b>\n\nPreference specification, consisting of the section name and key name\r\n\r\n\\return PreferenceSpec"},
{text: "NSPreference.GetTabOrder", help: "<b>NSTabOrder GetTabOrder()<\/b>\n\n\\return TabOrder"},
{text: "NSPreference.GetDisplayTooltip", help: "<b>String GetDisplayTooltip()<\/b>\n\nDisplay tooltip, populated when asked for. Suitable for binding display-datasource in lists, etc. Formatted using CultureDataFormatter.\r\n\r\n\\return String"},
{text: "NSPreference.GetDisplayValue", help: "<b>String GetDisplayValue()<\/b>\n\nDisplay value, populated when asked for. Suitable for binding display-datasource in lists, etc. Formatted using CultureDataFormatter.\r\n\r\n\\return String"},
{text: "NSPreference.GetRawValue", help: "<b>String GetRawValue()<\/b>\n\nPreference value\r\n\r\n\\return String"},
{text: "NSPreference.GetTableName", help: "<b>String GetTableName()<\/b>\n\nFor DisplayType=PrefDescValueType.ListTableRef, TableName will contain the name of the table which the value reference to.\r\n\r\n\\return String"},
{text: "NSPreference.SetDisplayTooltip", help: "<b>Void SetDisplayTooltip(String p_0)<\/b>\n\nDisplay tooltip, populated when asked for. Suitable for binding display-datasource in lists, etc. Formatted using CultureDataFormatter.\r\n\r\n\\param p_0 DisplayTooltip: String\r\n\\return String"},
{text: "NSPreference.SetDisplayType", help: "<b>Void SetDisplayType(Integer p_0)<\/b>\n\nDisplay type, populated when asked for.\r\n\r\n\\param p_0 DisplayType: Integer\r\n\\return Integer"},
{text: "NSPreference.SetDisplayValue", help: "<b>Void SetDisplayValue(String p_0)<\/b>\n\nDisplay value, populated when asked for. Suitable for binding display-datasource in lists, etc. Formatted using CultureDataFormatter.\r\n\r\n\\param p_0 DisplayValue: String\r\n\\return String"},
{text: "NSPreference.SetLevel", help: "<b>Void SetLevel(Integer p_0)<\/b>\n\nPreference level, using the standard enumerated type. Undefined is returned for preferences that do not have a current setting.\r\n\r\n"},
{text: "NSPreference.SetLevel", help: "<b>Void SetLevel(NSPreferenceLevel p_0)<\/b>\n\nPreference level, using the standard enumerated type. Undefined is returned for preferences that do not have a current setting.\r\n\r\n\\param p_0 Level: PreferenceLevel\r\n\\return PreferenceLevel"},
{text: "NSPreference.SetPrefDescId", help: "<b>Void SetPrefDescId(Integer p_0)<\/b>\n\nThe id of the prefdesc this preference is connected to\r\n\r\n\\param p_0 PrefDescId: Integer\r\n\\return Integer"},
{text: "NSPreference.SetRawValue", help: "<b>Void SetRawValue(String p_0)<\/b>\n\nPreference value\r\n\r\n\\param p_0 RawValue: String\r\n\\return String"},
{text: "NSPreference.SetSpecification", help: "<b>Void SetSpecification(NSPreferenceSpec p_0)<\/b>\n\nPreference specification, consisting of the section name and key name\r\n\r\n\\param p_0 Specification: PreferenceSpec\r\n\\return PreferenceSpec"},
{text: "NSPreference.SetTableName", help: "<b>Void SetTableName(String p_0)<\/b>\n\nFor DisplayType=PrefDescValueType.ListTableRef, TableName will contain the name of the table which the value reference to.\r\n\r\n\\param p_0 TableName: String\r\n\\return String"},
{text: "NSPreference.SetTabOrder", help: "<b>Void SetTabOrder(NSTabOrder p_0)<\/b>\n\n\\param p_0 TabOrder: TabOrder\r\n\\return TabOrder"},
{text: "NSPreference.SetTargetId", help: "<b>Void SetTargetId(Integer p_0)<\/b>\n\nThe id of the target row. The table it points at is specified by the preference type.\r\n\r\n\\param p_0 TargetId: Integer\r\n\\return Integer"},
{text: "NSPreference.SetUserPreferenceId", help: "<b>Void SetUserPreferenceId(Integer p_0)<\/b>\n\nThe id of the user preference\r\n\r\n\\param p_0 UserPreferenceId: Integer\r\n\\return Integer"},
{text: "Void.NSPreferenceAgent", help: "<b>NSPreferenceAgent<\/b>\n\n"},
{text: "NSPreferenceAgent.CreateDefaultPreference", help: "<b>NSPreference CreateDefaultPreference()<\/b>\n\nLoading default values into a new Preference.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New Preference with default values\r\n"},
{text: "NSPreferenceAgent.GetPreference", help: "<b>NSPreference GetPreference(Integer p_0)<\/b>\n\nGet a preference by id\r\n\r\n\\param p_0 id: The id of the preference to load\r\n\\return The preference loaded"},
{text: "NSPreferenceAgent.GetPreferenceByName", help: "<b>NSPreference GetPreferenceByName(String p_0, String p_1, Integer p_2)<\/b>\n\nGet a preference by name\r\n\r\n\\param p_0 prefSection: The preference section name. e.g. 'Functions'. See SuperOffice.CRM.UserPreferenceStrings for constants.\r\n\\param p_1 prefKey: The preference key name. e.g. 'ShowTipsAtStart'. See SuperOffice.CRM.UserPreferenceStrings for constants.\r\n\\param p_2 prefLevel: The preference level to read. Undefined (0) means to return the preference defined closest to the user.\r\n\\return The preference. Note that id = 0 and value = null if preference not found in the database at the requested pref-level."},
{text: "NSPreferenceAgent.SavePreferenceEntity", help: "<b>NSPreference SavePreferenceEntity(NSPreference p_0, Bool p_1)<\/b>\n\nSaves a complete preference object. Preference administrator rights are required to use this\r\n\r\n\\param p_0 preference: The preference object to be saved\r\n\\param p_1 removeLowerLevels: If this is true, all user preferences on lower levels will be deleted\r\n\\return Returns the saved preference"},
{text: "NSPreferenceAgent.GetPreferences", help: "<b>NSPreference[] GetPreferences(NSPreferenceSpec[] p_0)<\/b>\n\nGet one or more preferences based on a set of specifications.<br\/>The prefDisplayvalue and prefDisplaytooltip are blank (faster processing relative to GetPreferencesWithDisplayValues)\r\n\r\n\\param p_0 specifications: Array of preference specifications. The key value may be * (asterisk), which means 'all keys within section'. \n\t\/\/\/ \n\t\/\/\/ Note that the semantics of this are more strictly 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere.\n\t\/\/\/ \n\t\/\/\/ You can also have askerisk as the section name. In that case the specification array must contain exactly one entry and the key must also be asterisk. This will return all known preferences in all sections for your associate. It might be a lot, tests have shown that a heavily used database can accumulate up to 500 preferences on a single associate. If the Sentry table\/field right preferences have been used, the number could be a lot greater!\r\n\\return Array of preference values for your given specification(s). More strictly:\n\t\/\/\/ 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere."},
{text: "NSPreferenceAgent.GetPreferencesWithDisplayValues", help: "<b>NSPreference[] GetPreferencesWithDisplayValues(NSPreferenceSpec[] p_0)<\/b>\n\nGet one or more preferences based on a set of specifications<br\/>The PrefDisplayValue and PrefDisplaytooltip are populated, at some additional processing cost.\r\n\r\n\\param p_0 specifications: Array of preference specifications. The key value may be * (asterisk), which means 'all keys within section'. \n\t\/\/\/ \n\t\/\/\/ Note that the semantics of this are more strictly 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere.\n\t\/\/\/ \n\t\/\/\/ You can also have askerisk as the section name. In that case the specification array must contain exactly one entry and the key must also be asterisk. This will return all known preferences in all sections for your associate. It might be a lot, tests have shown that a heavily used database can accumulate up to 500 preferences on a single associate. If the Sentry table\/field right preferences have been used, the number could be a lot greater!\r\n\\return Array of preference values for your given specification(s). More strictly:\n\t\/\/\/ 'all keys actually set at any accessible level for this associate'; you will NOT get entries for preferences that might exist, but have no set value anywhere.<br\/>The PrefDisplayValue and PrefDisplaytooltip are populated, at some additional processing cost."},
{text: "NSPreferenceAgent.CreateDefaultPreferenceDescription", help: "<b>NSPreferenceDescription CreateDefaultPreferenceDescription()<\/b>\n\nLoading default values into a new PreferenceDescription.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New PreferenceDescription with default values"},
{text: "NSPreferenceAgent.GetPreferenceDescription", help: "<b>NSPreferenceDescription GetPreferenceDescription(Integer p_0)<\/b>\n\nGets a PreferenceDescription object.\r\n\r\n\\param p_0 preferenceDescriptionId: The identifier of the PreferenceDescription object\r\n\\return PreferenceDescription"},
{text: "NSPreferenceAgent.SavePreferenceDescription", help: "<b>NSPreferenceDescription SavePreferenceDescription(NSPreferenceDescription p_0)<\/b>\n\nUpdates the existing PreferenceDescription or creates a new PreferenceDescription if the id parameter is empty\r\n\r\n\\param p_0 preferenceDescription: The PreferenceDescription that is saved\r\n\\return New or updated PreferenceDescription"},
{text: "NSPreferenceAgent.CreateDefaultPreferenceDescriptionLine", help: "<b>NSPreferenceDescriptionLine CreateDefaultPreferenceDescriptionLine()<\/b>\n\nLoading default values into a new PreferenceDescriptionLine.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New PreferenceDescriptionLine with default values"},
{text: "NSPreferenceAgent.GetPreferenceDescriptionLine", help: "<b>NSPreferenceDescriptionLine GetPreferenceDescriptionLine(Integer p_0)<\/b>\n\nGets a PreferenceDescriptionLine object.\r\n\r\n\\param p_0 preferenceDescriptionLineId: The identifier of the PreferenceDescriptionLine object\r\n\\return PreferenceDescriptionLine"},
{text: "NSPreferenceAgent.GetPreferenceDescriptionLineFromIdAndValue", help: "<b>NSPreferenceDescriptionLine GetPreferenceDescriptionLineFromIdAndValue(Integer p_0, String p_1)<\/b>\n\nGet a preference description line from a prefDesc_id and a prefValue\r\n\r\n\\param p_0 prefDescId: The id of the preference description this line is connected to\r\n\\param p_1 prefValue: The value of the description line to return\r\n\\return The preference description line matching the id and the value"},
{text: "NSPreferenceAgent.GetTabOrder", help: "<b>NSTabOrder GetTabOrder(String p_0)<\/b>\n\nGets the tab order.\r\n\r\n\\param p_0 tabName: Name of the tab control\r\n\\return Tab order. Array of strings. Each string represent a named tab.\r\n"},
{text: "NSPreferenceAgent.GetTabOrders", help: "<b>NSTabOrder[] GetTabOrders()<\/b>\n\n\r\n\r\n"},
{text: "NSPreferenceAgent.GetNetServicesStatusUrl", help: "<b>String GetNetServicesStatusUrl()<\/b>\n\nReturns URL to status service. e.g. 'https:\/\/help.superoffice.com\/sodispatcher\/v1\/status' Returns NULL if status does not need to be checked yet.\r\n\r\n\\return NULL or URL of the status service that returns an XML or JSON block."},
{text: "NSPreferenceAgent.DeletePreference", help: "<b>Void DeletePreference(Integer p_0)<\/b>\n\nDelete a preference by id\r\n\r\n\\param p_0 id: The id of the preference to delete\r\n\\return This method has no return value"},
{text: "NSPreferenceAgent.DeletePreferences", help: "<b>Void DeletePreferences(Integer[] p_0)<\/b>\n\nDelete some preferences by id\r\n\r\n\\param p_0 ids: The ids of the preference to delete\r\n\\return This method has no return value"},
{text: "NSPreferenceAgent.SavePreference", help: "<b>Void SavePreference(NSPreference p_0)<\/b>\n\nSave this preference\r\n\r\n\\param p_0 preference: Preference to be saved. All fields must be filled in, and the preference will be saved on the Associate level only. Setting for other levels is an administrative task and not available through this service.\r\n\\return This method has no return value"},
{text: "NSPreferenceAgent.SavePreferences", help: "<b>Void SavePreferences(NSPreference[] p_0)<\/b>\n\nSave this set of preferences all the way to the database.\r\n\r\n\\param p_0 preferences: Preferences to be saved. Note that all fields must be filled in, and the preference will be saved on the Associate level only! Setting for other levels is an administrative task and not available through this service.\r\n"},
{text: "NSPreferenceAgent.SaveTabOrder", help: "<b>Void SaveTabOrder(NSTabOrder p_0)<\/b>\n\nSaves the tab order. The order is saved pr. user.\r\n\r\n\\param p_0 tabOrder: Name of the tab control\r\n\\return This method has no return value"},
{text: "NSPreferenceAgent.SaveTabOrders", help: "<b>Void SaveTabOrders(NSTabOrder[] p_0)<\/b>\n\n\r\n\r\n\\param p_0 tabOrders\r\n"},
{text: "NSPreferenceAgent.UpdateNetServicesStatus", help: "<b>Void UpdateNetServicesStatus(String p_0)<\/b>\n\nUpdate the NetServices preferences with values contained in the content from the Status URL\r\n\r\n\\param p_0 xml_or_json: The text that was returned by getting the Status URL\r\n\\return This method has no return value"},
{text: "Void.NSPreferenceDescription", help: "<b>NSPreferenceDescription<\/b>\n\nPreference description, drives the Preference GUI. Maintenance client - controls all preferences in SuperOffice."},
{text: "NSPreferenceDescription.GetIsBuiltin", help: "<b>Bool GetIsBuiltin()<\/b>\n\n1 = This row populated and maintained by SuperOffice\r\n\r\n\\return Bool"},
{text: "NSPreferenceDescription.GetAccessFlags", help: "<b>Integer GetAccessFlags()<\/b>\n\n1=wizard mode, 2=level 0, 4=admin gui, 8=crm gui\r\n\r\n\\return Integer"},
{text: "NSPreferenceDescription.GetMaxLevel", help: "<b>Integer GetMaxLevel()<\/b>\n\n"},
{text: "NSPreferenceDescription.GetPrefDescId", help: "<b>Integer GetPrefDescId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSPreferenceDescription.GetSysMaxLevel", help: "<b>Integer GetSysMaxLevel()<\/b>\n\n"},
{text: "NSPreferenceDescription.GetUserDefinedListId", help: "<b>Integer GetUserDefinedListId()<\/b>\n\nRead-only field, If valueType = 5, and TableName is UDList, then UserdefinedLIstId contains the id of the list referenced by the preference\r\n\r\n\\return Integer"},
{text: "NSPreferenceDescription.GetValueType", help: "<b>Integer GetValueType()<\/b>\n\n1=number, 2=text, 3=bool, 4=list of values; 5=list table ref; 6=contact ID, 7=Person ID, 8=Project ID, 9=Selection ID\r\n\r\n\\return Integer"},
{text: "NSPreferenceDescription.GetMaxLevel", help: "<b>NSPreferenceLevel GetMaxLevel()<\/b>\n\nLowest allowed setting level, set by user, but not lower than sysMaxLevel\r\n\r\n\\return PreferenceLevel"},
{text: "NSPreferenceDescription.GetSysMaxLevel", help: "<b>NSPreferenceLevel GetSysMaxLevel()<\/b>\n\nLowest allowed setting level, set by SuperOffice\r\n\r\n\\return PreferenceLevel"},
{text: "NSPreferenceDescription.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of preference, multi-language parsed\r\n\r\n\\return String"},
{text: "NSPreferenceDescription.GetKey", help: "<b>String GetKey()<\/b>\n\nPreference key name\r\n\r\n\\return String"},
{text: "NSPreferenceDescription.GetName", help: "<b>String GetName()<\/b>\n\nMulti-language name\r\n\r\n\\return String"},
{text: "NSPreferenceDescription.GetSection", help: "<b>String GetSection()<\/b>\n\nPreference section name\r\n\r\n\\return String"},
{text: "NSPreferenceDescription.GetTableName", help: "<b>String GetTableName()<\/b>\n\nIf valueType = 5, then TableName contains the table referenced by the preference\r\n\r\n\\return String"},
{text: "NSPreferenceDescription.SetAccessFlags", help: "<b>Void SetAccessFlags(Integer p_0)<\/b>\n\n1=wizard mode, 2=level 0, 4=admin gui, 8=crm gui\r\n\r\n\\param p_0 AccessFlags: Integer\r\n\\return Integer"},
{text: "NSPreferenceDescription.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of preference, multi-language parsed\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSPreferenceDescription.SetIsBuiltin", help: "<b>Void SetIsBuiltin(Bool p_0)<\/b>\n\n1 = This row populated and maintained by SuperOffice\r\n\r\n\\param p_0 IsBuiltin: Bool\r\n\\return Bool"},
{text: "NSPreferenceDescription.SetKey", help: "<b>Void SetKey(String p_0)<\/b>\n\nPreference key name\r\n\r\n\\param p_0 Key: String\r\n\\return String"},
{text: "NSPreferenceDescription.SetMaxLevel", help: "<b>Void SetMaxLevel(Integer p_0)<\/b>\n\n"},
{text: "NSPreferenceDescription.SetMaxLevel", help: "<b>Void SetMaxLevel(NSPreferenceLevel p_0)<\/b>\n\nLowest allowed setting level, set by user, but not lower than sysMaxLevel\r\n\r\n\\param p_0 MaxLevel: PreferenceLevel\r\n\\return PreferenceLevel"},
{text: "NSPreferenceDescription.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nMulti-language name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSPreferenceDescription.SetPrefDescId", help: "<b>Void SetPrefDescId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 PrefDescId: Integer\r\n\\return Integer"},
{text: "NSPreferenceDescription.SetSection", help: "<b>Void SetSection(String p_0)<\/b>\n\nPreference section name\r\n\r\n\\param p_0 Section: String\r\n\\return String"},
{text: "NSPreferenceDescription.SetSysMaxLevel", help: "<b>Void SetSysMaxLevel(Integer p_0)<\/b>\n\n"},
{text: "NSPreferenceDescription.SetSysMaxLevel", help: "<b>Void SetSysMaxLevel(NSPreferenceLevel p_0)<\/b>\n\nLowest allowed setting level, set by SuperOffice\r\n\r\n\\param p_0 SysMaxLevel: PreferenceLevel\r\n\\return PreferenceLevel"},
{text: "NSPreferenceDescription.SetTableName", help: "<b>Void SetTableName(String p_0)<\/b>\n\nIf valueType = 5, then TableName contains the table referenced by the preference\r\n\r\n\\param p_0 TableName: String\r\n\\return String"},
{text: "NSPreferenceDescription.SetUserDefinedListId", help: "<b>Void SetUserDefinedListId(Integer p_0)<\/b>\n\nRead-only field, If valueType = 5, and TableName is UDList, then UserdefinedLIstId contains the id of the list referenced by the preference\r\n\r\n\\param p_0 UserDefinedListId: Integer\r\n\\return Integer"},
{text: "NSPreferenceDescription.SetValueType", help: "<b>Void SetValueType(Integer p_0)<\/b>\n\n1=number, 2=text, 3=bool, 4=list of values; 5=list table ref; 6=contact ID, 7=Person ID, 8=Project ID, 9=Selection ID\r\n\r\n\\param p_0 ValueType: Integer\r\n\\return Integer"},
{text: "Void.NSPreferenceDescriptionLine", help: "<b>NSPreferenceDescriptionLine<\/b>\n\nPreference description line, contains information about a single item in a preference description list."},
{text: "NSPreferenceDescriptionLine.GetIsBuiltin", help: "<b>Bool GetIsBuiltin()<\/b>\n\n1 = This row populated and maintained by SuperOffice\r\n\r\n\\return Bool"},
{text: "NSPreferenceDescriptionLine.GetPrefDescId", help: "<b>Integer GetPrefDescId()<\/b>\n\nPreference description (parent)\r\n\r\n\\return Integer"},
{text: "NSPreferenceDescriptionLine.GetPrefDescLineId", help: "<b>Integer GetPrefDescLineId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSPreferenceDescriptionLine.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of preference value, multi-language parsed\r\n\r\n\\return String"},
{text: "NSPreferenceDescriptionLine.GetPrefShowValue", help: "<b>String GetPrefShowValue()<\/b>\n\nDescriptive value, multilang-parsed, to put in list\r\n\r\n\\return String"},
{text: "NSPreferenceDescriptionLine.GetPrefValue", help: "<b>String GetPrefValue()<\/b>\n\nPossible value\r\n\r\n\\return String"},
{text: "NSPreferenceDescriptionLine.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of preference value, multi-language parsed\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSPreferenceDescriptionLine.SetIsBuiltin", help: "<b>Void SetIsBuiltin(Bool p_0)<\/b>\n\n1 = This row populated and maintained by SuperOffice\r\n\r\n\\param p_0 IsBuiltin: Bool\r\n\\return Bool"},
{text: "NSPreferenceDescriptionLine.SetPrefDescId", help: "<b>Void SetPrefDescId(Integer p_0)<\/b>\n\nPreference description (parent)\r\n\r\n\\param p_0 PrefDescId: Integer\r\n\\return Integer"},
{text: "NSPreferenceDescriptionLine.SetPrefDescLineId", help: "<b>Void SetPrefDescLineId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 PrefDescLineId: Integer\r\n\\return Integer"},
{text: "NSPreferenceDescriptionLine.SetPrefShowValue", help: "<b>Void SetPrefShowValue(String p_0)<\/b>\n\nDescriptive value, multilang-parsed, to put in list\r\n\r\n\\param p_0 PrefShowValue: String\r\n\\return String"},
{text: "NSPreferenceDescriptionLine.SetPrefValue", help: "<b>Void SetPrefValue(String p_0)<\/b>\n\nPossible value\r\n\r\n\\param p_0 PrefValue: String\r\n\\return String"},
{text: "Void.NSPreferenceSpec", help: "<b>NSPreferenceSpec<\/b>\n\nPreference specification, consisting of the section name and key name"},
{text: "NSPreferenceSpec.GetKey", help: "<b>String GetKey()<\/b>\n\nPreference key name\r\n\r\n\\return String"},
{text: "NSPreferenceSpec.GetSection", help: "<b>String GetSection()<\/b>\n\nPreference section name\r\n\r\n\\return String"},
{text: "NSPreferenceSpec.SetKey", help: "<b>Void SetKey(String p_0)<\/b>\n\nPreference key name\r\n\r\n\\param p_0 Key: String\r\n\\return String"},
{text: "NSPreferenceSpec.SetSection", help: "<b>Void SetSection(String p_0)<\/b>\n\nPreference section name\r\n\r\n\\param p_0 Section: String\r\n\\return String"},
{text: "Void.NSPreviewsAgent", help: "<b>NSPreviewsAgent<\/b>\n\n"},
{text: "NSPreviewsAgent.GetPreview", help: "<b>String GetPreview(String p_0)<\/b>\n\nParse a Preview hint and return a Preview. The returned Preview string may contain resource string identifiers (in square brackets), to be processed by the resource manager.<para \/>The Preview hint is either a literal text, representing itself, or a set of key\/value pairs enclosed in curly braces. Each key is separated from its value by an equals sign, and each pair from the next by an ampersand, according to usual conventions.<para \/>A typical Preview hint could be {contact_id=123} or {appointment_id=222&amp;mode=simple}\r\n\r\n\\param p_0 previewHint"},
{text: "Void.NSPriceList", help: "<b>NSPriceList<\/b>\n\nA pricelist is basically a collection of products. It can be valid in a time period, and outright deactivated. All prices in the product list is in a specific currency. We have decieded not to separate prices and products, which means that we get a simpler data model, but some redundancy."},
{text: "NSPriceList.GetIsActive", help: "<b>Bool GetIsActive()<\/b>\n\nIs the list active (as opposed to being worked on, suddenly canceled, etc.\r\n\r\n\\return Bool"},
{text: "NSPriceList.GetValidFrom", help: "<b>DateTime GetValidFrom()<\/b>\n\nThe date (inclusive) the pricelist start to be valid. This can be DateTime.MinValue to signal that it doesn't have a specific start date.\r\n\r\n\\return DateTime"},
{text: "NSPriceList.GetValidTo", help: "<b>DateTime GetValidTo()<\/b>\n\nThe date (inclusive) the pricelist ends to be valid. This can be DateTime.MaxValue to signal that it doesn't have a specific end date.\r\n\r\n\\return DateTime"},
{text: "NSPriceList.GetPriceListId", help: "<b>Integer GetPriceListId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSPriceList.GetQuoteConnectionId", help: "<b>Integer GetQuoteConnectionId()<\/b>\n\n(Reserved for future use) The connection to the ERP system used for this pricelist\r\n\r\n\\return Integer"},
{text: "NSPriceList.GetCurrency", help: "<b>String GetCurrency()<\/b>\n\nThe iso currency code, like 'USD' or 'NOK'.\r\n\r\n\\return String"},
{text: "NSPriceList.GetCurrencyName", help: "<b>String GetCurrencyName()<\/b>\n\nThe name to use in the user interface, like perhaps 'US dollar' or '$'\r\n\r\n\\return String"},
{text: "NSPriceList.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of this pricelist , will be used as tool-tip in the user interface.\r\n\r\n\\return String"},
{text: "NSPriceList.GetERPPriceListKey", help: "<b>String GetERPPriceListKey()<\/b>\n\nThe key that uniquely identifies this pricelist in the ERP system\r\n\r\n\\return String"},
{text: "NSPriceList.GetName", help: "<b>String GetName()<\/b>\n\nName of this pricelist to use in the user interface.\r\n\r\n\\return String"},
{text: "NSPriceList.SetCurrency", help: "<b>Void SetCurrency(String p_0)<\/b>\n\nThe iso currency code, like 'USD' or 'NOK'.\r\n\r\n\\param p_0 Currency: String\r\n\\return String"},
{text: "NSPriceList.SetCurrencyName", help: "<b>Void SetCurrencyName(String p_0)<\/b>\n\nThe name to use in the user interface, like perhaps 'US dollar' or '$'\r\n\r\n\\param p_0 CurrencyName: String\r\n\\return String"},
{text: "NSPriceList.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of this pricelist , will be used as tool-tip in the user interface.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSPriceList.SetERPPriceListKey", help: "<b>Void SetERPPriceListKey(String p_0)<\/b>\n\nThe key that uniquely identifies this pricelist in the ERP system\r\n\r\n\\param p_0 ERPPriceListKey: String\r\n\\return String"},
{text: "NSPriceList.SetIsActive", help: "<b>Void SetIsActive(Bool p_0)<\/b>\n\nIs the list active (as opposed to being worked on, suddenly canceled, etc.\r\n\r\n\\param p_0 IsActive: Bool\r\n\\return Bool"},
{text: "NSPriceList.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of this pricelist to use in the user interface.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSPriceList.SetPriceListId", help: "<b>Void SetPriceListId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 PriceListId: Integer\r\n\\return Integer"},
{text: "NSPriceList.SetQuoteConnectionId", help: "<b>Void SetQuoteConnectionId(Integer p_0)<\/b>\n\n(Reserved for future use) The connection to the ERP system used for this pricelist\r\n\r\n\\param p_0 QuoteConnectionId: Integer\r\n\\return Integer"},
{text: "NSPriceList.SetValidFrom", help: "<b>Void SetValidFrom(DateTime p_0)<\/b>\n\nThe date (inclusive) the pricelist start to be valid. This can be DateTime.MinValue to signal that it doesn't have a specific start date.\r\n\r\n\\param p_0 ValidFrom: DateTime\r\n\\return DateTime"},
{text: "NSPriceList.SetValidTo", help: "<b>Void SetValidTo(DateTime p_0)<\/b>\n\nThe date (inclusive) the pricelist ends to be valid. This can be DateTime.MaxValue to signal that it doesn't have a specific end date.\r\n\r\n\\param p_0 ValidTo: DateTime\r\n\\return DateTime"},
{text: "Void.NSPriority", help: "<b>NSPriority<\/b>\n\n"},
{text: "NSPriority.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSPriority.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSPriority.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSPriority.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSPriority.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSPriority.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSProduct", help: "<b>NSProduct<\/b>\n\nInformation about a Product from the ERP system. This may be fetched from SuperOffice Product table through the SO Connector"},
{text: "NSProduct.GetInAssortment", help: "<b>Bool GetInAssortment()<\/b>\n\nTrue for products that should currently be offered, false when the product is discontinued and should not ordinarily be offered. When false the product no longer appears in search results.\r\n\r\n\\return Bool"},
{text: "NSProduct.GetIsSubscription", help: "<b>Bool GetIsSubscription()<\/b>\n\nIs this a subscription product, sold in repeating intervals\/amounts?\r\n\r\n\\return Bool"},
{text: "NSProduct.GetDefaultSubscriptionQuantity", help: "<b>Float GetDefaultSubscriptionQuantity()<\/b>\n\nThe default number of SubscriptionUnits to suggest when creating quote lines from this product\r\n\r\n\\return Float"},
{text: "NSProduct.GetInStock", help: "<b>Float GetInStock()<\/b>\n\nNegative numbers will be interpreted as how many is ordered. Might not be available.\r\n\r\n\\return Float"},
{text: "NSProduct.GetUnitCost", help: "<b>Float GetUnitCost()<\/b>\n\nThe cost price. Might not be given, use Decimal.MinValue to signal this.\r\n\r\n\\return Float"},
{text: "NSProduct.GetUnitListPrice", help: "<b>Float GetUnitListPrice()<\/b>\n\n(Basic Price, normal price, standard price.) This is the basic price from which the discount is computed from. The ListPrice will stay the same even when a larger amount is ordered.\r\n\r\n\\return Float"},
{text: "NSProduct.GetUnitMinimumPrice", help: "<b>Float GetUnitMinimumPrice()<\/b>\n\nThe minimum price this salesman can offer to his customer. This might be cost price if there is no policy. Might not be given, use Decimal.MinValue to signal this.\r\n\r\n\\return Float"},
{text: "NSProduct.GetVAT", help: "<b>Float GetVAT()<\/b>\n\nTax\/VAT if available from ERP system. THIS IS A PERCENTAGE. In the Superoffice product register, this field is available in the product admin GUI.\r\n\r\n\\return Float"},
{text: "NSProduct.GetProductId", help: "<b>Integer GetProductId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSProduct.GetExtraInfo", help: "<b>NSProductExtraDataField[] GetExtraInfo()<\/b>\n\nExtra information, supplied by QuoteConnector, used by a future dynamic GUI extension\r\n\r\n\\return ProductExtraDataFieldArray"},
{text: "NSProduct.GetCode", help: "<b>String GetCode()<\/b>\n\nThe product code \/ article number in the product supplier system.\r\n\r\n\\return String"},
{text: "NSProduct.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe description to use, with potentially several lines. Will be used as tool-tip to use in the list user interface too.\r\n\r\n\\return String"},
{text: "NSProduct.GetERPPriceListKey", help: "<b>String GetERPPriceListKey()<\/b>\n\nForeign key to the price list that this product is a part of.\r\n\r\n\\return String"},
{text: "NSProduct.GetERPProductKey", help: "<b>String GetERPProductKey()<\/b>\n\nReference\/foreign key to the product in the given pricelist in the product supplier system, if it exists there.\r\n\r\n\\return String"},
{text: "NSProduct.GetExtraField1", help: "<b>String GetExtraField1()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSProduct.GetExtraField2", help: "<b>String GetExtraField2()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSProduct.GetExtraField3", help: "<b>String GetExtraField3()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSProduct.GetExtraField4", help: "<b>String GetExtraField4()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSProduct.GetExtraField5", help: "<b>String GetExtraField5()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSProduct.GetItemNumber", help: "<b>String GetItemNumber()<\/b>\n\nLine item number, NOR: «Postnummer». Specific numbers from some hierarchy, for instance “1.4.3.2P”. Typically used to sort the items in the quote by some standard way.\r\n\r\n\\return String"},
{text: "NSProduct.GetName", help: "<b>String GetName()<\/b>\n\nThe name to use in the user interface.\r\n\r\n\\return String"},
{text: "NSProduct.GetPriceUnit", help: "<b>String GetPriceUnit()<\/b>\n\nWhat is the unit (meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever); read-only for lines that originate in defined products\r\n\r\n\\return String"},
{text: "NSProduct.GetProductCategoryKey", help: "<b>String GetProductCategoryKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text with the actual product category.\r\n\r\n\\return String"},
{text: "NSProduct.GetProductFamilyKey", help: "<b>String GetProductFamilyKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text with the actual product family.\r\n\r\n\\return String"},
{text: "NSProduct.GetProductTypeKey", help: "<b>String GetProductTypeKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text with the actual product type.\r\n\r\n\\return String"},
{text: "NSProduct.GetQuantityUnit", help: "<b>String GetQuantityUnit()<\/b>\n\nWhat is the unit (meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever); Connector handles conversion relative to PriceUnit if they are different\r\n\r\n\\return String"},
{text: "NSProduct.GetRawExtraInfo", help: "<b>String GetRawExtraInfo()<\/b>\n\nRead-only extra information in plain text, supplied by QuoteConnector, used by a future dynamic GUI extension\r\n\r\n\\return String"},
{text: "NSProduct.GetRights", help: "<b>String GetRights()<\/b>\n\nField1=right&Field2=right, etc. of any fields that have non-standard field access rights. Rights can be one of: N (=None or Hidden), R (=Read-only), W (=Writeable), M (=Mandatory). The fields will mostly be from the Quoteline table, but some added fields that are conceptually part of the quoteline, like Image will also be possibly to set rights on. Will be used by SuperOffice to control the user interface when showing the record.\r\n\r\n\\return String"},
{text: "NSProduct.GetRule", help: "<b>String GetRule()<\/b>\n\nThe names of one or more calculation rules that are in effect for this line, comma-separated case-insensitive. Will NOT be used by SuperOffice.\r\n\r\n\\return String"},
{text: "NSProduct.GetSubscriptionUnit", help: "<b>String GetSubscriptionUnit()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text with the actual subscription unit.\r\n\r\n\\return String"},
{text: "NSProduct.GetSupplier", help: "<b>String GetSupplier()<\/b>\n\nIn SuperOffice, an id from the contact table, when saved as an ERP cache, the name of the supplier\r\n\r\n\\return String"},
{text: "NSProduct.GetSupplierCode", help: "<b>String GetSupplierCode()<\/b>\n\nSuppliers part code\/number or other key-like field\r\n\r\n\\return String"},
{text: "NSProduct.GetUrl", help: "<b>String GetUrl()<\/b>\n\nURL to product information web page.\r\n\r\n\\return String"},
{text: "NSProduct.GetVATInfo", help: "<b>String GetVATInfo()<\/b>\n\nA field for putting VATInfo you need to show in the final quoteDocument, like the VAT type that is used. Not used in any business logic in SuperOffice; available to document templates.\r\n\r\n\\return String"},
{text: "NSProduct.SetCode", help: "<b>Void SetCode(String p_0)<\/b>\n\nThe product code \/ article number in the product supplier system.\r\n\r\n\\param p_0 Code: String\r\n\\return String"},
{text: "NSProduct.SetDefaultSubscriptionQuantity", help: "<b>Void SetDefaultSubscriptionQuantity(Float p_0)<\/b>\n\nThe default number of SubscriptionUnits to suggest when creating quote lines from this product\r\n\r\n\\param p_0 DefaultSubscriptionQuantity: Float\r\n\\return Float"},
{text: "NSProduct.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe description to use, with potentially several lines. Will be used as tool-tip to use in the list user interface too.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSProduct.SetERPPriceListKey", help: "<b>Void SetERPPriceListKey(String p_0)<\/b>\n\nForeign key to the price list that this product is a part of.\r\n\r\n\\param p_0 ERPPriceListKey: String\r\n\\return String"},
{text: "NSProduct.SetERPProductKey", help: "<b>Void SetERPProductKey(String p_0)<\/b>\n\nReference\/foreign key to the product in the given pricelist in the product supplier system, if it exists there.\r\n\r\n\\param p_0 ERPProductKey: String\r\n\\return String"},
{text: "NSProduct.SetExtraField1", help: "<b>Void SetExtraField1(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField1: String\r\n\\return String"},
{text: "NSProduct.SetExtraField2", help: "<b>Void SetExtraField2(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField2: String\r\n\\return String"},
{text: "NSProduct.SetExtraField3", help: "<b>Void SetExtraField3(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField3: String\r\n\\return String"},
{text: "NSProduct.SetExtraField4", help: "<b>Void SetExtraField4(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField4: String\r\n\\return String"},
{text: "NSProduct.SetExtraField5", help: "<b>Void SetExtraField5(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField5: String\r\n\\return String"},
{text: "NSProduct.SetExtraInfo", help: "<b>Void SetExtraInfo(NSProductExtraDataField[] p_0)<\/b>\n\nExtra information, supplied by QuoteConnector, used by a future dynamic GUI extension\r\n\r\n\\param p_0 ExtraInfo: ProductExtraDataFieldArray\r\n\\return ProductExtraDataFieldArray"},
{text: "NSProduct.SetInAssortment", help: "<b>Void SetInAssortment(Bool p_0)<\/b>\n\nTrue for products that should currently be offered, false when the product is discontinued and should not ordinarily be offered. When false the product no longer appears in search results.\r\n\r\n\\param p_0 InAssortment: Bool\r\n\\return Bool"},
{text: "NSProduct.SetInStock", help: "<b>Void SetInStock(Float p_0)<\/b>\n\nNegative numbers will be interpreted as how many is ordered. Might not be available.\r\n\r\n\\param p_0 InStock: Float\r\n\\return Float"},
{text: "NSProduct.SetIsSubscription", help: "<b>Void SetIsSubscription(Bool p_0)<\/b>\n\nIs this a subscription product, sold in repeating intervals\/amounts?\r\n\r\n\\param p_0 IsSubscription: Bool\r\n\\return Bool"},
{text: "NSProduct.SetItemNumber", help: "<b>Void SetItemNumber(String p_0)<\/b>\n\nLine item number, NOR: «Postnummer». Specific numbers from some hierarchy, for instance “1.4.3.2P”. Typically used to sort the items in the quote by some standard way.\r\n\r\n\\param p_0 ItemNumber: String\r\n\\return String"},
{text: "NSProduct.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name to use in the user interface.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSProduct.SetPriceUnit", help: "<b>Void SetPriceUnit(String p_0)<\/b>\n\nWhat is the unit (meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever); read-only for lines that originate in defined products\r\n\r\n\\param p_0 PriceUnit: String\r\n\\return String"},
{text: "NSProduct.SetProductCategoryKey", help: "<b>Void SetProductCategoryKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text with the actual product category.\r\n\r\n\\param p_0 ProductCategoryKey: String\r\n\\return String"},
{text: "NSProduct.SetProductFamilyKey", help: "<b>Void SetProductFamilyKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text with the actual product family.\r\n\r\n\\param p_0 ProductFamilyKey: String\r\n\\return String"},
{text: "NSProduct.SetProductId", help: "<b>Void SetProductId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ProductId: Integer\r\n\\return Integer"},
{text: "NSProduct.SetProductTypeKey", help: "<b>Void SetProductTypeKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text with the actual product type.\r\n\r\n\\param p_0 ProductTypeKey: String\r\n\\return String"},
{text: "NSProduct.SetQuantityUnit", help: "<b>Void SetQuantityUnit(String p_0)<\/b>\n\nWhat is the unit (meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever); Connector handles conversion relative to PriceUnit if they are different\r\n\r\n\\param p_0 QuantityUnit: String\r\n\\return String"},
{text: "NSProduct.SetRawExtraInfo", help: "<b>Void SetRawExtraInfo(String p_0)<\/b>\n\nRead-only extra information in plain text, supplied by QuoteConnector, used by a future dynamic GUI extension\r\n\r\n\\param p_0 RawExtraInfo: String\r\n\\return String"},
{text: "NSProduct.SetRights", help: "<b>Void SetRights(String p_0)<\/b>\n\nField1=right&Field2=right, etc. of any fields that have non-standard field access rights. Rights can be one of: N (=None or Hidden), R (=Read-only), W (=Writeable), M (=Mandatory). The fields will mostly be from the Quoteline table, but some added fields that are conceptually part of the quoteline, like Image will also be possibly to set rights on. Will be used by SuperOffice to control the user interface when showing the record.\r\n\r\n\\param p_0 Rights: String\r\n\\return String"},
{text: "NSProduct.SetRule", help: "<b>Void SetRule(String p_0)<\/b>\n\nThe names of one or more calculation rules that are in effect for this line, comma-separated case-insensitive. Will NOT be used by SuperOffice.\r\n\r\n\\param p_0 Rule: String\r\n\\return String"},
{text: "NSProduct.SetSubscriptionUnit", help: "<b>Void SetSubscriptionUnit(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text with the actual subscription unit.\r\n\r\n\\param p_0 SubscriptionUnit: String\r\n\\return String"},
{text: "NSProduct.SetSupplier", help: "<b>Void SetSupplier(String p_0)<\/b>\n\nIn SuperOffice, an id from the contact table, when saved as an ERP cache, the name of the supplier\r\n\r\n\\param p_0 Supplier: String\r\n\\return String"},
{text: "NSProduct.SetSupplierCode", help: "<b>Void SetSupplierCode(String p_0)<\/b>\n\nSuppliers part code\/number or other key-like field\r\n\r\n\\param p_0 SupplierCode: String\r\n\\return String"},
{text: "NSProduct.SetUnitCost", help: "<b>Void SetUnitCost(Float p_0)<\/b>\n\nThe cost price. Might not be given, use Decimal.MinValue to signal this.\r\n\r\n\\param p_0 UnitCost: Float\r\n\\return Float"},
{text: "NSProduct.SetUnitListPrice", help: "<b>Void SetUnitListPrice(Float p_0)<\/b>\n\n(Basic Price, normal price, standard price.) This is the basic price from which the discount is computed from. The ListPrice will stay the same even when a larger amount is ordered.\r\n\r\n\\param p_0 UnitListPrice: Float\r\n\\return Float"},
{text: "NSProduct.SetUnitMinimumPrice", help: "<b>Void SetUnitMinimumPrice(Float p_0)<\/b>\n\nThe minimum price this salesman can offer to his customer. This might be cost price if there is no policy. Might not be given, use Decimal.MinValue to signal this.\r\n\r\n\\param p_0 UnitMinimumPrice: Float\r\n\\return Float"},
{text: "NSProduct.SetUrl", help: "<b>Void SetUrl(String p_0)<\/b>\n\nURL to product information web page.\r\n\r\n\\param p_0 Url: String\r\n\\return String"},
{text: "NSProduct.SetVAT", help: "<b>Void SetVAT(Float p_0)<\/b>\n\nTax\/VAT if available from ERP system. THIS IS A PERCENTAGE. In the Superoffice product register, this field is available in the product admin GUI.\r\n\r\n\\param p_0 VAT: Float\r\n\\return Float"},
{text: "NSProduct.SetVATInfo", help: "<b>Void SetVATInfo(String p_0)<\/b>\n\nA field for putting VATInfo you need to show in the final quoteDocument, like the VAT type that is used. Not used in any business logic in SuperOffice; available to document templates.\r\n\r\n\\param p_0 VATInfo: String\r\n\\return String"},
{text: "Void.NSProductCategory", help: "<b>NSProductCategory<\/b>\n\nThe built-in product category list. Used by the SuperOffice Quote Connector to categorize products."},
{text: "NSProductCategory.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSProductCategory.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSProductCategory.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSProductCategory.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSProductCategory.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSProductCategory.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSProductExtraDataField", help: "<b>NSProductExtraDataField<\/b>\n\nA way to show some simple extra data on a product, typically to hep the user to identify the correct product. Basically a bucket of additional info that the ERP system would like to store and show in the user interface. Information placed here is shown in the GUI if the “provide-extra-data” capability is true."},
{text: "NSProductExtraDataField.GetType", help: "<b>Integer GetType()<\/b>\n\nString, url, image. How the value should be interpreted.\r\n\r\n\\return Integer"},
{text: "NSProductExtraDataField.GetName", help: "<b>String GetName()<\/b>\n\nLabel for the field\r\n\r\n\\return String"},
{text: "NSProductExtraDataField.GetValue", help: "<b>String GetValue()<\/b>\n\nValue for the field. If type is string, it can contain formatspecifiers (use this for displaying numbers correctly as the user's computer is set up).\r\n\r\n\\return String"},
{text: "NSProductExtraDataField.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nLabel for the field\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSProductExtraDataField.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nString, url, image. How the value should be interpreted.\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSProductExtraDataField.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nValue for the field. If type is string, it can contain formatspecifiers (use this for displaying numbers correctly as the user's computer is set up).\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSProductFamily", help: "<b>NSProductFamily<\/b>\n\nThe built-in product family list. Used by the SuperOffice Quote Connector to categorize products."},
{text: "NSProductFamily.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSProductFamily.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSProductFamily.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSProductFamily.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSProductFamily.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSProductFamily.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSProductType", help: "<b>NSProductType<\/b>\n\nThe built-in product type list. Used by the SuperOffice Quote Connector to categorize products."},
{text: "NSProductType.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSProductType.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSProductType.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSProductType.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSProductType.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSProductType.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSProject", help: "<b>NSProject<\/b>\n\n"},
{text: "NSProject.GetIsPublished", help: "<b>Bool GetIsPublished()<\/b>\n\n\\return Bool"},
{text: "NSProject.GetPublishFrom", help: "<b>DateTime GetPublishFrom()<\/b>\n\nPublication valid from (inclusive)\r\n\r\n\\return DateTime"},
{text: "NSProject.GetPublishTo", help: "<b>DateTime GetPublishTo()<\/b>\n\nPublication valid to (inclusive)\r\n\r\n\\return DateTime"},
{text: "NSProject.GetUpdated", help: "<b>DateTime GetUpdated()<\/b>\n\nLast updated date\r\n\r\n\\return DateTime"},
{text: "NSProject.GetActiveErpLinks", help: "<b>Integer GetActiveErpLinks()<\/b>\n\nThe number of active erp links\r\n\r\n\\return Integer"},
{text: "NSProject.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nThe project owner id (associate id)\r\n\r\n\\return Integer"},
{text: "NSProject.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSProject.GetStatusId", help: "<b>Integer GetStatusId()<\/b>\n\nThe projects status id\r\n\r\n\\return Integer"},
{text: "NSProject.GetTextId", help: "<b>Integer GetTextId()<\/b>\n\nThe id of the description\r\n\r\n\\return Integer"},
{text: "NSProject.GetTypeId", help: "<b>Integer GetTypeId()<\/b>\n\n\\return Integer"},
{text: "NSProject.GetAssociateFullName", help: "<b>String GetAssociateFullName()<\/b>\n\nThe project owner\r\n\r\n\\return String"},
{text: "NSProject.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe projects description\r\n\r\n\\return String"},
{text: "NSProject.GetName", help: "<b>String GetName()<\/b>\n\nProject name\r\n\r\n\\return String"},
{text: "NSProject.GetProjectNumber", help: "<b>String GetProjectNumber()<\/b>\n\nAutomatically generated number\r\n\r\n\\return String"},
{text: "NSProject.GetStatus", help: "<b>String GetStatus()<\/b>\n\nThe projects status\r\n\r\n\\return String"},
{text: "NSProject.GetType", help: "<b>String GetType()<\/b>\n\nThe project type.\r\n\r\n\\return String"},
{text: "NSProject.GetURL", help: "<b>String GetURL()<\/b>\n\nURL address\r\n\r\n\\return String"},
{text: "NSProject.GetURLName", help: "<b>String GetURLName()<\/b>\n\nVisible field\r\n\r\n\\return String"},
{text: "NSProject.SetActiveErpLinks", help: "<b>Void SetActiveErpLinks(Integer p_0)<\/b>\n\nThe number of active erp links\r\n\r\n\\param p_0 ActiveErpLinks: Integer\r\n\\return Integer"},
{text: "NSProject.SetAssociateFullName", help: "<b>Void SetAssociateFullName(String p_0)<\/b>\n\nThe project owner\r\n\r\n\\param p_0 AssociateFullName: String\r\n\\return String"},
{text: "NSProject.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nThe project owner id (associate id)\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSProject.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe projects description\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSProject.SetIsPublished", help: "<b>Void SetIsPublished(Bool p_0)<\/b>\n\n\\param p_0 IsPublished: Bool\r\n\\return Bool"},
{text: "NSProject.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nProject name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSProject.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSProject.SetProjectNumber", help: "<b>Void SetProjectNumber(String p_0)<\/b>\n\nAutomatically generated number\r\n\r\n\\param p_0 ProjectNumber: String\r\n\\return String"},
{text: "NSProject.SetPublishFrom", help: "<b>Void SetPublishFrom(DateTime p_0)<\/b>\n\nPublication valid from (inclusive)\r\n\r\n\\param p_0 PublishFrom: DateTime\r\n\\return DateTime"},
{text: "NSProject.SetPublishTo", help: "<b>Void SetPublishTo(DateTime p_0)<\/b>\n\nPublication valid to (inclusive)\r\n\r\n\\param p_0 PublishTo: DateTime\r\n\\return DateTime"},
{text: "NSProject.SetStatus", help: "<b>Void SetStatus(String p_0)<\/b>\n\nThe projects status\r\n\r\n\\param p_0 Status: String\r\n\\return String"},
{text: "NSProject.SetStatusId", help: "<b>Void SetStatusId(Integer p_0)<\/b>\n\nThe projects status id\r\n\r\n\\param p_0 StatusId: Integer\r\n\\return Integer"},
{text: "NSProject.SetTextId", help: "<b>Void SetTextId(Integer p_0)<\/b>\n\nThe id of the description\r\n\r\n\\param p_0 TextId: Integer\r\n\\return Integer"},
{text: "NSProject.SetType", help: "<b>Void SetType(String p_0)<\/b>\n\nThe project type.\r\n\r\n\\param p_0 Type: String\r\n\\return String"},
{text: "NSProject.SetTypeId", help: "<b>Void SetTypeId(Integer p_0)<\/b>\n\n\\param p_0 TypeId: Integer\r\n\\return Integer"},
{text: "NSProject.SetUpdated", help: "<b>Void SetUpdated(DateTime p_0)<\/b>\n\nLast updated date\r\n\r\n\\param p_0 Updated: DateTime\r\n\\return DateTime"},
{text: "NSProject.SetURL", help: "<b>Void SetURL(String p_0)<\/b>\n\nURL address\r\n\r\n\\param p_0 URL: String\r\n\\return String"},
{text: "NSProject.SetURLName", help: "<b>Void SetURLName(String p_0)<\/b>\n\nVisible field\r\n\r\n\\param p_0 URLName: String\r\n\\return String"},
{text: "Void.NSProjectAgent", help: "<b>NSProjectAgent<\/b>\n\nCollection of all services that works with Project data."},
{text: "NSProjectAgent.HasGuide", help: "<b>Bool HasGuide(Integer p_0)<\/b>\n\n\\param p_0 projectId"},
{text: "NSProjectAgent.HasGuideActivities", help: "<b>Bool HasGuideActivities(Integer p_0)<\/b>\n\n\\param p_0 projectId"},
{text: "NSProjectAgent.IsNumberValid", help: "<b>Bool IsNumberValid(Integer p_0, String p_1)<\/b>\n\nChecks if the number is unique or required.  The setting is configured from admin under system options.\r\n\r\n\\param p_0 contactId\r\n\\param p_1 number\r\n"},
{text: "NSProjectAgent.OfferAutoNextStatusOnApppointmentCompleted", help: "<b>Bool OfferAutoNextStatusOnApppointmentCompleted(Integer p_0)<\/b>\n\n\\param p_0 appointmentId"},
{text: "NSProjectAgent.CreateNewEntry", help: "<b>Integer CreateNewEntry(NSDuplicateEntry p_0)<\/b>\n\nCreates a new project based on external duplicate\r\n\r\n\\param p_0 duplicate: The duplicate to create a new entry based upon\r\n\\return The database identity of the newly created entry\r\n"},
{text: "NSProjectAgent.GetNextProjectStatus", help: "<b>Integer GetNextProjectStatus(Integer p_0)<\/b>\n\n\\param p_0 projectId"},
{text: "NSProjectAgent.GetNextMilestone", help: "<b>NSAppointment GetNextMilestone(Integer p_0)<\/b>\n\n\\param p_0 projectId"},
{text: "NSProjectAgent.GetDuplicates", help: "<b>NSDuplicateEntry[] GetDuplicates(String p_0)<\/b>\n\nGet duplicates(exact or similar in the database) based on the name\r\n\r\n\\param p_0 name: Name used for lookup\r\n\\return Any records matching the specified name\r\n"},
{text: "NSProjectAgent.GetDuplicateRules", help: "<b>NSDuplicateRule[] GetDuplicateRules()<\/b>\n\nRetrieve all available duplicate rules for project\r\n\r\n\\return All available duplicate rules\r\n"},
{text: "NSProjectAgent.GetProjectImage", help: "<b>NSImage GetProjectImage(Integer p_0)<\/b>\n\nReturns the project image that is displayed in the CRM application.\r\n\r\n\\param p_0 projectId: The project id of the project the image belongs to.\r\n\\return The image as a System.Drawing.Image. (If the the image is returned over webservices, the stream is returned as a Base64 encoded string.)\r\n"},
{text: "NSProjectAgent.GetProject", help: "<b>NSProject GetProject(Integer p_0)<\/b>\n\nGets a Project object.\r\n\r\n\\param p_0 projectId: The identifier of the Project object\r\n\\return Project\r\n"},
{text: "NSProjectAgent.GetPublishedProject", help: "<b>NSProject GetPublishedProject(Integer p_0)<\/b>\n\nGet published project by project id.\r\n\r\n\\param p_0 projectId: The project id.\r\n\\return Project\r\n"},
{text: "NSProjectAgent.GetMyMemberProjects", help: "<b>NSProject[] GetMyMemberProjects()<\/b>\n\nReturning the projects where an user is project member.\r\n\r\n\\return The list of projects.\r\n"},
{text: "NSProjectAgent.GetMyProjects", help: "<b>NSProject[] GetMyProjects(Bool p_0)<\/b>\n\nReturning the projects belonging to an associate. If memberProjects is false only the projects where the associate is project responsible is returned, otherwise both the projects where the associate is project responsible and project member is returned.\r\n\r\n\\param p_0 includeMemberProjects: True to include projects where the user is project member.\r\n\\return The list of projects\r\n"},
{text: "NSProjectAgent.GetMyPublishedProjects", help: "<b>NSProject[] GetMyPublishedProjects()<\/b>\n\nGet published projects from the logged in user.\r\n\r\n\\return Projects\r\n"},
{text: "NSProjectAgent.GetProjectList", help: "<b>NSProject[] GetProjectList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSProjectAgent.GetProjectsFromContact", help: "<b>NSProject[] GetProjectsFromContact(Integer p_0)<\/b>\n\nReturns all projects where the given contact has projectmembers.\r\n\r\n\\param p_0 contactId: The contact id\r\n\\return ProjectListEntity\r\n"},
{text: "NSProjectAgent.GetProjectsFromPerson", help: "<b>NSProject[] GetProjectsFromPerson(Integer p_0)<\/b>\n\nReturn all projects where the person is project member.\r\n\r\n\\param p_0 personId: The person id\r\n\\return ProjectListEntity\r\n"},
{text: "NSProjectAgent.GetPublishedProjects", help: "<b>NSProject[] GetPublishedProjects(Integer[] p_0)<\/b>\n\nGet published projects by project ids.\r\n\r\n\\param p_0 projectIds: The array of project ids\r\n\\return Projects\r\n"},
{text: "NSProjectAgent.GetPublishedProjectsOnPersonId", help: "<b>NSProject[] GetPublishedProjectsOnPersonId(Integer p_0)<\/b>\n\nGet published projects where person  is a member\r\n\r\n\\param p_0 personId: The person id\r\n\\return Array of project\r\n"},
{text: "NSProjectAgent.CreateDefaultProjectEntity", help: "<b>NSProjectEntity CreateDefaultProjectEntity()<\/b>\n\nLoading default values into a new ProjectEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ProjectEntity with default values\r\n"},
{text: "NSProjectAgent.GetProjectEntity", help: "<b>NSProjectEntity GetProjectEntity(Integer p_0)<\/b>\n\nGets a ProjectEntity object.\r\n\r\n\\param p_0 projectEntityId: The identifier of the ProjectEntity object\r\n\\return ProjectEntity\r\n"},
{text: "NSProjectAgent.SaveProjectEntity", help: "<b>NSProjectEntity SaveProjectEntity(NSProjectEntity p_0)<\/b>\n\nUpdates the existing ProjectEntity or creates a new ProjectEntity if the id parameter is empty\r\n\r\n\\param p_0 projectEntity: The ProjectEntity that is saved\r\n\\return New or updated ProjectEntity"},
{text: "NSProjectAgent.GetProjectEvent", help: "<b>NSProjectEvent GetProjectEvent(Integer p_0)<\/b>\n\nGets a ProjectEvent object.\r\n\r\n\\param p_0 projectEventId: The identifier of the ProjectEvent object\r\n\\return ProjectEvent\r\n"},
{text: "NSProjectAgent.GetProjectEventOnPerson", help: "<b>NSProjectEvent GetProjectEventOnPerson(Integer p_0, Integer p_1)<\/b>\n\nGets a ProjectEvent object from a project and a person.\r\n\r\n\\param p_0 projectId: The project Id\r\n\\param p_1 personId: Id of the person the project events belong to.\r\n"},
{text: "NSProjectAgent.GetMyProjectEvents", help: "<b>NSProjectEvent[] GetMyProjectEvents()<\/b>\n\nGets all project events that belongs to the currently logged on user. The list of events are filtered by the Audience Visibility restrictions set when the project event is created.\r\n\r\n\\return Array of project events\r\n"},
{text: "NSProjectAgent.GetProjectEventList", help: "<b>NSProjectEvent[] GetProjectEventList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSProjectAgent.GetProjectEventsOnPerson", help: "<b>NSProjectEvent[] GetProjectEventsOnPerson(Integer p_0)<\/b>\n\nGets all project events that belongs to the person specified. The list of events are filtered by the Audience Visibility restrictions set when the project event is created.\r\n\r\n\\param p_0 personId: Id of the person the project events belong to.\r\n\\return Array of project events\r\n"},
{text: "NSProjectAgent.CreateDefaultProjectEventEntity", help: "<b>NSProjectEventEntity CreateDefaultProjectEventEntity()<\/b>\n\nLoading default values into a new ProjectEventEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ProjectEventEntity with default values\r\n"},
{text: "NSProjectAgent.GetProjectEventEntity", help: "<b>NSProjectEventEntity GetProjectEventEntity(Integer p_0)<\/b>\n\nGets a ProjectEventEntity object.\r\n\r\n\\param p_0 projectEventEntityId: The identifier of the ProjectEventEntity object\r\n\\return ProjectEventEntity\r\n"},
{text: "NSProjectAgent.GetProjectEventEntityFromProjectId", help: "<b>NSProjectEventEntity GetProjectEventEntityFromProjectId(Integer p_0)<\/b>\n\nGet a ProjectEventEntity based on a projectId.\r\n\r\n\\param p_0 projectId: The projectId to get a ProjectEventEntity for\r\n\\return ProjectEventEntity\r\n"},
{text: "NSProjectAgent.SaveProjectEventEntity", help: "<b>NSProjectEventEntity SaveProjectEventEntity(NSProjectEventEntity p_0)<\/b>\n\nUpdates the existing ProjectEventEntity or creates a new ProjectEventEntity if the id parameter is empty\r\n\r\n\\param p_0 projectEventEntity: The ProjectEventEntity that is saved\r\n\\return New or updated ProjectEventEntity"},
{text: "NSProjectAgent.GetProjectEventList", help: "<b>NSProjectEventList[] GetProjectEventList(Integer[] p_0)<\/b>\n\nGets an array of ProjectEvent objects.\r\n\r\n\\param p_0 projectEventIds: The identifiers of the ProjectEvent object\r\n\\return Array of ProjectEvent objects\r\n"},
{text: "NSProjectAgent.GetProjectList", help: "<b>NSProjectList[] GetProjectList(Integer[] p_0)<\/b>\n\nGets an array of Project objects.\r\n\r\n\\param p_0 projectIds: The identifiers of the Project object\r\n\\return Array of Project objects\r\n"},
{text: "NSProjectAgent.GetProjectMember", help: "<b>NSProjectMember GetProjectMember(Integer p_0)<\/b>\n\nGet single ProjectMember row.\r\n\r\n\\param p_0 projectMemberId: The id of the ProjectMember row\r\n"},
{text: "NSProjectAgent.UpdateProjectMember", help: "<b>NSProjectMember UpdateProjectMember(NSProjectMember p_0)<\/b>\n\nUpdates a ProjectMember row.\r\n\r\n\\param p_0 projectMember: ProjectMember to update\r\n\\return The Updated ProjectMember\r\n"},
{text: "NSProjectAgent.GetProjectMembers", help: "<b>NSProjectMember[] GetProjectMembers(Integer p_0)<\/b>\n\nReturns an array of project members\r\n\r\n\\param p_0 projectId: The project id\r\n\\return An array of project members\r\n"},
{text: "NSProjectAgent.GetProjectMembersById", help: "<b>NSProjectMember[] GetProjectMembersById(Integer[] p_0)<\/b>\n\nReturns an array of project members\r\n\r\n\\param p_0 projectMemberIds\r\n\\return An array of project members\r\n"},
{text: "NSProjectAgent.AddProjectMembers", help: "<b>Void AddProjectMembers(Integer p_0, NSProjectMember[] p_1)<\/b>\n\n\r\n\r\n\\param p_0 projectEntityId\r\n\\param p_1 projectMembers\r\n"},
{text: "NSProjectAgent.DeleteProjectEntity", help: "<b>Void DeleteProjectEntity(Integer p_0)<\/b>\n\nDeletes the ProjectEntity\r\n\r\n\\param p_0 projectEntityId: The identity of the ProjectEntity\r\n"},
{text: "NSProjectAgent.DeleteProjectEventEntity", help: "<b>Void DeleteProjectEventEntity(Integer p_0)<\/b>\n\nDeletes the ProjectEventEntity\r\n\r\n\\param p_0 projectEventEntityId: The identity of the ProjectEventEntity\r\n"},
{text: "NSProjectAgent.DeleteProjectEventEntityFromProjectId", help: "<b>Void DeleteProjectEventEntityFromProjectId(Integer p_0)<\/b>\n\nDelete a project event based on a project id. Does not delete the project, but does delete the published and ExternalEvent and AudienceVisibility records.\r\n\r\n\\param p_0 projectId: The project id of the external event to delete.\r\n\\return Nothing\r\n"},
{text: "NSProjectAgent.DeleteProjectMemberByIds", help: "<b>Void DeleteProjectMemberByIds(Integer[] p_0)<\/b>\n\nDeletes projectmembers rows.\r\n\r\n\\param p_0 projectMemberIds: An Array of projectmember ids.\r\n"},
{text: "NSProjectAgent.DeleteProjectMembers", help: "<b>Void DeleteProjectMembers(Integer p_0, Integer[] p_1)<\/b>\n\n\r\n\r\n\\param p_0 projectEntityId\r\n\\param p_1 memberIds\r\n"},
{text: "NSProjectAgent.Merge", help: "<b>Void Merge(Integer p_0, Integer p_1, Bool p_2)<\/b>\n\nMerge two projects\r\n\r\n\\param p_0 sourceProjectId: Id of source project to merge\r\n\\param p_1 destinationProjectId: Id of destination project to merge\r\n\\param p_2 replaceEmptyFieldsOnDestination: Fill in empty fields on destination from source\r\n"},
{text: "NSProjectAgent.SaveProjectEntity", help: "<b>Void SaveProjectEntity(NSProjectEntity p_0)<\/b>\n\nUpdates the existing ProjectEntity or creates a new ProjectEntity if the id parameter is empty\r\n\r\n\\param p_0 projectEntity: The ProjectEntity that is saved.\r\n\\return New or updated ProjectEntity\r\n"},
{text: "NSProjectAgent.SaveProjectEventEntity", help: "<b>Void SaveProjectEventEntity(NSProjectEventEntity p_0)<\/b>\n\nUpdates the existing ProjectEventEntity or creates a new ProjectEventEntity if the id parameter is empty\r\n\r\n\\param p_0 projectEventEntity: The ProjectEventEntity that is saved.\r\n\\return New or updated ProjectEventEntity\r\n"},
{text: "NSProjectAgent.SaveProjectMembersFunctionAndComment", help: "<b>Void SaveProjectMembersFunctionAndComment(Integer[] p_0, Integer p_1, String p_2)<\/b>\n\nSaves role and comment on an array of projectmembers represented by ids\r\n\r\n\\param p_0 projectMemberIds\r\n\\param p_1 roleId\r\n\\param p_2 comment"},
{text: "NSProjectAgent.SetDuplicateRulesStatus", help: "<b>Void SetDuplicateRulesStatus(NSDuplicateRule[] p_0)<\/b>\n\nSet which duplicate rules should be active or not\r\n\r\n\\param p_0 rules: Duplicate rules to update active status for\r\n"},
{text: "NSProjectAgent.SetProjectImage", help: "<b>Void SetProjectImage(Integer p_0, NSImage p_1)<\/b>\n\nStores the project image that is displayed in the CRM application.\r\n\r\n\\param p_0 projectId: The project id of the project the image belongs to.\r\n\\param p_1 image: The image that is stored on the project (System.Drawing.Image)\r\n"},
{text: "Void.NSProjectEntity", help: "<b>NSProjectEntity<\/b>\n\nThe Project Service. The service implements all services working with the Project object"},
{text: "NSProjectEntity.GetCompleted", help: "<b>Bool GetCompleted()<\/b>\n\nDone (0=false, 1=true). Status implies changes in which fields are shown in GUI, as well as which fields can be updated\r\n\r\n\\return Bool"},
{text: "NSProjectEntity.GetHasImage", help: "<b>Bool GetHasImage()<\/b>\n\nTrue if the project has an image. (This is the image that is displayed in the CRM client)\r\n\r\n\\return Bool"},
{text: "NSProjectEntity.GetIsPublished", help: "<b>Bool GetIsPublished()<\/b>\n\nGet the Publication is published field\r\n\r\n"},
{text: "NSProjectEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered date\r\n\r\n\\return DateTime"},
{text: "NSProjectEntity.GetEndDate", help: "<b>DateTime GetEndDate()<\/b>\n\nPlanned end date for project, inhertied from type and later editable\r\n\r\n\\return DateTime"},
{text: "NSProjectEntity.GetNextMilestoneDate", help: "<b>DateTime GetNextMilestoneDate()<\/b>\n\nCalculated date, reflects date of closest non-complete future milestone activity\r\n\r\n\\return DateTime"},
{text: "NSProjectEntity.GetPublishEventDate", help: "<b>DateTime GetPublishEventDate()<\/b>\n\n\\return DateTime"},
{text: "NSProjectEntity.GetPublishFrom", help: "<b>DateTime GetPublishFrom()<\/b>\n\n\\return DateTime"},
{text: "NSProjectEntity.GetPublishTo", help: "<b>DateTime GetPublishTo()<\/b>\n\n\\return DateTime"},
{text: "NSProjectEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated date\r\n\r\n\\return DateTime"},
{text: "NSProjectEntity.GetActiveErpLinks", help: "<b>Integer GetActiveErpLinks()<\/b>\n\nThe number of active erp links\r\n\r\n\\return Integer"},
{text: "NSProjectEntity.GetActiveLinks", help: "<b>Integer GetActiveLinks()<\/b>\n\nNumber of active links to documents, other appointments, and such\r\n\r\n\\return Integer"},
{text: "NSProjectEntity.GetActiveStatusMonitorId", help: "<b>Integer GetActiveStatusMonitorId()<\/b>\n\nActive status monitor identity with the lowest rank for project\r\n\r\n\\return Integer"},
{text: "NSProjectEntity.GetNmdAppointmentId", help: "<b>Integer GetNmdAppointmentId()<\/b>\n\nID of appointment that \"caused\" the nextMilestoneDate, can be 0\r\n\r\n\\return Integer"},
{text: "NSProjectEntity.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSProjectEntity.GetExtraFields", help: "<b>Map GetExtraFields()<\/b>\n\n\\return Map"},
{text: "NSProjectEntity.GetUserDefinedFields", help: "<b>Map GetUserDefinedFields()<\/b>\n\n\\return Map"},
{text: "NSProjectEntity.GetAssociate", help: "<b>NSAssociate GetAssociate()<\/b>\n\nThe person that created the project\r\n\r\n\\return Associate"},
{text: "NSProjectEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nThe person that created the project\r\n\r\n\\return Associate"},
{text: "NSProjectEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nThe person that last updated the project\r\n\r\n\\return Associate"},
{text: "NSProjectEntity.GetUrls", help: "<b>NSEntityElement[] GetUrls()<\/b>\n\nThe project's internet adresses\r\n\r\n\\return EntityElementArray"},
{text: "NSProjectEntity.GetLinks", help: "<b>NSLink[] GetLinks()<\/b>\n\n\\return LinkArray"},
{text: "NSProjectEntity.GetProjectMembers", help: "<b>NSProjectMember[] GetProjectMembers()<\/b>\n\nThe persons which are members of the project\r\n\r\n\\return ProjectMemberArray"},
{text: "NSProjectEntity.GetProjectStatus", help: "<b>NSProjectStatus GetProjectStatus()<\/b>\n\nProject status is a list defined by the database administrator. Different statuses of a project may be: “In planning”, “Started”, “Finished” and so on\r\n\r\n\\return ProjectStatus"},
{text: "NSProjectEntity.GetProjectType", help: "<b>NSProjectType GetProjectType()<\/b>\n\n\\return ProjectType"},
{text: "NSProjectEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSProjectEntity.GetImageDescription", help: "<b>String GetImageDescription()<\/b>\n\nDescription of the project image if it exists. (This is the image that is displayed in the CRM client)\r\n\r\n\\return String"},
{text: "NSProjectEntity.GetName", help: "<b>String GetName()<\/b>\n\nProject name\r\n\r\n\\return String"},
{text: "NSProjectEntity.GetPostit", help: "<b>String GetPostit()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSProjectEntity.GetProjectNumber", help: "<b>String GetProjectNumber()<\/b>\n\nAutomatically generated number\r\n\r\n\\return String"},
{text: "NSProjectEntity.SetActiveErpLinks", help: "<b>Void SetActiveErpLinks(Integer p_0)<\/b>\n\nThe number of active erp links\r\n\r\n\\param p_0 ActiveErpLinks: Integer\r\n\\return Integer"},
{text: "NSProjectEntity.SetActiveLinks", help: "<b>Void SetActiveLinks(Integer p_0)<\/b>\n\nNumber of active links to documents, other appointments, and such\r\n\r\n\\param p_0 ActiveLinks: Integer\r\n\\return Integer"},
{text: "NSProjectEntity.SetActiveStatusMonitorId", help: "<b>Void SetActiveStatusMonitorId(Integer p_0)<\/b>\n\nActive status monitor identity with the lowest rank for project\r\n\r\n\\param p_0 ActiveStatusMonitorId: Integer\r\n\\return Integer"},
{text: "NSProjectEntity.SetAssociate", help: "<b>Void SetAssociate(NSAssociate p_0)<\/b>\n\nThe person that created the project\r\n\r\n\\param p_0 Associate: Associate\r\n\\return Associate"},
{text: "NSProjectEntity.SetCompleted", help: "<b>Void SetCompleted(Bool p_0)<\/b>\n\nDone (0=false, 1=true). Status implies changes in which fields are shown in GUI, as well as which fields can be updated\r\n\r\n\\param p_0 Completed: Bool\r\n\\return Bool"},
{text: "NSProjectEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nThe person that created the project\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSProjectEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered date\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSProjectEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSProjectEntity.SetEndDate", help: "<b>Void SetEndDate(DateTime p_0)<\/b>\n\nPlanned end date for project, inhertied from type and later editable\r\n\r\n\\param p_0 EndDate: DateTime\r\n\\return DateTime"},
{text: "NSProjectEntity.SetExtraFields", help: "<b>Void SetExtraFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSProjectEntity.SetHasImage", help: "<b>Void SetHasImage(Bool p_0)<\/b>\n\nTrue if the project has an image. (This is the image that is displayed in the CRM client)\r\n\r\n\\param p_0 HasImage: Bool\r\n\\return Bool"},
{text: "NSProjectEntity.SetImageDescription", help: "<b>Void SetImageDescription(String p_0)<\/b>\n\nDescription of the project image if it exists. (This is the image that is displayed in the CRM client)\r\n\r\n\\param p_0 ImageDescription: String\r\n\\return String"},
{text: "NSProjectEntity.SetIsPublished", help: "<b>Void SetIsPublished()<\/b>\n\n\\param p_0 fields: Bool\r\n\\return Void"},
{text: "NSProjectEntity.SetIsPublished", help: "<b>Void SetIsPublished(Bool p_0)<\/b>\n\n\\return Bool"},
{text: "NSProjectEntity.SetLinks", help: "<b>Void SetLinks(NSLink[] p_0)<\/b>\n\n\\param p_0 Links: LinkArray\r\n\\return LinkArray"},
{text: "NSProjectEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nProject name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSProjectEntity.SetNextMilestoneDate", help: "<b>Void SetNextMilestoneDate(DateTime p_0)<\/b>\n\nCalculated date, reflects date of closest non-complete future milestone activity\r\n\r\n\\param p_0 NextMilestoneDate: DateTime\r\n\\return DateTime"},
{text: "NSProjectEntity.SetNmdAppointmentId", help: "<b>Void SetNmdAppointmentId(Integer p_0)<\/b>\n\nID of appointment that \"caused\" the nextMilestoneDate, can be 0\r\n\r\n\\param p_0 NmdAppointmentId: Integer\r\n\\return Integer"},
{text: "NSProjectEntity.SetPostit", help: "<b>Void SetPostit(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Postit: String\r\n\\return String"},
{text: "NSProjectEntity.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSProjectEntity.SetProjectMembers", help: "<b>Void SetProjectMembers(NSProjectMember[] p_0)<\/b>\n\nThe persons which are members of the project\r\n\r\n\\param p_0 ProjectMembers: ProjectMemberArray\r\n\\return ProjectMemberArray"},
{text: "NSProjectEntity.SetProjectNumber", help: "<b>Void SetProjectNumber(String p_0)<\/b>\n\nAutomatically generated number\r\n\r\n\\param p_0 ProjectNumber: String\r\n\\return String"},
{text: "NSProjectEntity.SetProjectStatus", help: "<b>Void SetProjectStatus(NSProjectStatus p_0)<\/b>\n\nProject status is a list defined by the database administrator. Different statuses of a project may be: “In planning”, “Started”, “Finished” and so on\r\n\r\n\\param p_0 ProjectStatus: ProjectStatus\r\n\\return ProjectStatus"},
{text: "NSProjectEntity.SetProjectType", help: "<b>Void SetProjectType(NSProjectType p_0)<\/b>\n\n\\param p_0 ProjectType: ProjectType\r\n\\return ProjectType"},
{text: "NSProjectEntity.SetPublishEventDate", help: "<b>Void SetPublishEventDate(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSProjectEntity.SetPublishFrom", help: "<b>Void SetPublishFrom(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSProjectEntity.SetPublishTo", help: "<b>Void SetPublishTo(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSProjectEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nThe person that last updated the project\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSProjectEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated date\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSProjectEntity.SetUrls", help: "<b>Void SetUrls(NSEntityElement[] p_0)<\/b>\n\nThe project's internet adresses\r\n\r\n\\param p_0 Urls: EntityElementArray\r\n\\return EntityElementArray"},
{text: "NSProjectEntity.SetUserDefinedFields", help: "<b>Void SetUserDefinedFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "Void.NSProjectEvent", help: "<b>NSProjectEvent<\/b>\n\nA project that is also an event. Used by Audience"},
{text: "NSProjectEvent.GetEnabled", help: "<b>Bool GetEnabled()<\/b>\n\nIf true the event is enabled (visible)\r\n\r\n\\return Bool"},
{text: "NSProjectEvent.GetIsSignedOn", help: "<b>Bool GetIsSignedOn()<\/b>\n\nTrue if the current user is signed on to the event (i.e. is project member)\r\n\r\n\\return Bool"},
{text: "NSProjectEvent.GetSignOff", help: "<b>Bool GetSignOff()<\/b>\n\nIf true, it is possible to sign off the event.\r\n\r\n\\return Bool"},
{text: "NSProjectEvent.GetSignOffTaskEnable", help: "<b>Bool GetSignOffTaskEnable()<\/b>\n\nIf true, a task should be created when the external user signs off an event\r\n\r\n\\return Bool"},
{text: "NSProjectEvent.GetSignOffTriggersAssign", help: "<b>Bool GetSignOffTriggersAssign()<\/b>\n\nIf true, the sign off task should be created as an Assigned task, triggering the invitation dialog\r\n\r\n\\return Bool"},
{text: "NSProjectEvent.GetSignOn", help: "<b>Bool GetSignOn()<\/b>\n\nIf true, it is possible to sign on the event.\r\n\r\n\\return Bool"},
{text: "NSProjectEvent.GetSignOnTaskEnable", help: "<b>Bool GetSignOnTaskEnable()<\/b>\n\nIf true, a task should be created when the external user signs on an event\r\n\r\n\\return Bool"},
{text: "NSProjectEvent.GetSignOnTriggersAssign", help: "<b>Bool GetSignOnTriggersAssign()<\/b>\n\nIf true, the sign on task should be created as an Assigned task, triggering the invitation dialog\r\n\r\n\\return Bool"},
{text: "NSProjectEvent.GetEventDate", help: "<b>DateTime GetEventDate()<\/b>\n\nDate of the event. Event is not visible after this date.\r\n\r\n\\return DateTime"},
{text: "NSProjectEvent.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nId of the person that ows the event (i.e. project)\r\n\r\n\\return Integer"},
{text: "NSProjectEvent.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nId of the project that represents the event\r\n\r\n\\return Integer"},
{text: "NSProjectEvent.GetSignOffPersonId", help: "<b>Integer GetSignOffPersonId()<\/b>\n\nIf 0, the signOn Activity should go into the persons Our Contact; if not 0, this is the Person whose diary should get the activity\r\n\r\n\\return Integer"},
{text: "NSProjectEvent.GetSignOffTaskId", help: "<b>Integer GetSignOffTaskId()<\/b>\n\nIf not 0, sign off should cause an Activity of this type to be registered\r\n\r\n\\return Integer"},
{text: "NSProjectEvent.GetSignOnPersonId", help: "<b>Integer GetSignOnPersonId()<\/b>\n\nIf 0, the signOn Activity should go into the persons Our Contact; if not 0, this is the Person whose diary should get the activity\r\n\r\n\\return Integer"},
{text: "NSProjectEvent.GetSignOnTaskId", help: "<b>Integer GetSignOnTaskId()<\/b>\n\nIf not 0, sign on should cause an Activity of this type to be registered\r\n\r\n\\return Integer"},
{text: "NSProjectEvent.GetAssociateFullName", help: "<b>String GetAssociateFullName()<\/b>\n\nName of the person that ows the event (i.e. project)\r\n\r\n\\return String"},
{text: "NSProjectEvent.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe event description (i.e. the project text)\r\n\r\n\\return String"},
{text: "NSProjectEvent.GetEventName", help: "<b>String GetEventName()<\/b>\n\nThe name of the event (i.e. the project name)\r\n\r\n\\return String"},
{text: "NSProjectEvent.GetSignOffConfirmationText", help: "<b>String GetSignOffConfirmationText()<\/b>\n\nText shown as confirmation text before accepting sign off.\r\n\r\n\\return String"},
{text: "NSProjectEvent.GetSignOffText", help: "<b>String GetSignOffText()<\/b>\n\nDefault text for the activity created when signing off.\r\n\r\n\\return String"},
{text: "NSProjectEvent.GetSignOnConfirmationText", help: "<b>String GetSignOnConfirmationText()<\/b>\n\nText shown as confirmation text before accepting sign on.\r\n\r\n\\return String"},
{text: "NSProjectEvent.GetSignOnText", help: "<b>String GetSignOnText()<\/b>\n\nDefault text for the activity created when signing on.\r\n\r\n\\return String"},
{text: "NSProjectEvent.SetAssociateFullName", help: "<b>Void SetAssociateFullName(String p_0)<\/b>\n\nName of the person that ows the event (i.e. project)\r\n\r\n\\param p_0 AssociateFullName: String\r\n\\return String"},
{text: "NSProjectEvent.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nId of the person that ows the event (i.e. project)\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSProjectEvent.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe event description (i.e. the project text)\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSProjectEvent.SetEnabled", help: "<b>Void SetEnabled(Bool p_0)<\/b>\n\nIf true the event is enabled (visible)\r\n\r\n\\param p_0 Enabled: Bool\r\n\\return Bool"},
{text: "NSProjectEvent.SetEventDate", help: "<b>Void SetEventDate(DateTime p_0)<\/b>\n\nDate of the event. Event is not visible after this date.\r\n\r\n\\param p_0 EventDate: DateTime\r\n\\return DateTime"},
{text: "NSProjectEvent.SetEventName", help: "<b>Void SetEventName(String p_0)<\/b>\n\nThe name of the event (i.e. the project name)\r\n\r\n\\param p_0 EventName: String\r\n\\return String"},
{text: "NSProjectEvent.SetIsSignedOn", help: "<b>Void SetIsSignedOn(Bool p_0)<\/b>\n\nTrue if the current user is signed on to the event (i.e. is project member)\r\n\r\n\\param p_0 IsSignedOn: Bool\r\n\\return Bool"},
{text: "NSProjectEvent.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nId of the project that represents the event\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSProjectEvent.SetSignOff", help: "<b>Void SetSignOff(Bool p_0)<\/b>\n\nIf true, it is possible to sign off the event.\r\n\r\n\\param p_0 SignOff: Bool\r\n\\return Bool"},
{text: "NSProjectEvent.SetSignOffConfirmationText", help: "<b>Void SetSignOffConfirmationText(String p_0)<\/b>\n\nText shown as confirmation text before accepting sign off.\r\n\r\n\\param p_0 SignOffConfirmationText: String\r\n\\return String"},
{text: "NSProjectEvent.SetSignOffPersonId", help: "<b>Void SetSignOffPersonId(Integer p_0)<\/b>\n\nIf 0, the signOn Activity should go into the persons Our Contact; if not 0, this is the Person whose diary should get the activity\r\n\r\n\\param p_0 SignOffPersonId: Integer\r\n\\return Integer"},
{text: "NSProjectEvent.SetSignOffTaskEnable", help: "<b>Void SetSignOffTaskEnable(Bool p_0)<\/b>\n\nIf true, a task should be created when the external user signs off an event\r\n\r\n\\param p_0 SignOffTaskEnable: Bool\r\n\\return Bool"},
{text: "NSProjectEvent.SetSignOffTaskId", help: "<b>Void SetSignOffTaskId(Integer p_0)<\/b>\n\nIf not 0, sign off should cause an Activity of this type to be registered\r\n\r\n\\param p_0 SignOffTaskId: Integer\r\n\\return Integer"},
{text: "NSProjectEvent.SetSignOffText", help: "<b>Void SetSignOffText(String p_0)<\/b>\n\nDefault text for the activity created when signing off.\r\n\r\n\\param p_0 SignOffText: String\r\n\\return String"},
{text: "NSProjectEvent.SetSignOffTriggersAssign", help: "<b>Void SetSignOffTriggersAssign(Bool p_0)<\/b>\n\nIf true, the sign off task should be created as an Assigned task, triggering the invitation dialog\r\n\r\n\\param p_0 SignOffTriggersAssign: Bool\r\n\\return Bool"},
{text: "NSProjectEvent.SetSignOn", help: "<b>Void SetSignOn(Bool p_0)<\/b>\n\nIf true, it is possible to sign on the event.\r\n\r\n\\param p_0 SignOn: Bool\r\n\\return Bool"},
{text: "NSProjectEvent.SetSignOnConfirmationText", help: "<b>Void SetSignOnConfirmationText(String p_0)<\/b>\n\nText shown as confirmation text before accepting sign on.\r\n\r\n\\param p_0 SignOnConfirmationText: String\r\n\\return String"},
{text: "NSProjectEvent.SetSignOnPersonId", help: "<b>Void SetSignOnPersonId(Integer p_0)<\/b>\n\nIf 0, the signOn Activity should go into the persons Our Contact; if not 0, this is the Person whose diary should get the activity\r\n\r\n\\param p_0 SignOnPersonId: Integer\r\n\\return Integer"},
{text: "NSProjectEvent.SetSignOnTaskEnable", help: "<b>Void SetSignOnTaskEnable(Bool p_0)<\/b>\n\nIf true, a task should be created when the external user signs on an event\r\n\r\n\\param p_0 SignOnTaskEnable: Bool\r\n\\return Bool"},
{text: "NSProjectEvent.SetSignOnTaskId", help: "<b>Void SetSignOnTaskId(Integer p_0)<\/b>\n\nIf not 0, sign on should cause an Activity of this type to be registered\r\n\r\n\\param p_0 SignOnTaskId: Integer\r\n\\return Integer"},
{text: "NSProjectEvent.SetSignOnText", help: "<b>Void SetSignOnText(String p_0)<\/b>\n\nDefault text for the activity created when signing on.\r\n\r\n\\param p_0 SignOnText: String\r\n\\return String"},
{text: "NSProjectEvent.SetSignOnTriggersAssign", help: "<b>Void SetSignOnTriggersAssign(Bool p_0)<\/b>\n\nIf true, the sign on task should be created as an Assigned task, triggering the invitation dialog\r\n\r\n\\param p_0 SignOnTriggersAssign: Bool\r\n\\return Bool"},
{text: "Void.NSProjectEventEntity", help: "<b>NSProjectEventEntity<\/b>\n\nThe ProjectEvent Service. The service implements all services working with the ProjectEvent object"},
{text: "NSProjectEventEntity.GetEnabled", help: "<b>Bool GetEnabled()<\/b>\n\nIs the event enabled\r\n\r\n\\return Bool"},
{text: "NSProjectEventEntity.GetIsPublished", help: "<b>Bool GetIsPublished()<\/b>\n\nPublish to external users? When true, the event\/project information is visible to external users through the Audience portal.\n\t\/\/\/ You can control the publish duration using the PublishFrom\/PublishTo properties.\r\n\r\n\\return Bool"},
{text: "NSProjectEventEntity.GetIsVisibleForCategories", help: "<b>Bool GetIsVisibleForCategories()<\/b>\n\n\\return Bool"},
{text: "NSProjectEventEntity.GetIsVisibleForMembers", help: "<b>Bool GetIsVisibleForMembers()<\/b>\n\n\\return Bool"},
{text: "NSProjectEventEntity.GetIsVisibleForPersonInterests", help: "<b>Bool GetIsVisibleForPersonInterests()<\/b>\n\n\\return Bool"},
{text: "NSProjectEventEntity.GetSignOff", help: "<b>Bool GetSignOff()<\/b>\n\nIs Sign Off functionality enabled?\r\n\r\n\\return Bool"},
{text: "NSProjectEventEntity.GetSignOffTaskEnable", help: "<b>Bool GetSignOffTaskEnable()<\/b>\n\nIf not 0, a task should be created when the external user Signs Off an event\r\n\r\n\\return Bool"},
{text: "NSProjectEventEntity.GetSignOffTriggersAssign", help: "<b>Bool GetSignOffTriggersAssign()<\/b>\n\nIf 1, the SignOff task should be created as an Assigned task, triggering the invitation dialog\r\n\r\n\\return Bool"},
{text: "NSProjectEventEntity.GetSignOn", help: "<b>Bool GetSignOn()<\/b>\n\nIs Sign On functionality enabled\r\n\r\n\\return Bool"},
{text: "NSProjectEventEntity.GetSignOnTaskEnable", help: "<b>Bool GetSignOnTaskEnable()<\/b>\n\nIf not 0, a task should be created when the external user Signs On to an event\r\n\r\n\\return Bool"},
{text: "NSProjectEventEntity.GetSignOnTriggersAssign", help: "<b>Bool GetSignOnTriggersAssign()<\/b>\n\nIf 1, the SignOn task should be created as an Assigned task, triggering the invitation dialog\r\n\r\n\\return Bool"},
{text: "NSProjectEventEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSProjectEventEntity.GetEventDate", help: "<b>DateTime GetEventDate()<\/b>\n\nDateof the event; publishing\/visibility dates are in Publish, and restrictions are in AudienceVisibility\r\n\r\n\\return DateTime"},
{text: "NSProjectEventEntity.GetPublishFrom", help: "<b>DateTime GetPublishFrom()<\/b>\n\nPublication valid from (inclusive)\r\n\r\n\\return DateTime"},
{text: "NSProjectEventEntity.GetPublishTo", help: "<b>DateTime GetPublishTo()<\/b>\n\nPublication valid to (inclusive)\r\n\r\n\\return DateTime"},
{text: "NSProjectEventEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSProjectEventEntity.GetId", help: "<b>Integer GetId()<\/b>\n\nId of the external event\r\n\r\n\\return Integer"},
{text: "NSProjectEventEntity.GetProjectEventId", help: "<b>Integer GetProjectEventId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSProjectEventEntity.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nThe projectId for the project this projectEvent belongs to\r\n\r\n\\return Integer"},
{text: "NSProjectEventEntity.GetPublishType", help: "<b>Integer GetPublishType()<\/b>\n\nType of publishing action, 0 = Unknown, 1 = to external persons\r\n\r\n"},
{text: "NSProjectEventEntity.GetSignOffTaskId", help: "<b>Integer GetSignOffTaskId()<\/b>\n\nIf not 0, sign off should cause an Activity of this type to be registered\r\n\r\n\\return Integer"},
{text: "NSProjectEventEntity.GetSignOnTaskId", help: "<b>Integer GetSignOnTaskId()<\/b>\n\nIf not 0, sign on should cause an Activity of this type to be registered\r\n\r\n\\return Integer"},
{text: "NSProjectEventEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nThe person that created the projectevent\r\n\r\n\\return Associate"},
{text: "NSProjectEventEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nThe person that last updated the projectevent\r\n\r\n\\return Associate"},
{text: "NSProjectEventEntity.GetVisibleForCategories", help: "<b>NSMDOListItem[] GetVisibleForCategories()<\/b>\n\nArray of categories that the event is visible for. MDO Table \"category\".\r\n\r\n\\return MDOListItemArray"},
{text: "NSProjectEventEntity.GetVisibleForPersonInterests", help: "<b>NSMDOListItem[] GetVisibleForPersonInterests()<\/b>\n\nArray of person interests (MDO table \"persint\") that this event is visible for.\r\n\r\n\\return MDOListItemArray"},
{text: "NSProjectEventEntity.GetPublishType", help: "<b>NSPublishType GetPublishType()<\/b>\n\nType of publishing action, 0 = Unknown, 1 = to external persons\r\n\r\n\\return PublishType"},
{text: "NSProjectEventEntity.GetSignOffConfirmationText", help: "<b>String GetSignOffConfirmationText()<\/b>\n\nText shown as confirmation text before accepting sign off.\r\n\r\n\\return String"},
{text: "NSProjectEventEntity.GetSignOffText", help: "<b>String GetSignOffText()<\/b>\n\nDefault text for the activity created when signing off.\r\n\r\n\\return String"},
{text: "NSProjectEventEntity.GetSignOnConfirmationText", help: "<b>String GetSignOnConfirmationText()<\/b>\n\nText shown as confirmation text before accepting sign on.\r\n\r\n\\return String"},
{text: "NSProjectEventEntity.GetSignOnText", help: "<b>String GetSignOnText()<\/b>\n\nDefault text for the activity created when signing on.\r\n\r\n\\return String"},
{text: "NSProjectEventEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nThe person that created the projectevent\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSProjectEventEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSProjectEventEntity.SetEnabled", help: "<b>Void SetEnabled(Bool p_0)<\/b>\n\nIs the event enabled\r\n\r\n\\param p_0 Enabled: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetEventDate", help: "<b>Void SetEventDate(DateTime p_0)<\/b>\n\nDateof the event; publishing\/visibility dates are in Publish, and restrictions are in AudienceVisibility\r\n\r\n\\param p_0 EventDate: DateTime\r\n\\return DateTime"},
{text: "NSProjectEventEntity.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nId of the external event\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSProjectEventEntity.SetIsPublished", help: "<b>Void SetIsPublished(Bool p_0)<\/b>\n\nPublish to external users? When true, the event\/project information is visible to external users through the Audience portal.\n\t\/\/\/ You can control the publish duration using the PublishFrom\/PublishTo properties.\r\n\r\n\\param p_0 IsPublished: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetIsVisibleForCategories", help: "<b>Void SetIsVisibleForCategories(Bool p_0)<\/b>\n\n\\param p_0 IsVisibleForCategories: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetIsVisibleForMembers", help: "<b>Void SetIsVisibleForMembers(Bool p_0)<\/b>\n\n\\param p_0 IsVisibleForMembers: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetIsVisibleForPersonInterests", help: "<b>Void SetIsVisibleForPersonInterests(Bool p_0)<\/b>\n\n\\param p_0 IsVisibleForPersonInterests: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetProjectEventId", help: "<b>Void SetProjectEventId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ProjectEventId: Integer\r\n\\return Integer"},
{text: "NSProjectEventEntity.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nThe projectId for the project this projectEvent belongs to\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSProjectEventEntity.SetPublishFrom", help: "<b>Void SetPublishFrom(DateTime p_0)<\/b>\n\nPublication valid from (inclusive)\r\n\r\n\\param p_0 PublishFrom: DateTime\r\n\\return DateTime"},
{text: "NSProjectEventEntity.SetPublishTo", help: "<b>Void SetPublishTo(DateTime p_0)<\/b>\n\nPublication valid to (inclusive)\r\n\r\n\\param p_0 PublishTo: DateTime\r\n\\return DateTime"},
{text: "NSProjectEventEntity.SetPublishType", help: "<b>Void SetPublishType(Integer p_0)<\/b>\n\nType of publishing action, 0 = Unknown, 1 = to external persons\r\n\r\n"},
{text: "NSProjectEventEntity.SetPublishType", help: "<b>Void SetPublishType(NSPublishType p_0)<\/b>\n\nType of publishing action, 0 = Unknown, 1 = to external persons\r\n\r\n\\param p_0 PublishType: PublishType\r\n\\return PublishType"},
{text: "NSProjectEventEntity.SetSignOff", help: "<b>Void SetSignOff(Bool p_0)<\/b>\n\nIs Sign Off functionality enabled?\r\n\r\n\\param p_0 SignOff: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetSignOffConfirmationText", help: "<b>Void SetSignOffConfirmationText(String p_0)<\/b>\n\nText shown as confirmation text before accepting sign off.\r\n\r\n\\param p_0 SignOffConfirmationText: String\r\n\\return String"},
{text: "NSProjectEventEntity.SetSignOffTaskEnable", help: "<b>Void SetSignOffTaskEnable(Bool p_0)<\/b>\n\nIf not 0, a task should be created when the external user Signs Off an event\r\n\r\n\\param p_0 SignOffTaskEnable: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetSignOffTaskId", help: "<b>Void SetSignOffTaskId(Integer p_0)<\/b>\n\nIf not 0, sign off should cause an Activity of this type to be registered\r\n\r\n\\param p_0 SignOffTaskId: Integer\r\n\\return Integer"},
{text: "NSProjectEventEntity.SetSignOffText", help: "<b>Void SetSignOffText(String p_0)<\/b>\n\nDefault text for the activity created when signing off.\r\n\r\n\\param p_0 SignOffText: String\r\n\\return String"},
{text: "NSProjectEventEntity.SetSignOffTriggersAssign", help: "<b>Void SetSignOffTriggersAssign(Bool p_0)<\/b>\n\nIf 1, the SignOff task should be created as an Assigned task, triggering the invitation dialog\r\n\r\n\\param p_0 SignOffTriggersAssign: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetSignOn", help: "<b>Void SetSignOn(Bool p_0)<\/b>\n\nIs Sign On functionality enabled\r\n\r\n\\param p_0 SignOn: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetSignOnConfirmationText", help: "<b>Void SetSignOnConfirmationText(String p_0)<\/b>\n\nText shown as confirmation text before accepting sign on.\r\n\r\n\\param p_0 SignOnConfirmationText: String\r\n\\return String"},
{text: "NSProjectEventEntity.SetSignOnTaskEnable", help: "<b>Void SetSignOnTaskEnable(Bool p_0)<\/b>\n\nIf not 0, a task should be created when the external user Signs On to an event\r\n\r\n\\param p_0 SignOnTaskEnable: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetSignOnTaskId", help: "<b>Void SetSignOnTaskId(Integer p_0)<\/b>\n\nIf not 0, sign on should cause an Activity of this type to be registered\r\n\r\n\\param p_0 SignOnTaskId: Integer\r\n\\return Integer"},
{text: "NSProjectEventEntity.SetSignOnText", help: "<b>Void SetSignOnText(String p_0)<\/b>\n\nDefault text for the activity created when signing on.\r\n\r\n\\param p_0 SignOnText: String\r\n\\return String"},
{text: "NSProjectEventEntity.SetSignOnTriggersAssign", help: "<b>Void SetSignOnTriggersAssign(Bool p_0)<\/b>\n\nIf 1, the SignOn task should be created as an Assigned task, triggering the invitation dialog\r\n\r\n\\param p_0 SignOnTriggersAssign: Bool\r\n\\return Bool"},
{text: "NSProjectEventEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nThe person that last updated the projectevent\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSProjectEventEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSProjectEventEntity.SetVisibleForCategories", help: "<b>Void SetVisibleForCategories(NSMDOListItem[] p_0)<\/b>\n\nArray of categories that the event is visible for. MDO Table \"category\".\r\n\r\n\\param p_0 VisibleForCategories: MDOListItemArray\r\n\\return MDOListItemArray"},
{text: "NSProjectEventEntity.SetVisibleForPersonInterests", help: "<b>Void SetVisibleForPersonInterests(NSMDOListItem[] p_0)<\/b>\n\nArray of person interests (MDO table \"persint\") that this event is visible for.\r\n\r\n\\param p_0 VisibleForPersonInterests: MDOListItemArray\r\n\\return MDOListItemArray"},
{text: "Void.NSProjectMember", help: "<b>NSProjectMember<\/b>\n\n"},
{text: "NSProjectMember.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nContact ID of person who is the project member (slight denormalization)\r\n\r\n\\return Integer"},
{text: "NSProjectMember.GetCountryId", help: "<b>Integer GetCountryId()<\/b>\n\nCountry\r\n\r\n\\return Integer"},
{text: "NSProjectMember.GetEmailId", help: "<b>Integer GetEmailId()<\/b>\n\nThe persons email address id\r\n\r\n\\return Integer"},
{text: "NSProjectMember.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nThe persons primary key\r\n\r\n\\return Integer"},
{text: "NSProjectMember.GetPhoneId", help: "<b>Integer GetPhoneId()<\/b>\n\nThe phone id\r\n\r\n\\return Integer"},
{text: "NSProjectMember.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nParent project\r\n\r\n\\return Integer"},
{text: "NSProjectMember.GetProjectmemberId", help: "<b>Integer GetProjectmemberId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSProjectMember.GetProjectMemberTypeId", help: "<b>Integer GetProjectMemberTypeId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSProjectMember.GetComment", help: "<b>String GetComment()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSProjectMember.GetContactName", help: "<b>String GetContactName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSProjectMember.GetEmailAddress", help: "<b>String GetEmailAddress()<\/b>\n\nThe address itself\r\n\r\n\\return String"},
{text: "NSProjectMember.GetEmailAddressName", help: "<b>String GetEmailAddressName()<\/b>\n\nVisible field\r\n\r\n\\return String"},
{text: "NSProjectMember.GetFirstname", help: "<b>String GetFirstname()<\/b>\n\nFirst name\r\n\r\n\\return String"},
{text: "NSProjectMember.GetFullName", help: "<b>String GetFullName()<\/b>\n\nThe person's full name localized to the current culture\/country.  (internal name used in clients for employees)\r\n\r\n\\return String"},
{text: "NSProjectMember.GetLastname", help: "<b>String GetLastname()<\/b>\n\nLast name\r\n\r\n\\return String"},
{text: "NSProjectMember.GetMiddleName", help: "<b>String GetMiddleName()<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\return String"},
{text: "NSProjectMember.GetMrmrs", help: "<b>String GetMrmrs()<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\return String"},
{text: "NSProjectMember.GetPhone", help: "<b>String GetPhone()<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\return String"},
{text: "NSProjectMember.GetProjectMemberTypeName", help: "<b>String GetProjectMemberTypeName()<\/b>\n\nThe projectmembers type id\r\n\r\n\\return String"},
{text: "NSProjectMember.SetComment", help: "<b>Void SetComment(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Comment: String\r\n\\return String"},
{text: "NSProjectMember.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nContact ID of person who is the project member (slight denormalization)\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSProjectMember.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSProjectMember.SetCountryId", help: "<b>Void SetCountryId(Integer p_0)<\/b>\n\nCountry\r\n\r\n\\param p_0 CountryId: Integer\r\n\\return Integer"},
{text: "NSProjectMember.SetEmailAddress", help: "<b>Void SetEmailAddress(String p_0)<\/b>\n\nThe address itself\r\n\r\n\\param p_0 EmailAddress: String\r\n\\return String"},
{text: "NSProjectMember.SetEmailAddressName", help: "<b>Void SetEmailAddressName(String p_0)<\/b>\n\nVisible field\r\n\r\n\\param p_0 EmailAddressName: String\r\n\\return String"},
{text: "NSProjectMember.SetEmailId", help: "<b>Void SetEmailId(Integer p_0)<\/b>\n\nThe persons email address id\r\n\r\n\\param p_0 EmailId: Integer\r\n\\return Integer"},
{text: "NSProjectMember.SetFirstname", help: "<b>Void SetFirstname(String p_0)<\/b>\n\nFirst name\r\n\r\n\\param p_0 Firstname: String\r\n\\return String"},
{text: "NSProjectMember.SetFullName", help: "<b>Void SetFullName(String p_0)<\/b>\n\nThe person's full name localized to the current culture\/country.  (internal name used in clients for employees)\r\n\r\n\\param p_0 FullName: String\r\n\\return String"},
{text: "NSProjectMember.SetLastname", help: "<b>Void SetLastname(String p_0)<\/b>\n\nLast name\r\n\r\n\\param p_0 Lastname: String\r\n\\return String"},
{text: "NSProjectMember.SetMiddleName", help: "<b>Void SetMiddleName(String p_0)<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\param p_0 MiddleName: String\r\n\\return String"},
{text: "NSProjectMember.SetMrmrs", help: "<b>Void SetMrmrs(String p_0)<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\param p_0 Mrmrs: String\r\n\\return String"},
{text: "NSProjectMember.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nThe persons primary key\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSProjectMember.SetPhone", help: "<b>Void SetPhone(String p_0)<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\param p_0 Phone: String\r\n\\return String"},
{text: "NSProjectMember.SetPhoneId", help: "<b>Void SetPhoneId(Integer p_0)<\/b>\n\nThe phone id\r\n\r\n\\param p_0 PhoneId: Integer\r\n\\return Integer"},
{text: "NSProjectMember.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nParent project\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSProjectMember.SetProjectmemberId", help: "<b>Void SetProjectmemberId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ProjectmemberId: Integer\r\n\\return Integer"},
{text: "NSProjectMember.SetProjectMemberTypeId", help: "<b>Void SetProjectMemberTypeId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ProjectMemberTypeId: Integer\r\n\\return Integer"},
{text: "NSProjectMember.SetProjectMemberTypeName", help: "<b>Void SetProjectMemberTypeName(String p_0)<\/b>\n\nThe projectmembers type id\r\n\r\n\\param p_0 ProjectMemberTypeName: String\r\n\\return String"},
{text: "Void.NSProjectStatus", help: "<b>NSProjectStatus<\/b>\n\n"},
{text: "NSProjectStatus.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSProjectStatus.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSProjectStatus.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSProjectStatus.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSProjectStatus.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSProjectStatus.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSProjectType", help: "<b>NSProjectType<\/b>\n\n"},
{text: "NSProjectType.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSProjectType.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSProjectType.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSProjectType.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSProjectType.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSProjectType.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSProjectTypeEntity", help: "<b>NSProjectTypeEntity<\/b>\n\n"},
{text: "NSProjectTypeEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\return Bool"},
{text: "NSProjectTypeEntity.GetHasGuide", help: "<b>Bool GetHasGuide()<\/b>\n\nDoes this project type have a guide attached\r\n\r\n\\return Bool"},
{text: "NSProjectTypeEntity.GetIsAutoAdvance", help: "<b>Bool GetIsAutoAdvance()<\/b>\n\nDoes the project status advance automatically, when the last guided activity in a status is completed?\r\n\r\n\\return Bool"},
{text: "NSProjectTypeEntity.GetDurationUnit", help: "<b>Integer GetDurationUnit()<\/b>\n\n"},
{text: "NSProjectTypeEntity.GetProjectDuration", help: "<b>Integer GetProjectDuration()<\/b>\n\nExpected duration of project, in given units\r\n\r\n\\return Integer"},
{text: "NSProjectTypeEntity.GetProjTypeId", help: "<b>Integer GetProjTypeId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSProjectTypeEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSProjectTypeEntity.GetDurationUnit", help: "<b>NSDurationUnit GetDurationUnit()<\/b>\n\nUnits for the duration\r\n\r\n\\return DurationUnit"},
{text: "NSProjectTypeEntity.GetStages", help: "<b>NSSelectableMDOListItem[] GetStages()<\/b>\n\nStages (project statuses), those associated with this ProjType are selected.\r\n\r\n\\return SelectableMDOListItemArray"},
{text: "NSProjectTypeEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSProjectTypeEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSProjectTypeEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSProjectTypeEntity.SetDurationUnit", help: "<b>Void SetDurationUnit(Integer p_0)<\/b>\n\n"},
{text: "NSProjectTypeEntity.SetDurationUnit", help: "<b>Void SetDurationUnit(NSDurationUnit p_0)<\/b>\n\nUnits for the duration\r\n\r\n\\param p_0 DurationUnit: DurationUnit\r\n\\return DurationUnit"},
{text: "NSProjectTypeEntity.SetHasGuide", help: "<b>Void SetHasGuide(Bool p_0)<\/b>\n\nDoes this project type have a guide attached\r\n\r\n\\param p_0 HasGuide: Bool\r\n\\return Bool"},
{text: "NSProjectTypeEntity.SetIsAutoAdvance", help: "<b>Void SetIsAutoAdvance(Bool p_0)<\/b>\n\nDoes the project status advance automatically, when the last guided activity in a status is completed?\r\n\r\n\\param p_0 IsAutoAdvance: Bool\r\n\\return Bool"},
{text: "NSProjectTypeEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSProjectTypeEntity.SetProjectDuration", help: "<b>Void SetProjectDuration(Integer p_0)<\/b>\n\nExpected duration of project, in given units\r\n\r\n\\param p_0 ProjectDuration: Integer\r\n\\return Integer"},
{text: "NSProjectTypeEntity.SetProjTypeId", help: "<b>Void SetProjTypeId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ProjTypeId: Integer\r\n\\return Integer"},
{text: "NSProjectTypeEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSProjectTypeEntity.SetStages", help: "<b>Void SetStages(NSSelectableMDOListItem[] p_0)<\/b>\n\nStages (project statuses), those associated with this ProjType are selected.\r\n\r\n\\param p_0 Stages: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSProjectTypeEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSProjectTypeStatusLink", help: "<b>NSProjectTypeStatusLink<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.GetProjectTypeStatusLinkId", help: "<b>Integer GetProjectTypeStatusLinkId()<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.GetProjStatusId", help: "<b>Integer GetProjStatusId()<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.GetProjTypeId", help: "<b>Integer GetProjTypeId()<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.GetProjStatusName", help: "<b>String GetProjStatusName()<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.GetProjStatusTooltip", help: "<b>String GetProjStatusTooltip()<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.GetProjTypeName", help: "<b>String GetProjTypeName()<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.GetProjTypeTooltip", help: "<b>String GetProjTypeTooltip()<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.SetProjectTypeStatusLinkId", help: "<b>Void SetProjectTypeStatusLinkId(Integer p_0)<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.SetProjStatusId", help: "<b>Void SetProjStatusId(Integer p_0)<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.SetProjStatusName", help: "<b>Void SetProjStatusName(String p_0)<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.SetProjStatusTooltip", help: "<b>Void SetProjStatusTooltip(String p_0)<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.SetProjTypeId", help: "<b>Void SetProjTypeId(Integer p_0)<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.SetProjTypeName", help: "<b>Void SetProjTypeName(String p_0)<\/b>\n\n"},
{text: "NSProjectTypeStatusLink.SetProjTypeTooltip", help: "<b>Void SetProjTypeTooltip(String p_0)<\/b>\n\n"},
{text: "Void.NSProvidedCredential", help: "<b>NSProvidedCredential<\/b>\n\n"},
{text: "NSProvidedCredential.GetCredentialId", help: "<b>Integer GetCredentialId()<\/b>\n\n"},
{text: "NSProvidedCredential.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\n"},
{text: "NSProvidedCredential.GetSearchName", help: "<b>String GetSearchName()<\/b>\n\n"},
{text: "NSProvidedCredential.GetType", help: "<b>String GetType()<\/b>\n\n"},
{text: "NSProvidedCredential.SetCredentialId", help: "<b>Void SetCredentialId(Integer p_0)<\/b>\n\n"},
{text: "NSProvidedCredential.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\n"},
{text: "NSProvidedCredential.SetSearchName", help: "<b>Void SetSearchName(String p_0)<\/b>\n\n"},
{text: "NSProvidedCredential.SetType", help: "<b>Void SetType(String p_0)<\/b>\n\n"},
{text: "Void.NSProviderInfo", help: "<b>NSProviderInfo<\/b>\n\nInformation about a provider plugin"},
{text: "NSProviderInfo.GetSupportsConfig", help: "<b>Bool GetSupportsConfig()<\/b>\n\nTrue if it supports the config parameters to the sending methods\r\n\r\n\\return Bool"},
{text: "NSProviderInfo.GetName", help: "<b>String GetName()<\/b>\n\nUnique name of the provider plugin\r\n\r\n\\return String"},
{text: "NSProviderInfo.GetSupportedMessagingFormats", help: "<b>String[] GetSupportedMessagingFormats()<\/b>\n\nThis value can typically be \"sms\/160\", \"sms\/mms\", \"smtp\/rfc822\"\r\n\r\n\\return StringArray"},
{text: "NSProviderInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nUnique name of the provider plugin\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSProviderInfo.SetSupportedMessagingFormats", help: "<b>Void SetSupportedMessagingFormats(String[] p_0)<\/b>\n\nThis value can typically be \"sms\/160\", \"sms\/mms\", \"smtp\/rfc822\"\r\n\r\n\\param p_0 SupportedMessagingFormats: StringArray\r\n\\return StringArray"},
{text: "NSProviderInfo.SetSupportsConfig", help: "<b>Void SetSupportsConfig(Bool p_0)<\/b>\n\nTrue if it supports the config parameters to the sending methods\r\n\r\n\\param p_0 SupportsConfig: Bool\r\n\\return Bool"},
{text: "Void.NSQuote", help: "<b>NSQuote<\/b>\n\nQuote carrier with the active quote version and favorite alternative."},
{text: "NSQuote.GetAcceptedQuoteAlternativeId", help: "<b>Integer GetAcceptedQuoteAlternativeId()<\/b>\n\nThe primary key of the Quote Alternative which was finally accepted by the customer. Set when the user is marking a quote as accepted.\r\n\r\n\\return Integer"},
{text: "NSQuote.GetActiveQuoteVersionId", help: "<b>Integer GetActiveQuoteVersionId()<\/b>\n\nThe primary key of the Quote Version that is currently active. (The active version will always be the latest version.)\r\n\r\n\\return Integer"},
{text: "NSQuote.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nThe ID of the main Quote Document\r\n\r\n\\return Integer"},
{text: "NSQuote.GetQuoteConnectionId", help: "<b>Integer GetQuoteConnectionId()<\/b>\n\nThe connection in the CRM system to where this quote came from. Identifies the ERP connection used for this quote. Each quote is bound to one and only one connection.\r\n\r\n\\return Integer"},
{text: "NSQuote.GetQuoteId", help: "<b>Integer GetQuoteId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSQuote.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nThe foreign key to the corresponding sale\r\n\r\n\\return Integer"},
{text: "NSQuote.GetUseValuesFromQuote", help: "<b>Integer GetUseValuesFromQuote()<\/b>\n\nIf true, then the Earning, Earning_Percent and Amount fields are populated from the QuoteVersion.QuoteAlternative (current revision, most-likely alternative).\r\n\r\n\\return Integer"},
{text: "NSQuote.GetFavoriteQuoteAlternative", help: "<b>NSQuoteAlternative GetFavoriteQuoteAlternative()<\/b>\n\nThe favorite quote alternative for the quote and active quote version.\r\n\r\n\\return QuoteAlternative"},
{text: "NSQuote.GetActiveQuoteVersion", help: "<b>NSQuoteVersion GetActiveQuoteVersion()<\/b>\n\nThe active quote version for the quote\r\n\r\n\\return QuoteVersion"},
{text: "NSQuote.GetERPOrderKey", help: "<b>String GetERPOrderKey()<\/b>\n\nThe key in the ERP system that identifies this sale's Order, as transferred and possibly later edited in the ERP system.  Only filled out if there exists a corresponding order representation of the quote in the ERP system.\r\n\r\n\\return String"},
{text: "NSQuote.GetERPQuoteKey", help: "<b>String GetERPQuoteKey()<\/b>\n\nForeign key of quote (if available). The key in the ERP system that identifies this sale's Quote (as opposed to the later Order information)\r\n\r\n\\return String"},
{text: "NSQuote.GetOrderComment", help: "<b>String GetOrderComment()<\/b>\n\nA comment that is intended for the Invoice, Order, Packing list and similar stages - AFTER the quote has become an order and goes to ERP for processing\r\n\r\n\\return String"},
{text: "NSQuote.GetPoNumber", help: "<b>String GetPoNumber()<\/b>\n\nCustomer's Purchase order number\r\n\r\n\\return String"},
{text: "NSQuote.GetPreferredEmailCulture", help: "<b>String GetPreferredEmailCulture()<\/b>\n\nWhen emails are sent (offer or confirmation), a language can be chosen in the GUI; this field saves the most recent choice and can be used to default the next such choice. Default-default is user's current language\r\n\r\n\\return String"},
{text: "NSQuote.SetAcceptedQuoteAlternativeId", help: "<b>Void SetAcceptedQuoteAlternativeId(Integer p_0)<\/b>\n\nThe primary key of the Quote Alternative which was finally accepted by the customer. Set when the user is marking a quote as accepted.\r\n\r\n\\param p_0 AcceptedQuoteAlternativeId: Integer\r\n\\return Integer"},
{text: "NSQuote.SetActiveQuoteVersion", help: "<b>Void SetActiveQuoteVersion(NSQuoteVersion p_0)<\/b>\n\nThe active quote version for the quote\r\n\r\n\\param p_0 ActiveQuoteVersion: QuoteVersion\r\n\\return QuoteVersion"},
{text: "NSQuote.SetActiveQuoteVersionId", help: "<b>Void SetActiveQuoteVersionId(Integer p_0)<\/b>\n\nThe primary key of the Quote Version that is currently active. (The active version will always be the latest version.)\r\n\r\n\\param p_0 ActiveQuoteVersionId: Integer\r\n\\return Integer"},
{text: "NSQuote.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nThe ID of the main Quote Document\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSQuote.SetERPOrderKey", help: "<b>Void SetERPOrderKey(String p_0)<\/b>\n\nThe key in the ERP system that identifies this sale's Order, as transferred and possibly later edited in the ERP system.  Only filled out if there exists a corresponding order representation of the quote in the ERP system.\r\n\r\n\\param p_0 ERPOrderKey: String\r\n\\return String"},
{text: "NSQuote.SetERPQuoteKey", help: "<b>Void SetERPQuoteKey(String p_0)<\/b>\n\nForeign key of quote (if available). The key in the ERP system that identifies this sale's Quote (as opposed to the later Order information)\r\n\r\n\\param p_0 ERPQuoteKey: String\r\n\\return String"},
{text: "NSQuote.SetFavoriteQuoteAlternative", help: "<b>Void SetFavoriteQuoteAlternative(NSQuoteAlternative p_0)<\/b>\n\nThe favorite quote alternative for the quote and active quote version.\r\n\r\n\\param p_0 FavoriteQuoteAlternative: QuoteAlternative\r\n\\return QuoteAlternative"},
{text: "NSQuote.SetOrderComment", help: "<b>Void SetOrderComment(String p_0)<\/b>\n\nA comment that is intended for the Invoice, Order, Packing list and similar stages - AFTER the quote has become an order and goes to ERP for processing\r\n\r\n\\param p_0 OrderComment: String\r\n\\return String"},
{text: "NSQuote.SetPoNumber", help: "<b>Void SetPoNumber(String p_0)<\/b>\n\nCustomer's Purchase order number\r\n\r\n\\param p_0 PoNumber: String\r\n\\return String"},
{text: "NSQuote.SetPreferredEmailCulture", help: "<b>Void SetPreferredEmailCulture(String p_0)<\/b>\n\nWhen emails are sent (offer or confirmation), a language can be chosen in the GUI; this field saves the most recent choice and can be used to default the next such choice. Default-default is user's current language\r\n\r\n\\param p_0 PreferredEmailCulture: String\r\n\\return String"},
{text: "NSQuote.SetQuoteConnectionId", help: "<b>Void SetQuoteConnectionId(Integer p_0)<\/b>\n\nThe connection in the CRM system to where this quote came from. Identifies the ERP connection used for this quote. Each quote is bound to one and only one connection.\r\n\r\n\\param p_0 QuoteConnectionId: Integer\r\n\\return Integer"},
{text: "NSQuote.SetQuoteId", help: "<b>Void SetQuoteId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 QuoteId: Integer\r\n\\return Integer"},
{text: "NSQuote.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nThe foreign key to the corresponding sale\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSQuote.SetUseValuesFromQuote", help: "<b>Void SetUseValuesFromQuote(Integer p_0)<\/b>\n\nIf true, then the Earning, Earning_Percent and Amount fields are populated from the QuoteVersion.QuoteAlternative (current revision, most-likely alternative).\r\n\r\n\\param p_0 UseValuesFromQuote: Integer\r\n\\return Integer"},
{text: "Void.NSQuoteAgent", help: "<b>NSQuoteAgent<\/b>\n\nServices for the Quote Management feature, part of the Sale module"},
{text: "NSQuoteAgent.CanConnectorProvideCapability", help: "<b>Bool CanConnectorProvideCapability(Integer p_0, String p_1)<\/b>\n\nCan the connector provide the capability\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\param p_1 capabilityName: Capability name\r\n\\return Capability name"},
{text: "NSQuoteAgent.IncludeQuoteVersionAttachment", help: "<b>Bool IncludeQuoteVersionAttachment(Integer p_0, Integer p_1, Bool p_2)<\/b>\n\nToggle the 'included' state of a quote version attachment; will throw exceptions if called on locked versions\r\n\r\n\\param p_0 quoteVersionId: The ID of the Quote version\r\n\\param p_1 documentId: The ID of the document\r\n\\param p_2 include: Desired state\r\n\\return The new state"},
{text: "NSQuoteAgent.SaveQuoteVersionNumber", help: "<b>Bool SaveQuoteVersionNumber(Integer p_0, String p_1)<\/b>\n\nSave the quote version number if it is valid\r\n\r\n\\param p_0 quoteVersionId: VersionId of the quote version\r\n\\param p_1 number: The number to save\r\n\\return True if the number was valid and then saved"},
{text: "NSQuoteAgent.ToggleQuoteVersionAttachmentIncluded", help: "<b>Bool ToggleQuoteVersionAttachmentIncluded(Integer p_0)<\/b>\n\nToggle the 'included' state of a quote version attachment\r\n\r\n\\param p_0 quoteVersionAttachmentId: The ID of the quote version attachment row\r\n\\return The new state"},
{text: "NSQuoteAgent.ToggleSaleTypeQuoteAttachmentDefaultIncluded", help: "<b>Bool ToggleSaleTypeQuoteAttachmentDefaultIncluded(Integer p_0)<\/b>\n\nToggle the 'default included' state of a sale type quote attachment\r\n\r\n\\param p_0 saleTypeQuoteAttachmentId: The ID of the sale type quote attachment row\r\n\\return The new state"},
{text: "NSQuoteAgent.GetConfigurationFields", help: "<b>FieldMetadataDictionary GetConfigurationFields(Integer p_0, String p_1)<\/b>\n\n"},
{text: "NSQuoteAgent.AddSaleTypeQuoteAttachment", help: "<b>Integer AddSaleTypeQuoteAttachment(Integer p_0, Integer p_1)<\/b>\n\nAdds a new quote attachment document to a sale type\r\n\r\n\\param p_0 saleTypeId: The ID of the sale type\r\n\\param p_1 documentId: The ID of the document\r\n\\return ID of the new sale type quote attachment row"},
{text: "NSQuoteAgent.GetConnectionConfigFields", help: "<b>Map GetConnectionConfigFields(Integer p_0)<\/b>\n\n"},
{text: "NSQuoteAgent.SaveConnectionConfigFields", help: "<b>Map SaveConnectionConfigFields(Integer p_0, Map p_1)<\/b>\n\n"},
{text: "NSQuoteAgent.ApproveQuoteVersion", help: "<b>NSApproveRejectResponse ApproveQuoteVersion(Integer p_0, String p_1, Integer p_2, String p_3)<\/b>\n\nApproves a quote version\r\n\r\n\\param p_0 quoteVersionId: QuoteVersionId to approve.\r\n\\param p_1 approvedByText: 'Approved by' prefix to ApprovalText used when creating appointment task to log approval. Must be passed since service does not know which language to use for 'Approved By' string.\r\n\\param p_2 approvedByAssociateId: AssociateId of the associate who approved the quote version.\r\n\\param p_3 approvalText: Approval text.\r\n\\return Response of the the operation"},
{text: "NSQuoteAgent.RejectQuoteVersion", help: "<b>NSApproveRejectResponse RejectQuoteVersion(Integer p_0, String p_1, Integer p_2, String p_3)<\/b>\n\nRejects a quote version\r\n\r\n\\param p_0 quoteVersionId: QuoteVersionId to approve.\r\n\\param p_1 rejectedByText: 'Rejected by' prefix to RejectionText used when creating appointment task to log rejection. Must be passed since service does not know which language to use for 'Rejected By' string.\r\n\\param p_2 rejectedByAssociateId: AssociateId of the associate who rejected the quote version.\r\n\\param p_3 rejectionText: Rejection text.\r\n\\return Response of the the operation"},
{text: "NSQuoteAgent.GetConfigurationFields", help: "<b>NSFieldMetadataDictionary GetConfigurationFields(Integer p_0, String p_1)<\/b>\n\nUsed by ADMIN. Asks for metadata needed to populate admin dialog that takes in the information needed to create a connection to an ERP system. The values entered in the dialog are stored in SuperOffice db and used when InitializeConnector is called by the client.\r\n\r\n\\param p_0 connectionId: Id of an existing connection, if any. Initializes connection with current config values if non-zero.\r\n\\param p_1 connectorName: Name of the connector. Ignored if connectionId is non-zero.\r\n\\return carriers"},
{text: "NSQuoteAgent.GetQuoteLineImage", help: "<b>NSImage GetQuoteLineImage(Integer p_0, Integer p_1)<\/b>\n\nGets an image connected to a quoteline, either from the ERPProvider or from the SuperOffice database\r\n\r\n\\param p_0 quoteLineId: Primary key of the quoteline\r\n\\param p_1 rank: The rank of the image.\r\n\\return The image. Returns null if no image available."},
{text: "NSQuoteAgent.GetConnectionStartupResponse", help: "<b>NSPluginResponse GetConnectionStartupResponse(Integer p_0)<\/b>\n\nReturns the PluginResponseInfo for the connection initialization. Does not initialize the connection, just returns what happened when initialize was called.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\return PluginResponseInfo for the connection initialization."},
{text: "NSQuoteAgent.HasConnections", help: "<b>NSPluginResponse HasConnections()<\/b>\n\nWhether or not the system has any connections available for this user.\r\n\r\n\\return The response"},
{text: "NSQuoteAgent.TestConnection", help: "<b>NSPluginResponse TestConnection(String p_0, Map p_1)<\/b>\n\n"},
{text: "NSQuoteAgent.TestConnection", help: "<b>NSPluginResponse TestConnection(String p_0, StringDictionary p_1)<\/b>\n\nUsed by the Admin clients. Testing if the connection data is sufficient to get a connection with the ERP system. The Connector should try to do some operations to check if the connection has sufficient rights to run. The connection has not been created yet. TestConnection is called without InitializeConnector being called first.\r\n\r\n\\param p_0 connectorName: Name of the connector.\r\n\\param p_1 connectionData: Basically the name\/value collection of the configuration data requested to create a connection\r\n\\return How the test went"},
{text: "NSQuoteAgent.GetConnectionStartupErrors", help: "<b>NSPluginResponse[] GetConnectionStartupErrors()<\/b>\n\nReturns an array of PluginResponseInfos for all failed connection initializations.\r\n\r\n\\return Array of PluginResponseInfos for each failed connection initialization."},
{text: "NSQuoteAgent.GetOrderState", help: "<b>NSPluginUrlResponse GetOrderState(Integer p_0)<\/b>\n\nIf there is a problem with a quoteline, the error description shall be placed in the status and reason fields of the quoteline, if there is a problem with the alternative, the error description shall be placed in the status and reason fields of the alternative. A summary of all the problems (if any) should be placed in the response object. Requires that the Create-Order capability is true.\r\n\r\n\\param p_0 quoteVersionId: the QuoteVersionId of the ordered version.\r\n\\return The order state. If a new quoteversion is created, the QuoteVersionId will be found in Changes.AddedRecords."},
{text: "NSQuoteAgent.PlaceOrder", help: "<b>NSPluginUrlResponse PlaceOrder(Integer p_0, Bool p_1, String p_2, String p_3, String p_4)<\/b>\n\nPlace an order in the ERP system.\r\n\r\n\\param p_0 quoteAlternativeId: Id of the alternative to place the order on.\r\n\\param p_1 markSaleAsSold: Should the state of the owning Sale be set to sold\r\n\\param p_2 poNumber: Purchase order number, saved to Quote record\r\n\\param p_3 orderComment: Order comment, saved to Quote record\r\n\\param p_4 culture: Desired culture for email body and other culture-sensitive templates\/content\r\n\\return Status for the placed order."},
{text: "NSQuoteAgent.SendQuoteVersion", help: "<b>NSPluginUrlResponse SendQuoteVersion(Integer p_0, DateTime p_1, DateTime p_2, String p_3, String p_4)<\/b>\n\nSend the quote to the user's customer. More parameters to be added later...\r\n\r\n\\param p_0 quoteVersionId: QuoteVersionId of the quoteversion to send\r\n\\param p_1 expiryDate: Date the quote expires\r\n\\param p_2 followupDate: Date for the followup task, to remind the sales rep about the quote\r\n\\param p_3 followupText: The body text for the follwup appointment, resolved to the correct culture (no resources please)\r\n\\param p_4 culture: Desired culture for email body and other culture-sensitive templates\/content\r\n\\return Response of the operation"},
{text: "NSQuoteAgent.CopySuperOfficePriceList", help: "<b>NSPriceList CopySuperOfficePriceList(Integer p_0, String p_1, DateTime p_2, DateTime p_3, Integer p_4, Bool p_5)<\/b>\n\nCreate a copy of a PriceList in the SuperOffice database\r\n\r\n\\param p_0 originalPriceListId: Id of the PriceList to be copied\r\n\\param p_1 newName: Name of the copied PriceList\r\n\\param p_2 validFrom\r\n\\param p_3 validTo\r\n\\param p_4 newCurrencyId: Currency id of the copied PriceList. If 0 or the same as the original the copied products will keep their prices and the currency will be the same as the original.\r\n\\param p_5 convertCurrency: If true, product prices will be recalculated to the new currency. If false, product prices will be set to zero.\r\n\\return The copied PriceList"},
{text: "NSQuoteAgent.GetPriceList", help: "<b>NSPriceList GetPriceList(Integer p_0)<\/b>\n\nGets the pricelist with the given database id\r\n\r\n\\param p_0 priceListId: Primary key of the price list"},
{text: "NSQuoteAgent.SavePriceList", help: "<b>NSPriceList SavePriceList(NSPriceList p_0)<\/b>\n\nSave a pricelist to the database\r\n\r\n\\param p_0 priceList: The price list to save"},
{text: "NSQuoteAgent.GetActivePriceLists", help: "<b>NSPriceList[] GetActivePriceLists(Integer p_0, String p_1)<\/b>\n\nGets the available active PriceLists in a specific currency. Will return empty array if there is no PriceList with the stated currency available.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\param p_1 currency: Iso currency like: USD or NOK. See http:\/\/www.currency-iso.org\/dl_iso_table_a1.xls for details. Case insensitive. Will return empty array if there is no PriceList with the stated currency available.\r\n\\return The PriceLists that supports a specific currency"},
{text: "NSQuoteAgent.GetActivePriceListsByCurrencyId", help: "<b>NSPriceList[] GetActivePriceListsByCurrencyId(Integer p_0, Integer p_1)<\/b>\n\nGets the available active PriceLists in a specific currency. Will return empty array if there is no PriceList with the stated currency available.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\param p_1 currencyId: SuperOffice currency id.\r\n\\return The PriceLists that supports a specific currency"},
{text: "NSQuoteAgent.GetAllPriceLists", help: "<b>NSPriceList[] GetAllPriceLists(Integer p_0, String p_1)<\/b>\n\nGets the all PriceLists in all currencies, including those inactive. Will return empty array if there is no PriceList available.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\param p_1 currency: Iso currency like: USD or NOK. See http:\/\/www.currency-iso.org\/dl_iso_table_a1.xls for details. Case insensitive. Will return empty array if there is no PriceList with the stated currency available.\r\n\\return The PriceLists that supports a specific currency"},
{text: "NSQuoteAgent.GetAllPriceListsByCurrencyId", help: "<b>NSPriceList[] GetAllPriceListsByCurrencyId(Integer p_0, Integer p_1)<\/b>\n\nGets the all PriceLists in all currencies, including those inactive. Will return empty array if there is no PriceList available.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\param p_1 currencyId: SuperOffice currency id.\r\n\\return The PriceLists that supports a specific currency"},
{text: "NSQuoteAgent.GetProduct", help: "<b>NSProduct GetProduct(Integer p_0, String p_1)<\/b>\n\nGet a product with the given key\r\n\r\n\\param p_0 quoteConnectionId: The connection this product comes from.\r\n\\param p_1 eRPProductKey: Primary key of the Product in the ProductProvider"},
{text: "NSQuoteAgent.GetProductFromDbId", help: "<b>NSProduct GetProductFromDbId(Integer p_0)<\/b>\n\nGet a product with the given database id\r\n\r\n\\param p_0 productId: The database id of the product"},
{text: "NSQuoteAgent.SaveProduct", help: "<b>NSProduct SaveProduct(NSProduct p_0)<\/b>\n\nSaves a product to the database\r\n\r\n\\param p_0 product: The product to save\r\n\\return The resulting product"},
{text: "NSQuoteAgent.FindProduct", help: "<b>NSProduct[] FindProduct(Integer p_0, String p_1, String p_2)<\/b>\n\nGets a product, from the ProductProvider\r\n\r\n\\param p_0 quoteAlternativeId: Quote alternative to search in.\r\n\\param p_1 userInput: search string\r\n\\param p_2 priceListKey: If the pricelist is null or empty, the function will search in all active pricelists.\r\n\\return Product array"},
{text: "NSQuoteAgent.GetExtraInfo", help: "<b>NSProductExtraDataField[] GetExtraInfo(String p_0)<\/b>\n\nConverts an xml string into an object representation.\r\n\r\n\\param p_0 quoteLineExtraData: The extra data as xml.\r\n\\return An object representation on the xml"},
{text: "NSQuoteAgent.GetQuote", help: "<b>NSQuote GetQuote(Integer p_0)<\/b>\n\nGet a Quote\r\n\r\n\\param p_0 quoteId: QuoteId of the Quote to get.\r\n\\return The Quote"},
{text: "NSQuoteAgent.GetQuoteFromSaleId", help: "<b>NSQuote GetQuoteFromSaleId(Integer p_0)<\/b>\n\nGet a Quote for a sale\r\n\r\n\\param p_0 saleId: SaleId of the Quote to get.\r\n\\return The Quote"},
{text: "NSQuoteAgent.SaveQuote", help: "<b>NSQuote SaveQuote(NSQuote p_0)<\/b>\n\nSaves a Quote\r\n\r\n\\param p_0 quote: The Quote to save\r\n\\return The saved Quote"},
{text: "NSQuoteAgent.CopyQuoteAlternative", help: "<b>NSQuoteAlternative CopyQuoteAlternative(Integer p_0, Integer p_1, String p_2)<\/b>\n\nCopy a quote alternative from the same sale and adds it to a version.\r\n\r\n\\param p_0 quoteVersionId: QuoteVersionId of the version to copy the alternative to.\r\n\\param p_1 quoteAlternativeId: QuoteAlternativeId of the alternative to make a copy of.\r\n\\param p_2 quoteAlternativeName: The name to set on the new alternative.\r\n\\return The copied QuoteAlternative."},
{text: "NSQuoteAgent.CreateDefaultQuoteAlternative", help: "<b>NSQuoteAlternative CreateDefaultQuoteAlternative()<\/b>\n\nLoading default values into a new QuoteAlternative.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New QuoteAlternative with default values"},
{text: "NSQuoteAgent.CreateQuoteAlternative", help: "<b>NSQuoteAlternative CreateQuoteAlternative(Integer p_0, String p_1, String p_2)<\/b>\n\nCreate a new quote alternative on a version.\r\n\r\n\\param p_0 quoteVersionId: QuoteVersionId of the version to create the alternative on.\r\n\\param p_1 quoteAlternativeName: The name to set on the new alternative.\r\n\\param p_2 quoteAlternativeDescription: The description to set on the new alternative.\r\n\\return The newly created QuoteAlternative."},
{text: "NSQuoteAgent.GetQuoteAlternative", help: "<b>NSQuoteAlternative GetQuoteAlternative(Integer p_0)<\/b>\n\nGets a QuoteAlternative object.\r\n\r\n\\param p_0 quoteAlternativeId: The identifier of the QuoteAlternative object\r\n\\return QuoteAlternative"},
{text: "NSQuoteAgent.SaveQuoteAlternative", help: "<b>NSQuoteAlternative SaveQuoteAlternative(NSQuoteAlternative p_0)<\/b>\n\nUpdates the existing QuoteAlternative or creates a new QuoteAlternative if the id parameter is empty\r\n\r\n\\param p_0 quoteAlternative: The QuoteAlternative that is saved\r\n\\return New or updated QuoteAlternative"},
{text: "NSQuoteAgent.GetQuoteAlternatives", help: "<b>NSQuoteAlternative[] GetQuoteAlternatives(Integer p_0)<\/b>\n\nGet all quote alternatives for a quote version\r\n\r\n\\param p_0 quoteVersionId: QuoteVersionId of the revison to get alternatives for.\r\n\\return Array of Quote alternatives"},
{text: "NSQuoteAgent.RecalculateQuoteAlternative", help: "<b>NSQuoteAlternativeRecalculated RecalculateQuoteAlternative(Integer p_0)<\/b>\n\nWhen the user changes one or more values in a quoteline or a quoteAlternative, the connector gets to change the QuoteLines and the alternative, for instance calculate VAT. RecalculateQuoteAlternative shall be called when the user changes any of the following fields: Quantity, DiscountAmount, DiscountPercent, listprice (if allowed). RecalculateQuoteAlternative will calculate the TotalPrice and the VAT (if possible) for the lines and the alternative.\r\n\r\n\\param p_0 quoteAlternative: The alternative to be recalculated\r\n\\return The updated quote version."},
{text: "NSQuoteAgent.CreateConnectionFromConnectorName", help: "<b>NSQuoteConnection CreateConnectionFromConnectorName(String p_0)<\/b>\n\nCreate a new connection.\r\n\r\n\\param p_0 connectorName: The name of the connector to create this connection for.\r\n\\return The created connection"},
{text: "NSQuoteAgent.GetConnection", help: "<b>NSQuoteConnection GetConnection(Integer p_0)<\/b>\n\nReturns the specified connection.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\return The connection"},
{text: "NSQuoteAgent.SaveConnection", help: "<b>NSQuoteConnection SaveConnection(NSQuoteConnection p_0)<\/b>\n\nSaves a connection to the database.\r\n\r\n\\param p_0 connection: The connection to save.\r\n\\return The resulting connection."},
{text: "NSQuoteAgent.GetAllAvailableQuoteConnections", help: "<b>NSQuoteConnection[] GetAllAvailableQuoteConnections()<\/b>\n\nGet all available connections. Some installed connections may not be available to the user. Use GetAllAvailableQuoteConnectionsWithPriceLists if you need the pricelists on the connections as well.\r\n\r\n\\return List of connections"},
{text: "NSQuoteAgent.GetAllAvailableQuoteConnectionsWithPriceLists", help: "<b>NSQuoteConnection[] GetAllAvailableQuoteConnectionsWithPriceLists()<\/b>\n\nGet all available connections. Some installed connections may not be available to the user. Includes pricelists for the connection. This is a heavy call\r\n\r\n\\return List of connections"},
{text: "NSQuoteAgent.GetAllInstalledQuoteConnections", help: "<b>NSQuoteConnection[] GetAllInstalledQuoteConnections()<\/b>\n\nGet all installed connections. Some installed connections may not be available to the user.\r\n\r\n\\return List of connections"},
{text: "NSQuoteAgent.GetConnectionsForAssociate", help: "<b>NSQuoteConnection[] GetConnectionsForAssociate(Integer p_0)<\/b>\n\nReturns all connections available for the specified user.\r\n\r\n\\param p_0 associateId: Primary key of the user\r\n\\return The connections"},
{text: "NSQuoteAgent.CreateAndSaveQuote", help: "<b>NSQuoteEntity CreateAndSaveQuote(Integer p_0, Integer p_1, String p_2)<\/b>\n\nCreates a new quote on a sale.\r\n\r\n\\param p_0 saleId: SaleId of the connected sale\r\n\\param p_1 connectionId: ConnectionId\r\n\\param p_2 firstAlternativeName: Name to be given to the default alternative\r\n\\return Quote carrier"},
{text: "NSQuoteAgent.CreateAndSaveQuoteFromSale", help: "<b>NSQuoteEntity CreateAndSaveQuoteFromSale(Integer p_0, Integer p_1)<\/b>\n\nCreates a copy the active version with connected alternatives and quotelines from another sale.\r\n\r\n\\param p_0 copyFromSaleId: Id of the sale to copy the active quote from.\r\n\\param p_1 copyToSaleId: Id of the sale to copy the active quote to.\r\n\\return The created Quote"},
{text: "NSQuoteAgent.GetQuoteEntity", help: "<b>NSQuoteEntity GetQuoteEntity(Integer p_0)<\/b>\n\nGet a Quote\r\n\r\n\\param p_0 quoteId: QuoteId of the Quote to get.\r\n\\return The Quote"},
{text: "NSQuoteAgent.GetQuoteEntityFromSaleId", help: "<b>NSQuoteEntity GetQuoteEntityFromSaleId(Integer p_0)<\/b>\n\nGet a Quote for a sale\r\n\r\n\\param p_0 saleId: SaleId of the Quote to get.\r\n\\return The Quote"},
{text: "NSQuoteAgent.SaveQuoteEntity", help: "<b>NSQuoteEntity SaveQuoteEntity(NSQuoteEntity p_0)<\/b>\n\nSaves a QuoteEntity. Versions and alternatives will not be saved by this call.\r\n\r\n\\param p_0 quoteEntity: The Quote entity to save\r\n\\return The saved Quote"},
{text: "NSQuoteAgent.CreateQuoteLine", help: "<b>NSQuoteLine CreateQuoteLine(Integer p_0, String p_1)<\/b>\n\nCreate a quoteline based on a product key.\r\n\r\n\\param p_0 quoteAlternativeId: Primary key of the alternative\r\n\\param p_1 eRPProductKey: Primary key of the product in the ProductProvider\r\n\\return The updated quote line."},
{text: "NSQuoteAgent.CreateQuoteLineFromProduct", help: "<b>NSQuoteLine CreateQuoteLineFromProduct(Integer p_0, NSProduct p_1)<\/b>\n\nCreate a quoteline based on a product.\r\n\r\n\\param p_0 quoteAlternativeId: Primary key of the alternative\r\n\\param p_1 product: Product carrier\r\n\\return The updated quote line."},
{text: "NSQuoteAgent.GetQuoteLine", help: "<b>NSQuoteLine GetQuoteLine(Integer p_0)<\/b>\n\nGet QuoteLine from database\r\n\r\n\\param p_0 quoteLineId: Primary key of the quoteline to get.\r\n\\return The updated quote line (If the quoteline was new, it returns with id's set."},
{text: "NSQuoteAgent.RecalculateQuoteLine", help: "<b>NSQuoteLine RecalculateQuoteLine(NSQuoteLine p_0, String[] p_1)<\/b>\n\nWhen the user changes one or more values in a quoteline, the connector gets to change the QuoteLine, for instance calculate VAT. Shall be called when the user changes any of the following fields: Quantity, DiscountAmount, DiscountPercent, ListPrice (if allowed). Will calculate the TotalPrice and the VAT (if possible) for the line.\r\n\r\n\\param p_0 quoteLine: The QuoteLine to recalculate\r\n\\param p_1 changedFields: The id of the changed fields in the form 'TableName.FieldName'\r\n\\return The updated quote line."},
{text: "NSQuoteAgent.SaveQuoteLine", help: "<b>NSQuoteLine SaveQuoteLine(NSQuoteLine p_0)<\/b>\n\nSaves the QuoteLine in the SuperOffice database\r\n\r\n\\param p_0 quoteLine: The QuoteLine to save.\r\n\\return The updated quote line (If the quoteline was new, it returns with id's set."},
{text: "NSQuoteAgent.GetQuoteLines", help: "<b>NSQuoteLine[] GetQuoteLines(Integer p_0)<\/b>\n\nGet all QuoteLines from an alternative\r\n\r\n\\param p_0 quoteAlternativeId: Id of the alternative to return the quotelines for\r\n\\return QuoteLine array"},
{text: "NSQuoteAgent.GetQuoteLineConfiguration", help: "<b>NSQuoteLineConfiguration GetQuoteLineConfiguration(Integer p_0)<\/b>\n\nReturns the configuration field with the given id\r\n\r\n\\param p_0 quoteLineConfigurationId: Id of the QuoteLineConfiguration to get.\r\n\\return QuoteLineConfiguration"},
{text: "NSQuoteAgent.GetQuoteLineConfigurationFromFieldName", help: "<b>NSQuoteLineConfiguration GetQuoteLineConfigurationFromFieldName(String p_0)<\/b>\n\nReturns the configuration field with the given field name\r\n\r\n\\param p_0 fieldName: Field name of the QuoteLineConfiguration to get.\r\n\\return QuoteLineConfiguration"},
{text: "NSQuoteAgent.SaveQuoteLineConfiguration", help: "<b>NSQuoteLineConfiguration SaveQuoteLineConfiguration(NSQuoteLineConfiguration p_0)<\/b>\n\nSave a QuoteLineConfiguration object. It is not possible to add a new configuration.\r\n\r\n\\param p_0 quoteLineConfiguration: The QuoteLineConfiguration to save.\r\n\\return The saved QuoteLineConfiguration."},
{text: "NSQuoteAgent.GetAllQuoteLineConfigurations", help: "<b>NSQuoteLineConfiguration[] GetAllQuoteLineConfigurations()<\/b>\n\nReturns all the configuration fields\r\n\r\n\\return Array of QuoteLineConfigurations"},
{text: "NSQuoteAgent.GetInUseQuoteLineConfigurations", help: "<b>NSQuoteLineConfiguration[] GetInUseQuoteLineConfigurations()<\/b>\n\nReturns the configuration fields that should be visible in the GUI.\r\n\r\n\\return Array of QuoteLineConfigurations"},
{text: "NSQuoteAgent.SaveQuoteLineConfigurations", help: "<b>NSQuoteLineConfiguration[] SaveQuoteLineConfigurations(NSQuoteLineConfiguration[] p_0)<\/b>\n\nSave a collection of QuoteLineConfigurations. It is not possible to add a new configurations.\r\n\r\n\\param p_0 quoteLineConfigurations: The QuoteLineConfigurations to save.\r\n\\return The saved QuoteLineConfigurations."},
{text: "NSQuoteAgent.GetQuoteList", help: "<b>NSQuoteListItem[] GetQuoteList(String p_0)<\/b>\n\nGets a named list from the connector Return array of QuoteListItems. Return NULL if the given list is not supported.\r\n\r\n\\param p_0 quoteListType: The name of the requested list, for instance: ProductCategory, ProductFamily, ProductType, PaymentTerms, PaymentType, DeliveryTerms, DeliveryType.\r\n\\return The list items"},
{text: "NSQuoteAgent.GenerateQuoteDocuments", help: "<b>NSQuotePublishDocuments GenerateQuoteDocuments(Integer p_0, Integer p_1, Bool p_2, Integer p_3, Bool p_4, String p_5)<\/b>\n\nGenerate all the documents required to send the Quote as an email to the prospect - or an Order Confirmation; it just depends on the template id's for the lines doc and mail body. Quote version status is not changed by this method.\r\n\r\n\\param p_0 quoteVersionId: VersionId of the quote to be sent; the status of the version will not be changed by calling this method\r\n\\param p_1 emailBodyTemplateId: Id of the template for the email body, must be nonzero and refer to either a Quote mail body or Order Confirmation mail body, with html content\r\n\\param p_2 attachMainDocument: Should the main quote document be attached to the email; generally false for Order Confirmations\r\n\\param p_3 quotedProductsTemplateId: Id of the template for the quote- or order confirmation-lines; zero if no document should be produced\r\n\\param p_4 includeAttachments: If true, then the currently specified (in the database) attachments will be included\r\n\\param p_5 rawMailSubject: Subject line for email, in the correct language, sent in here to have any template variables substituted\r\n\\return Carrier specifying the document id's of all the documents, as well as other results"},
{text: "NSQuoteAgent.CreateAndSaveQuoteVersion", help: "<b>NSQuoteVersion CreateAndSaveQuoteVersion(Integer p_0)<\/b>\n\nCreated a new QuoteVersion based on another QuoteVersion on the same Quote.\r\n\r\n\\param p_0 quoteVersionId: QuoteVersionId of the version to copy the contents from.\r\n\\return The Quote version"},
{text: "NSQuoteAgent.GetQuoteVersion", help: "<b>NSQuoteVersion GetQuoteVersion(Integer p_0)<\/b>\n\nGet a QuoteVersion\r\n\r\n\\param p_0 quoteVersionId: QuoteVersionId to get information from\r\n\\return Array of Quote versions"},
{text: "NSQuoteAgent.SaveQuoteVersion", help: "<b>NSQuoteVersion SaveQuoteVersion(NSQuoteVersion p_0)<\/b>\n\nSaves a quote version\r\n\r\n\\param p_0 quoteVersion: The quote version to save\r\n\\return The saved quote version"},
{text: "NSQuoteAgent.GetQuoteVersions", help: "<b>NSQuoteVersion[] GetQuoteVersions(Integer p_0)<\/b>\n\nGet all quote versions for a sale\r\n\r\n\\param p_0 quoteId: QuoteId of the quote to get versions from\r\n\\return Array of Quote versions"},
{text: "NSQuoteAgent.CreateOrUpdateQuoteVersionAttachments", help: "<b>NSQuoteVersionAttachment[] CreateOrUpdateQuoteVersionAttachments(Integer p_0)<\/b>\n\nLook at the Quote version, related sale and sale type, and ensure that the correct QuoteVersionAttachment records exist. This method may create or delete records\r\n\r\n\\param p_0 quoteVersionId: The ID of the quote version\r\n\\return The current attachments for the given Quote version, after all updates have been completed"},
{text: "NSQuoteAgent.GetQuoteVersionWorkflowImageState", help: "<b>NSQuoteVersionButtonState GetQuoteVersionWorkflowImageState(Integer p_0)<\/b>\n\nGet state icon and name for the Quote version dialog header.\r\n\r\n\\param p_0 quoteVersionId: Id of the quote version to get the version state for.\r\n\\return Image and state name information"},
{text: "NSQuoteAgent.GetQuoteVersionWorkflowStatusInfo", help: "<b>NSQuoteVersionStatusInformation GetQuoteVersionWorkflowStatusInfo(Integer p_0)<\/b>\n\nGet status info for the Quote version dialog header. Collects most important warnings\/errors from across all quotelines\/alternatives in this quote version.\r\n\r\n\\param p_0 quoteVersionId: Id of the quote version to get the status info for.\r\n\\return Most important status text + icon information."},
{text: "NSQuoteAgent.UpdateQuoteVersionPrices", help: "<b>NSQuoteVersionValidated UpdateQuoteVersionPrices(Integer p_0)<\/b>\n\nUpdate price on the all the quotelines for each alternative in the current quote version\r\n\r\n\\param p_0 quoteVersionId: The version to be update prices for\r\n\\return The updated quote version."},
{text: "NSQuoteAgent.ValidateQuoteVersion", help: "<b>NSQuoteVersionValidated ValidateQuoteVersion(Integer p_0, Integer p_1)<\/b>\n\nWhen the user changes one or more values in a quoteline or a quoteAlternative, the connector gets to change the QuoteLines and the alternative, for instance calculate VAT. ValidateQuoteVersion shall be called when the user presses the validate button, presses the send button or closes the quote dialog. RecalculateQuoteAlternative should typically validate all alternatives, set values in extrafields, and set the state in the version.\r\n\r\n\\param p_0 quoteVersionId: The version to be validated\r\n\\param p_1 action: The action, if any, related to the validate call, like PlaceOrder or SendQuote\r\n\\return The updated quote version."},
{text: "NSQuoteAgent.GetQuoteVersionWorkflowButtonStates", help: "<b>NSQuoteVersionWorkflowState GetQuoteVersionWorkflowButtonStates(Integer p_0, Integer p_1)<\/b>\n\nGet all button states for the Quote version dialog.\r\n\r\n\\param p_0 quoteVersionId: Id of the quote version to get the button states for.\r\n\\param p_1 quoteAlternativeId: Id of the active quote alternative id.\r\n\\return Workflow state information"},
{text: "NSQuoteAgent.GetQuoteVersionWorkflowState", help: "<b>NSQuoteVersionWorkflowState GetQuoteVersionWorkflowState(Integer p_0, Integer p_1)<\/b>\n\nGet all button states for the Quote version dialog. Packages ImageState, Button states and status info into one call. Collects most important warnings\/errors from across all quotelines\/alternatives in this quote version.\r\n\r\n\\param p_0 quoteVersionId: Id of the quote version to get the button states for.\r\n\\param p_1 quoteAlternativeId: Id of the active quote alternative id.\r\n\\return Workflow state information"},
{text: "NSQuoteAgent.GetOrderConfirmation", help: "<b>String GetOrderConfirmation(Integer p_0, Integer p_1)<\/b>\n\nGet a base64-encoded data stream that is just the order confirmation document, for the given quote version; no permanent document is created or stored anywhere; the result is a PDF\r\n\r\n\\param p_0 quoteVersionId: VersionId of the quote to be sent; the status of the version will not be changed by calling this method\r\n\\param p_1 confirmationTemplateId: Id of the template for the order confirmation lines document\r\n\\return Base64-encoded binary data, that is in fact a PDF document that should be shown to the user"},
{text: "NSQuoteAgent.GetProductImage", help: "<b>String GetProductImage(Integer p_0, String p_1, Integer p_2)<\/b>\n\nGets an image connected to a product, from the ProductProvider\r\n\r\n\\param p_0 quoteConnectionId: The connection this product comes from.\r\n\\param p_1 eRPProductKey: Primary key of the Product in the ProductProvider\r\n\\param p_2 rank: The rank of the image.\r\n\\return The base64 encoded image as a string."},
{text: "NSQuoteAgent.GetConnectorCapabilities", help: "<b>String[] GetConnectorCapabilities(Integer p_0)<\/b>\n\nGets a list of connector capabilities\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\return Capabilities"},
{text: "NSQuoteAgent.GetConnectorCapabilityNames", help: "<b>String[] GetConnectorCapabilityNames(Integer p_0)<\/b>\n\nGets a list of all possible connector capabilities\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\return Capabilities names"},
{text: "NSQuoteAgent.GetConnectionConfigFields", help: "<b>StringDictionary GetConnectionConfigFields(Integer p_0)<\/b>\n\nReturns the config fields for the connection.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\return Config Fields"},
{text: "NSQuoteAgent.SaveConnectionConfigFields", help: "<b>StringDictionary SaveConnectionConfigFields(Integer p_0, StringDictionary p_1)<\/b>\n\nSaves the connection config fields\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection\r\n\\param p_1 connectionConfigFields: ConnectionConfigFields to save.\r\n\\return Config Fields"},
{text: "NSQuoteAgent.DeleteConnection", help: "<b>Void DeleteConnection(Integer p_0)<\/b>\n\nMarks a connection as deleted.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection to delete\r\n\\return A void return"},
{text: "NSQuoteAgent.DeletePriceList", help: "<b>Void DeletePriceList(Integer p_0)<\/b>\n\nDeletes a pricelist from the database\r\n\r\n\\param p_0 priceListId: Primary key of the price list"},
{text: "NSQuoteAgent.DeleteQuote", help: "<b>Void DeleteQuote(Integer p_0)<\/b>\n\nDelete a Quote\r\n\r\n\\param p_0 quoteId: QuoteId of the Quote to delete."},
{text: "NSQuoteAgent.DeleteQuoteAlternative", help: "<b>Void DeleteQuoteAlternative(Integer p_0)<\/b>\n\nDelete a quote alternative\r\n\r\n\\param p_0 quoteAlternativeId: Id of the quote alternative to delete.\r\n\\return A void return"},
{text: "NSQuoteAgent.DeleteQuoteLine", help: "<b>Void DeleteQuoteLine(Integer p_0)<\/b>\n\nDeletes the QuoteLine in the SuperOffice database\r\n\r\n\\param p_0 quoteLineId: Primary key of the quoteline to delete\r\n\\return Nothing"},
{text: "NSQuoteAgent.DeleteSaleTypeQuoteAttachment", help: "<b>Void DeleteSaleTypeQuoteAttachment(Integer p_0)<\/b>\n\nDeletes the sale type quote attachment with the given id\r\n\r\n\\param p_0 saleTypeQuoteAttachmentId: The ID of the sale type quote attachment row to delete"},
{text: "NSQuoteAgent.MoveQuoteLine", help: "<b>Void MoveQuoteLine(Integer p_0, Bool p_1)<\/b>\n\nMove quote line rank up\/down\r\n\r\n\\param p_0 quoteLineId: Id of quote line to move up\/down\r\n\\param p_1 direction: True is up, false is down\r\n\\return Void return"},
{text: "NSQuoteAgent.RemoveProduct", help: "<b>Void RemoveProduct(Integer p_0)<\/b>\n\nRemoves a product from the database\r\n\r\n\\param p_0 productId: The database id of the product to remove"},
{text: "NSQuoteAgent.RestoreConnection", help: "<b>Void RestoreConnection(Integer p_0)<\/b>\n\nRestores a connection marked as deleted.\r\n\r\n\\param p_0 quoteConnectionId: Primary key of the connection to restore\r\n\\return A void return"},
{text: "NSQuoteAgent.SaveQuoteLineImage", help: "<b>Void SaveQuoteLineImage(Integer p_0, NSImage p_1, Integer p_2)<\/b>\n\nSaves the image connected to a quoteline in the SuperOffice database\r\n\r\n\\param p_0 quoteLineId: Primary key of the quoteline\r\n\\param p_1 image: The image.\r\n\\param p_2 rank: The rank of the image.\r\n\\return Nothing"},
{text: "NSQuoteAgent.ToggleProductInAssortment", help: "<b>Void ToggleProductInAssortment(Integer p_0)<\/b>\n\nToggles if the prdouct is in assortment or not\r\n\r\n\\param p_0 productId: The database id of the product to toggle is assortment value of"},
{text: "Void.NSQuoteAlternative", help: "<b>NSQuoteAlternative<\/b>\n\nInformation about a connection to the ERP system."},
{text: "NSQuoteAlternative.GetDiscountAmount", help: "<b>Float GetDiscountAmount()<\/b>\n\nThe discount the sales rep specifies, in whatever currency the sale is in. Both the two ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride field must be set to the field the user actually changed. If this field is filled out by the user, it overrides the discount suggested by the connector. If the user has not filled any values, the system will copy the ERP discount amount value into this field.\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetDiscountPercent", help: "<b>Float GetDiscountPercent()<\/b>\n\nThe discount the sales rep specifies, in percent. Both the two ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride field must be set to the field the user actually changed. If this field is filled out by the user, it overrides the discount suggested by the connector. If the user has not filled any values, the system will copy the ERP discount % value into this field. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetEarningAmount", help: "<b>Float GetEarningAmount()<\/b>\n\nEarning on this alternative, as an absolute amount\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetEarningPercent", help: "<b>Float GetEarningPercent()<\/b>\n\nThe earning on this alternative, in percent of total. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetERPDiscountAmount", help: "<b>Float GetERPDiscountAmount()<\/b>\n\nThe discount the system calculates based on customer \/amount \/ whatever. Can be overridden by the user in the field ‘DiscountPercent’ or ‘DiscountAmount’. Both the two ‘ERPDiscountPercent’ and ‘ERPDiscountAmount’ shall be filled out. If UserValueOverride is 'None', then the ERPDiscountAmount shall be copied into DiscountAmount and ERPDiscountPercent into DiscountPercent.\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetERPDiscountPercent", help: "<b>Float GetERPDiscountPercent()<\/b>\n\nThe discount the system calculates based on customer \/amount \/ whatever. Can be overridden by the sales rep in the field ‘DiscountPercent’ or ‘DiscountAmount’. Both the two ‘ERPDiscountPercent’ and ‘ERPDiscountAmount’ shall be filled out. If UserValueOverride is 'None', then the ERPDiscountAmount shall be copied into DiscountAmount and ERPDiscountPercent into DiscountPercent. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetSubTotal", help: "<b>Float GetSubTotal()<\/b>\n\nValue to help the user interface, is computed by summing the totalprice of the quotelines, and NOT by summing their subtotals\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetTotalPrice", help: "<b>Float GetTotalPrice()<\/b>\n\nSum of the QuoteLines.TotalPrice - AlternativeDiscount or QuoteLines.TotalCost + Earning based on what, if anything, the user has entered last. Shall be calculated by the connector.\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetVAT", help: "<b>Float GetVAT()<\/b>\n\nTax\/VAT - THIS IS AN AMOUNT, available as a merge field in the quote document. The SuperOffice quote connector will calculate this field based on the vat PERCENTAGES on the individual lines; other connectors may implement other algorithms at will.\r\n\r\n\\return Float"},
{text: "NSQuoteAlternative.GetQuoteAlternativeId", help: "<b>Integer GetQuoteAlternativeId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSQuoteAlternative.GetQuoteVersionId", help: "<b>Integer GetQuoteVersionId()<\/b>\n\nThe version that owns this alternative (the chain is Sale 1->1 Quote 1->+ QuoteVersion 1->+ QuoteAlternative.\r\n\r\n\\return Integer"},
{text: "NSQuoteAlternative.GetStatus", help: "<b>Integer GetStatus()<\/b>\n\n"},
{text: "NSQuoteAlternative.GetUserValueOverride", help: "<b>Integer GetUserValueOverride()<\/b>\n\n"},
{text: "NSQuoteAlternative.GetStatus", help: "<b>NSQuoteStatus GetStatus()<\/b>\n\nIf there was a problem with for instance calculation, this field is set to warning or error.\r\n\r\n\\return QuoteStatus"},
{text: "NSQuoteAlternative.GetUserValueOverride", help: "<b>NSValueOverride GetUserValueOverride()<\/b>\n\nHas the pre-calculated (from ERP) price information been overridden, and how. If the user has filled out the discountpercentage field, then the UserValueOverride field is set to OverridePercent. (The DiscountAmount, EarningPercent, EarningAmount and TotalPrice fields are calculated based on the discountPercent.)\r\n\r\n\\return ValueOverride"},
{text: "NSQuoteAlternative.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe tool-tip to use in the user interface (on the tab, for instance).\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetERPQuoteAlternativeKey", help: "<b>String GetERPQuoteAlternativeKey()<\/b>\n\nKey that identifies this alternative in the ERP system, if it exists there.\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetExtraField1", help: "<b>String GetExtraField1()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetExtraField2", help: "<b>String GetExtraField2()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetExtraField3", help: "<b>String GetExtraField3()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetExtraField4", help: "<b>String GetExtraField4()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetExtraField5", help: "<b>String GetExtraField5()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetName", help: "<b>String GetName()<\/b>\n\nName of Alternative. Shown in tab in user interface, intentionally kept short\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetReason", help: "<b>String GetReason()<\/b>\n\nIf there was a problem, this field contains a localized explanation of the problem and possible steps to fix it that the user can be shown.\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.GetVATInfo", help: "<b>String GetVATInfo()<\/b>\n\nExtra info about VAT that the connector might insert. This field has no business logic in the CRM code, but is available as a merge field in the quote documents.\r\n\r\n\\return String"},
{text: "NSQuoteAlternative.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe tool-tip to use in the user interface (on the tab, for instance).\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetDiscountAmount", help: "<b>Void SetDiscountAmount(Float p_0)<\/b>\n\nThe discount the sales rep specifies, in whatever currency the sale is in. Both the two ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride field must be set to the field the user actually changed. If this field is filled out by the user, it overrides the discount suggested by the connector. If the user has not filled any values, the system will copy the ERP discount amount value into this field.\r\n\r\n\\param p_0 DiscountAmount: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetDiscountPercent", help: "<b>Void SetDiscountPercent(Float p_0)<\/b>\n\nThe discount the sales rep specifies, in percent. Both the two ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride field must be set to the field the user actually changed. If this field is filled out by the user, it overrides the discount suggested by the connector. If the user has not filled any values, the system will copy the ERP discount % value into this field. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\param p_0 DiscountPercent: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetEarningAmount", help: "<b>Void SetEarningAmount(Float p_0)<\/b>\n\nEarning on this alternative, as an absolute amount\r\n\r\n\\param p_0 EarningAmount: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetEarningPercent", help: "<b>Void SetEarningPercent(Float p_0)<\/b>\n\nThe earning on this alternative, in percent of total. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\param p_0 EarningPercent: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetERPDiscountAmount", help: "<b>Void SetERPDiscountAmount(Float p_0)<\/b>\n\nThe discount the system calculates based on customer \/amount \/ whatever. Can be overridden by the user in the field ‘DiscountPercent’ or ‘DiscountAmount’. Both the two ‘ERPDiscountPercent’ and ‘ERPDiscountAmount’ shall be filled out. If UserValueOverride is 'None', then the ERPDiscountAmount shall be copied into DiscountAmount and ERPDiscountPercent into DiscountPercent.\r\n\r\n\\param p_0 ERPDiscountAmount: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetERPDiscountPercent", help: "<b>Void SetERPDiscountPercent(Float p_0)<\/b>\n\nThe discount the system calculates based on customer \/amount \/ whatever. Can be overridden by the sales rep in the field ‘DiscountPercent’ or ‘DiscountAmount’. Both the two ‘ERPDiscountPercent’ and ‘ERPDiscountAmount’ shall be filled out. If UserValueOverride is 'None', then the ERPDiscountAmount shall be copied into DiscountAmount and ERPDiscountPercent into DiscountPercent. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\param p_0 ERPDiscountPercent: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetERPQuoteAlternativeKey", help: "<b>Void SetERPQuoteAlternativeKey(String p_0)<\/b>\n\nKey that identifies this alternative in the ERP system, if it exists there.\r\n\r\n\\param p_0 ERPQuoteAlternativeKey: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetExtraField1", help: "<b>Void SetExtraField1(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField1: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetExtraField2", help: "<b>Void SetExtraField2(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField2: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetExtraField3", help: "<b>Void SetExtraField3(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField3: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetExtraField4", help: "<b>Void SetExtraField4(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField4: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetExtraField5", help: "<b>Void SetExtraField5(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField5: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of Alternative. Shown in tab in user interface, intentionally kept short\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetQuoteAlternativeId", help: "<b>Void SetQuoteAlternativeId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 QuoteAlternativeId: Integer\r\n\\return Integer"},
{text: "NSQuoteAlternative.SetQuoteVersionId", help: "<b>Void SetQuoteVersionId(Integer p_0)<\/b>\n\nThe version that owns this alternative (the chain is Sale 1->1 Quote 1->+ QuoteVersion 1->+ QuoteAlternative.\r\n\r\n\\param p_0 QuoteVersionId: Integer\r\n\\return Integer"},
{text: "NSQuoteAlternative.SetReason", help: "<b>Void SetReason(String p_0)<\/b>\n\nIf there was a problem, this field contains a localized explanation of the problem and possible steps to fix it that the user can be shown.\r\n\r\n\\param p_0 Reason: String\r\n\\return String"},
{text: "NSQuoteAlternative.SetStatus", help: "<b>Void SetStatus(Integer p_0)<\/b>\n\n"},
{text: "NSQuoteAlternative.SetStatus", help: "<b>Void SetStatus(NSQuoteStatus p_0)<\/b>\n\nIf there was a problem with for instance calculation, this field is set to warning or error.\r\n\r\n\\param p_0 Status: QuoteStatus\r\n\\return QuoteStatus"},
{text: "NSQuoteAlternative.SetSubTotal", help: "<b>Void SetSubTotal(Float p_0)<\/b>\n\nValue to help the user interface, is computed by summing the totalprice of the quotelines, and NOT by summing their subtotals\r\n\r\n\\param p_0 SubTotal: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetTotalPrice", help: "<b>Void SetTotalPrice(Float p_0)<\/b>\n\nSum of the QuoteLines.TotalPrice - AlternativeDiscount or QuoteLines.TotalCost + Earning based on what, if anything, the user has entered last. Shall be calculated by the connector.\r\n\r\n\\param p_0 TotalPrice: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetUserValueOverride", help: "<b>Void SetUserValueOverride(Integer p_0)<\/b>\n\n"},
{text: "NSQuoteAlternative.SetUserValueOverride", help: "<b>Void SetUserValueOverride(NSValueOverride p_0)<\/b>\n\nHas the pre-calculated (from ERP) price information been overridden, and how. If the user has filled out the discountpercentage field, then the UserValueOverride field is set to OverridePercent. (The DiscountAmount, EarningPercent, EarningAmount and TotalPrice fields are calculated based on the discountPercent.)\r\n\r\n\\param p_0 UserValueOverride: ValueOverride\r\n\\return ValueOverride"},
{text: "NSQuoteAlternative.SetVAT", help: "<b>Void SetVAT(Float p_0)<\/b>\n\nTax\/VAT - THIS IS AN AMOUNT, available as a merge field in the quote document. The SuperOffice quote connector will calculate this field based on the vat PERCENTAGES on the individual lines; other connectors may implement other algorithms at will.\r\n\r\n\\param p_0 VAT: Float\r\n\\return Float"},
{text: "NSQuoteAlternative.SetVATInfo", help: "<b>Void SetVATInfo(String p_0)<\/b>\n\nExtra info about VAT that the connector might insert. This field has no business logic in the CRM code, but is available as a merge field in the quote documents.\r\n\r\n\\param p_0 VATInfo: String\r\n\\return String"},
{text: "Void.NSQuoteAlternativeRecalculated", help: "<b>NSQuoteAlternativeRecalculated<\/b>\n\nThe QuoteAlternativeRecalculated is returned after a call to RecalculateQuoteAlternative. It contains flags indicating changes to quote alternative and quote lines."},
{text: "NSQuoteAlternativeRecalculated.GetQuoteLinesHasChanged", help: "<b>Bool GetQuoteLinesHasChanged()<\/b>\n\nIf true any of the quotelines for the alternative has been changed.\r\n\r\n\\return Bool"},
{text: "NSQuoteAlternativeRecalculated.GetChanges", help: "<b>NSChangedData GetChanges()<\/b>\n\nTablename\/recordid of data changed by this method\r\n\r\n\\return ChangedData"},
{text: "NSQuoteAlternativeRecalculated.GetChangedQuoteAlternative", help: "<b>NSQuoteAlternative GetChangedQuoteAlternative()<\/b>\n\nThe recalculated QuoteAlternative\r\n\r\n\\return QuoteAlternative"},
{text: "NSQuoteAlternativeRecalculated.SetChangedQuoteAlternative", help: "<b>Void SetChangedQuoteAlternative(NSQuoteAlternative p_0)<\/b>\n\nThe recalculated QuoteAlternative\r\n\r\n\\param p_0 ChangedQuoteAlternative: QuoteAlternative\r\n\\return QuoteAlternative"},
{text: "NSQuoteAlternativeRecalculated.SetChanges", help: "<b>Void SetChanges(NSChangedData p_0)<\/b>\n\nTablename\/recordid of data changed by this method\r\n\r\n\\param p_0 Changes: ChangedData\r\n\\return ChangedData"},
{text: "NSQuoteAlternativeRecalculated.SetQuoteLinesHasChanged", help: "<b>Void SetQuoteLinesHasChanged(Bool p_0)<\/b>\n\nIf true any of the quotelines for the alternative has been changed.\r\n\r\n\\param p_0 QuoteLinesHasChanged: Bool\r\n\\return Bool"},
{text: "Void.NSQuoteConnection", help: "<b>NSQuoteConnection<\/b>\n\nInformation about a connection to the ERP system."},
{text: "NSQuoteConnection.GetAllAccess", help: "<b>Bool GetAllAccess()<\/b>\n\nIs this connection accessible to everyone?  If not, then the QuoteConnectionAccess table tells us who can access it.\r\n\r\n\\return Bool"},
{text: "NSQuoteConnection.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIf set, then this is a row that has been 'deleted'; we do not physically delete rows to avoid disaster.\r\n\r\n\\return Bool"},
{text: "NSQuoteConnection.GetIsAvailable", help: "<b>Bool GetIsAvailable()<\/b>\n\nWhether or not the specified connection is available. Typically, without network access the availability is false.\r\n\r\n\\return Bool"},
{text: "NSQuoteConnection.GetErpConnectionId", help: "<b>Integer GetErpConnectionId()<\/b>\n\nThe ERP Connection that this Quote connection is an extension of\r\n\r\n\\return Integer"},
{text: "NSQuoteConnection.GetQuoteConnectionId", help: "<b>Integer GetQuoteConnectionId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSQuoteConnection.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSQuoteConnection.GetAssociateAccessIds", help: "<b>Integer[] GetAssociateAccessIds()<\/b>\n\nArray of ids containing associates that will have access to this connection.\r\n\r\n\\return IntegerArray"},
{text: "NSQuoteConnection.GetUserGroupAccessIds", help: "<b>Integer[] GetUserGroupAccessIds()<\/b>\n\nArray of ids containing usergroups that will have access to this connection.\r\n\r\n\\return IntegerArray"},
{text: "NSQuoteConnection.GetInitializeResponse", help: "<b>NSPluginResponse GetInitializeResponse()<\/b>\n\nStatus and Error message when the system called the connector Initialize method. Null if the connector has not been initialized yet.\r\n\r\n\\return PluginResponse"},
{text: "NSQuoteConnection.GetPriceLists", help: "<b>NSPriceList[] GetPriceLists()<\/b>\n\nThe PriceLists that this connection offers.\r\n\r\n\\return PriceListArray"},
{text: "NSQuoteConnection.GetConnectorName", help: "<b>String GetConnectorName()<\/b>\n\nProgrammatic name of the Connector plugin that implements this kind of connection\r\n\r\n\\return String"},
{text: "NSQuoteConnection.GetDisplayDescription", help: "<b>String GetDisplayDescription()<\/b>\n\nTooltip\/description shown to user; multi-language support. Any other info available that would make an uncertain user chose the right connector. Typically, used for tooltip.\r\n\r\n\\return String"},
{text: "NSQuoteConnection.GetDisplayName", help: "<b>String GetDisplayName()<\/b>\n\nConnection name shown to user; multi-language support. The name of the connector to display in a list so that the users can choose between them. Typically the name of the client, with maybe the ERP system in parenthesis.\r\n\r\n\\return String"},
{text: "NSQuoteConnection.GetERPName", help: "<b>String GetERPName()<\/b>\n\nName of the ERP system (programmatic).\r\n\r\n\\return String"},
{text: "NSQuoteConnection.GetExtraData", help: "<b>String GetExtraData()<\/b>\n\nOptional extra data, in XML format, for configuring the connector. Connector-specific!\r\n\r\n\\return String"},
{text: "NSQuoteConnection.SetAllAccess", help: "<b>Void SetAllAccess(Bool p_0)<\/b>\n\nIs this connection accessible to everyone?  If not, then the QuoteConnectionAccess table tells us who can access it.\r\n\r\n\\param p_0 AllAccess: Bool\r\n\\return Bool"},
{text: "NSQuoteConnection.SetAssociateAccessIds", help: "<b>Void SetAssociateAccessIds(Integer[] p_0)<\/b>\n\nArray of ids containing associates that will have access to this connection.\r\n\r\n\\param p_0 AssociateAccessIds: IntegerArray\r\n\\return IntegerArray"},
{text: "NSQuoteConnection.SetConnectorName", help: "<b>Void SetConnectorName(String p_0)<\/b>\n\nProgrammatic name of the Connector plugin that implements this kind of connection\r\n\r\n\\param p_0 ConnectorName: String\r\n\\return String"},
{text: "NSQuoteConnection.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIf set, then this is a row that has been 'deleted'; we do not physically delete rows to avoid disaster.\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSQuoteConnection.SetDisplayDescription", help: "<b>Void SetDisplayDescription(String p_0)<\/b>\n\nTooltip\/description shown to user; multi-language support. Any other info available that would make an uncertain user chose the right connector. Typically, used for tooltip.\r\n\r\n\\param p_0 DisplayDescription: String\r\n\\return String"},
{text: "NSQuoteConnection.SetDisplayName", help: "<b>Void SetDisplayName(String p_0)<\/b>\n\nConnection name shown to user; multi-language support. The name of the connector to display in a list so that the users can choose between them. Typically the name of the client, with maybe the ERP system in parenthesis.\r\n\r\n\\param p_0 DisplayName: String\r\n\\return String"},
{text: "NSQuoteConnection.SetErpConnectionId", help: "<b>Void SetErpConnectionId(Integer p_0)<\/b>\n\nThe ERP Connection that this Quote connection is an extension of\r\n\r\n\\param p_0 ErpConnectionId: Integer\r\n\\return Integer"},
{text: "NSQuoteConnection.SetERPName", help: "<b>Void SetERPName(String p_0)<\/b>\n\nName of the ERP system (programmatic).\r\n\r\n\\param p_0 ERPName: String\r\n\\return String"},
{text: "NSQuoteConnection.SetExtraData", help: "<b>Void SetExtraData(String p_0)<\/b>\n\nOptional extra data, in XML format, for configuring the connector. Connector-specific!\r\n\r\n\\param p_0 ExtraData: String\r\n\\return String"},
{text: "NSQuoteConnection.SetInitializeResponse", help: "<b>Void SetInitializeResponse(NSPluginResponse p_0)<\/b>\n\nStatus and Error message when the system called the connector Initialize method. Null if the connector has not been initialized yet.\r\n\r\n\\param p_0 InitializeResponse: PluginResponse\r\n\\return PluginResponse"},
{text: "NSQuoteConnection.SetIsAvailable", help: "<b>Void SetIsAvailable(Bool p_0)<\/b>\n\nWhether or not the specified connection is available. Typically, without network access the availability is false.\r\n\r\n\\param p_0 IsAvailable: Bool\r\n\\return Bool"},
{text: "NSQuoteConnection.SetPriceLists", help: "<b>Void SetPriceLists(NSPriceList[] p_0)<\/b>\n\nThe PriceLists that this connection offers.\r\n\r\n\\param p_0 PriceLists: PriceListArray\r\n\\return PriceListArray"},
{text: "NSQuoteConnection.SetQuoteConnectionId", help: "<b>Void SetQuoteConnectionId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 QuoteConnectionId: Integer\r\n\\return Integer"},
{text: "NSQuoteConnection.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSQuoteConnection.SetUserGroupAccessIds", help: "<b>Void SetUserGroupAccessIds(Integer[] p_0)<\/b>\n\nArray of ids containing usergroups that will have access to this connection.\r\n\r\n\\param p_0 UserGroupAccessIds: IntegerArray\r\n\\return IntegerArray"},
{text: "Void.NSQuoteContext", help: "<b>NSQuoteContext<\/b>\n\nThe context a quote is created in."},
{text: "NSQuoteContext.GetCRMAssociate", help: "<b>NSAssociate GetCRMAssociate()<\/b>\n\nThe associate (salesman) that is logged into the CRM system.\r\n\r\n\\return Associate"},
{text: "NSQuoteContext.GetCRMQuoteAlternative", help: "<b>NSQuoteAlternative GetCRMQuoteAlternative()<\/b>\n\nThe relevant or current alternative of the quote in the CRM system, if applicable.\r\n\r\n\\return QuoteAlternative"},
{text: "NSQuoteContext.GetCRMQuoteLine", help: "<b>NSQuoteLine GetCRMQuoteLine()<\/b>\n\nThe relevant or current quote line of the quote in the CRM system, if applicable.\r\n\r\n\\return QuoteLine"},
{text: "NSQuoteContext.GetCRMQuoteVersion", help: "<b>NSQuoteVersion GetCRMQuoteVersion()<\/b>\n\nThe relevant or current revision of the quote in the CRM system, if applicable.\r\n\r\n\\return QuoteVersion"},
{text: "NSQuoteContext.GetCRMSale", help: "<b>NSSale GetCRMSale()<\/b>\n\nThe sale the quote is registered in the CRM system.\r\n\r\n\\return Sale"},
{text: "NSQuoteContext.GetUserLanguageCode", help: "<b>String GetUserLanguageCode()<\/b>\n\nThe iso language code of the language the user is using in the crm system. Use this language when replying, if possible.\r\n\r\n\\return String"},
{text: "NSQuoteContext.SetCRMAssociate", help: "<b>Void SetCRMAssociate(NSAssociate p_0)<\/b>\n\nThe associate (salesman) that is logged into the CRM system.\r\n\r\n\\param p_0 CRMAssociate: Associate\r\n\\return Associate"},
{text: "NSQuoteContext.SetCRMQuoteAlternative", help: "<b>Void SetCRMQuoteAlternative(NSQuoteAlternative p_0)<\/b>\n\nThe relevant or current alternative of the quote in the CRM system, if applicable.\r\n\r\n\\param p_0 CRMQuoteAlternative: QuoteAlternative\r\n\\return QuoteAlternative"},
{text: "NSQuoteContext.SetCRMQuoteLine", help: "<b>Void SetCRMQuoteLine(NSQuoteLine p_0)<\/b>\n\nThe relevant or current quote line of the quote in the CRM system, if applicable.\r\n\r\n\\param p_0 CRMQuoteLine: QuoteLine\r\n\\return QuoteLine"},
{text: "NSQuoteContext.SetCRMQuoteVersion", help: "<b>Void SetCRMQuoteVersion(NSQuoteVersion p_0)<\/b>\n\nThe relevant or current revision of the quote in the CRM system, if applicable.\r\n\r\n\\param p_0 CRMQuoteVersion: QuoteVersion\r\n\\return QuoteVersion"},
{text: "NSQuoteContext.SetCRMSale", help: "<b>Void SetCRMSale(NSSale p_0)<\/b>\n\nThe sale the quote is registered in the CRM system.\r\n\r\n\\param p_0 CRMSale: Sale\r\n\\return Sale"},
{text: "NSQuoteContext.SetUserLanguageCode", help: "<b>Void SetUserLanguageCode(String p_0)<\/b>\n\nThe iso language code of the language the user is using in the crm system. Use this language when replying, if possible.\r\n\r\n\\param p_0 UserLanguageCode: String\r\n\\return String"},
{text: "Void.NSQuoteEntity", help: "<b>NSQuoteEntity<\/b>\n\nQuote methods"},
{text: "NSQuoteEntity.GetAcceptedQuoteAlternativeId", help: "<b>Integer GetAcceptedQuoteAlternativeId()<\/b>\n\nThe primary key of the Quote Alternative which was finally accepted by the customer. Set when the user is marking a quote as accepted.\r\n\r\n\\return Integer"},
{text: "NSQuoteEntity.GetActiveQuoteVersionId", help: "<b>Integer GetActiveQuoteVersionId()<\/b>\n\nThe primary key of the Quote Version that is currently active. (The active version will always be the latest version.)\r\n\r\n\\return Integer"},
{text: "NSQuoteEntity.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nThe ID of the main Quote Document\r\n\r\n\\return Integer"},
{text: "NSQuoteEntity.GetQuoteConnectionId", help: "<b>Integer GetQuoteConnectionId()<\/b>\n\nThe connection in the CRM system to where this quote came from. Identifies the ERP connection used for this quote. Each quote is bound to one and only one connection.\r\n\r\n\\return Integer"},
{text: "NSQuoteEntity.GetQuoteId", help: "<b>Integer GetQuoteId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSQuoteEntity.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nThe foreign key to the corresponding sale\r\n\r\n\\return Integer"},
{text: "NSQuoteEntity.GetUseValuesFromQuote", help: "<b>Integer GetUseValuesFromQuote()<\/b>\n\nIf true, then the Earning, Earning_Percent and Amount fields are populated from the QuoteVersion.QuoteAlternative (current revision, most-likely alternative).\r\n\r\n\\return Integer"},
{text: "NSQuoteEntity.GetQuoteVersions", help: "<b>NSQuoteVersion[] GetQuoteVersions()<\/b>\n\nArray og QuoteVersions connected to the quote.\r\n\r\n\\return QuoteVersionArray"},
{text: "NSQuoteEntity.GetERPOrderKey", help: "<b>String GetERPOrderKey()<\/b>\n\nThe key in the ERP system that identifies this sale's Order, as transferred and possibly later edited in the ERP system.  Only filled out if there exists a corresponding order representation of the quote in the ERP system.\r\n\r\n\\return String"},
{text: "NSQuoteEntity.GetERPQuoteKey", help: "<b>String GetERPQuoteKey()<\/b>\n\nForeign key of quote (if available). The key in the ERP system that identifies this sale's Quote (as opposed to the later Order information)\r\n\r\n\\return String"},
{text: "NSQuoteEntity.GetOrderComment", help: "<b>String GetOrderComment()<\/b>\n\nA comment that is intended for the Invoice, Order, Packing list and similar stages - AFTER the quote has become an order and goes to ERP for processing\r\n\r\n\\return String"},
{text: "NSQuoteEntity.GetPoNumber", help: "<b>String GetPoNumber()<\/b>\n\nCustomer's Purchase order number\r\n\r\n\\return String"},
{text: "NSQuoteEntity.GetPreferredEmailCulture", help: "<b>String GetPreferredEmailCulture()<\/b>\n\nWhen emails are sent (offer or confirmation), a language can be chosen in the GUI; this field saves the most recent choice and can be used to default the next such choice. Default-default is user's current language\r\n\r\n\\return String"},
{text: "NSQuoteEntity.SetAcceptedQuoteAlternativeId", help: "<b>Void SetAcceptedQuoteAlternativeId(Integer p_0)<\/b>\n\nThe primary key of the Quote Alternative which was finally accepted by the customer. Set when the user is marking a quote as accepted.\r\n\r\n\\param p_0 AcceptedQuoteAlternativeId: Integer\r\n\\return Integer"},
{text: "NSQuoteEntity.SetActiveQuoteVersionId", help: "<b>Void SetActiveQuoteVersionId(Integer p_0)<\/b>\n\nThe primary key of the Quote Version that is currently active. (The active version will always be the latest version.)\r\n\r\n\\param p_0 ActiveQuoteVersionId: Integer\r\n\\return Integer"},
{text: "NSQuoteEntity.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nThe ID of the main Quote Document\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSQuoteEntity.SetERPOrderKey", help: "<b>Void SetERPOrderKey(String p_0)<\/b>\n\nThe key in the ERP system that identifies this sale's Order, as transferred and possibly later edited in the ERP system.  Only filled out if there exists a corresponding order representation of the quote in the ERP system.\r\n\r\n\\param p_0 ERPOrderKey: String\r\n\\return String"},
{text: "NSQuoteEntity.SetERPQuoteKey", help: "<b>Void SetERPQuoteKey(String p_0)<\/b>\n\nForeign key of quote (if available). The key in the ERP system that identifies this sale's Quote (as opposed to the later Order information)\r\n\r\n\\param p_0 ERPQuoteKey: String\r\n\\return String"},
{text: "NSQuoteEntity.SetOrderComment", help: "<b>Void SetOrderComment(String p_0)<\/b>\n\nA comment that is intended for the Invoice, Order, Packing list and similar stages - AFTER the quote has become an order and goes to ERP for processing\r\n\r\n\\param p_0 OrderComment: String\r\n\\return String"},
{text: "NSQuoteEntity.SetPoNumber", help: "<b>Void SetPoNumber(String p_0)<\/b>\n\nCustomer's Purchase order number\r\n\r\n\\param p_0 PoNumber: String\r\n\\return String"},
{text: "NSQuoteEntity.SetPreferredEmailCulture", help: "<b>Void SetPreferredEmailCulture(String p_0)<\/b>\n\nWhen emails are sent (offer or confirmation), a language can be chosen in the GUI; this field saves the most recent choice and can be used to default the next such choice. Default-default is user's current language\r\n\r\n\\param p_0 PreferredEmailCulture: String\r\n\\return String"},
{text: "NSQuoteEntity.SetQuoteConnectionId", help: "<b>Void SetQuoteConnectionId(Integer p_0)<\/b>\n\nThe connection in the CRM system to where this quote came from. Identifies the ERP connection used for this quote. Each quote is bound to one and only one connection.\r\n\r\n\\param p_0 QuoteConnectionId: Integer\r\n\\return Integer"},
{text: "NSQuoteEntity.SetQuoteId", help: "<b>Void SetQuoteId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 QuoteId: Integer\r\n\\return Integer"},
{text: "NSQuoteEntity.SetQuoteVersions", help: "<b>Void SetQuoteVersions(NSQuoteVersion[] p_0)<\/b>\n\nArray og QuoteVersions connected to the quote.\r\n\r\n\\param p_0 QuoteVersions: QuoteVersionArray\r\n\\return QuoteVersionArray"},
{text: "NSQuoteEntity.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nThe foreign key to the corresponding sale\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSQuoteEntity.SetUseValuesFromQuote", help: "<b>Void SetUseValuesFromQuote(Integer p_0)<\/b>\n\nIf true, then the Earning, Earning_Percent and Amount fields are populated from the QuoteVersion.QuoteAlternative (current revision, most-likely alternative).\r\n\r\n\\param p_0 UseValuesFromQuote: Integer\r\n\\return Integer"},
{text: "Void.NSQuoteLine", help: "<b>NSQuoteLine<\/b>\n\nInformation about a connection to the ERP system."},
{text: "NSQuoteLine.GetIsSubscription", help: "<b>Bool GetIsSubscription()<\/b>\n\nIs this a subscription product, sold in repeating intervals\/amounts?\r\n\r\n\\return Bool"},
{text: "NSQuoteLine.GetSubscriptionStart", help: "<b>DateTime GetSubscriptionStart()<\/b>\n\nStart date for subscription, as offered\r\n\r\n\\return DateTime"},
{text: "NSQuoteLine.GetDeliveredQuantity", help: "<b>Float GetDeliveredQuantity()<\/b>\n\nHow many units have been delivered - updated by ERP system.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetDiscountAmount", help: "<b>Float GetDiscountAmount()<\/b>\n\nThe discount for the line, in whatever currency the sale is in. Both ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride field must be set to the field the user actually changed last. If this field is filled out by the user, it overrides any discount suggested by the connector. If the user has not filled this in, the system will copy the ERP discount amount to this field.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetDiscountPercent", help: "<b>Float GetDiscountPercent()<\/b>\n\nThe discount for the line, in percent. Both ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride field must be set to the field the user actually changed last. If this field is filled out by the user, it overrides any discount suggested by the connector. If the user has not filled this in, the system will copy the ERP discount amount to this field. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetEarningAmount", help: "<b>Float GetEarningAmount()<\/b>\n\nThe earning, in whatever currency the sale is in. Both ‘EarningAmount and ‘EarningPercent shall be filled out, but the UserValueOverride field must be set to the field the user actually changed last.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetEarningPercent", help: "<b>Float GetEarningPercent()<\/b>\n\nThe earning, in percent. Both ‘EarningAmount and ‘EarningPercent shall be filled out, but the UserValueOverride field must be set to the field the user actually changed last. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetERPDiscountAmount", help: "<b>Float GetERPDiscountAmount()<\/b>\n\nThe discount the system calculates based on customer \/ quantity \/ whatever. Can be overrided by the salesman in the field 'DiscountPercent' or 'DiscountAmount'. If UserValueOverride is set to ‘None’ then the value is copied to DiscountAmount. Both fields ERPDiscountPercent and ERPDiscountAmount will be filled out.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetERPDiscountPercent", help: "<b>Float GetERPDiscountPercent()<\/b>\n\nThe discount the system calculates based on customer \/ quantity \/ whatever. Can be overrided by the salesman in the field 'DiscountPercent' or 'DiscountAmount'. Both fields ERPDiscountPercent and ERPDiscountAmount will be filled out. If UserValueOverride is set to ‘None’ then the value is copied to DiscountPercent. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetQuantity", help: "<b>Float GetQuantity()<\/b>\n\nHow many units; this is a decimal field since you might want to offer fractional units (2.5kg, or 0.5PC).\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetSubscriptionQuantity", help: "<b>Float GetSubscriptionQuantity()<\/b>\n\nThe default number of SubscriptionUnits to suggest when creating quote lines from this product\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetSubTotal", help: "<b>Float GetSubTotal()<\/b>\n\nValue to help the user interface, is equal to 'Quantity * ListPrice'\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetTotalPrice", help: "<b>Float GetTotalPrice()<\/b>\n\nTotalPrice  = SubTotal - DiscountAmount or TotalPrice = (UnitCost * Quantity) + EarningAmount, according to what the user changed last.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetUnitCost", help: "<b>Float GetUnitCost()<\/b>\n\nThe cost price per unit for this product. May be filled in by connector if it has the Provide-Cost capability.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetUnitListPrice", help: "<b>Float GetUnitListPrice()<\/b>\n\nThe standard list price; as given by ERP Connector, OR overridden by user\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetUnitMinimumPrice", help: "<b>Float GetUnitMinimumPrice()<\/b>\n\nThe minimum price this line can be sold for (to limit discounting). Will come from the connector. List price per unit must exceed the minimum price per unit.\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetVAT", help: "<b>Float GetVAT()<\/b>\n\nTax\/VAT - THIS IS A PERCENTAGE. The connector is responsible for populating this field; the percentage will be used to calculate VAT amounts available as merge fields in the document templates (but amounts are never stored in the database).\r\n\r\n\\return Float"},
{text: "NSQuoteLine.GetQuoteAlternativeId", help: "<b>Integer GetQuoteAlternativeId()<\/b>\n\nThe alternative this line is part of, the conceptual Parent in CRM database.\r\n\r\n\\return Integer"},
{text: "NSQuoteLine.GetQuoteLineId", help: "<b>Integer GetQuoteLineId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSQuoteLine.GetRank", help: "<b>Integer GetRank()<\/b>\n\nQuoteLines can be re-ordered, so we must track the ordering.\r\n\r\n\\return Integer"},
{text: "NSQuoteLine.GetStatus", help: "<b>Integer GetStatus()<\/b>\n\n"},
{text: "NSQuoteLine.GetUserValueOverride", help: "<b>Integer GetUserValueOverride()<\/b>\n\n"},
{text: "NSQuoteLine.GetExtraInfo", help: "<b>NSProductExtraDataField[] GetExtraInfo()<\/b>\n\nExtra information, supplied by QuoteConnector, used by a future dynamic GUI extension\r\n\r\n\\return ProductExtraDataFieldArray"},
{text: "NSQuoteLine.GetStatus", help: "<b>NSQuoteStatus GetStatus()<\/b>\n\nIf there was a problem with for instance calculation, this field is set to warning or error. Typically shown as an icon. QuoteStatus is an enum with statuses: OK, OKWithInfo, Warning, Error.\r\n\r\n\\return QuoteStatus"},
{text: "NSQuoteLine.GetUserValueOverride", help: "<b>NSValueOverride GetUserValueOverride()<\/b>\n\nHas the pre-calculated (from ERP) price information been overridden, and how. If the user has filled out the discountpercentage field, then the UserValueOverride field is set to OverridePercent. (The DiscountAmount, EarningPercent, EarningAmount and TotalPrice fields are calculated based on the DiscountPercent.)\r\n\r\n\\return ValueOverride"},
{text: "NSQuoteLine.GetCode", help: "<b>String GetCode()<\/b>\n\nA value the salesmen use to quickly find the correct product. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetDescription", help: "<b>String GetDescription()<\/b>\n\nA longer description for the product. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetERPProductKey", help: "<b>String GetERPProductKey()<\/b>\n\nForeign key of product+pricelist this line is based on. Can be blank since the QuoteLine doesn’t have to be connected to a product.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetERPQuoteLineKey", help: "<b>String GetERPQuoteLineKey()<\/b>\n\nThe foreign key to the quoteline in ERP system (if it has such a representation).\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetExtraField1", help: "<b>String GetExtraField1()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetExtraField2", help: "<b>String GetExtraField2()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetExtraField3", help: "<b>String GetExtraField3()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetExtraField4", help: "<b>String GetExtraField4()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetExtraField5", help: "<b>String GetExtraField5()<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetItemNumber", help: "<b>String GetItemNumber()<\/b>\n\nNorwegian: «Postnummer». Specific numbers from some hierarchy, for instance '1.4.3.2'. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the product. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetPriceUnit", help: "<b>String GetPriceUnit()<\/b>\n\nWhat is the unit (meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever); read-only for lines that originate in defined products.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetProductCategoryKey", help: "<b>String GetProductCategoryKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetProductFamilyKey", help: "<b>String GetProductFamilyKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetProductTypeKey", help: "<b>String GetProductTypeKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetQuantityUnit", help: "<b>String GetQuantityUnit()<\/b>\n\nWhat is the unit (meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever); Connector handles conversion relative to PriceUnit if they are different.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetRawExtraInfo", help: "<b>String GetRawExtraInfo()<\/b>\n\nRead-only extra information in plain text, supplied by QuoteConnector, used by a future dynamic GUI extension\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetReason", help: "<b>String GetReason()<\/b>\n\nIf QuoteStatus is not OK, then this field contains a localized explanation that the user can be shown.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetRights", help: "<b>String GetRights()<\/b>\n\nField1=right&Field2=right, etc. of any fields that have non-standard field access rights. Rights can be one of: N (=None or Hidden), R (=Read-only), W (=Writeable), M (=Mandatory). The fields will mostly be from the Quoteline table, but some added fields that are conceptually part of the quoteline, like Image will also be possibly to set rights on. Will be used by SuperOffice to control the user interface when showing the record.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetRule", help: "<b>String GetRule()<\/b>\n\nThe names of one or more calculation rules that are in effect for this line, comma-separated case-insensitive\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetSubscriptionUnit", help: "<b>String GetSubscriptionUnit()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text with the actual subscription unit.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetSupplier", help: "<b>String GetSupplier()<\/b>\n\nThe name of the supplier. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetSupplierCode", help: "<b>String GetSupplierCode()<\/b>\n\nThe suppliers' code or part number for this product. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetThumbnail", help: "<b>String GetThumbnail()<\/b>\n\nA small image of the product, typically used to show in a list. Base64 encoded png.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetUrl", help: "<b>String GetUrl()<\/b>\n\nA url to the product info. Can be empty. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\return String"},
{text: "NSQuoteLine.GetVATInfo", help: "<b>String GetVATInfo()<\/b>\n\nTax\/VAT information, Extra info about VAT that the connector might insert, and the users might want to specify on the quote. The core CRM product has no business logic for this field, it is wholly up to connectors to use it.\r\n\r\n\\return String"},
{text: "NSQuoteLine.SetCode", help: "<b>Void SetCode(String p_0)<\/b>\n\nA value the salesmen use to quickly find the correct product. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 Code: String\r\n\\return String"},
{text: "NSQuoteLine.SetDeliveredQuantity", help: "<b>Void SetDeliveredQuantity(Float p_0)<\/b>\n\nHow many units have been delivered - updated by ERP system.\r\n\r\n\\param p_0 DeliveredQuantity: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nA longer description for the product. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSQuoteLine.SetDiscountAmount", help: "<b>Void SetDiscountAmount(Float p_0)<\/b>\n\nThe discount for the line, in whatever currency the sale is in. Both ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride field must be set to the field the user actually changed last. If this field is filled out by the user, it overrides any discount suggested by the connector. If the user has not filled this in, the system will copy the ERP discount amount to this field.\r\n\r\n\\param p_0 DiscountAmount: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetDiscountPercent", help: "<b>Void SetDiscountPercent(Float p_0)<\/b>\n\nThe discount for the line, in percent. Both ‘DiscountPercent’ and ‘DiscountAmount’ shall be filled out, but the UserValueOverride field must be set to the field the user actually changed last. If this field is filled out by the user, it overrides any discount suggested by the connector. If the user has not filled this in, the system will copy the ERP discount amount to this field. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\param p_0 DiscountPercent: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetEarningAmount", help: "<b>Void SetEarningAmount(Float p_0)<\/b>\n\nThe earning, in whatever currency the sale is in. Both ‘EarningAmount and ‘EarningPercent shall be filled out, but the UserValueOverride field must be set to the field the user actually changed last.\r\n\r\n\\param p_0 EarningAmount: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetEarningPercent", help: "<b>Void SetEarningPercent(Float p_0)<\/b>\n\nThe earning, in percent. Both ‘EarningAmount and ‘EarningPercent shall be filled out, but the UserValueOverride field must be set to the field the user actually changed last. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\param p_0 EarningPercent: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetERPDiscountAmount", help: "<b>Void SetERPDiscountAmount(Float p_0)<\/b>\n\nThe discount the system calculates based on customer \/ quantity \/ whatever. Can be overrided by the salesman in the field 'DiscountPercent' or 'DiscountAmount'. If UserValueOverride is set to ‘None’ then the value is copied to DiscountAmount. Both fields ERPDiscountPercent and ERPDiscountAmount will be filled out.\r\n\r\n\\param p_0 ERPDiscountAmount: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetERPDiscountPercent", help: "<b>Void SetERPDiscountPercent(Float p_0)<\/b>\n\nThe discount the system calculates based on customer \/ quantity \/ whatever. Can be overrided by the salesman in the field 'DiscountPercent' or 'DiscountAmount'. Both fields ERPDiscountPercent and ERPDiscountAmount will be filled out. If UserValueOverride is set to ‘None’ then the value is copied to DiscountPercent. The Percentage is given in percent form, i.e. ‘12%’ is represented as ‘12’.\r\n\r\n\\param p_0 ERPDiscountPercent: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetERPProductKey", help: "<b>Void SetERPProductKey(String p_0)<\/b>\n\nForeign key of product+pricelist this line is based on. Can be blank since the QuoteLine doesn’t have to be connected to a product.\r\n\r\n\\param p_0 ERPProductKey: String\r\n\\return String"},
{text: "NSQuoteLine.SetERPQuoteLineKey", help: "<b>Void SetERPQuoteLineKey(String p_0)<\/b>\n\nThe foreign key to the quoteline in ERP system (if it has such a representation).\r\n\r\n\\param p_0 ERPQuoteLineKey: String\r\n\\return String"},
{text: "NSQuoteLine.SetExtraField1", help: "<b>Void SetExtraField1(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField1: String\r\n\\return String"},
{text: "NSQuoteLine.SetExtraField2", help: "<b>Void SetExtraField2(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField2: String\r\n\\return String"},
{text: "NSQuoteLine.SetExtraField3", help: "<b>Void SetExtraField3(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField3: String\r\n\\return String"},
{text: "NSQuoteLine.SetExtraField4", help: "<b>Void SetExtraField4(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField4: String\r\n\\return String"},
{text: "NSQuoteLine.SetExtraField5", help: "<b>Void SetExtraField5(String p_0)<\/b>\n\nThis a simple field for adding information that the Connector can provide, and that the qoute document need to display.\r\n\r\n\\param p_0 ExtraField5: String\r\n\\return String"},
{text: "NSQuoteLine.SetExtraInfo", help: "<b>Void SetExtraInfo(NSProductExtraDataField[] p_0)<\/b>\n\nExtra information, supplied by QuoteConnector, used by a future dynamic GUI extension\r\n\r\n\\param p_0 ExtraInfo: ProductExtraDataFieldArray\r\n\\return ProductExtraDataFieldArray"},
{text: "NSQuoteLine.SetIsSubscription", help: "<b>Void SetIsSubscription(Bool p_0)<\/b>\n\nIs this a subscription product, sold in repeating intervals\/amounts?\r\n\r\n\\param p_0 IsSubscription: Bool\r\n\\return Bool"},
{text: "NSQuoteLine.SetItemNumber", help: "<b>Void SetItemNumber(String p_0)<\/b>\n\nNorwegian: «Postnummer». Specific numbers from some hierarchy, for instance '1.4.3.2'. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 ItemNumber: String\r\n\\return String"},
{text: "NSQuoteLine.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the product. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSQuoteLine.SetPriceUnit", help: "<b>Void SetPriceUnit(String p_0)<\/b>\n\nWhat is the unit (meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever); read-only for lines that originate in defined products.\r\n\r\n\\param p_0 PriceUnit: String\r\n\\return String"},
{text: "NSQuoteLine.SetProductCategoryKey", help: "<b>Void SetProductCategoryKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 ProductCategoryKey: String\r\n\\return String"},
{text: "NSQuoteLine.SetProductFamilyKey", help: "<b>Void SetProductFamilyKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 ProductFamilyKey: String\r\n\\return String"},
{text: "NSQuoteLine.SetProductTypeKey", help: "<b>Void SetProductTypeKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn't support lists, a text. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 ProductTypeKey: String\r\n\\return String"},
{text: "NSQuoteLine.SetQuantity", help: "<b>Void SetQuantity(Float p_0)<\/b>\n\nHow many units; this is a decimal field since you might want to offer fractional units (2.5kg, or 0.5PC).\r\n\r\n\\param p_0 Quantity: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetQuantityUnit", help: "<b>Void SetQuantityUnit(String p_0)<\/b>\n\nWhat is the unit (meter, ton, bushel, microsecond, gradus, τρυβλίον, 五合枡, دونم or whatever); Connector handles conversion relative to PriceUnit if they are different.\r\n\r\n\\param p_0 QuantityUnit: String\r\n\\return String"},
{text: "NSQuoteLine.SetQuoteAlternativeId", help: "<b>Void SetQuoteAlternativeId(Integer p_0)<\/b>\n\nThe alternative this line is part of, the conceptual Parent in CRM database.\r\n\r\n\\param p_0 QuoteAlternativeId: Integer\r\n\\return Integer"},
{text: "NSQuoteLine.SetQuoteLineId", help: "<b>Void SetQuoteLineId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 QuoteLineId: Integer\r\n\\return Integer"},
{text: "NSQuoteLine.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nQuoteLines can be re-ordered, so we must track the ordering.\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSQuoteLine.SetRawExtraInfo", help: "<b>Void SetRawExtraInfo(String p_0)<\/b>\n\nRead-only extra information in plain text, supplied by QuoteConnector, used by a future dynamic GUI extension\r\n\r\n\\param p_0 RawExtraInfo: String\r\n\\return String"},
{text: "NSQuoteLine.SetReason", help: "<b>Void SetReason(String p_0)<\/b>\n\nIf QuoteStatus is not OK, then this field contains a localized explanation that the user can be shown.\r\n\r\n\\param p_0 Reason: String\r\n\\return String"},
{text: "NSQuoteLine.SetRights", help: "<b>Void SetRights(String p_0)<\/b>\n\nField1=right&Field2=right, etc. of any fields that have non-standard field access rights. Rights can be one of: N (=None or Hidden), R (=Read-only), W (=Writeable), M (=Mandatory). The fields will mostly be from the Quoteline table, but some added fields that are conceptually part of the quoteline, like Image will also be possibly to set rights on. Will be used by SuperOffice to control the user interface when showing the record.\r\n\r\n\\param p_0 Rights: String\r\n\\return String"},
{text: "NSQuoteLine.SetRule", help: "<b>Void SetRule(String p_0)<\/b>\n\nThe names of one or more calculation rules that are in effect for this line, comma-separated case-insensitive\r\n\r\n\\param p_0 Rule: String\r\n\\return String"},
{text: "NSQuoteLine.SetStatus", help: "<b>Void SetStatus(Integer p_0)<\/b>\n\n"},
{text: "NSQuoteLine.SetStatus", help: "<b>Void SetStatus(NSQuoteStatus p_0)<\/b>\n\nIf there was a problem with for instance calculation, this field is set to warning or error. Typically shown as an icon. QuoteStatus is an enum with statuses: OK, OKWithInfo, Warning, Error.\r\n\r\n\\param p_0 Status: QuoteStatus\r\n\\return QuoteStatus"},
{text: "NSQuoteLine.SetSubscriptionQuantity", help: "<b>Void SetSubscriptionQuantity(Float p_0)<\/b>\n\nThe default number of SubscriptionUnits to suggest when creating quote lines from this product\r\n\r\n\\param p_0 SubscriptionQuantity: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetSubscriptionStart", help: "<b>Void SetSubscriptionStart(DateTime p_0)<\/b>\n\nStart date for subscription, as offered\r\n\r\n\\param p_0 SubscriptionStart: DateTime\r\n\\return DateTime"},
{text: "NSQuoteLine.SetSubscriptionUnit", help: "<b>Void SetSubscriptionUnit(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text with the actual subscription unit.\r\n\r\n\\param p_0 SubscriptionUnit: String\r\n\\return String"},
{text: "NSQuoteLine.SetSubTotal", help: "<b>Void SetSubTotal(Float p_0)<\/b>\n\nValue to help the user interface, is equal to 'Quantity * ListPrice'\r\n\r\n\\param p_0 SubTotal: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetSupplier", help: "<b>Void SetSupplier(String p_0)<\/b>\n\nThe name of the supplier. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 Supplier: String\r\n\\return String"},
{text: "NSQuoteLine.SetSupplierCode", help: "<b>Void SetSupplierCode(String p_0)<\/b>\n\nThe suppliers' code or part number for this product. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 SupplierCode: String\r\n\\return String"},
{text: "NSQuoteLine.SetThumbnail", help: "<b>Void SetThumbnail(String p_0)<\/b>\n\nA small image of the product, typically used to show in a list. Base64 encoded png.\r\n\r\n\\param p_0 Thumbnail: String\r\n\\return String"},
{text: "NSQuoteLine.SetTotalPrice", help: "<b>Void SetTotalPrice(Float p_0)<\/b>\n\nTotalPrice  = SubTotal - DiscountAmount or TotalPrice = (UnitCost * Quantity) + EarningAmount, according to what the user changed last.\r\n\r\n\\param p_0 TotalPrice: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetUnitCost", help: "<b>Void SetUnitCost(Float p_0)<\/b>\n\nThe cost price per unit for this product. May be filled in by connector if it has the Provide-Cost capability.\r\n\r\n\\param p_0 UnitCost: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetUnitListPrice", help: "<b>Void SetUnitListPrice(Float p_0)<\/b>\n\nThe standard list price; as given by ERP Connector, OR overridden by user\r\n\r\n\\param p_0 UnitListPrice: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetUnitMinimumPrice", help: "<b>Void SetUnitMinimumPrice(Float p_0)<\/b>\n\nThe minimum price this line can be sold for (to limit discounting). Will come from the connector. List price per unit must exceed the minimum price per unit.\r\n\r\n\\param p_0 UnitMinimumPrice: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetUrl", help: "<b>Void SetUrl(String p_0)<\/b>\n\nA url to the product info. Can be empty. Is stored here if the user changes the value from the product in the pricelist, or just enters a QuoteLine without a product link.\r\n\r\n\\param p_0 Url: String\r\n\\return String"},
{text: "NSQuoteLine.SetUserValueOverride", help: "<b>Void SetUserValueOverride(Integer p_0)<\/b>\n\n"},
{text: "NSQuoteLine.SetUserValueOverride", help: "<b>Void SetUserValueOverride(NSValueOverride p_0)<\/b>\n\nHas the pre-calculated (from ERP) price information been overridden, and how. If the user has filled out the discountpercentage field, then the UserValueOverride field is set to OverridePercent. (The DiscountAmount, EarningPercent, EarningAmount and TotalPrice fields are calculated based on the DiscountPercent.)\r\n\r\n\\param p_0 UserValueOverride: ValueOverride\r\n\\return ValueOverride"},
{text: "NSQuoteLine.SetVAT", help: "<b>Void SetVAT(Float p_0)<\/b>\n\nTax\/VAT - THIS IS A PERCENTAGE. The connector is responsible for populating this field; the percentage will be used to calculate VAT amounts available as merge fields in the document templates (but amounts are never stored in the database).\r\n\r\n\\param p_0 VAT: Float\r\n\\return Float"},
{text: "NSQuoteLine.SetVATInfo", help: "<b>Void SetVATInfo(String p_0)<\/b>\n\nTax\/VAT information, Extra info about VAT that the connector might insert, and the users might want to specify on the quote. The core CRM product has no business logic for this field, it is wholly up to connectors to use it.\r\n\r\n\\param p_0 VATInfo: String\r\n\\return String"},
{text: "Void.NSQuoteLineConfiguration", help: "<b>NSQuoteLineConfiguration<\/b>\n\nQuoteLineConfiguration contains information about which configuration fields that is visible in the GUI. Read only and mandatory fields are also specified."},
{text: "NSQuoteLineConfiguration.GetEditable", help: "<b>Bool GetEditable()<\/b>\n\nIs this a read only field?\r\n\r\n\\return Bool"},
{text: "NSQuoteLineConfiguration.GetInUse", help: "<b>Bool GetInUse()<\/b>\n\nShould this field be displayed in the GUI?\r\n\r\n\\return Bool"},
{text: "NSQuoteLineConfiguration.GetMandatory", help: "<b>Bool GetMandatory()<\/b>\n\nIs this a mandatory field?\r\n\r\n\\return Bool"},
{text: "NSQuoteLineConfiguration.GetRestrictEdit", help: "<b>Bool GetRestrictEdit()<\/b>\n\nIf true, then this field cannot be set readwrite or mandatory: It's bound to be readonly\r\n\r\n\\return Bool"},
{text: "NSQuoteLineConfiguration.GetQuoteLineConfigurationId", help: "<b>Integer GetQuoteLineConfigurationId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSQuoteLineConfiguration.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank of the field\r\n\r\n\\return Integer"},
{text: "NSQuoteLineConfiguration.GetFieldName", help: "<b>String GetFieldName()<\/b>\n\nThe name of the field being configured, from data dictionary\r\n\r\n\\return String"},
{text: "NSQuoteLineConfiguration.GetLabel", help: "<b>String GetLabel()<\/b>\n\nLabel resource string.\r\n\r\n\\return String"},
{text: "NSQuoteLineConfiguration.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip resource string.\r\n\r\n\\return String"},
{text: "NSQuoteLineConfiguration.SetEditable", help: "<b>Void SetEditable(Bool p_0)<\/b>\n\nIs this a read only field?\r\n\r\n\\param p_0 Editable: Bool\r\n\\return Bool"},
{text: "NSQuoteLineConfiguration.SetFieldName", help: "<b>Void SetFieldName(String p_0)<\/b>\n\nThe name of the field being configured, from data dictionary\r\n\r\n\\param p_0 FieldName: String\r\n\\return String"},
{text: "NSQuoteLineConfiguration.SetInUse", help: "<b>Void SetInUse(Bool p_0)<\/b>\n\nShould this field be displayed in the GUI?\r\n\r\n\\param p_0 InUse: Bool\r\n\\return Bool"},
{text: "NSQuoteLineConfiguration.SetLabel", help: "<b>Void SetLabel(String p_0)<\/b>\n\nLabel resource string.\r\n\r\n\\param p_0 Label: String\r\n\\return String"},
{text: "NSQuoteLineConfiguration.SetMandatory", help: "<b>Void SetMandatory(Bool p_0)<\/b>\n\nIs this a mandatory field?\r\n\r\n\\param p_0 Mandatory: Bool\r\n\\return Bool"},
{text: "NSQuoteLineConfiguration.SetQuoteLineConfigurationId", help: "<b>Void SetQuoteLineConfigurationId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 QuoteLineConfigurationId: Integer\r\n\\return Integer"},
{text: "NSQuoteLineConfiguration.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank of the field\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSQuoteLineConfiguration.SetRestrictEdit", help: "<b>Void SetRestrictEdit(Bool p_0)<\/b>\n\nIf true, then this field cannot be set readwrite or mandatory: It's bound to be readonly\r\n\r\n\\param p_0 RestrictEdit: Bool\r\n\\return Bool"},
{text: "NSQuoteLineConfiguration.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip resource string.\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSQuoteListItem", help: "<b>NSQuoteListItem<\/b>\n\nOne line in a list"},
{text: "NSQuoteListItem.GetDisplayDescription", help: "<b>String GetDisplayDescription()<\/b>\n\nTypically used in a tooltip.\r\n\r\n\\return String"},
{text: "NSQuoteListItem.GetDisplayValue", help: "<b>String GetDisplayValue()<\/b>\n\nList item text to display.\r\n\r\n\\return String"},
{text: "NSQuoteListItem.GetERPQuoteListItemKey", help: "<b>String GetERPQuoteListItemKey()<\/b>\n\nPrimary key for the item.\r\n\r\n\\return String"},
{text: "NSQuoteListItem.SetDisplayDescription", help: "<b>Void SetDisplayDescription(String p_0)<\/b>\n\nTypically used in a tooltip.\r\n\r\n\\param p_0 DisplayDescription: String\r\n\\return String"},
{text: "NSQuoteListItem.SetDisplayValue", help: "<b>Void SetDisplayValue(String p_0)<\/b>\n\nList item text to display.\r\n\r\n\\param p_0 DisplayValue: String\r\n\\return String"},
{text: "NSQuoteListItem.SetERPQuoteListItemKey", help: "<b>Void SetERPQuoteListItemKey(String p_0)<\/b>\n\nPrimary key for the item.\r\n\r\n\\param p_0 ERPQuoteListItemKey: String\r\n\\return String"},
{text: "Void.NSQuotePublishDocuments", help: "<b>NSQuotePublishDocuments<\/b>\n\nPrepare the documents required to publish a quote - Email, main document as pdf, quoted products as pdf, attachments"},
{text: "NSQuotePublishDocuments.GetQuoteDocumentId", help: "<b>Integer GetQuoteDocumentId()<\/b>\n\nQuote document, as PDF; may be zero if there is no document specified for the version\r\n\r\n\\return Integer"},
{text: "NSQuotePublishDocuments.GetQuotedProductsId", help: "<b>Integer GetQuotedProductsId()<\/b>\n\nQuoted products (quote lines or confirmation lines) document, as PDF\r\n\r\n\\return Integer"},
{text: "NSQuotePublishDocuments.GetQuoteAttachmentIds", help: "<b>Integer[] GetQuoteAttachmentIds()<\/b>\n\nArray of id's of any attachments (standard + custom for this version)\r\n\r\n\\return IntegerArray"},
{text: "NSQuotePublishDocuments.GetErrorMessage", help: "<b>String GetErrorMessage()<\/b>\n\nIf something went wrong, show this message and do not continue\r\n\r\n\\return String"},
{text: "NSQuotePublishDocuments.GetMailBody", help: "<b>String GetMailBody()<\/b>\n\nThe string that is the content of the mail body; this is the result of merging the mail body template with the current template variable values\r\n\r\n\\return String"},
{text: "NSQuotePublishDocuments.GetMailSubject", help: "<b>String GetMailSubject()<\/b>\n\nThe string that is the mail subject; done by merging the text resource SR_QUOTE_PUBLISH_MAILHEADING with the current template variable values\r\n\r\n\\return String"},
{text: "NSQuotePublishDocuments.GetToEmail", help: "<b>String GetToEmail()<\/b>\n\nThe email address of the recipient, taken from the sale's person\r\n\r\n\\return String"},
{text: "NSQuotePublishDocuments.GetToFullName", help: "<b>String GetToFullName()<\/b>\n\nThe full name of the recipient, taken from the sale's person\r\n\r\n\\return String"},
{text: "NSQuotePublishDocuments.SetErrorMessage", help: "<b>Void SetErrorMessage(String p_0)<\/b>\n\nIf something went wrong, show this message and do not continue\r\n\r\n\\param p_0 ErrorMessage: String\r\n\\return String"},
{text: "NSQuotePublishDocuments.SetMailBody", help: "<b>Void SetMailBody(String p_0)<\/b>\n\nThe string that is the content of the mail body; this is the result of merging the mail body template with the current template variable values\r\n\r\n\\param p_0 MailBody: String\r\n\\return String"},
{text: "NSQuotePublishDocuments.SetMailSubject", help: "<b>Void SetMailSubject(String p_0)<\/b>\n\nThe string that is the mail subject; done by merging the text resource SR_QUOTE_PUBLISH_MAILHEADING with the current template variable values\r\n\r\n\\param p_0 MailSubject: String\r\n\\return String"},
{text: "NSQuotePublishDocuments.SetQuoteAttachmentIds", help: "<b>Void SetQuoteAttachmentIds(Integer[] p_0)<\/b>\n\nArray of id's of any attachments (standard + custom for this version)\r\n\r\n\\param p_0 QuoteAttachmentIds: IntegerArray\r\n\\return IntegerArray"},
{text: "NSQuotePublishDocuments.SetQuoteDocumentId", help: "<b>Void SetQuoteDocumentId(Integer p_0)<\/b>\n\nQuote document, as PDF; may be zero if there is no document specified for the version\r\n\r\n\\param p_0 QuoteDocumentId: Integer\r\n\\return Integer"},
{text: "NSQuotePublishDocuments.SetQuotedProductsId", help: "<b>Void SetQuotedProductsId(Integer p_0)<\/b>\n\nQuoted products (quote lines or confirmation lines) document, as PDF\r\n\r\n\\param p_0 QuotedProductsId: Integer\r\n\\return Integer"},
{text: "NSQuotePublishDocuments.SetToEmail", help: "<b>Void SetToEmail(String p_0)<\/b>\n\nThe email address of the recipient, taken from the sale's person\r\n\r\n\\param p_0 ToEmail: String\r\n\\return String"},
{text: "NSQuotePublishDocuments.SetToFullName", help: "<b>Void SetToFullName(String p_0)<\/b>\n\nThe full name of the recipient, taken from the sale's person\r\n\r\n\\param p_0 ToFullName: String\r\n\\return String"},
{text: "Void.NSQuoteVersion", help: "<b>NSQuoteVersion<\/b>\n\nInformation about a version of the ."},
{text: "NSQuoteVersion.GetHasOwnDeliveryAddress", help: "<b>Bool GetHasOwnDeliveryAddress()<\/b>\n\nThe delivery address is not the same as the contact's Street address\r\n\r\n\\return Bool"},
{text: "NSQuoteVersion.GetHasOwnInvoiceAddress", help: "<b>Bool GetHasOwnInvoiceAddress()<\/b>\n\nThe quote has an address for Invoicing. This will typically be copied from the company's addresses.\r\n\r\n\\return Bool"},
{text: "NSQuoteVersion.GetApprovedRegisteredDate", help: "<b>DateTime GetApprovedRegisteredDate()<\/b>\n\nWhen was approval granted or rejected\r\n\r\n\\return DateTime"},
{text: "NSQuoteVersion.GetExpirationDate", help: "<b>DateTime GetExpirationDate()<\/b>\n\nLast date the quote Version is valid, expiration is at midnight end of this day.\r\n\r\n\\return DateTime"},
{text: "NSQuoteVersion.GetLastRecalculated", help: "<b>DateTime GetLastRecalculated()<\/b>\n\nWhen this version was last subjected to a total recalculation. This field must be set by the connector, since the connector may choose to ignore a RecalculateVersion call based on policies and possibly the current value of this field. SuperOffice will set this field to 1.1.1760 whenever any change occurs to the quote, to indicate that a recalculation is needed.\r\n\r\n\\return DateTime"},
{text: "NSQuoteVersion.GetRegistered", help: "<b>DateTime GetRegistered()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSQuoteVersion.GetSentDate", help: "<b>DateTime GetSentDate()<\/b>\n\nThe date the version was sent to the customer.\r\n\r\n\\return DateTime"},
{text: "NSQuoteVersion.GetUpdated", help: "<b>DateTime GetUpdated()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSQuoteVersion.GetApprovedBy", help: "<b>Integer GetApprovedBy()<\/b>\n\nId of associate who approved (or rejected approval) for this version\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetApprovedRegisteredBy", help: "<b>Integer GetApprovedRegisteredBy()<\/b>\n\nId of associate who actually entered the approval; might be different from ApprovedBy (f.x. due to telephone consultation\/approval)\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetArchivedState", help: "<b>Integer GetArchivedState()<\/b>\n\n"},
{text: "NSQuoteVersion.GetDeliveryCountryId", help: "<b>Integer GetDeliveryCountryId()<\/b>\n\nCountry of delivery address, typically copied from the contact record\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetFollowupId", help: "<b>Integer GetFollowupId()<\/b>\n\nLink to a follow-up activity, created when this quote version was sent to the customer.\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetInvoiceCountryId", help: "<b>Integer GetInvoiceCountryId()<\/b>\n\nCountry of invoice address, typically copied from contact record\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetLikelyQuoteAlternativeId", help: "<b>Integer GetLikelyQuoteAlternativeId()<\/b>\n\nThe alternative that is considered most likely to be accepted. Used to calculate probable income.\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetQuoteId", help: "<b>Integer GetQuoteId()<\/b>\n\nForeign key to CRM quote (the conceptual parent). Owning Quote of this Quote Version.\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetQuoteVersionId", help: "<b>Integer GetQuoteVersionId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank\/Version number, starts at 1\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetRegisteredAssociateId", help: "<b>Integer GetRegisteredAssociateId()<\/b>\n\nRegistered by whom\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetState", help: "<b>Integer GetState()<\/b>\n\n"},
{text: "NSQuoteVersion.GetStatus", help: "<b>Integer GetStatus()<\/b>\n\n"},
{text: "NSQuoteVersion.GetUpdatedAssociateId", help: "<b>Integer GetUpdatedAssociateId()<\/b>\n\nLast updated by whom\r\n\r\n\\return Integer"},
{text: "NSQuoteVersion.GetQuoteAlternatives", help: "<b>NSQuoteAlternative[] GetQuoteAlternatives()<\/b>\n\nThe QuoteAlternatives for the QuoteVersion\r\n\r\n\\return QuoteAlternativeArray"},
{text: "NSQuoteVersion.GetStatus", help: "<b>NSQuoteStatus GetStatus()<\/b>\n\nIf there was a problem with for instance calculation, this field is set to warning or error.\r\n\r\n\\return QuoteStatus"},
{text: "NSQuoteVersion.GetArchivedState", help: "<b>NSQuoteVersionState GetArchivedState()<\/b>\n\nState that this quote version had, right before it was changed to Archived; in this way we can show what happened before the archiving.\r\n\r\n\\return QuoteVersionState"},
{text: "NSQuoteVersion.GetState", help: "<b>NSQuoteVersionState GetState()<\/b>\n\nCurrent state of this quote version.\r\n\r\n\\return QuoteVersionState"},
{text: "NSQuoteVersion.GetApprovedText", help: "<b>String GetApprovedText()<\/b>\n\nText with comments on why approval was granted (or rejected)\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of Version. Potentially longer text description, typically used in a tooltip. Max 2K.\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetERPDeliveryTermsKey", help: "<b>String GetERPDeliveryTermsKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text. For instance: ‘FOB’ (‘Free on board’).\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetERPDeliveryTypeKey", help: "<b>String GetERPDeliveryTypeKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text. For instance: ‘Air’.\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetERPPaymentTermsKey", help: "<b>String GetERPPaymentTermsKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text. For instance: ‘Standard 30 days’.\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetERPPaymentTypeKey", help: "<b>String GetERPPaymentTypeKey()<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text. For instance: 'Invoice'.\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetERPQuoteVersionKey", help: "<b>String GetERPQuoteVersionKey()<\/b>\n\nKey in the ERP system that uniquely identifies this Version within the ERP system (if available, the field may be empty).\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetExtraField1", help: "<b>String GetExtraField1()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetExtraField2", help: "<b>String GetExtraField2()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetExtraField3", help: "<b>String GetExtraField3()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetExtraField4", help: "<b>String GetExtraField4()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetExtraField5", help: "<b>String GetExtraField5()<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetNumber", help: "<b>String GetNumber()<\/b>\n\nA quote number that the user (or ERP connector) can fill out.\r\n\r\n\\return String"},
{text: "NSQuoteVersion.GetReason", help: "<b>String GetReason()<\/b>\n\nIf there was a problem, this field contains a localized explanation of the problem and possible steps to fix it that the user can be shown.\r\n\r\n\\return String"},
{text: "NSQuoteVersion.SetApprovedBy", help: "<b>Void SetApprovedBy(Integer p_0)<\/b>\n\nId of associate who approved (or rejected approval) for this version\r\n\r\n\\param p_0 ApprovedBy: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetApprovedRegisteredBy", help: "<b>Void SetApprovedRegisteredBy(Integer p_0)<\/b>\n\nId of associate who actually entered the approval; might be different from ApprovedBy (f.x. due to telephone consultation\/approval)\r\n\r\n\\param p_0 ApprovedRegisteredBy: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetApprovedRegisteredDate", help: "<b>Void SetApprovedRegisteredDate(DateTime p_0)<\/b>\n\nWhen was approval granted or rejected\r\n\r\n\\param p_0 ApprovedRegisteredDate: DateTime\r\n\\return DateTime"},
{text: "NSQuoteVersion.SetApprovedText", help: "<b>Void SetApprovedText(String p_0)<\/b>\n\nText with comments on why approval was granted (or rejected)\r\n\r\n\\param p_0 ApprovedText: String\r\n\\return String"},
{text: "NSQuoteVersion.SetArchivedState", help: "<b>Void SetArchivedState(Integer p_0)<\/b>\n\n"},
{text: "NSQuoteVersion.SetArchivedState", help: "<b>Void SetArchivedState(NSQuoteVersionState p_0)<\/b>\n\nState that this quote version had, right before it was changed to Archived; in this way we can show what happened before the archiving.\r\n\r\n\\param p_0 ArchivedState: QuoteVersionState\r\n\\return QuoteVersionState"},
{text: "NSQuoteVersion.SetDeliveryCountryId", help: "<b>Void SetDeliveryCountryId(Integer p_0)<\/b>\n\nCountry of delivery address, typically copied from the contact record\r\n\r\n\\param p_0 DeliveryCountryId: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of Version. Potentially longer text description, typically used in a tooltip. Max 2K.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSQuoteVersion.SetERPDeliveryTermsKey", help: "<b>Void SetERPDeliveryTermsKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text. For instance: ‘FOB’ (‘Free on board’).\r\n\r\n\\param p_0 ERPDeliveryTermsKey: String\r\n\\return String"},
{text: "NSQuoteVersion.SetERPDeliveryTypeKey", help: "<b>Void SetERPDeliveryTypeKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text. For instance: ‘Air’.\r\n\r\n\\param p_0 ERPDeliveryTypeKey: String\r\n\\return String"},
{text: "NSQuoteVersion.SetERPPaymentTermsKey", help: "<b>Void SetERPPaymentTermsKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text. For instance: ‘Standard 30 days’.\r\n\r\n\\param p_0 ERPPaymentTermsKey: String\r\n\\return String"},
{text: "NSQuoteVersion.SetERPPaymentTypeKey", help: "<b>Void SetERPPaymentTypeKey(String p_0)<\/b>\n\nEither a List id to an id from a connector provided list, or, if the connection doesn’t support lists, a text. For instance: 'Invoice'.\r\n\r\n\\param p_0 ERPPaymentTypeKey: String\r\n\\return String"},
{text: "NSQuoteVersion.SetERPQuoteVersionKey", help: "<b>Void SetERPQuoteVersionKey(String p_0)<\/b>\n\nKey in the ERP system that uniquely identifies this Version within the ERP system (if available, the field may be empty).\r\n\r\n\\param p_0 ERPQuoteVersionKey: String\r\n\\return String"},
{text: "NSQuoteVersion.SetExpirationDate", help: "<b>Void SetExpirationDate(DateTime p_0)<\/b>\n\nLast date the quote Version is valid, expiration is at midnight end of this day.\r\n\r\n\\param p_0 ExpirationDate: DateTime\r\n\\return DateTime"},
{text: "NSQuoteVersion.SetExtraField1", help: "<b>Void SetExtraField1(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField1: String\r\n\\return String"},
{text: "NSQuoteVersion.SetExtraField2", help: "<b>Void SetExtraField2(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField2: String\r\n\\return String"},
{text: "NSQuoteVersion.SetExtraField3", help: "<b>Void SetExtraField3(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField3: String\r\n\\return String"},
{text: "NSQuoteVersion.SetExtraField4", help: "<b>Void SetExtraField4(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField4: String\r\n\\return String"},
{text: "NSQuoteVersion.SetExtraField5", help: "<b>Void SetExtraField5(String p_0)<\/b>\n\nOptional information added by Quote Connector; usable in the quote document merge process\r\n\r\n\\param p_0 ExtraField5: String\r\n\\return String"},
{text: "NSQuoteVersion.SetFollowupId", help: "<b>Void SetFollowupId(Integer p_0)<\/b>\n\nLink to a follow-up activity, created when this quote version was sent to the customer.\r\n\r\n\\param p_0 FollowupId: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetHasOwnDeliveryAddress", help: "<b>Void SetHasOwnDeliveryAddress(Bool p_0)<\/b>\n\nThe delivery address is not the same as the contact's Street address\r\n\r\n\\param p_0 HasOwnDeliveryAddress: Bool\r\n\\return Bool"},
{text: "NSQuoteVersion.SetHasOwnInvoiceAddress", help: "<b>Void SetHasOwnInvoiceAddress(Bool p_0)<\/b>\n\nThe quote has an address for Invoicing. This will typically be copied from the company's addresses.\r\n\r\n\\param p_0 HasOwnInvoiceAddress: Bool\r\n\\return Bool"},
{text: "NSQuoteVersion.SetInvoiceCountryId", help: "<b>Void SetInvoiceCountryId(Integer p_0)<\/b>\n\nCountry of invoice address, typically copied from contact record\r\n\r\n\\param p_0 InvoiceCountryId: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetLastRecalculated", help: "<b>Void SetLastRecalculated(DateTime p_0)<\/b>\n\nWhen this version was last subjected to a total recalculation. This field must be set by the connector, since the connector may choose to ignore a RecalculateVersion call based on policies and possibly the current value of this field. SuperOffice will set this field to 1.1.1760 whenever any change occurs to the quote, to indicate that a recalculation is needed.\r\n\r\n\\param p_0 LastRecalculated: DateTime\r\n\\return DateTime"},
{text: "NSQuoteVersion.SetLikelyQuoteAlternativeId", help: "<b>Void SetLikelyQuoteAlternativeId(Integer p_0)<\/b>\n\nThe alternative that is considered most likely to be accepted. Used to calculate probable income.\r\n\r\n\\param p_0 LikelyQuoteAlternativeId: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetNumber", help: "<b>Void SetNumber(String p_0)<\/b>\n\nA quote number that the user (or ERP connector) can fill out.\r\n\r\n\\param p_0 Number: String\r\n\\return String"},
{text: "NSQuoteVersion.SetQuoteAlternatives", help: "<b>Void SetQuoteAlternatives(NSQuoteAlternative[] p_0)<\/b>\n\nThe QuoteAlternatives for the QuoteVersion\r\n\r\n\\param p_0 QuoteAlternatives: QuoteAlternativeArray\r\n\\return QuoteAlternativeArray"},
{text: "NSQuoteVersion.SetQuoteId", help: "<b>Void SetQuoteId(Integer p_0)<\/b>\n\nForeign key to CRM quote (the conceptual parent). Owning Quote of this Quote Version.\r\n\r\n\\param p_0 QuoteId: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetQuoteVersionId", help: "<b>Void SetQuoteVersionId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 QuoteVersionId: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank\/Version number, starts at 1\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetReason", help: "<b>Void SetReason(String p_0)<\/b>\n\nIf there was a problem, this field contains a localized explanation of the problem and possible steps to fix it that the user can be shown.\r\n\r\n\\param p_0 Reason: String\r\n\\return String"},
{text: "NSQuoteVersion.SetRegistered", help: "<b>Void SetRegistered(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 Registered: DateTime\r\n\\return DateTime"},
{text: "NSQuoteVersion.SetRegisteredAssociateId", help: "<b>Void SetRegisteredAssociateId(Integer p_0)<\/b>\n\nRegistered by whom\r\n\r\n\\param p_0 RegisteredAssociateId: Integer\r\n\\return Integer"},
{text: "NSQuoteVersion.SetSentDate", help: "<b>Void SetSentDate(DateTime p_0)<\/b>\n\nThe date the version was sent to the customer.\r\n\r\n\\param p_0 SentDate: DateTime\r\n\\return DateTime"},
{text: "NSQuoteVersion.SetState", help: "<b>Void SetState(Integer p_0)<\/b>\n\n"},
{text: "NSQuoteVersion.SetState", help: "<b>Void SetState(NSQuoteVersionState p_0)<\/b>\n\nCurrent state of this quote version.\r\n\r\n\\param p_0 State: QuoteVersionState\r\n\\return QuoteVersionState"},
{text: "NSQuoteVersion.SetStatus", help: "<b>Void SetStatus(Integer p_0)<\/b>\n\n"},
{text: "NSQuoteVersion.SetStatus", help: "<b>Void SetStatus(NSQuoteStatus p_0)<\/b>\n\nIf there was a problem with for instance calculation, this field is set to warning or error.\r\n\r\n\\param p_0 Status: QuoteStatus\r\n\\return QuoteStatus"},
{text: "NSQuoteVersion.SetUpdated", help: "<b>Void SetUpdated(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 Updated: DateTime\r\n\\return DateTime"},
{text: "NSQuoteVersion.SetUpdatedAssociateId", help: "<b>Void SetUpdatedAssociateId(Integer p_0)<\/b>\n\nLast updated by whom\r\n\r\n\\param p_0 UpdatedAssociateId: Integer\r\n\\return Integer"},
{text: "Void.NSQuoteVersionAttachment", help: "<b>NSQuoteVersionAttachment<\/b>\n\nAttachment documents for a given version of a Quote"},
{text: "NSQuoteVersionAttachment.GetIncluded", help: "<b>Bool GetIncluded()<\/b>\n\nWill this attachment be included in the next 'Send Quote' operation\r\n\r\n\\return Bool"},
{text: "NSQuoteVersionAttachment.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nLink to document\r\n\r\n\\return Integer"},
{text: "NSQuoteVersionAttachment.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nLink to document\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSQuoteVersionAttachment.SetIncluded", help: "<b>Void SetIncluded(Bool p_0)<\/b>\n\nWill this attachment be included in the next 'Send Quote' operation\r\n\r\n\\param p_0 Included: Bool\r\n\\return Bool"},
{text: "Void.NSQuoteVersionButtonState", help: "<b>NSQuoteVersionButtonState<\/b>\n\nInformation about possible button actions for the quote version dialog."},
{text: "NSQuoteVersionButtonState.GetEnabled", help: "<b>Bool GetEnabled()<\/b>\n\nIndicate if the button should be enabled or disabled\r\n\r\n\\return Bool"},
{text: "NSQuoteVersionButtonState.GetAction", help: "<b>Integer GetAction()<\/b>\n\nAction for the button\r\n\r\n\\return Integer"},
{text: "NSQuoteVersionButtonState.GetDisplayText", help: "<b>String GetDisplayText()<\/b>\n\nText to be displayed on the button\r\n\r\n\\return String"},
{text: "NSQuoteVersionButtonState.GetImageHint", help: "<b>String GetImageHint()<\/b>\n\nImage to be shown\r\n\r\n\\return String"},
{text: "NSQuoteVersionButtonState.GetTooltipText", help: "<b>String GetTooltipText()<\/b>\n\nThe tooltip for the button\r\n\r\n\\return String"},
{text: "NSQuoteVersionButtonState.SetAction", help: "<b>Void SetAction(Integer p_0)<\/b>\n\nAction for the button\r\n\r\n\\param p_0 Action: Integer\r\n\\return Integer"},
{text: "NSQuoteVersionButtonState.SetDisplayText", help: "<b>Void SetDisplayText(String p_0)<\/b>\n\nText to be displayed on the button\r\n\r\n\\param p_0 DisplayText: String\r\n\\return String"},
{text: "NSQuoteVersionButtonState.SetEnabled", help: "<b>Void SetEnabled(Bool p_0)<\/b>\n\nIndicate if the button should be enabled or disabled\r\n\r\n\\param p_0 Enabled: Bool\r\n\\return Bool"},
{text: "NSQuoteVersionButtonState.SetImageHint", help: "<b>Void SetImageHint(String p_0)<\/b>\n\nImage to be shown\r\n\r\n\\param p_0 ImageHint: String\r\n\\return String"},
{text: "NSQuoteVersionButtonState.SetTooltipText", help: "<b>Void SetTooltipText(String p_0)<\/b>\n\nThe tooltip for the button\r\n\r\n\\param p_0 TooltipText: String\r\n\\return String"},
{text: "Void.NSQuoteVersionStatusInformation", help: "<b>NSQuoteVersionStatusInformation<\/b>\n\nInformation about possible button actions for the quote version dialog."},
{text: "NSQuoteVersionStatusInformation.GetStatus", help: "<b>Integer GetStatus()<\/b>\n\nStatus information for the quote version.\r\n\r\n\\return Integer"},
{text: "NSQuoteVersionStatusInformation.GetDisplayMessage", help: "<b>String GetDisplayMessage()<\/b>\n\nGenerated error message for the Quote Version. Will check for errors on quote lines, alternatives and the version itself.\r\n\r\n\\return String"},
{text: "NSQuoteVersionStatusInformation.GetDisplayTooltip", help: "<b>String GetDisplayTooltip()<\/b>\n\nGenerated full tooltip for the Quote Version. Will check for errors on quote lines, alternatives and the version itself.\r\n\r\n\\return String"},
{text: "NSQuoteVersionStatusInformation.GetIconHint", help: "<b>String GetIconHint()<\/b>\n\nIcon hint for the associated message.\r\n\r\n\\return String"},
{text: "NSQuoteVersionStatusInformation.SetDisplayMessage", help: "<b>Void SetDisplayMessage(String p_0)<\/b>\n\nGenerated error message for the Quote Version. Will check for errors on quote lines, alternatives and the version itself.\r\n\r\n\\param p_0 DisplayMessage: String\r\n\\return String"},
{text: "NSQuoteVersionStatusInformation.SetDisplayTooltip", help: "<b>Void SetDisplayTooltip(String p_0)<\/b>\n\nGenerated full tooltip for the Quote Version. Will check for errors on quote lines, alternatives and the version itself.\r\n\r\n\\param p_0 DisplayTooltip: String\r\n\\return String"},
{text: "NSQuoteVersionStatusInformation.SetIconHint", help: "<b>Void SetIconHint(String p_0)<\/b>\n\nIcon hint for the associated message.\r\n\r\n\\param p_0 IconHint: String\r\n\\return String"},
{text: "NSQuoteVersionStatusInformation.SetStatus", help: "<b>Void SetStatus(Integer p_0)<\/b>\n\nStatus information for the quote version.\r\n\r\n\\param p_0 Status: Integer\r\n\\return Integer"},
{text: "Void.NSQuoteVersionValidated", help: "<b>NSQuoteVersionValidated<\/b>\n\nThe QuoteVersionValidated is returned after a call to ValidateQuoteAlternative. It contains flags indicating changes to quote, quoteversion\/quotealternative and quotelines."},
{text: "NSQuoteVersionValidated.GetIsOk", help: "<b>Bool GetIsOk()<\/b>\n\nAnswer to the question \/ An indication if the operation went well.\r\n\r\n\\return Bool"},
{text: "NSQuoteVersionValidated.GetChangedQuote", help: "<b>NSQuote GetChangedQuote()<\/b>\n\nThe validated version is a member of Quote\r\n\r\n\\return Quote"},
{text: "NSQuoteVersionValidated.GetChangedQuoteAlternatives", help: "<b>NSQuoteAlternativeRecalculated[] GetChangedQuoteAlternatives()<\/b>\n\nThe changed QuoteAlternatives\r\n\r\n\\return QuoteAlternativeRecalculatedArray"},
{text: "NSQuoteVersionValidated.GetChangedQuoteVersion", help: "<b>NSQuoteVersion GetChangedQuoteVersion()<\/b>\n\nThe validated QuoteVersion\r\n\r\n\\return QuoteVersion"},
{text: "NSQuoteVersionValidated.GetChangedSale", help: "<b>NSSale GetChangedSale()<\/b>\n\nIf the sale has been changed, the carrier will be added.\r\n\r\n\\return Sale"},
{text: "NSQuoteVersionValidated.GetErrorCode", help: "<b>String GetErrorCode()<\/b>\n\nAn error code, if available.\r\n\r\n\\return String"},
{text: "NSQuoteVersionValidated.GetTechExplanation", help: "<b>String GetTechExplanation()<\/b>\n\nAlways in English\r\n\r\n\\return String"},
{text: "NSQuoteVersionValidated.GetUserExplanation", help: "<b>String GetUserExplanation()<\/b>\n\nA localized explanation to the answer.\r\n\r\n\\return String"},
{text: "NSQuoteVersionValidated.SetChangedQuote", help: "<b>Void SetChangedQuote(NSQuote p_0)<\/b>\n\nThe validated version is a member of Quote\r\n\r\n\\param p_0 ChangedQuote: Quote\r\n\\return Quote"},
{text: "NSQuoteVersionValidated.SetChangedQuoteAlternatives", help: "<b>Void SetChangedQuoteAlternatives(NSQuoteAlternativeRecalculated[] p_0)<\/b>\n\nThe changed QuoteAlternatives\r\n\r\n\\param p_0 ChangedQuoteAlternatives: QuoteAlternativeRecalculatedArray\r\n\\return QuoteAlternativeRecalculatedArray"},
{text: "NSQuoteVersionValidated.SetChangedQuoteVersion", help: "<b>Void SetChangedQuoteVersion(NSQuoteVersion p_0)<\/b>\n\nThe validated QuoteVersion\r\n\r\n\\param p_0 ChangedQuoteVersion: QuoteVersion\r\n\\return QuoteVersion"},
{text: "NSQuoteVersionValidated.SetChangedSale", help: "<b>Void SetChangedSale(NSSale p_0)<\/b>\n\nIf the sale has been changed, the carrier will be added.\r\n\r\n\\param p_0 ChangedSale: Sale\r\n\\return Sale"},
{text: "NSQuoteVersionValidated.SetErrorCode", help: "<b>Void SetErrorCode(String p_0)<\/b>\n\nAn error code, if available.\r\n\r\n\\param p_0 ErrorCode: String\r\n\\return String"},
{text: "NSQuoteVersionValidated.SetIsOk", help: "<b>Void SetIsOk(Bool p_0)<\/b>\n\nAnswer to the question \/ An indication if the operation went well.\r\n\r\n\\param p_0 IsOk: Bool\r\n\\return Bool"},
{text: "NSQuoteVersionValidated.SetTechExplanation", help: "<b>Void SetTechExplanation(String p_0)<\/b>\n\nAlways in English\r\n\r\n\\param p_0 TechExplanation: String\r\n\\return String"},
{text: "NSQuoteVersionValidated.SetUserExplanation", help: "<b>Void SetUserExplanation(String p_0)<\/b>\n\nA localized explanation to the answer.\r\n\r\n\\param p_0 UserExplanation: String\r\n\\return String"},
{text: "Void.NSQuoteVersionWorkflowState", help: "<b>NSQuoteVersionWorkflowState<\/b>\n\nInformation about possible button actions for the quote version dialog."},
{text: "NSQuoteVersionWorkflowState.GetStateImage", help: "<b>NSQuoteVersionButtonState GetStateImage()<\/b>\n\nInformation about the state image for the current quote version.\r\n\r\n\\return QuoteVersionButtonState"},
{text: "NSQuoteVersionWorkflowState.GetUpdatePricesButton", help: "<b>NSQuoteVersionButtonState GetUpdatePricesButton()<\/b>\n\nInformation about the action for the update prices button.\r\n\r\n\\return QuoteVersionButtonState"},
{text: "NSQuoteVersionWorkflowState.GetActionButtons", help: "<b>NSQuoteVersionButtonState[] GetActionButtons()<\/b>\n\nArray of visible buttons with defined actions in the quote verson dialog.\r\n\r\n\\return QuoteVersionButtonStateArray"},
{text: "NSQuoteVersionWorkflowState.GetStatus", help: "<b>NSQuoteVersionStatusInformation GetStatus()<\/b>\n\nStatus information for the Quote Version.\r\n\r\n\\return QuoteVersionStatusInformation"},
{text: "NSQuoteVersionWorkflowState.SetActionButtons", help: "<b>Void SetActionButtons(NSQuoteVersionButtonState[] p_0)<\/b>\n\nArray of visible buttons with defined actions in the quote verson dialog.\r\n\r\n\\param p_0 ActionButtons: QuoteVersionButtonStateArray\r\n\\return QuoteVersionButtonStateArray"},
{text: "NSQuoteVersionWorkflowState.SetStateImage", help: "<b>Void SetStateImage(NSQuoteVersionButtonState p_0)<\/b>\n\nInformation about the state image for the current quote version.\r\n\r\n\\param p_0 StateImage: QuoteVersionButtonState\r\n\\return QuoteVersionButtonState"},
{text: "NSQuoteVersionWorkflowState.SetStatus", help: "<b>Void SetStatus(NSQuoteVersionStatusInformation p_0)<\/b>\n\nStatus information for the Quote Version.\r\n\r\n\\param p_0 Status: QuoteVersionStatusInformation\r\n\\return QuoteVersionStatusInformation"},
{text: "NSQuoteVersionWorkflowState.SetUpdatePricesButton", help: "<b>Void SetUpdatePricesButton(NSQuoteVersionButtonState p_0)<\/b>\n\nInformation about the action for the update prices button.\r\n\r\n\\param p_0 UpdatePricesButton: QuoteVersionButtonState\r\n\\return QuoteVersionButtonState"},
{text: "Void.NSRating", help: "<b>NSRating<\/b>\n\nSale Stage with probability percent."},
{text: "NSRating.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSRating.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSRating.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSRating.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSRating.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSRating.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSReason", help: "<b>NSReason<\/b>\n\nReason for a lost sale"},
{text: "NSReason.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSReason.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSReason.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSReason.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSReason.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSReason.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSReasonSold", help: "<b>NSReasonSold<\/b>\n\nReason for a succesfully sold sale"},
{text: "NSReasonSold.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSReasonSold.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSReasonSold.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSReasonSold.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSReasonSold.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSReasonSold.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSReasonStalled", help: "<b>NSReasonStalled<\/b>\n\n"},
{text: "NSReasonStalled.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSReasonStalled.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSReasonStalled.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSReasonStalled.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSReasonStalled.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSReasonStalled.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSRecipientStatistics", help: "<b>NSRecipientStatistics<\/b>\n\nCarrier object for RecipientStatistics.\r\n\r\n"},
{text: "NSRecipientStatistics.GetNoAddresses", help: "<b>Integer GetNoAddresses()<\/b>\n\nNumber of members with an invalid address.\r\n\r\n"},
{text: "NSRecipientStatistics.GetNoFaxOrEmails", help: "<b>Integer GetNoFaxOrEmails()<\/b>\n\nNumber of members with no fax or email address.\r\n\r\n"},
{text: "NSRecipientStatistics.GetTotal", help: "<b>Integer GetTotal()<\/b>\n\nTotal number of members.\r\n\r\n"},
{text: "NSRecipientStatistics.GetValidEmailAddresses", help: "<b>Integer GetValidEmailAddresses()<\/b>\n\nNumber of members with a valid email address.\r\n\r\n"},
{text: "NSRecipientStatistics.GetValidFaxNumbers", help: "<b>Integer GetValidFaxNumbers()<\/b>\n\nNumber of members with a valid fax number.\r\n\r\n"},
{text: "NSRecipientStatistics.GetValidPostalAddresses", help: "<b>Integer GetValidPostalAddresses()<\/b>\n\nNumber of members with a valid postal address.\r\n\r\n"},
{text: "NSRecipientStatistics.SetNoAddresses", help: "<b>Void SetNoAddresses(Integer p_0)<\/b>\n\nNumber of members with an invalid address.\r\n\r\n"},
{text: "NSRecipientStatistics.SetNoFaxOrEmails", help: "<b>Void SetNoFaxOrEmails(Integer p_0)<\/b>\n\nNumber of members with no fax or email address.\r\n\r\n"},
{text: "NSRecipientStatistics.SetTotal", help: "<b>Void SetTotal(Integer p_0)<\/b>\n\nTotal number of members.\r\n\r\n"},
{text: "NSRecipientStatistics.SetValidEmailAddresses", help: "<b>Void SetValidEmailAddresses(Integer p_0)<\/b>\n\nNumber of members with a valid email address.\r\n\r\n"},
{text: "NSRecipientStatistics.SetValidFaxNumbers", help: "<b>Void SetValidFaxNumbers(Integer p_0)<\/b>\n\nNumber of members with a valid fax number.\r\n\r\n"},
{text: "NSRecipientStatistics.SetValidPostalAddresses", help: "<b>Void SetValidPostalAddresses(Integer p_0)<\/b>\n\nNumber of members with a valid postal address.\r\n\r\n"},
{text: "Void.NSRecurrenceDate", help: "<b>NSRecurrenceDate<\/b>\n\nCarrier object for RecurrenceDate.\r\n\r\n"},
{text: "NSRecurrenceDate.GetIsConflict", help: "<b>Bool GetIsConflict()<\/b>\n\nTrue if this date creates a conflict.\r\n\r\n"},
{text: "NSRecurrenceDate.GetDate", help: "<b>DateTime GetDate()<\/b>\n\nThe date of the recurring appointment.\r\n\r\n"},
{text: "NSRecurrenceDate.GetDescription", help: "<b>String GetDescription()<\/b>\n\nAny description, such as red letter day info, or marked dates\r\n\r\n"},
{text: "NSRecurrenceDate.GetDescriptionStyleHint", help: "<b>String GetDescriptionStyleHint()<\/b>\n\n"},
{text: "NSRecurrenceDate.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip describing any conflicts.\r\n\r\n"},
{text: "NSRecurrenceDate.SetDate", help: "<b>Void SetDate(DateTime p_0)<\/b>\n\nThe date of the recurring appointment.\r\n\r\n"},
{text: "NSRecurrenceDate.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nAny description, such as red letter day info, or marked dates\r\n\r\n"},
{text: "NSRecurrenceDate.SetDescriptionStyleHint", help: "<b>Void SetDescriptionStyleHint(String p_0)<\/b>\n\n"},
{text: "NSRecurrenceDate.SetIsConflict", help: "<b>Void SetIsConflict(Bool p_0)<\/b>\n\nTrue if this date creates a conflict.\r\n\r\n"},
{text: "NSRecurrenceDate.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip describing any conflicts.\r\n\r\n"},
{text: "Void.NSRecurrenceDayPattern", help: "<b>NSRecurrenceDayPattern<\/b>\n\n"},
{text: "NSRecurrenceDayPattern.GetCycle", help: "<b>Integer GetCycle()<\/b>\n\n"},
{text: "NSRecurrenceDayPattern.GetPattern", help: "<b>Integer GetPattern()<\/b>\n\n"},
{text: "NSRecurrenceDayPattern.SetCycle", help: "<b>Void SetCycle(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceDayPattern.SetPattern", help: "<b>Void SetPattern(Integer p_0)<\/b>\n\n"},
{text: "Void.NSRecurrenceInfo", help: "<b>NSRecurrenceInfo<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetIsRecurrence", help: "<b>Bool GetIsRecurrence()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetIsRecurrence", help: "<b>Boolean GetIsRecurrence()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetEndDate", help: "<b>DateTime GetEndDate()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetStartDate", help: "<b>DateTime GetStartDate()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetDayPattern", help: "<b>Integer GetDayPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetMonthPattern", help: "<b>Integer GetMonthPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetPattern", help: "<b>Integer GetPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetRecurrenceCounter", help: "<b>Integer GetRecurrenceCounter()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetRecurrenceEndType", help: "<b>Integer GetRecurrenceEndType()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetRecurrenceId", help: "<b>Integer GetRecurrenceId()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetWeekPattern", help: "<b>Integer GetWeekPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetYearPattern", help: "<b>Integer GetYearPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetDates", help: "<b>NSRecurrenceDate[] GetDates()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetDayPattern", help: "<b>NSRecurrenceDayPattern GetDayPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetMonthPattern", help: "<b>NSRecurrenceMonthPattern GetMonthPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetWeekPattern", help: "<b>NSRecurrenceWeekPattern GetWeekPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.GetYearPattern", help: "<b>NSRecurrenceYearPattern GetYearPattern()<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetDates", help: "<b>Void SetDates(NSRecurrenceDate[] p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetDayPattern", help: "<b>Void SetDayPattern(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetDayPattern", help: "<b>Void SetDayPattern(NSRecurrenceDayPattern p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetEndDate", help: "<b>Void SetEndDate(DateTime p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetIsRecurrence", help: "<b>Void SetIsRecurrence(Bool p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetIsRecurrence", help: "<b>Void SetIsRecurrence(Boolean p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetMonthPattern", help: "<b>Void SetMonthPattern(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetMonthPattern", help: "<b>Void SetMonthPattern(NSRecurrenceMonthPattern p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetPattern", help: "<b>Void SetPattern(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetRecurrenceCounter", help: "<b>Void SetRecurrenceCounter(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetRecurrenceEndType", help: "<b>Void SetRecurrenceEndType(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetRecurrenceId", help: "<b>Void SetRecurrenceId(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetStartDate", help: "<b>Void SetStartDate(DateTime p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetWeekPattern", help: "<b>Void SetWeekPattern(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetWeekPattern", help: "<b>Void SetWeekPattern(NSRecurrenceWeekPattern p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetYearPattern", help: "<b>Void SetYearPattern(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceInfo.SetYearPattern", help: "<b>Void SetYearPattern(NSRecurrenceYearPattern p_0)<\/b>\n\n"},
{text: "Void.NSRecurrenceMonthPattern", help: "<b>NSRecurrenceMonthPattern<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.GetCycle", help: "<b>Integer GetCycle()<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.GetDay", help: "<b>Integer GetDay()<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.GetPattern", help: "<b>Integer GetPattern()<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.GetWeekday", help: "<b>Integer GetWeekday()<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.GetWeekOfMonth", help: "<b>Integer GetWeekOfMonth()<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.SetCycle", help: "<b>Void SetCycle(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.SetDay", help: "<b>Void SetDay(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.SetPattern", help: "<b>Void SetPattern(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.SetWeekday", help: "<b>Void SetWeekday(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceMonthPattern.SetWeekOfMonth", help: "<b>Void SetWeekOfMonth(Integer p_0)<\/b>\n\n"},
{text: "Void.NSRecurrenceWeekPattern", help: "<b>NSRecurrenceWeekPattern<\/b>\n\n"},
{text: "NSRecurrenceWeekPattern.GetCycle", help: "<b>Integer GetCycle()<\/b>\n\n"},
{text: "NSRecurrenceWeekPattern.GetWeekdays", help: "<b>Integer GetWeekdays()<\/b>\n\n"},
{text: "NSRecurrenceWeekPattern.SetCycle", help: "<b>Void SetCycle(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceWeekPattern.SetWeekdays", help: "<b>Void SetWeekdays(Integer p_0)<\/b>\n\n"},
{text: "Void.NSRecurrenceYearPattern", help: "<b>NSRecurrenceYearPattern<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.GetCycle", help: "<b>Integer GetCycle()<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.GetDay", help: "<b>Integer GetDay()<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.GetPattern", help: "<b>Integer GetPattern()<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.GetWeekday", help: "<b>Integer GetWeekday()<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.GetWeekOfMonth", help: "<b>Integer GetWeekOfMonth()<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.SetCycle", help: "<b>Void SetCycle(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.SetDay", help: "<b>Void SetDay(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.SetPattern", help: "<b>Void SetPattern(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.SetWeekday", help: "<b>Void SetWeekday(Integer p_0)<\/b>\n\n"},
{text: "NSRecurrenceYearPattern.SetWeekOfMonth", help: "<b>Void SetWeekOfMonth(Integer p_0)<\/b>\n\n"},
{text: "Void.NSRedLetterDetails", help: "<b>NSRedLetterDetails<\/b>\n\nRed letter day text details, all the texts related to the given day."},
{text: "NSRedLetterDetails.GetOtherCountryDayTexts", help: "<b>String[] GetOtherCountryDayTexts()<\/b>\n\nRed letter day texts for other countries than the associates' own country\r\n\r\n\\return StringArray"},
{text: "NSRedLetterDetails.GetOwnCountryDayTexts", help: "<b>String[] GetOwnCountryDayTexts()<\/b>\n\nArray - possibly empty - of the texts related to one day in the redletter system.\r\n\r\n\\return StringArray"},
{text: "NSRedLetterDetails.SetOtherCountryDayTexts", help: "<b>Void SetOtherCountryDayTexts(String[] p_0)<\/b>\n\nRed letter day texts for other countries than the associates' own country\r\n\r\n\\param p_0 OtherCountryDayTexts: StringArray\r\n\\return StringArray"},
{text: "NSRedLetterDetails.SetOwnCountryDayTexts", help: "<b>Void SetOwnCountryDayTexts(String[] p_0)<\/b>\n\nArray - possibly empty - of the texts related to one day in the redletter system.\r\n\r\n\\param p_0 OwnCountryDayTexts: StringArray\r\n\\return StringArray"},
{text: "Void.NSRedLetterInformationListItem", help: "<b>NSRedLetterInformationListItem<\/b>\n\nDetailed information on red-letter days, including both holidays and other days with their individual texts."},
{text: "NSRedLetterInformationListItem.GetDate", help: "<b>DateTime GetDate()<\/b>\n\nDate that this item is valid for; there is exactly one item per date, ordered by date.\r\n\r\n\\return DateTime"},
{text: "NSRedLetterInformationListItem.GetRedLetterDetails", help: "<b>NSRedLetterDetails GetRedLetterDetails()<\/b>\n\nRed letter day text details, all the texts related to the given day.\r\n\r\n\\return RedLetterDetails"},
{text: "NSRedLetterInformationListItem.GetRedLetterInformation", help: "<b>NSRedLetterSummary GetRedLetterInformation()<\/b>\n\nSummary of redletter day information - holiday in own country, and in other countries known to the system.\r\n\r\n\\return RedLetterSummary"},
{text: "NSRedLetterInformationListItem.SetDate", help: "<b>Void SetDate(DateTime p_0)<\/b>\n\nDate that this item is valid for; there is exactly one item per date, ordered by date.\r\n\r\n\\param p_0 Date: DateTime\r\n\\return DateTime"},
{text: "NSRedLetterInformationListItem.SetRedLetterDetails", help: "<b>Void SetRedLetterDetails(NSRedLetterDetails p_0)<\/b>\n\nRed letter day text details, all the texts related to the given day.\r\n\r\n\\param p_0 RedLetterDetails: RedLetterDetails\r\n\\return RedLetterDetails"},
{text: "NSRedLetterInformationListItem.SetRedLetterInformation", help: "<b>Void SetRedLetterInformation(NSRedLetterSummary p_0)<\/b>\n\nSummary of redletter day information - holiday in own country, and in other countries known to the system.\r\n\r\n\\param p_0 RedLetterInformation: RedLetterSummary\r\n\\return RedLetterSummary"},
{text: "Void.NSRedLetterSummary", help: "<b>NSRedLetterSummary<\/b>\n\nSummary of redletter day information - holiday in own country, and in other countries known to the system."},
{text: "NSRedLetterSummary.GetIsOtherCountryHoliday", help: "<b>Bool GetIsOtherCountryHoliday()<\/b>\n\nIf true, this day is a holiday in at least one of the countries that has defined associates in the system, but not in the country of the associate whose diary is being scanned.\r\n\r\n\\return Bool"},
{text: "NSRedLetterSummary.GetIsOwnCountryHoliday", help: "<b>Bool GetIsOwnCountryHoliday()<\/b>\n\nIf true, this day is a holiday in the country of the given associate.\r\n\r\n\\return Bool"},
{text: "NSRedLetterSummary.SetIsOtherCountryHoliday", help: "<b>Void SetIsOtherCountryHoliday(Bool p_0)<\/b>\n\nIf true, this day is a holiday in at least one of the countries that has defined associates in the system, but not in the country of the associate whose diary is being scanned.\r\n\r\n\\param p_0 IsOtherCountryHoliday: Bool\r\n\\return Bool"},
{text: "NSRedLetterSummary.SetIsOwnCountryHoliday", help: "<b>Void SetIsOwnCountryHoliday(Bool p_0)<\/b>\n\nIf true, this day is a holiday in the country of the given associate.\r\n\r\n\\param p_0 IsOwnCountryHoliday: Bool\r\n\\return Bool"},
{text: "Void.NSRefCountEntity", help: "<b>NSRefCountEntity<\/b>\n\nA refcount entity for a number allocation"},
{text: "NSRefCountEntity.GetAllocate", help: "<b>Bool GetAllocate()<\/b>\n\nAllocate numbers automatically\r\n\r\n\\return Bool"},
{text: "NSRefCountEntity.GetAllowBlank", help: "<b>Bool GetAllowBlank()<\/b>\n\nAllow blank  as a valid value\r\n\r\n\\return Bool"},
{text: "NSRefCountEntity.GetReadOnly", help: "<b>Bool GetReadOnly()<\/b>\n\nTarget field is read only in GUI\r\n\r\n\\return Bool"},
{text: "NSRefCountEntity.GetUnique", help: "<b>Bool GetUnique()<\/b>\n\nCheck that entered value is unique\r\n\r\n\\return Bool"},
{text: "NSRefCountEntity.GetCurrentValue", help: "<b>Integer GetCurrentValue()<\/b>\n\nCurrent value of counter\r\n\r\n\\return Integer"},
{text: "NSRefCountEntity.GetRecordId", help: "<b>Integer GetRecordId()<\/b>\n\nRecord id in target table, used when there are separate counters for each target record\r\n\r\n\\return Integer"},
{text: "NSRefCountEntity.GetRefCountsId", help: "<b>Integer GetRefCountsId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSRefCountEntity.GetSatPrefix", help: "<b>Integer GetSatPrefix()<\/b>\n\nsize of prefix for Satellite use of this counter\r\n\r\n\\return Integer"},
{text: "NSRefCountEntity.GetTravelPrefix", help: "<b>Integer GetTravelPrefix()<\/b>\n\nsize of prefix for Travel use of ths counter\r\n\r\n\\return Integer"},
{text: "NSRefCountEntity.GetSuggestedRecords", help: "<b>NSMDOListItem[] GetSuggestedRecords()<\/b>\n\nList of valid entities, the associated record is selected in the list, used records are filtered out\r\n\r\n\\return MDOListItemArray"},
{text: "NSRefCountEntity.GetField", help: "<b>String GetField()<\/b>\n\nField identifier in string format table.field\r\n\r\n\\return String"},
{text: "NSRefCountEntity.SetAllocate", help: "<b>Void SetAllocate(Bool p_0)<\/b>\n\nAllocate numbers automatically\r\n\r\n\\param p_0 Allocate: Bool\r\n\\return Bool"},
{text: "NSRefCountEntity.SetAllowBlank", help: "<b>Void SetAllowBlank(Bool p_0)<\/b>\n\nAllow blank  as a valid value\r\n\r\n\\param p_0 AllowBlank: Bool\r\n\\return Bool"},
{text: "NSRefCountEntity.SetCurrentValue", help: "<b>Void SetCurrentValue(Integer p_0)<\/b>\n\nCurrent value of counter\r\n\r\n\\param p_0 CurrentValue: Integer\r\n\\return Integer"},
{text: "NSRefCountEntity.SetField", help: "<b>Void SetField(String p_0)<\/b>\n\nField identifier in string format table.field\r\n\r\n\\param p_0 Field: String\r\n\\return String"},
{text: "NSRefCountEntity.SetReadOnly", help: "<b>Void SetReadOnly(Bool p_0)<\/b>\n\nTarget field is read only in GUI\r\n\r\n\\param p_0 ReadOnly: Bool\r\n\\return Bool"},
{text: "NSRefCountEntity.SetRecordId", help: "<b>Void SetRecordId(Integer p_0)<\/b>\n\nRecord id in target table, used when there are separate counters for each target record\r\n\r\n\\param p_0 RecordId: Integer\r\n\\return Integer"},
{text: "NSRefCountEntity.SetRefCountsId", help: "<b>Void SetRefCountsId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 RefCountsId: Integer\r\n\\return Integer"},
{text: "NSRefCountEntity.SetSatPrefix", help: "<b>Void SetSatPrefix(Integer p_0)<\/b>\n\nsize of prefix for Satellite use of this counter\r\n\r\n\\param p_0 SatPrefix: Integer\r\n\\return Integer"},
{text: "NSRefCountEntity.SetSuggestedRecords", help: "<b>Void SetSuggestedRecords(NSMDOListItem[] p_0)<\/b>\n\nList of valid entities, the associated record is selected in the list, used records are filtered out\r\n\r\n\\param p_0 SuggestedRecords: MDOListItemArray\r\n\\return MDOListItemArray"},
{text: "NSRefCountEntity.SetTravelPrefix", help: "<b>Void SetTravelPrefix(Integer p_0)<\/b>\n\nsize of prefix for Travel use of ths counter\r\n\r\n\\param p_0 TravelPrefix: Integer\r\n\\return Integer"},
{text: "NSRefCountEntity.SetUnique", help: "<b>Void SetUnique(Bool p_0)<\/b>\n\nCheck that entered value is unique\r\n\r\n\\param p_0 Unique: Bool\r\n\\return Bool"},
{text: "Void.NSRelationAgent", help: "<b>NSRelationAgent<\/b>\n\n"},
{text: "NSRelationAgent.CreateDefaultContactRelationEntity", help: "<b>NSContactRelationEntity CreateDefaultContactRelationEntity()<\/b>\n\nLoading default values into a new ContactRelationEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ContactRelationEntity with default values\r\n"},
{text: "NSRelationAgent.GetContactRelationEntity", help: "<b>NSContactRelationEntity GetContactRelationEntity(Integer p_0)<\/b>\n\nGets a ContactRelationEntity object.\r\n\r\n\\param p_0 contactRelationEntityId: The identifier of the ContactRelationEntity object\r\n\\return ContactRelationEntity\r\n"},
{text: "NSRelationAgent.SaveContactRelation", help: "<b>NSContactRelationEntity SaveContactRelation(NSContactRelationEntity p_0)<\/b>\n\nCreates a new or updates an existing contact relation.\r\n\r\n\\param p_0 contactRelationEntity\r\n"},
{text: "NSRelationAgent.DeleteContactRelation", help: "<b>Void DeleteContactRelation(Integer p_0)<\/b>\n\nDeletes the spesified contact relation.\r\n\r\n\\param p_0 contactRelationEntityId\r\n"},
{text: "Void.NSRelationDefinitionEntity", help: "<b>NSRelationDefinitionEntity<\/b>\n\nA relation definition entity with source and destination tables"},
{text: "NSRelationDefinitionEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nTrue if deleted\r\n\r\n\\return Bool"},
{text: "NSRelationDefinitionEntity.GetDestination", help: "<b>Integer GetDestination()<\/b>\n\nThe destination of the relation\r\n\r\n\\return Integer"},
{text: "NSRelationDefinitionEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSRelationDefinitionEntity.GetReldefId", help: "<b>Integer GetReldefId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSRelationDefinitionEntity.GetSource", help: "<b>Integer GetSource()<\/b>\n\nThe source of the relation\r\n\r\n\\return Integer"},
{text: "NSRelationDefinitionEntity.GetName", help: "<b>String GetName()<\/b>\n\nActive text\r\n\r\n\\return String"},
{text: "NSRelationDefinitionEntity.GetPassiveText", help: "<b>String GetPassiveText()<\/b>\n\nText used in passive direction\r\n\r\n\\return String"},
{text: "NSRelationDefinitionEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSRelationDefinitionEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nTrue if deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSRelationDefinitionEntity.SetDestination", help: "<b>Void SetDestination(Integer p_0)<\/b>\n\nThe destination of the relation\r\n\r\n\\param p_0 Destination: Integer\r\n\\return Integer"},
{text: "NSRelationDefinitionEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nActive text\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSRelationDefinitionEntity.SetPassiveText", help: "<b>Void SetPassiveText(String p_0)<\/b>\n\nText used in passive direction\r\n\r\n\\param p_0 PassiveText: String\r\n\\return String"},
{text: "NSRelationDefinitionEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSRelationDefinitionEntity.SetReldefId", help: "<b>Void SetReldefId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ReldefId: Integer\r\n\\return Integer"},
{text: "NSRelationDefinitionEntity.SetSource", help: "<b>Void SetSource(Integer p_0)<\/b>\n\nThe source of the relation\r\n\r\n\\param p_0 Source: Integer\r\n\\return Integer"},
{text: "NSRelationDefinitionEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSRelationToOwner", help: "<b>NSRelationToOwner<\/b>\n\n"},
{text: "NSRelationToOwner.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSRelationToOwner.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSRelationToOwner.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSRelationToOwner.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSRelationToOwner.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSRelationToOwner.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSReplicationAgent", help: "<b>NSReplicationAgent<\/b>\n\n"},
{text: "NSReplicationAgent.GetArea", help: "<b>NSArea GetArea(Integer p_0)<\/b>\n\nGets a Area object.\r\n\r\n\\param p_0 areaId: The identifier of the Area object\r\n\\return Area\r\n"},
{text: "NSReplicationAgent.GetAreaList", help: "<b>NSArea[] GetAreaList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSReplicationAgent.GetAreaList", help: "<b>NSAreaList[] GetAreaList(Integer[] p_0)<\/b>\n\nGets an array of Area objects.\r\n\r\n\\param p_0 areaIds: The identifiers of the Area object\r\n\\return Array of Area objects\r\n"},
{text: "NSReplicationAgent.GetCentralLicense", help: "<b>NSLicenseOwner[] GetCentralLicense()<\/b>\n\n\r\n\r\n"},
{text: "NSReplicationAgent.SaveCentralLicense", help: "<b>NSLicenseOwner[] SaveCentralLicense(NSLicenseOwner[] p_0)<\/b>\n\n\r\n\r\n\\param p_0 license\r\n"},
{text: "NSReplicationAgent.CreateDefaultSatellite", help: "<b>NSSatellite CreateDefaultSatellite()<\/b>\n\nLoading default values into a new Satellite.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New Satellite with default values\r\n"},
{text: "NSReplicationAgent.GetSatellite", help: "<b>NSSatellite GetSatellite(Integer p_0)<\/b>\n\nGets a Satellite object.\r\n\r\n\\param p_0 satelliteId: The identifier of the Satellite object\r\n\\return Satellite\r\n"},
{text: "NSReplicationAgent.SaveSatellite", help: "<b>NSSatellite SaveSatellite(NSSatellite p_0)<\/b>\n\nUpdates the existing Satellite or creates a new Satellite if the id parameter is empty\r\n\r\n\\param p_0 satellite: The Satellite that is saved\r\n\\return New or updated Satellite"},
{text: "NSReplicationAgent.SaveSatellite", help: "<b>Void SaveSatellite(NSSatellite p_0)<\/b>\n\nUpdates the existing Satellite or creates a new Satellite if the id parameter is empty\r\n\r\n\\param p_0 satellite: The Satellite that is saved.\r\n\\return New or updated Satellite\r\n"},
{text: "NSReplicationAgent.SetFreetextSearchEnabledOnArea", help: "<b>Void SetFreetextSearchEnabledOnArea(Integer p_0, Bool p_1)<\/b>\n\nEnable freetext search on this area\r\n\r\n\\param p_0 areaId: The id of the area\r\n\\param p_1 freetextEnabled: True if freetextSearch on this area shall be enabled\r\n\\return No return value"},
{text: "Void.NSReportAgent", help: "<b>NSReportAgent<\/b>\n\n"},
{text: "NSReportAgent.DeleteReport", help: "<b>Bool DeleteReport(Integer p_0)<\/b>\n\nDelete the report with the given id\r\n\r\n\\param p_0 reportId: The id of the report to delete\r\n\\return Delete ok?"},
{text: "NSReportAgent.ImportReport", help: "<b>Integer ImportReport(String p_0)<\/b>\n\nTakes the input stream and create a report. This stream must be on a valid xml format\r\n\r\n\\param p_0 report: The report to import in a correct xml format\r\n\\return The id of the newly imported report"},
{text: "NSReportAgent.CreateDefaultReportEntity", help: "<b>NSReportEntity CreateDefaultReportEntity()<\/b>\n\nLoading default values into a new ReportEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ReportEntity with default values\r\n"},
{text: "NSReportAgent.CreateFavorite", help: "<b>NSReportEntity CreateFavorite(Integer p_0, String p_1, String p_2)<\/b>\n\nCreates the report as favorite. The sourceId is the key to the report that the favorite is based on.\r\n\r\n\\param p_0 sourceId: The primary key to the report to make the favorite from.\r\n\\param p_1 name: The name of the new favorite.\r\n\\param p_2 description: The description of the new favorite.\r\n\\return The new favorite ReportEntity.\r\n"},
{text: "NSReportAgent.GetReportEntity", help: "<b>NSReportEntity GetReportEntity(Integer p_0)<\/b>\n\nGets a ReportEntity object.\r\n\r\n\\param p_0 reportEntityId: The identifier of the ReportEntity object\r\n\\return ReportEntity\r\n"},
{text: "NSReportAgent.SaveReportEntity", help: "<b>NSReportEntity SaveReportEntity(NSReportEntity p_0)<\/b>\n\nUpdates the existing ReportEntity or creates a new ReportEntity if the id parameter is empty\r\n\r\n\\param p_0 reportEntity: The ReportEntity that is saved\r\n\\return New or updated ReportEntity"},
{text: "NSReportAgent.UpdateFavorite", help: "<b>NSReportEntity UpdateFavorite(NSReportEntity p_0)<\/b>\n\nUpdates the favorite.\r\n\r\n\\param p_0 reportEntity: ReportEntity carrier containg updated data.\r\n\\return The updated ReportEntity carrier.\r\n"},
{text: "NSReportAgent.CreateDefaultReportLabelLayoutEntity", help: "<b>NSReportLabelLayoutEntity CreateDefaultReportLabelLayoutEntity()<\/b>\n\nLoading default values into a new ReportLabelLayoutEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New ReportLabelLayoutEntity with default values\r\n"},
{text: "NSReportAgent.GetReportLabelLayoutEntity", help: "<b>NSReportLabelLayoutEntity GetReportLabelLayoutEntity(Integer p_0)<\/b>\n\nGets a ReportLabelLayoutEntity object.\r\n\r\n\\param p_0 reportLabelLayoutEntityId: The identifier of the ReportLabelLayoutEntity object\r\n\\return ReportLabelLayoutEntity\r\n"},
{text: "NSReportAgent.SaveReportLabelLayoutEntity", help: "<b>NSReportLabelLayoutEntity SaveReportLabelLayoutEntity(NSReportLabelLayoutEntity p_0)<\/b>\n\nUpdates the existing ReportLabelLayoutEntity or creates a new ReportLabelLayoutEntity if the id parameter is empty\r\n\r\n\\param p_0 reportLabelLayoutEntity: The ReportLabelLayoutEntity that is saved\r\n\\return New or updated ReportLabelLayoutEntity"},
{text: "NSReportAgent.GenerateReport", help: "<b>String GenerateReport(Integer p_0, Integer p_1, String p_2, String p_3, String p_4, NSArchiveRestrictionInfo[] p_5)<\/b>\n\nGenerates the report in PDF format\r\n\r\n\\param p_0 reportId: The id of the report.\r\n\\param p_1 labelLayoutId: The id of the labellayout. Use 0 if the report isn't of type label.\r\n\\param p_2 filename: Filename of the report.\r\n\\param p_3 language: Language to use when generating the report.\r\n\\param p_4 fileType\r\n\\param p_5 restrictions: Use restrictions to provide additional restrictions when generating the report.\r\n\\return Batch task id, as string. Used to be path to the generated report, but no more.\r\n"},
{text: "NSReportAgent.DeleteFavorite", help: "<b>Void DeleteFavorite(Integer p_0)<\/b>\n\nDeletes the report favorite.\r\n\r\n\\param p_0 reportEntityId: The id of the report favorite to delete.\r\n"},
{text: "NSReportAgent.DeleteReportLabelLayoutEntity", help: "<b>Void DeleteReportLabelLayoutEntity(Integer p_0)<\/b>\n\nDeletes the ReportLabelLayoutEntity\r\n\r\n\\param p_0 reportLabelLayoutEntityId: The identity of the ReportLabelLayoutEntity\r\n"},
{text: "NSReportAgent.SaveReportLabelLayoutEntity", help: "<b>Void SaveReportLabelLayoutEntity(NSReportLabelLayoutEntity p_0)<\/b>\n\nUpdates the existing ReportLabelLayoutEntity or creates a new ReportLabelLayoutEntity if the id parameter is empty\r\n\r\n\\param p_0 reportLabelLayoutEntity: The ReportLabelLayoutEntity that is saved.\r\n\\return New or updated ReportLabelLayoutEntity\r\n"},
{text: "Void.NSReportEntity", help: "<b>NSReportEntity<\/b>\n\n"},
{text: "NSReportEntity.GetPublished", help: "<b>Bool GetPublished()<\/b>\n\nIs the report published?\r\n\r\n\\return Bool"},
{text: "NSReportEntity.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nThe owner of the report.\r\n\r\n\\return Integer"},
{text: "NSReportEntity.GetReportCategory", help: "<b>Integer GetReportCategory()<\/b>\n\nThe category of the report.\r\n\r\n\\return Integer"},
{text: "NSReportEntity.GetReportId", help: "<b>Integer GetReportId()<\/b>\n\nThe id of the report.\n\t\/\/\/\r\n\r\n\\return Integer"},
{text: "NSReportEntity.GetReportLayout", help: "<b>Integer GetReportLayout()<\/b>\n\nThe layout of the report.\r\n\r\n\\return Integer"},
{text: "NSReportEntity.GetTemplateId", help: "<b>Integer GetTemplateId()<\/b>\n\nThe id of report template.\r\n\r\n\\return Integer"},
{text: "NSReportEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe description of the report.\r\n\r\n\\return String"},
{text: "NSReportEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the report\r\n\r\n\\return String"},
{text: "NSReportEntity.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nThe owner of the report.\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSReportEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe description of the report.\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSReportEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the report\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSReportEntity.SetPublished", help: "<b>Void SetPublished(Bool p_0)<\/b>\n\nIs the report published?\r\n\r\n\\param p_0 Published: Bool\r\n\\return Bool"},
{text: "NSReportEntity.SetReportCategory", help: "<b>Void SetReportCategory(Integer p_0)<\/b>\n\nThe category of the report.\r\n\r\n\\param p_0 ReportCategory: Integer\r\n\\return Integer"},
{text: "NSReportEntity.SetReportId", help: "<b>Void SetReportId(Integer p_0)<\/b>\n\nThe id of the report.\n\t\/\/\/\r\n\r\n\\param p_0 ReportId: Integer\r\n\\return Integer"},
{text: "NSReportEntity.SetReportLayout", help: "<b>Void SetReportLayout(Integer p_0)<\/b>\n\nThe layout of the report.\r\n\r\n\\param p_0 ReportLayout: Integer\r\n\\return Integer"},
{text: "NSReportEntity.SetTemplateId", help: "<b>Void SetTemplateId(Integer p_0)<\/b>\n\nThe id of report template.\r\n\r\n\\param p_0 TemplateId: Integer\r\n\\return Integer"},
{text: "Void.NSReportLabelLayoutEntity", help: "<b>NSReportLabelLayoutEntity<\/b>\n\n"},
{text: "NSReportLabelLayoutEntity.GetBottomMargin", help: "<b>Integer GetBottomMargin()<\/b>\n\nBottom margin in twips\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetCountColumns", help: "<b>Integer GetCountColumns()<\/b>\n\nNumber og columns\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetCountRows", help: "<b>Integer GetCountRows()<\/b>\n\nNumber of rows\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetLeftMargin", help: "<b>Integer GetLeftMargin()<\/b>\n\nLeft margin in twips\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetOrientation", help: "<b>Integer GetOrientation()<\/b>\n\nPaper orientation: 1=portrait, 2=landscape\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetPaperHeight", help: "<b>Integer GetPaperHeight()<\/b>\n\nPaper height in twips\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetPaperWidth", help: "<b>Integer GetPaperWidth()<\/b>\n\nPaper width in twips\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetReportLabelLayoutId", help: "<b>Integer GetReportLabelLayoutId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetRightMargin", help: "<b>Integer GetRightMargin()<\/b>\n\nRight margin in twips\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetTopMargin", help: "<b>Integer GetTopMargin()<\/b>\n\nTop margin in twips\r\n\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription\r\n\r\n\\return String"},
{text: "NSReportLabelLayoutEntity.GetName", help: "<b>String GetName()<\/b>\n\nName of the label layout\r\n\r\n\\return String"},
{text: "NSReportLabelLayoutEntity.SetBottomMargin", help: "<b>Void SetBottomMargin(Integer p_0)<\/b>\n\nBottom margin in twips\r\n\r\n\\param p_0 BottomMargin: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetCountColumns", help: "<b>Void SetCountColumns(Integer p_0)<\/b>\n\nNumber og columns\r\n\r\n\\param p_0 CountColumns: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetCountRows", help: "<b>Void SetCountRows(Integer p_0)<\/b>\n\nNumber of rows\r\n\r\n\\param p_0 CountRows: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSReportLabelLayoutEntity.SetLeftMargin", help: "<b>Void SetLeftMargin(Integer p_0)<\/b>\n\nLeft margin in twips\r\n\r\n\\param p_0 LeftMargin: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of the label layout\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSReportLabelLayoutEntity.SetOrientation", help: "<b>Void SetOrientation(Integer p_0)<\/b>\n\nPaper orientation: 1=portrait, 2=landscape\r\n\r\n\\param p_0 Orientation: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetPaperHeight", help: "<b>Void SetPaperHeight(Integer p_0)<\/b>\n\nPaper height in twips\r\n\r\n\\param p_0 PaperHeight: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetPaperWidth", help: "<b>Void SetPaperWidth(Integer p_0)<\/b>\n\nPaper width in twips\r\n\r\n\\param p_0 PaperWidth: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetReportLabelLayoutId", help: "<b>Void SetReportLabelLayoutId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ReportLabelLayoutId: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetRightMargin", help: "<b>Void SetRightMargin(Integer p_0)<\/b>\n\nRight margin in twips\r\n\r\n\\param p_0 RightMargin: Integer\r\n\\return Integer"},
{text: "NSReportLabelLayoutEntity.SetTopMargin", help: "<b>Void SetTopMargin(Integer p_0)<\/b>\n\nTop margin in twips\r\n\r\n\\param p_0 TopMargin: Integer\r\n\\return Integer"},
{text: "Void.NSResolvedPerson", help: "<b>NSResolvedPerson<\/b>\n\nThe Person Service. The service implements all services working with the Person object."},
{text: "NSResolvedPerson.GetPersonCreated", help: "<b>Bool GetPersonCreated()<\/b>\n\nIndicates if the resolved person was created or not.\r\n\r\n\\return Bool"},
{text: "NSResolvedPerson.GetPerson", help: "<b>NSPersonEntity GetPerson()<\/b>\n\nThe resolved PersonEntity instance.\r\n\r\n\\return PersonEntity"},
{text: "NSResolvedPerson.SetPerson", help: "<b>Void SetPerson(NSPersonEntity p_0)<\/b>\n\nThe resolved PersonEntity instance.\r\n\r\n\\param p_0 Person: PersonEntity\r\n\\return PersonEntity"},
{text: "NSResolvedPerson.SetPersonCreated", help: "<b>Void SetPersonCreated(Bool p_0)<\/b>\n\nIndicates if the resolved person was created or not.\r\n\r\n\\param p_0 PersonCreated: Bool\r\n\\return Bool"},
{text: "Void.NSResolvedUser", help: "<b>NSResolvedUser<\/b>\n\nThe User Service. The service implements all services working with the User object."},
{text: "NSResolvedUser.GetPersonCreated", help: "<b>Bool GetPersonCreated()<\/b>\n\nIndicates if the resolved person was created or not.\r\n\r\n\\return Bool"},
{text: "NSResolvedUser.GetUser", help: "<b>NSUser GetUser()<\/b>\n\nThe resolved User instance.\r\n\r\n\\return User"},
{text: "NSResolvedUser.SetPersonCreated", help: "<b>Void SetPersonCreated(Bool p_0)<\/b>\n\nIndicates if the resolved person was created or not.\r\n\r\n\\param p_0 PersonCreated: Bool\r\n\\return Bool"},
{text: "NSResolvedUser.SetUser", help: "<b>Void SetUser(NSUser p_0)<\/b>\n\nThe resolved User instance.\r\n\r\n\\param p_0 User: User\r\n\\return User"},
{text: "Void.NSResourceAgent", help: "<b>NSResourceAgent<\/b>\n\n"},
{text: "NSResourceAgent.GetResourceSubstitutions", help: "<b>NSResourceOverride[] GetResourceSubstitutions(String[] p_0, String p_1, Bool p_2)<\/b>\n\nGet substitutions for some or all resources for one culture\r\n\r\n\\param p_0 resourceNames: Array of names of resources for which overrides are sought; if empty, then get all\r\n\\param p_1 culture: .NET culture string; if empty, then get all\r\n\\param p_2 activeOnly: If true, then only resources with active substitutions will be returned; if false then ALL existing overrides will be returned\r\n\\return Array of override objects, empty if there are none"},
{text: "NSResourceAgent.IsResourceSubstitutionActive", help: "<b>NSResourceOverride[] IsResourceSubstitutionActive(String[] p_0, String p_1)<\/b>\n\nDetermine if resource substitution\/override is active, globally or for a subset of resources\/cultures\r\n\r\n\\param p_0 resourceNames: Array of names of resources for which overrides are sought; if empty, then get the MASTER on\/off\r\n\\param p_1 culture: .NET culture string; if empty, then get for all cultures (unless resourceName\r\n\\return Array of override objects, empty if there are none; the ResourceValue member is not set by this call"},
{text: "NSResourceAgent.ActivateResourceSubstitution", help: "<b>Void ActivateResourceSubstitution(String p_0, String p_1, Bool p_2)<\/b>\n\nActivate or deactive a resource substitution for one or more cultures\r\n\r\n\\param p_0 resourceName: The name of the resource, without any brackets; if blank then this is the MASTER SWITCH for the override system\r\n\\param p_1 culture: The .NET culture string; if blank, then ALL substitutions for this resource will be affected\r\n\\param p_2 isActive: New status of override\r\n\\return This method has no return value"},
{text: "NSResourceAgent.DeleteResourceSubstitution", help: "<b>Void DeleteResourceSubstitution(String p_0, String p_1)<\/b>\n\nPermanentely delete a resource substitution for one or more cultures\r\n\r\n\\param p_0 resourceName: The name of the resource, without any brackets\r\n\\param p_1 culture: The .NET culture string; if blank, then ALL substitutions for this resource will be dropped\r\n\\return This method has no return value"},
{text: "NSResourceAgent.SetResourceSubstitution", help: "<b>Void SetResourceSubstitution(String p_0, String p_1, String p_2, Bool p_3)<\/b>\n\nCreate or update a resource substitution\r\n\r\n\\param p_0 resourceName: The name of the resource, without any brackets\r\n\\param p_1 resourceValues: The new value of the resource\r\n\\param p_2 culture: The .NET culture string\r\n\\param p_3 isActive: Is the subsitution now active\r\n\\return This method has no return value"},
{text: "Void.NSResourceEntity", help: "<b>NSResourceEntity<\/b>\n\nThe resource entity contains resource information"},
{text: "NSResourceEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIf true, the resource is deleted.\r\n\r\n\\return Bool"},
{text: "NSResourceEntity.GetIsLocation", help: "<b>Bool GetIsLocation()<\/b>\n\nIf true the resource is a location\r\n\r\n\\return Bool"},
{text: "NSResourceEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSResourceEntity.GetResourceId", help: "<b>Integer GetResourceId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSResourceEntity.GetLocationAddress", help: "<b>String GetLocationAddress()<\/b>\n\nAddress of location, if this is a resource that is a location\r\n\r\n\\return String"},
{text: "NSResourceEntity.GetName", help: "<b>String GetName()<\/b>\n\nInitials, also login name, possibly database user name\r\n\r\n\\return String"},
{text: "NSResourceEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSResourceEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIf true, the resource is deleted.\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSResourceEntity.SetIsLocation", help: "<b>Void SetIsLocation(Bool p_0)<\/b>\n\nIf true the resource is a location\r\n\r\n\\param p_0 IsLocation: Bool\r\n\\return Bool"},
{text: "NSResourceEntity.SetLocationAddress", help: "<b>Void SetLocationAddress(String p_0)<\/b>\n\nAddress of location, if this is a resource that is a location\r\n\r\n\\param p_0 LocationAddress: String\r\n\\return String"},
{text: "NSResourceEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nInitials, also login name, possibly database user name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSResourceEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSResourceEntity.SetResourceId", help: "<b>Void SetResourceId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 ResourceId: Integer\r\n\\return Integer"},
{text: "NSResourceEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSResourceOverride", help: "<b>NSResourceOverride<\/b>\n\nOverride specifications for resources\/labels"},
{text: "NSResourceOverride.GetIsActive", help: "<b>Bool GetIsActive()<\/b>\n\nIs this override active\r\n\r\n\\return Bool"},
{text: "NSResourceOverride.GetCulture", help: "<b>String GetCulture()<\/b>\n\n.NET-style culture code, such as NB-NO or EN-UK\r\n\r\n\\return String"},
{text: "NSResourceOverride.GetResourceName", help: "<b>String GetResourceName()<\/b>\n\nThe name of the resource, without any brackets or braces - example: SR_CONTACT\r\n\r\n\\return String"},
{text: "NSResourceOverride.GetResourceValue", help: "<b>String GetResourceValue()<\/b>\n\nThe value of the resource in the given culture\r\n\r\n\\return String"},
{text: "NSResourceOverride.SetCulture", help: "<b>Void SetCulture(String p_0)<\/b>\n\n.NET-style culture code, such as NB-NO or EN-UK\r\n\r\n\\param p_0 Culture: String\r\n\\return String"},
{text: "NSResourceOverride.SetIsActive", help: "<b>Void SetIsActive(Bool p_0)<\/b>\n\nIs this override active\r\n\r\n\\param p_0 IsActive: Bool\r\n\\return Bool"},
{text: "NSResourceOverride.SetResourceName", help: "<b>Void SetResourceName(String p_0)<\/b>\n\nThe name of the resource, without any brackets or braces - example: SR_CONTACT\r\n\r\n\\param p_0 ResourceName: String\r\n\\return String"},
{text: "NSResourceOverride.SetResourceValue", help: "<b>Void SetResourceValue(String p_0)<\/b>\n\nThe value of the resource in the given culture\r\n\r\n\\param p_0 ResourceValue: String\r\n\\return String"},
{text: "Void.NSReturnInfo", help: "<b>NSReturnInfo<\/b>\n\nReturn value object for Document Plugin API calls"},
{text: "NSReturnInfo.GetSuccess", help: "<b>Bool GetSuccess()<\/b>\n\nid the call succeed. A successful call may still return a message or other return value.\r\n\r\n\\return Bool"},
{text: "NSReturnInfo.GetType", help: "<b>Integer GetType()<\/b>\n\nHow is the return value to be understood by the caller\r\n\r\n\\return Integer"},
{text: "NSReturnInfo.GetAdditionalInfo", help: "<b>String GetAdditionalInfo()<\/b>\n\nOptional, additional information meant for further processing. This member is ignored for return types None, Message and SoProtocol. It can be used to pass execution-dependent information to the code that handles CustomGui and Other.\r\n\r\n\\return String"},
{text: "NSReturnInfo.GetExternalReference", help: "<b>String GetExternalReference()<\/b>\n\nThe document plugin's key that uniquely identifies a document; stored in the externalReference field of the document table\r\n\r\n\\return String"},
{text: "NSReturnInfo.GetValue", help: "<b>String GetValue()<\/b>\n\nReturn value, may be blank.\r\n\r\n\\return String"},
{text: "NSReturnInfo.GetVersionId", help: "<b>String GetVersionId()<\/b>\n\nThe document plugin's version id that uniquely identifies one version of a document. If versioning is not supported, this will be blank. When versioning is supported, blank values imply the latest checked-in version.\r\n\r\n\\return String"},
{text: "NSReturnInfo.SetAdditionalInfo", help: "<b>Void SetAdditionalInfo(String p_0)<\/b>\n\nOptional, additional information meant for further processing. This member is ignored for return types None, Message and SoProtocol. It can be used to pass execution-dependent information to the code that handles CustomGui and Other.\r\n\r\n\\param p_0 AdditionalInfo: String\r\n\\return String"},
{text: "NSReturnInfo.SetExternalReference", help: "<b>Void SetExternalReference(String p_0)<\/b>\n\nThe document plugin's key that uniquely identifies a document; stored in the externalReference field of the document table\r\n\r\n\\param p_0 ExternalReference: String\r\n\\return String"},
{text: "NSReturnInfo.SetSuccess", help: "<b>Void SetSuccess(Bool p_0)<\/b>\n\nid the call succeed. A successful call may still return a message or other return value.\r\n\r\n\\param p_0 Success: Bool\r\n\\return Bool"},
{text: "NSReturnInfo.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nHow is the return value to be understood by the caller\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSReturnInfo.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nReturn value, may be blank.\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "NSReturnInfo.SetVersionId", help: "<b>Void SetVersionId(String p_0)<\/b>\n\nThe document plugin's version id that uniquely identifies one version of a document. If versioning is not supported, this will be blank. When versioning is supported, blank values imply the latest checked-in version.\r\n\r\n\\param p_0 VersionId: String\r\n\\return String"},
{text: "Void.NSRole", help: "<b>NSRole<\/b>\n\nUsers role for role-based security"},
{text: "NSRole.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSRole.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSRole.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSRole.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSRole.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSRole.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSRoleEntity", help: "<b>NSRoleEntity<\/b>\n\n"},
{text: "NSRoleEntity.GetCreated", help: "<b>DateTime GetCreated()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSRoleEntity.GetUpdated", help: "<b>DateTime GetUpdated()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSRoleEntity.GetDeleted", help: "<b>Integer GetDeleted()<\/b>\n\n1 if role has been deleted (we do not actually delete)\r\n\r\n\\return Integer"},
{text: "NSRoleEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nSorting rank of this role in lists\r\n\r\n\\return Integer"},
{text: "NSRoleEntity.GetRoleId", help: "<b>Integer GetRoleId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSRoleEntity.GetRoleType", help: "<b>Integer GetRoleType()<\/b>\n\nThe role type. Note that changing this field has no effect, so treat this as a read-only field.\r\n\r\n\\return Integer"},
{text: "NSRoleEntity.GetUseCategories", help: "<b>Integer GetUseCategories()<\/b>\n\nApply role category membership to users\r\n\r\n\\return Integer"},
{text: "NSRoleEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\n\\return Associate"},
{text: "NSRoleEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\n\\return Associate"},
{text: "NSRoleEntity.GetDataRights", help: "<b>NSDataRights GetDataRights()<\/b>\n\n\\return DataRights"},
{text: "NSRoleEntity.GetName", help: "<b>String GetName()<\/b>\n\nVisible role name\r\n\r\n\\return String"},
{text: "NSRoleEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nVisible tooltip\r\n\r\n\\return String"},
{text: "NSRoleEntity.SetCreated", help: "<b>Void SetCreated(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 Created: DateTime\r\n\\return DateTime"},
{text: "NSRoleEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSRoleEntity.SetDataRights", help: "<b>Void SetDataRights(NSDataRights p_0)<\/b>\n\n\\param p_0 DataRights: DataRights\r\n\\return DataRights"},
{text: "NSRoleEntity.SetDeleted", help: "<b>Void SetDeleted(Integer p_0)<\/b>\n\n1 if role has been deleted (we do not actually delete)\r\n\r\n\\param p_0 Deleted: Integer\r\n\\return Integer"},
{text: "NSRoleEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nVisible role name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSRoleEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nSorting rank of this role in lists\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSRoleEntity.SetRoleId", help: "<b>Void SetRoleId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 RoleId: Integer\r\n\\return Integer"},
{text: "NSRoleEntity.SetRoleType", help: "<b>Void SetRoleType(Integer p_0)<\/b>\n\nThe role type. Note that changing this field has no effect, so treat this as a read-only field.\r\n\r\n\\param p_0 RoleType: Integer\r\n\\return Integer"},
{text: "NSRoleEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nVisible tooltip\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSRoleEntity.SetUpdated", help: "<b>Void SetUpdated(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 Updated: DateTime\r\n\\return DateTime"},
{text: "NSRoleEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSRoleEntity.SetUseCategories", help: "<b>Void SetUseCategories(Integer p_0)<\/b>\n\nApply role category membership to users\r\n\r\n\\param p_0 UseCategories: Integer\r\n\\return Integer"},
{text: "Void.NSSaintAgent", help: "<b>NSSaintAgent<\/b>\n\n"},
{text: "NSSaintAgent.RegenerateCounters", help: "<b>NSBatchTaskInfo RegenerateCounters(Bool p_0)<\/b>\n\nRegenerate the Saint counters - this can take several minutes\r\n\r\n\\param p_0 runAsBatch: If true, then execute the regeneration as a Batch Task; the service call will return immediately. Otherwise wait until the task completes, may cause a timeout if called as a Web Service\r\n\\return Information about the batch task, if batch execution was requested. Otherwise null"},
{text: "NSSaintAgent.RegenerateStatusMonitors", help: "<b>NSBatchTaskInfo RegenerateStatusMonitors(Bool p_0)<\/b>\n\nRegenerate status monitors\r\n\r\n\\param p_0 runAsBatch: If true, then execute the regeneration as a Batch Task; the service call will return immediately. Otherwise wait until the task completes, may cause a timeout if called as a Web Service\r\n\\return Information about the batch task, if batch execution was requested. Otherwise null"},
{text: "NSSaintAgent.CreateDefaultStatusMonitor", help: "<b>NSStatusMonitor CreateDefaultStatusMonitor()<\/b>\n\nLoading default values into a new StatusMonitor.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New StatusMonitor with default values\r\n"},
{text: "NSSaintAgent.GetStatusMonitor", help: "<b>NSStatusMonitor GetStatusMonitor(Integer p_0)<\/b>\n\nGet a single status monitor based on its identity\r\n\r\n\\param p_0 id: Identity of status monitor\r\n\\return The requested status monitor\r\n"},
{text: "NSSaintAgent.SaveStatusMonitor", help: "<b>NSStatusMonitor SaveStatusMonitor(NSStatusMonitor p_0)<\/b>\n\nUpdates the existing StatusMonitor or creates a new StatusMonitor if the id parameter is empty\r\n\r\n\\param p_0 statusMonitor: The StatusMonitor that is saved\r\n\\return New or updated StatusMonitor"},
{text: "NSSaintAgent.GetStatusMonitors", help: "<b>NSStatusMonitor[] GetStatusMonitors(Integer p_0, String p_1)<\/b>\n\nGet all active status monitors for a specified target\r\n\r\n\\param p_0 id: Identity of target type(contact identity, project identity etc.)\r\n\\param p_1 type: Type to get status monitors for(\"contact\", \"project\", etc.)\r\n\\return Active status monitors\r\n"},
{text: "NSSaintAgent.CreateDefaultStatusMonitorPeriods", help: "<b>NSStatusMonitorPeriods CreateDefaultStatusMonitorPeriods()<\/b>\n\nLoading default values into a new StatusMonitorPeriods.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New StatusMonitorPeriods with default values"},
{text: "NSSaintAgent.GetStatusMonitorPeriods", help: "<b>NSStatusMonitorPeriods GetStatusMonitorPeriods()<\/b>\n\nReturns the StatusMonitorPeriods entity.\r\n\r\n\\return The StatusMonitorEntity"},
{text: "NSSaintAgent.SaveStatusMonitorPeriods", help: "<b>NSStatusMonitorPeriods SaveStatusMonitorPeriods(NSStatusMonitorPeriods p_0)<\/b>\n\nUpdates the existing StatusMonitorPeriods or creates a new StatusMonitorPeriods if the id parameter is empty\r\n\r\n\\param p_0 statusMonitorPeriods: The StatusMonitorPeriods that is saved\r\n\\return New or updated StatusMonitorPeriods"},
{text: "NSSaintAgent.RegenerateStatusMonitor", help: "<b>Void RegenerateStatusMonitor(Integer p_0)<\/b>\n\nRegenerate the given status monitor\r\n\r\n\\param p_0 statusMonitorId: The id of the statusmonitor to regenerate\r\n\\return This method has no return value"},
{text: "NSSaintAgent.SetRankOnStatusMonitors", help: "<b>Void SetRankOnStatusMonitors(String p_0, Integer[] p_1)<\/b>\n\nSet rank order on status monitors\r\n\r\n\\param p_0 type: Type of status monitors to reorder (\"contact\", \"project\", etc.)\r\n\\param p_1 itemsIds: The ids of the items in the order you want\r\n\\return This method has no return value"},
{text: "Void.NSSale", help: "<b>NSSale<\/b>\n\n"},
{text: "NSSale.GetNextDueDate", help: "<b>DateTime GetNextDueDate()<\/b>\n\nNext due date, this is a denormalization of 'closest future activity date, or most recent if no future activities'. Maintained by the system, but very convenient for searching.\r\n\r\n\\return DateTime"},
{text: "NSSale.GetSaleDate", help: "<b>DateTime GetSaleDate()<\/b>\n\n(expected | lost | won) sales date\r\n\r\n\\return DateTime"},
{text: "NSSale.GetAmount", help: "<b>Float GetAmount()<\/b>\n\nTotal sale amount\r\n\r\n\\return Float"},
{text: "NSSale.GetEarning", help: "<b>Float GetEarning()<\/b>\n\nEarning on sale\r\n\r\n\\return Float"},
{text: "NSSale.GetEarningPercent", help: "<b>Float GetEarningPercent()<\/b>\n\nEarning as percent of total\r\n\r\n\\return Float"},
{text: "NSSale.GetWeightedAmount", help: "<b>Float GetWeightedAmount()<\/b>\n\nThe weighted amount ( amount *  probability \/ 100)\r\n\r\n\\return Float"},
{text: "NSSale.GetActiveErpLinks", help: "<b>Integer GetActiveErpLinks()<\/b>\n\nThe number of active erp links\r\n\r\n\\return Integer"},
{text: "NSSale.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nThe sale's owner id\r\n\r\n\\return Integer"},
{text: "NSSale.GetCompleted", help: "<b>Integer GetCompleted()<\/b>\n\nThe Sale completed state. The completed state is either Started or Completed. NotStarted is treated as Started. The value maps to the Done database field.\r\n\r\n\\return Integer"},
{text: "NSSale.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nOptional contact reference\r\n\r\n\\return Integer"},
{text: "NSSale.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nThe sale's contact persons id\r\n\r\n\\return Integer"},
{text: "NSSale.GetProbability", help: "<b>Integer GetProbability()<\/b>\n\nActual probability, may differ from the one in the list\r\n\r\n\\return Integer"},
{text: "NSSale.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nOptional project reference\r\n\r\n\\return Integer"},
{text: "NSSale.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSale.GetSaleTypeId", help: "<b>Integer GetSaleTypeId()<\/b>\n\nThe sale's type id\r\n\r\n\\return Integer"},
{text: "NSSale.GetStatus", help: "<b>Integer GetStatus()<\/b>\n\nThe sale's status, indicating wether the sale is open, sold or lost.\r\n\r\n\\return Integer"},
{text: "NSSale.GetAssociateFullName", help: "<b>String GetAssociateFullName()<\/b>\n\nThe sale's owner\r\n\r\n\\return String"},
{text: "NSSale.GetContactName", help: "<b>String GetContactName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSSale.GetCurrency", help: "<b>String GetCurrency()<\/b>\n\nCurrency the sale was made in.\r\n\r\n\\return String"},
{text: "NSSale.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe sales description\r\n\r\n\\return String"},
{text: "NSSale.GetPersonFullName", help: "<b>String GetPersonFullName()<\/b>\n\nThe name of the person this sale belongs to.\r\n\r\n\\return String"},
{text: "NSSale.GetProjectName", help: "<b>String GetProjectName()<\/b>\n\nProject name\r\n\r\n\\return String"},
{text: "NSSale.GetSaleTypeName", help: "<b>String GetSaleTypeName()<\/b>\n\nThe sale's type name\r\n\r\n\\return String"},
{text: "NSSale.GetTitle", help: "<b>String GetTitle()<\/b>\n\nSale heading (short description?)\r\n\r\n\\return String"},
{text: "NSSale.SetActiveErpLinks", help: "<b>Void SetActiveErpLinks(Integer p_0)<\/b>\n\nThe number of active erp links\r\n\r\n\\param p_0 ActiveErpLinks: Integer\r\n\\return Integer"},
{text: "NSSale.SetAmount", help: "<b>Void SetAmount(Float p_0)<\/b>\n\nTotal sale amount\r\n\r\n\\param p_0 Amount: Float\r\n\\return Float"},
{text: "NSSale.SetAssociateFullName", help: "<b>Void SetAssociateFullName(String p_0)<\/b>\n\nThe sale's owner\r\n\r\n\\param p_0 AssociateFullName: String\r\n\\return String"},
{text: "NSSale.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nThe sale's owner id\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSSale.SetCompleted", help: "<b>Void SetCompleted(Integer p_0)<\/b>\n\nThe Sale completed state. The completed state is either Started or Completed. NotStarted is treated as Started. The value maps to the Done database field.\r\n\r\n\\param p_0 Completed: Integer\r\n\\return Integer"},
{text: "NSSale.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nOptional contact reference\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSSale.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSSale.SetCurrency", help: "<b>Void SetCurrency(String p_0)<\/b>\n\nCurrency the sale was made in.\r\n\r\n\\param p_0 Currency: String\r\n\\return String"},
{text: "NSSale.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe sales description\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSSale.SetEarning", help: "<b>Void SetEarning(Float p_0)<\/b>\n\nEarning on sale\r\n\r\n\\param p_0 Earning: Float\r\n\\return Float"},
{text: "NSSale.SetEarningPercent", help: "<b>Void SetEarningPercent(Float p_0)<\/b>\n\nEarning as percent of total\r\n\r\n\\param p_0 EarningPercent: Float\r\n\\return Float"},
{text: "NSSale.SetNextDueDate", help: "<b>Void SetNextDueDate(DateTime p_0)<\/b>\n\nNext due date, this is a denormalization of 'closest future activity date, or most recent if no future activities'. Maintained by the system, but very convenient for searching.\r\n\r\n\\param p_0 NextDueDate: DateTime\r\n\\return DateTime"},
{text: "NSSale.SetPersonFullName", help: "<b>Void SetPersonFullName(String p_0)<\/b>\n\nThe name of the person this sale belongs to.\r\n\r\n\\param p_0 PersonFullName: String\r\n\\return String"},
{text: "NSSale.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nThe sale's contact persons id\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSSale.SetProbability", help: "<b>Void SetProbability(Integer p_0)<\/b>\n\nActual probability, may differ from the one in the list\r\n\r\n\\param p_0 Probability: Integer\r\n\\return Integer"},
{text: "NSSale.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nOptional project reference\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSSale.SetProjectName", help: "<b>Void SetProjectName(String p_0)<\/b>\n\nProject name\r\n\r\n\\param p_0 ProjectName: String\r\n\\return String"},
{text: "NSSale.SetSaleDate", help: "<b>Void SetSaleDate(DateTime p_0)<\/b>\n\n(expected | lost | won) sales date\r\n\r\n\\param p_0 SaleDate: DateTime\r\n\\return DateTime"},
{text: "NSSale.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSSale.SetSaleTypeId", help: "<b>Void SetSaleTypeId(Integer p_0)<\/b>\n\nThe sale's type id\r\n\r\n\\param p_0 SaleTypeId: Integer\r\n\\return Integer"},
{text: "NSSale.SetSaleTypeName", help: "<b>Void SetSaleTypeName(String p_0)<\/b>\n\nThe sale's type name\r\n\r\n\\param p_0 SaleTypeName: String\r\n\\return String"},
{text: "NSSale.SetStatus", help: "<b>Void SetStatus(Integer p_0)<\/b>\n\nThe sale's status, indicating wether the sale is open, sold or lost.\r\n\r\n\\param p_0 Status: Integer\r\n\\return Integer"},
{text: "NSSale.SetTitle", help: "<b>Void SetTitle(String p_0)<\/b>\n\nSale heading (short description?)\r\n\r\n\\param p_0 Title: String\r\n\\return String"},
{text: "NSSale.SetWeightedAmount", help: "<b>Void SetWeightedAmount(Float p_0)<\/b>\n\nThe weighted amount ( amount *  probability \/ 100)\r\n\r\n\\param p_0 WeightedAmount: Float\r\n\\return Float"},
{text: "Void.NSSaleAgent", help: "<b>NSSaleAgent<\/b>\n\nCollection of all services that works with Sale data."},
{text: "NSSaleAgent.HasGuide", help: "<b>Bool HasGuide(Integer p_0)<\/b>\n\n\r\n\r\n\\param p_0 saleId\r\n"},
{text: "NSSaleAgent.HasGuideActivities", help: "<b>Bool HasGuideActivities(Integer p_0)<\/b>\n\n\r\n\r\n\\param p_0 saleId\r\n"},
{text: "NSSaleAgent.HasStakeholderSetting", help: "<b>Bool HasStakeholderSetting(Integer p_0)<\/b>\n\n\\param p_0 saleId"},
{text: "NSSaleAgent.IsNumberValid", help: "<b>Bool IsNumberValid(Integer p_0, String p_1)<\/b>\n\nChecks if the number is unique or required.  The setting is configured from admin under system options.\r\n\r\n\\param p_0 contactId\r\n\\param p_1 number\r\n"},
{text: "NSSaleAgent.OfferAutoNextStageOnApppointmentCompleted", help: "<b>Bool OfferAutoNextStageOnApppointmentCompleted(Integer p_0)<\/b>\n\n\r\n\r\n\\param p_0 appointmentId\r\n"},
{text: "NSSaleAgent.GetNextDueDate", help: "<b>DateTime GetNextDueDate(Integer p_0)<\/b>\n\nGets the next due date for a sale. The next due date is the a\r\n\r\n\\param p_0 saleId\r\n"},
{text: "NSSaleAgent.GetNextSaleStage", help: "<b>Integer GetNextSaleStage(Integer p_0, Bool p_1)<\/b>\n\nGets the next (not deleted) sale stage id if the current stage is deleted. If the current stage is not deleted, the CurrentStageId is returned\r\n\r\n\\param p_0 saleId\r\n\\param p_1 includeCurrentStage\r\n"},
{text: "NSSaleAgent.GetProbabilityFromStage", help: "<b>Integer GetProbabilityFromStage(Integer p_0)<\/b>\n\n\r\n\r\n\\param p_0 stageId\r\n"},
{text: "NSSaleAgent.GetSale", help: "<b>NSSale GetSale(Integer p_0)<\/b>\n\nGets a Sale object.\r\n\r\n\\param p_0 saleId: The identifier of the Sale object\r\n\\return Sale\r\n"},
{text: "NSSaleAgent.GetMyOpportunities", help: "<b>NSSale[] GetMyOpportunities(Integer p_0)<\/b>\n\nReturning the opportunities (open sales) belonging to the user currently logged on\r\n\r\n\\param p_0 count: The number of sales that is returned. -1 returns all.\r\n\\return Array of open sales (opportunities).\r\n"},
{text: "NSSaleAgent.GetOpenSalesForContact", help: "<b>NSSale[] GetOpenSalesForContact(Integer p_0)<\/b>\n\nReturns all open sales for the contact provided.\r\n\r\n\\param p_0 contactId: The ID of the contact whose sales we want.\r\n\\return Aray of sales."},
{text: "NSSaleAgent.GetRecentSales", help: "<b>NSSale[] GetRecentSales(Integer p_0, Integer p_1)<\/b>\n\nReturns the latest sales (that are sold) limited by their amount. The result is sorted descending with the latest first. If the amount is -1, the amount restriction is omitted.\r\n\r\n\\param p_0 amountLimit: The amount limit in the local currency.\r\n\\param p_1 count: The maximum number of items to return. If -1 all are returned.\r\n\\return Array of all recent sales.\r\n"},
{text: "NSSaleAgent.GetSaleList", help: "<b>NSSale[] GetSaleList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSSaleAgent.GetSalesByDate", help: "<b>NSSale[] GetSalesByDate(DateTime p_0, DateTime p_1, Integer p_2, Integer p_3)<\/b>\n\nReturns all sales within a time period. The sales array can be limited by amount and status.\r\n\r\n\\param p_0 fromDate: The beginning of the time interval.\r\n\\param p_1 toDate: The end of the time interval.\r\n\\param p_2 amountLimit: The amount limit in the local currency.  -1 means no amount limit\r\n\\param p_3 status: The sale status (Lost, Open, Sold, Unknown). SaleStatus.Unknown means no status filtering.\r\n\\return Array of sales.\r\n"},
{text: "NSSaleAgent.GetUpcomingSales", help: "<b>NSSale[] GetUpcomingSales(Integer p_0, Integer p_1)<\/b>\n\nReturns all open sales, sorted descending with the latest first.  If the weigthed amount is -1, the amount restriction is omitted.\r\n\r\n\\param p_0 weightedAmountLimit: The amount weighted by the probability that the sale is closed (amount * probability).\r\n\\param p_1 count: The maximum number of items to return. If -1 all are returned.\r\n\\return Array of upcoming sales.\r\n"},
{text: "NSSaleAgent.CreateDefaultSaleEntity", help: "<b>NSSaleEntity CreateDefaultSaleEntity()<\/b>\n\nLoading default values into a new SaleEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New SaleEntity with default values\r\n"},
{text: "NSSaleAgent.GetSaleEntity", help: "<b>NSSaleEntity GetSaleEntity(Integer p_0)<\/b>\n\nGets a SaleEntity object.\r\n\r\n\\param p_0 saleEntityId: The identifier of the SaleEntity object\r\n\\return SaleEntity\r\n"},
{text: "NSSaleAgent.SaveSaleEntity", help: "<b>NSSaleEntity SaveSaleEntity(NSSaleEntity p_0)<\/b>\n\nUpdates the existing SaleEntity or creates a new SaleEntity if the id parameter is empty\r\n\r\n\\param p_0 saleEntity: The SaleEntity that is saved\r\n\\return New or updated SaleEntity"},
{text: "NSSaleAgent.GetSaleList", help: "<b>NSSaleList[] GetSaleList(Integer[] p_0)<\/b>\n\nGets an array of Sale objects.\r\n\r\n\\param p_0 saleIds: The identifiers of the Sale object\r\n\\return Array of Sale objects\r\n"},
{text: "NSSaleAgent.GetSaleStakeholder", help: "<b>NSSaleStakeholder GetSaleStakeholder(Integer p_0)<\/b>\n\nGets a SaleStakeholder object.\r\n\r\n\\param p_0 saleStakeholderId: The identifier of the SaleStakeholder object\r\n\\return SaleStakeholder"},
{text: "NSSaleAgent.GetSaleStakeholderById", help: "<b>NSSaleStakeholder[] GetSaleStakeholderById(Integer[] p_0)<\/b>\n\n\\param p_0 saleStakeholderIds"},
{text: "NSSaleAgent.GetSaleStakeholderList", help: "<b>NSSaleStakeholder[] GetSaleStakeholderList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSSaleAgent.GetSaleStakeholders", help: "<b>NSSaleStakeholder[] GetSaleStakeholders(Integer p_0)<\/b>\n\n\\param p_0 saleId"},
{text: "NSSaleAgent.UpdateSaleStakeholders", help: "<b>NSSaleStakeholder[] UpdateSaleStakeholders(NSSaleStakeholder[] p_0)<\/b>\n\n\\param p_0 stakeholders"},
{text: "NSSaleAgent.CreateDefaultSaleSummary", help: "<b>NSSaleSummary CreateDefaultSaleSummary()<\/b>\n\nLoading default values into a new SaleSummary.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New SaleSummary with default values\r\n"},
{text: "NSSaleAgent.GetSummaryByAssociate", help: "<b>NSSaleSummary GetSummaryByAssociate(Integer p_0, DateTime p_1, DateTime p_2)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n\\param p_1 fromDate\r\n\\param p_2 toDate\r\n"},
{text: "NSSaleAgent.GetSummaryByContact", help: "<b>NSSaleSummary GetSummaryByContact(Integer p_0, DateTime p_1, DateTime p_2)<\/b>\n\n\r\n\r\n\\param p_0 contactId\r\n\\param p_1 fromDate\r\n\\param p_2 toDate\r\n"},
{text: "NSSaleAgent.GetSummaryByGroup", help: "<b>NSSaleSummary GetSummaryByGroup(Integer p_0, DateTime p_1, DateTime p_2)<\/b>\n\n\r\n\r\n\\param p_0 groupId\r\n\\param p_1 fromDate\r\n\\param p_2 toDate\r\n"},
{text: "NSSaleAgent.AddSaleStakeholders", help: "<b>Void AddSaleStakeholders(Integer p_0, NSSaleStakeholder[] p_1)<\/b>\n\n\\param p_0 saleId\r\n\\param p_1 saleStakeholders"},
{text: "NSSaleAgent.BatchUpdateNextDueDate", help: "<b>Void BatchUpdateNextDueDate()<\/b>\n\n\r\n\r\n"},
{text: "NSSaleAgent.DeleteSaleEntity", help: "<b>Void DeleteSaleEntity(Integer p_0)<\/b>\n\nDeletes the SaleEntity\r\n\r\n\\param p_0 saleEntityId: The identity of the SaleEntity\r\n"},
{text: "NSSaleAgent.DeleteSaleStakeholders", help: "<b>Void DeleteSaleStakeholders(Integer[] p_0)<\/b>\n\n\\param p_0 saleStakeholderIds"},
{text: "NSSaleAgent.SaveSaleEntity", help: "<b>Void SaveSaleEntity(NSSaleEntity p_0)<\/b>\n\nUpdates the existing SaleEntity or creates a new SaleEntity if the id parameter is empty\r\n\r\n\\param p_0 saleEntity: The SaleEntity that is saved.\r\n\\return New or updated SaleEntity\r\n"},
{text: "NSSaleAgent.SetAsLost", help: "<b>Void SetAsLost(Integer[] p_0)<\/b>\n\nChange the status of one or more sales to Lost. Note that this does not affect the Completed state of the sale.\r\n\r\n\\param p_0 saleIds: Array of sale ids to be marked as lost. All normal write access rules apply.\r\n"},
{text: "NSSaleAgent.SetAsSold", help: "<b>Void SetAsSold(Integer[] p_0)<\/b>\n\nChange the status of one or more Sales to Sold. Note that this does not mark them as Completed.\r\n\r\n\\param p_0 saleIds: Array of sale ids to be marked as lost. All the normal write access rules apply.\r\n"},
{text: "Void.NSSaleEntity", help: "<b>NSSaleEntity<\/b>\n\nThe Sale Entity contains the sale amount, currency, and sale members. Sales are linked to contacts, persons, and\/or projects."},
{text: "NSSaleEntity.GetIsPublished", help: "<b>Bool GetIsPublished()<\/b>\n\nGet the Publication is published field\r\n\r\n"},
{text: "NSSaleEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered date\r\n\r\n\\return DateTime"},
{text: "NSSaleEntity.GetNextDueDate", help: "<b>DateTime GetNextDueDate()<\/b>\n\nNext due date, this is a denormalization of 'closest future activity date, or most recent if no future activities'. Maintained by the system, but very convenient for searching.\r\n\r\n\\return DateTime"},
{text: "NSSaleEntity.GetPublishEventDate", help: "<b>DateTime GetPublishEventDate()<\/b>\n\n\\return DateTime"},
{text: "NSSaleEntity.GetPublishFrom", help: "<b>DateTime GetPublishFrom()<\/b>\n\n\\return DateTime"},
{text: "NSSaleEntity.GetPublishTo", help: "<b>DateTime GetPublishTo()<\/b>\n\n\\return DateTime"},
{text: "NSSaleEntity.GetReopenDate", help: "<b>DateTime GetReopenDate()<\/b>\n\nDate the sale is to be reopened; valid only for status=stalled. Not necessarily the same as the nextDueDate.\r\n\r\n\\return DateTime"},
{text: "NSSaleEntity.GetSaledate", help: "<b>DateTime GetSaledate()<\/b>\n\n(expected | lost | won) sales date\r\n\r\n\\return DateTime"},
{text: "NSSaleEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated\r\n\r\n\\return DateTime"},
{text: "NSSaleEntity.GetAmount", help: "<b>Float GetAmount()<\/b>\n\nTotal sale amount\r\n\r\n\\return Float"},
{text: "NSSaleEntity.GetEarning", help: "<b>Float GetEarning()<\/b>\n\nEarning on sale\r\n\r\n\\return Float"},
{text: "NSSaleEntity.GetEarningPercent", help: "<b>Float GetEarningPercent()<\/b>\n\nEarning as percent of total\r\n\r\n\\return Float"},
{text: "NSSaleEntity.GetActiveErpLinks", help: "<b>Integer GetActiveErpLinks()<\/b>\n\nThe number of active erp links\r\n\r\n\\return Integer"},
{text: "NSSaleEntity.GetActiveLinks", help: "<b>Integer GetActiveLinks()<\/b>\n\nNumber of active links to sale, document, appointment.\r\n\r\n\\return Integer"},
{text: "NSSaleEntity.GetCompleted", help: "<b>Integer GetCompleted()<\/b>\n\nThe Sale completed state. The completed state is either Started or Completed. NotStarted is treated as Started. The value maps to the Done database field.\r\n\r\n\\return Integer"},
{text: "NSSaleEntity.GetProbability", help: "<b>Integer GetProbability()<\/b>\n\nActual probability, may differ from the one in the list\r\n\r\n\\return Integer"},
{text: "NSSaleEntity.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSaleEntity.GetStatus", help: "<b>Integer GetStatus()<\/b>\n\nThe state of the Sale\r\n\r\n\\return Integer"},
{text: "NSSaleEntity.GetExtraFields", help: "<b>Map GetExtraFields()<\/b>\n\n\\return Map"},
{text: "NSSaleEntity.GetUserDefinedFields", help: "<b>Map GetUserDefinedFields()<\/b>\n\n\\return Map"},
{text: "NSSaleEntity.GetAppointment", help: "<b>NSAppointment GetAppointment()<\/b>\n\n\\return Appointment"},
{text: "NSSaleEntity.GetAssociate", help: "<b>NSAssociate GetAssociate()<\/b>\n\nThe sale owner\r\n\r\n\\return Associate"},
{text: "NSSaleEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\nWho created to sale\r\n\r\n\\return Associate"},
{text: "NSSaleEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\nWho updated the sale\r\n\r\n\\return Associate"},
{text: "NSSaleEntity.GetCompetitor", help: "<b>NSCompetitor GetCompetitor()<\/b>\n\nList of all possible competitors.\r\n\r\n\\return Competitor"},
{text: "NSSaleEntity.GetContact", help: "<b>NSContact GetContact()<\/b>\n\nThe contact associated with the sale. It may also be 0 if no contact is associated with the sale.\r\n\r\n\\return Contact"},
{text: "NSSaleEntity.GetCredited", help: "<b>NSCredited GetCredited()<\/b>\n\nList of who is to be credited for the sale.\r\n\r\n\\return Credited"},
{text: "NSSaleEntity.GetCurrency", help: "<b>NSCurrency GetCurrency()<\/b>\n\nThe currency the sale object was sold in\r\n\r\n\\return Currency"},
{text: "NSSaleEntity.GetLinks", help: "<b>NSLink[] GetLinks()<\/b>\n\nList of all elements linked to the document.\r\n\r\n\\return LinkArray"},
{text: "NSSaleEntity.GetPerson", help: "<b>NSPerson GetPerson()<\/b>\n\nA sale may also be connected to a person - this must be a contact person registered on the current contact. This does not mean that a person is required.\r\n\r\n\\return Person"},
{text: "NSSaleEntity.GetProject", help: "<b>NSProject GetProject()<\/b>\n\nA sale may also be connected to a project, so you see the sale both on the company card, and on the project card. This does not mean that a project is required.\r\n\r\n\\return Project"},
{text: "NSSaleEntity.GetRating", help: "<b>NSRating GetRating()<\/b>\n\nThe sale rating\r\n\r\n\\return Rating"},
{text: "NSSaleEntity.GetReason", help: "<b>NSReason GetReason()<\/b>\n\nThe sale reason\r\n\r\n\\return Reason"},
{text: "NSSaleEntity.GetReasonSold", help: "<b>NSReasonSold GetReasonSold()<\/b>\n\n\\return ReasonSold"},
{text: "NSSaleEntity.GetReasonStalled", help: "<b>NSReasonStalled GetReasonStalled()<\/b>\n\n\\return ReasonStalled"},
{text: "NSSaleEntity.GetSaleStakeholders", help: "<b>NSSaleStakeholder[] GetSaleStakeholders()<\/b>\n\n\\return SaleStakeholderArray"},
{text: "NSSaleEntity.GetSaleType", help: "<b>NSSaleType GetSaleType()<\/b>\n\n\\return SaleType"},
{text: "NSSaleEntity.GetSource", help: "<b>NSSource GetSource()<\/b>\n\nThe sale source\r\n\r\n\\return Source"},
{text: "NSSaleEntity.GetHeading", help: "<b>String GetHeading()<\/b>\n\nSale heading (short description?)\r\n\r\n\\return String"},
{text: "NSSaleEntity.GetNumber", help: "<b>String GetNumber()<\/b>\n\nAlphanumeric user field\r\n\r\n\\return String"},
{text: "NSSaleEntity.GetPostit", help: "<b>String GetPostit()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSSaleEntity.GetSaleText", help: "<b>String GetSaleText()<\/b>\n\nText describing the sale\r\n\r\n\\return String"},
{text: "NSSaleEntity.GetVisibleFor", help: "<b>VisibleFor[] GetVisibleFor()<\/b>\n\n\\return VisibleForArray"},
{text: "NSSaleEntity.SetActiveErpLinks", help: "<b>Void SetActiveErpLinks(Integer p_0)<\/b>\n\nThe number of active erp links\r\n\r\n\\param p_0 ActiveErpLinks: Integer\r\n\\return Integer"},
{text: "NSSaleEntity.SetActiveLinks", help: "<b>Void SetActiveLinks(Integer p_0)<\/b>\n\nNumber of active links to sale, document, appointment.\r\n\r\n\\param p_0 ActiveLinks: Integer\r\n\\return Integer"},
{text: "NSSaleEntity.SetAmount", help: "<b>Void SetAmount(Float p_0)<\/b>\n\nTotal sale amount\r\n\r\n\\param p_0 Amount: Float\r\n\\return Float"},
{text: "NSSaleEntity.SetAppointment", help: "<b>Void SetAppointment(NSAppointment p_0)<\/b>\n\n\\param p_0 Appointment: Appointment\r\n\\return Appointment"},
{text: "NSSaleEntity.SetAssociate", help: "<b>Void SetAssociate(NSAssociate p_0)<\/b>\n\nThe sale owner\r\n\r\n\\param p_0 Associate: Associate\r\n\\return Associate"},
{text: "NSSaleEntity.SetCompetitor", help: "<b>Void SetCompetitor(NSCompetitor p_0)<\/b>\n\nList of all possible competitors.\r\n\r\n\\param p_0 Competitor: Competitor\r\n\\return Competitor"},
{text: "NSSaleEntity.SetCompleted", help: "<b>Void SetCompleted(Integer p_0)<\/b>\n\nThe Sale completed state. The completed state is either Started or Completed. NotStarted is treated as Started. The value maps to the Done database field.\r\n\r\n\\param p_0 Completed: Integer\r\n\\return Integer"},
{text: "NSSaleEntity.SetContact", help: "<b>Void SetContact(NSContact p_0)<\/b>\n\nThe contact associated with the sale. It may also be 0 if no contact is associated with the sale.\r\n\r\n\\param p_0 Contact: Contact\r\n\\return Contact"},
{text: "NSSaleEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\nWho created to sale\r\n\r\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSSaleEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered date\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSSaleEntity.SetCredited", help: "<b>Void SetCredited(NSCredited p_0)<\/b>\n\nList of who is to be credited for the sale.\r\n\r\n\\param p_0 Credited: Credited\r\n\\return Credited"},
{text: "NSSaleEntity.SetCurrency", help: "<b>Void SetCurrency(NSCurrency p_0)<\/b>\n\nThe currency the sale object was sold in\r\n\r\n\\param p_0 Currency: Currency\r\n\\return Currency"},
{text: "NSSaleEntity.SetEarning", help: "<b>Void SetEarning(Float p_0)<\/b>\n\nEarning on sale\r\n\r\n\\param p_0 Earning: Float\r\n\\return Float"},
{text: "NSSaleEntity.SetEarningPercent", help: "<b>Void SetEarningPercent(Float p_0)<\/b>\n\nEarning as percent of total\r\n\r\n\\param p_0 EarningPercent: Float\r\n\\return Float"},
{text: "NSSaleEntity.SetExtraFields", help: "<b>Void SetExtraFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSSaleEntity.SetHeading", help: "<b>Void SetHeading(String p_0)<\/b>\n\nSale heading (short description?)\r\n\r\n\\param p_0 Heading: String\r\n\\return String"},
{text: "NSSaleEntity.SetIsPublished", help: "<b>Void SetIsPublished()<\/b>\n\n\\param p_0 fields: Bool\r\n\\return Void"},
{text: "NSSaleEntity.SetIsPublished", help: "<b>Void SetIsPublished(Bool p_0)<\/b>\n\n\\return Bool"},
{text: "NSSaleEntity.SetLinks", help: "<b>Void SetLinks(NSLink[] p_0)<\/b>\n\nList of all elements linked to the document.\r\n\r\n\\param p_0 Links: LinkArray\r\n\\return LinkArray"},
{text: "NSSaleEntity.SetNextDueDate", help: "<b>Void SetNextDueDate(DateTime p_0)<\/b>\n\nNext due date, this is a denormalization of 'closest future activity date, or most recent if no future activities'. Maintained by the system, but very convenient for searching.\r\n\r\n\\param p_0 NextDueDate: DateTime\r\n\\return DateTime"},
{text: "NSSaleEntity.SetNumber", help: "<b>Void SetNumber(String p_0)<\/b>\n\nAlphanumeric user field\r\n\r\n\\param p_0 Number: String\r\n\\return String"},
{text: "NSSaleEntity.SetPerson", help: "<b>Void SetPerson(NSPerson p_0)<\/b>\n\nA sale may also be connected to a person - this must be a contact person registered on the current contact. This does not mean that a person is required.\r\n\r\n\\param p_0 Person: Person\r\n\\return Person"},
{text: "NSSaleEntity.SetPostit", help: "<b>Void SetPostit(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Postit: String\r\n\\return String"},
{text: "NSSaleEntity.SetProbability", help: "<b>Void SetProbability(Integer p_0)<\/b>\n\nActual probability, may differ from the one in the list\r\n\r\n\\param p_0 Probability: Integer\r\n\\return Integer"},
{text: "NSSaleEntity.SetProject", help: "<b>Void SetProject(NSProject p_0)<\/b>\n\nA sale may also be connected to a project, so you see the sale both on the company card, and on the project card. This does not mean that a project is required.\r\n\r\n\\param p_0 Project: Project\r\n\\return Project"},
{text: "NSSaleEntity.SetPublishEventDate", help: "<b>Void SetPublishEventDate(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSSaleEntity.SetPublishFrom", help: "<b>Void SetPublishFrom(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSSaleEntity.SetPublishTo", help: "<b>Void SetPublishTo(DateTime p_0)<\/b>\n\n\\param p_0 fields: DateTime\r\n\\return Void"},
{text: "NSSaleEntity.SetRating", help: "<b>Void SetRating(NSRating p_0)<\/b>\n\nThe sale rating\r\n\r\n\\param p_0 Rating: Rating\r\n\\return Rating"},
{text: "NSSaleEntity.SetReason", help: "<b>Void SetReason(NSReason p_0)<\/b>\n\nThe sale reason\r\n\r\n\\param p_0 Reason: Reason\r\n\\return Reason"},
{text: "NSSaleEntity.SetReasonSold", help: "<b>Void SetReasonSold(NSReasonSold p_0)<\/b>\n\n\\param p_0 ReasonSold: ReasonSold\r\n\\return ReasonSold"},
{text: "NSSaleEntity.SetReasonStalled", help: "<b>Void SetReasonStalled(NSReasonStalled p_0)<\/b>\n\n\\param p_0 ReasonStalled: ReasonStalled\r\n\\return ReasonStalled"},
{text: "NSSaleEntity.SetReopenDate", help: "<b>Void SetReopenDate(DateTime p_0)<\/b>\n\nDate the sale is to be reopened; valid only for status=stalled. Not necessarily the same as the nextDueDate.\r\n\r\n\\param p_0 ReopenDate: DateTime\r\n\\return DateTime"},
{text: "NSSaleEntity.SetSaledate", help: "<b>Void SetSaledate(DateTime p_0)<\/b>\n\n(expected | lost | won) sales date\r\n\r\n\\param p_0 Saledate: DateTime\r\n\\return DateTime"},
{text: "NSSaleEntity.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSSaleEntity.SetSaleStakeholders", help: "<b>Void SetSaleStakeholders(NSSaleStakeholder[] p_0)<\/b>\n\n\\param p_0 SaleStakeholders: SaleStakeholderArray\r\n\\return SaleStakeholderArray"},
{text: "NSSaleEntity.SetSaleText", help: "<b>Void SetSaleText(String p_0)<\/b>\n\nText describing the sale\r\n\r\n\\param p_0 SaleText: String\r\n\\return String"},
{text: "NSSaleEntity.SetSaleType", help: "<b>Void SetSaleType(NSSaleType p_0)<\/b>\n\n\\param p_0 SaleType: SaleType\r\n\\return SaleType"},
{text: "NSSaleEntity.SetSource", help: "<b>Void SetSource(NSSource p_0)<\/b>\n\nThe sale source\r\n\r\n\\param p_0 Source: Source\r\n\\return Source"},
{text: "NSSaleEntity.SetStatus", help: "<b>Void SetStatus(Integer p_0)<\/b>\n\nThe state of the Sale\r\n\r\n\\param p_0 Status: Integer\r\n\\return Integer"},
{text: "NSSaleEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\nWho updated the sale\r\n\r\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSSaleEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSSaleEntity.SetUserDefinedFields", help: "<b>Void SetUserDefinedFields(Map p_0)<\/b>\n\n\\param p_0 fields: Map\r\n\\return Void"},
{text: "NSSaleEntity.SetVisibleFor", help: "<b>Void SetVisibleFor(VisibleFor[] p_0)<\/b>\n\n\\param p_0 fields: VisibleForArray\r\n\\return Void"},
{text: "Void.NSSalesActivity", help: "<b>NSSalesActivity<\/b>\n\n"},
{text: "NSSalesActivity.GetRequestedContacts", help: "<b>NSContact[] GetRequestedContacts()<\/b>\n\nThe companies that match the request\r\n\r\n\\return ContactArray"},
{text: "NSSalesActivity.GetRequestedPerson", help: "<b>NSPerson GetRequestedPerson()<\/b>\n\nThe person that matches the request.\r\n\r\n\\return Person"},
{text: "NSSalesActivity.GetSalesRep", help: "<b>NSPerson GetSalesRep()<\/b>\n\nThe sales representative for the person that matches the request.\r\n\r\n\\return Person"},
{text: "NSSalesActivity.SetRequestedContacts", help: "<b>Void SetRequestedContacts(NSContact[] p_0)<\/b>\n\nThe companies that match the request\r\n\r\n\\param p_0 RequestedContacts: ContactArray\r\n\\return ContactArray"},
{text: "NSSalesActivity.SetRequestedPerson", help: "<b>Void SetRequestedPerson(NSPerson p_0)<\/b>\n\nThe person that matches the request.\r\n\r\n\\param p_0 RequestedPerson: Person\r\n\\return Person"},
{text: "NSSalesActivity.SetSalesRep", help: "<b>Void SetSalesRep(NSPerson p_0)<\/b>\n\nThe sales representative for the person that matches the request.\r\n\r\n\\param p_0 SalesRep: Person\r\n\\return Person"},
{text: "Void.NSSaleStageEntity", help: "<b>NSSaleStageEntity<\/b>\n\nThis entity represents a sale stage."},
{text: "NSSaleStageEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIf true, the Sale stage is deleted\r\n\r\n\\return Bool"},
{text: "NSSaleStageEntity.GetProbability", help: "<b>Integer GetProbability()<\/b>\n\nThe numeric probability of the sale\r\n\r\n\\return Integer"},
{text: "NSSaleStageEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSSaleStageEntity.GetSaleStageId", help: "<b>Integer GetSaleStageId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSaleStageEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSSaleStageEntity.GetValue", help: "<b>String GetValue()<\/b>\n\nThe sale stage\r\n\r\n\\return String"},
{text: "NSSaleStageEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIf true, the Sale stage is deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSSaleStageEntity.SetProbability", help: "<b>Void SetProbability(Integer p_0)<\/b>\n\nThe numeric probability of the sale\r\n\r\n\\param p_0 Probability: Integer\r\n\\return Integer"},
{text: "NSSaleStageEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSSaleStageEntity.SetSaleStageId", help: "<b>Void SetSaleStageId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SaleStageId: Integer\r\n\\return Integer"},
{text: "NSSaleStageEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSSaleStageEntity.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nThe sale stage\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSSaleStakeholder", help: "<b>NSSaleStakeholder<\/b>\n\n"},
{text: "NSSaleStakeholder.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nContact ID of person or contact who is the sale stakeholder\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetCountryId", help: "<b>Integer GetCountryId()<\/b>\n\nCountry\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetEmailId", help: "<b>Integer GetEmailId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetPhoneId", help: "<b>Integer GetPhoneId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank in list\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nParent sale\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetSaleStakeholderId", help: "<b>Integer GetSaleStakeholderId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetStakeholderRoleId", help: "<b>Integer GetStakeholderRoleId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSaleStakeholder.GetComment", help: "<b>String GetComment()<\/b>\n\nOptional comment\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetContactName", help: "<b>String GetContactName()<\/b>\n\nContact name\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetEmailAddress", help: "<b>String GetEmailAddress()<\/b>\n\nThe address itself\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetEmailDescription", help: "<b>String GetEmailDescription()<\/b>\n\nVisible field\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetFirstname", help: "<b>String GetFirstname()<\/b>\n\nFirst name\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetLastname", help: "<b>String GetLastname()<\/b>\n\nLast name\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetMiddleName", help: "<b>String GetMiddleName()<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetMrmrs", help: "<b>String GetMrmrs()<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetPhone", help: "<b>String GetPhone()<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.GetStakeholderRoleName", help: "<b>String GetStakeholderRoleName()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSSaleStakeholder.SetComment", help: "<b>Void SetComment(String p_0)<\/b>\n\nOptional comment\r\n\r\n\\param p_0 Comment: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nContact ID of person or contact who is the sale stakeholder\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetContactName", help: "<b>Void SetContactName(String p_0)<\/b>\n\nContact name\r\n\r\n\\param p_0 ContactName: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetCountryId", help: "<b>Void SetCountryId(Integer p_0)<\/b>\n\nCountry\r\n\r\n\\param p_0 CountryId: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetEmailAddress", help: "<b>Void SetEmailAddress(String p_0)<\/b>\n\nThe address itself\r\n\r\n\\param p_0 EmailAddress: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetEmailDescription", help: "<b>Void SetEmailDescription(String p_0)<\/b>\n\nVisible field\r\n\r\n\\param p_0 EmailDescription: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetEmailId", help: "<b>Void SetEmailId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 EmailId: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetFirstname", help: "<b>Void SetFirstname(String p_0)<\/b>\n\nFirst name\r\n\r\n\\param p_0 Firstname: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetLastname", help: "<b>Void SetLastname(String p_0)<\/b>\n\nLast name\r\n\r\n\\param p_0 Lastname: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetMiddleName", help: "<b>Void SetMiddleName(String p_0)<\/b>\n\nMiddle name or 'van' etc.\r\n\r\n\\param p_0 MiddleName: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetMrmrs", help: "<b>Void SetMrmrs(String p_0)<\/b>\n\ne.g. Mrs   sex_title\r\n\r\n\\param p_0 Mrmrs: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetPhone", help: "<b>Void SetPhone(String p_0)<\/b>\n\nActual phone number as eneterd by the user\r\n\r\n\\param p_0 Phone: String\r\n\\return String"},
{text: "NSSaleStakeholder.SetPhoneId", help: "<b>Void SetPhoneId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 PhoneId: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank in list\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nParent sale\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetSaleStakeholderId", help: "<b>Void SetSaleStakeholderId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SaleStakeholderId: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetStakeholderRoleId", help: "<b>Void SetStakeholderRoleId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 StakeholderRoleId: Integer\r\n\\return Integer"},
{text: "NSSaleStakeholder.SetStakeholderRoleName", help: "<b>Void SetStakeholderRoleName(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 StakeholderRoleName: String\r\n\\return String"},
{text: "Void.NSSaleSummary", help: "<b>NSSaleSummary<\/b>\n\n"},
{text: "NSSaleSummary.GetCurrentOverdueTotalBaseCurrency", help: "<b>Float GetCurrentOverdueTotalBaseCurrency()<\/b>\n\nSummed amount for all overdue sales within the period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetCurrentOverdueTotalOwnCurrency", help: "<b>Float GetCurrentOverdueTotalOwnCurrency()<\/b>\n\nSummed amount for all overdue sales within the period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetCurrentOverdueWeightedBaseCurrency", help: "<b>Float GetCurrentOverdueWeightedBaseCurrency()<\/b>\n\nWeighted sum for all overdue sales within the period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetCurrentOverdueWeightedOwnCurrency", help: "<b>Float GetCurrentOverdueWeightedOwnCurrency()<\/b>\n\nWeighted sum for all overdue sales within the period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetFutureOpenTotalBaseCurrency", help: "<b>Float GetFutureOpenTotalBaseCurrency()<\/b>\n\nSummed amount for all Future Pipe\/All open sales with date after the period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetFutureOpenTotalOwnCurrency", help: "<b>Float GetFutureOpenTotalOwnCurrency()<\/b>\n\nSummed amount for all Future Pipe\/All open sales with date after the period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetFutureOpenWeightedBaseCurrency", help: "<b>Float GetFutureOpenWeightedBaseCurrency()<\/b>\n\nWeighted sum for all Future Pipe\/All open sales with date after the period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetFutureOpenWeightedOwnCurrency", help: "<b>Float GetFutureOpenWeightedOwnCurrency()<\/b>\n\nWeighted sum for all Future Pipe\/All open sales with date after the period in default currency for the current user\n\t\/\/\/\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetLostTotalBaseCurrency", help: "<b>Float GetLostTotalBaseCurrency()<\/b>\n\nSummed amount for all lost within the period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetLostTotalOwnCurrency", help: "<b>Float GetLostTotalOwnCurrency()<\/b>\n\nSummed amount for all lost within the period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetOpenTotalBaseCurrency", help: "<b>Float GetOpenTotalBaseCurrency()<\/b>\n\nSummed amount for all open within the period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetOpenTotalOwnCurrency", help: "<b>Float GetOpenTotalOwnCurrency()<\/b>\n\nSummed amount for all open within the period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetOpenWeightedBaseCurrency", help: "<b>Float GetOpenWeightedBaseCurrency()<\/b>\n\nWeighted sum for all open within the period in default currency for the installation\n\t\/\/\/\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetOpenWeightedOwnCurrency", help: "<b>Float GetOpenWeightedOwnCurrency()<\/b>\n\nWeighted sum for all open within the period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetPreviousOverdueTotalBaseCurrency", help: "<b>Float GetPreviousOverdueTotalBaseCurrency()<\/b>\n\nSummed amount for all open sales with date before this period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetPreviousOverdueTotalOwnCurrency", help: "<b>Float GetPreviousOverdueTotalOwnCurrency()<\/b>\n\nSummed amount for all open sales with date before this period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetPreviousOverdueWeightedBaseCurrency", help: "<b>Float GetPreviousOverdueWeightedBaseCurrency()<\/b>\n\nWeighted sum for all open sales with date before this period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetPreviousOverdueWeightedOwnCurrency", help: "<b>Float GetPreviousOverdueWeightedOwnCurrency()<\/b>\n\nWeighted sum for all open sales with date before this period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetSoldTotalBaseCurrency", help: "<b>Float GetSoldTotalBaseCurrency()<\/b>\n\nSummed amount for all sold within the period in default currency for the installation\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetSoldTotalOwnCurrency", help: "<b>Float GetSoldTotalOwnCurrency()<\/b>\n\nSummed amount for all sold within the period in default currency for the current user\r\n\r\n\\return Float"},
{text: "NSSaleSummary.GetCurrentOverdue", help: "<b>Integer GetCurrentOverdue()<\/b>\n\nNumber of all overdue sales within the period\r\n\r\n\\return Integer"},
{text: "NSSaleSummary.GetFutureOpen", help: "<b>Integer GetFutureOpen()<\/b>\n\nNumber of all Future Pipe\/All open sales with date after the period\r\n\r\n\\return Integer"},
{text: "NSSaleSummary.GetLost", help: "<b>Integer GetLost()<\/b>\n\nNumber of all lost within the period\r\n\r\n\\return Integer"},
{text: "NSSaleSummary.GetOpen", help: "<b>Integer GetOpen()<\/b>\n\nNumber of all open within the period\n\t\/\/\/\r\n\r\n\\return Integer"},
{text: "NSSaleSummary.GetPreviousOverdue", help: "<b>Integer GetPreviousOverdue()<\/b>\n\nNumber of all open sales with date before this period\r\n\r\n\\return Integer"},
{text: "NSSaleSummary.GetSold", help: "<b>Integer GetSold()<\/b>\n\nNumber of all sold within the period\r\n\r\n\\return Integer"},
{text: "NSSaleSummary.GetBaseCurrency", help: "<b>String GetBaseCurrency()<\/b>\n\nDefault currency for the installation\r\n\r\n\\return String"},
{text: "NSSaleSummary.GetOwnCurrency", help: "<b>String GetOwnCurrency()<\/b>\n\nDefault currency for the current user\r\n\r\n\\return String"},
{text: "NSSaleSummary.SetBaseCurrency", help: "<b>Void SetBaseCurrency(String p_0)<\/b>\n\nDefault currency for the installation\r\n\r\n\\param p_0 BaseCurrency: String\r\n\\return String"},
{text: "NSSaleSummary.SetCurrentOverdue", help: "<b>Void SetCurrentOverdue(Integer p_0)<\/b>\n\nNumber of all overdue sales within the period\r\n\r\n\\param p_0 CurrentOverdue: Integer\r\n\\return Integer"},
{text: "NSSaleSummary.SetCurrentOverdueTotalBaseCurrency", help: "<b>Void SetCurrentOverdueTotalBaseCurrency(Float p_0)<\/b>\n\nSummed amount for all overdue sales within the period in default currency for the installation\r\n\r\n\\param p_0 CurrentOverdueTotalBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetCurrentOverdueTotalOwnCurrency", help: "<b>Void SetCurrentOverdueTotalOwnCurrency(Float p_0)<\/b>\n\nSummed amount for all overdue sales within the period in default currency for the current user\r\n\r\n\\param p_0 CurrentOverdueTotalOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetCurrentOverdueWeightedBaseCurrency", help: "<b>Void SetCurrentOverdueWeightedBaseCurrency(Float p_0)<\/b>\n\nWeighted sum for all overdue sales within the period in default currency for the installation\r\n\r\n\\param p_0 CurrentOverdueWeightedBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetCurrentOverdueWeightedOwnCurrency", help: "<b>Void SetCurrentOverdueWeightedOwnCurrency(Float p_0)<\/b>\n\nWeighted sum for all overdue sales within the period in default currency for the current user\r\n\r\n\\param p_0 CurrentOverdueWeightedOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetFutureOpen", help: "<b>Void SetFutureOpen(Integer p_0)<\/b>\n\nNumber of all Future Pipe\/All open sales with date after the period\r\n\r\n\\param p_0 FutureOpen: Integer\r\n\\return Integer"},
{text: "NSSaleSummary.SetFutureOpenTotalBaseCurrency", help: "<b>Void SetFutureOpenTotalBaseCurrency(Float p_0)<\/b>\n\nSummed amount for all Future Pipe\/All open sales with date after the period in default currency for the installation\r\n\r\n\\param p_0 FutureOpenTotalBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetFutureOpenTotalOwnCurrency", help: "<b>Void SetFutureOpenTotalOwnCurrency(Float p_0)<\/b>\n\nSummed amount for all Future Pipe\/All open sales with date after the period in default currency for the current user\r\n\r\n\\param p_0 FutureOpenTotalOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetFutureOpenWeightedBaseCurrency", help: "<b>Void SetFutureOpenWeightedBaseCurrency(Float p_0)<\/b>\n\nWeighted sum for all Future Pipe\/All open sales with date after the period in default currency for the installation\r\n\r\n\\param p_0 FutureOpenWeightedBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetFutureOpenWeightedOwnCurrency", help: "<b>Void SetFutureOpenWeightedOwnCurrency(Float p_0)<\/b>\n\nWeighted sum for all Future Pipe\/All open sales with date after the period in default currency for the current user\n\t\/\/\/\r\n\r\n\\param p_0 FutureOpenWeightedOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetLost", help: "<b>Void SetLost(Integer p_0)<\/b>\n\nNumber of all lost within the period\r\n\r\n\\param p_0 Lost: Integer\r\n\\return Integer"},
{text: "NSSaleSummary.SetLostTotalBaseCurrency", help: "<b>Void SetLostTotalBaseCurrency(Float p_0)<\/b>\n\nSummed amount for all lost within the period in default currency for the installation\r\n\r\n\\param p_0 LostTotalBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetLostTotalOwnCurrency", help: "<b>Void SetLostTotalOwnCurrency(Float p_0)<\/b>\n\nSummed amount for all lost within the period in default currency for the current user\r\n\r\n\\param p_0 LostTotalOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetOpen", help: "<b>Void SetOpen(Integer p_0)<\/b>\n\nNumber of all open within the period\n\t\/\/\/\r\n\r\n\\param p_0 Open: Integer\r\n\\return Integer"},
{text: "NSSaleSummary.SetOpenTotalBaseCurrency", help: "<b>Void SetOpenTotalBaseCurrency(Float p_0)<\/b>\n\nSummed amount for all open within the period in default currency for the installation\r\n\r\n\\param p_0 OpenTotalBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetOpenTotalOwnCurrency", help: "<b>Void SetOpenTotalOwnCurrency(Float p_0)<\/b>\n\nSummed amount for all open within the period in default currency for the current user\r\n\r\n\\param p_0 OpenTotalOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetOpenWeightedBaseCurrency", help: "<b>Void SetOpenWeightedBaseCurrency(Float p_0)<\/b>\n\nWeighted sum for all open within the period in default currency for the installation\n\t\/\/\/\r\n\r\n\\param p_0 OpenWeightedBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetOpenWeightedOwnCurrency", help: "<b>Void SetOpenWeightedOwnCurrency(Float p_0)<\/b>\n\nWeighted sum for all open within the period in default currency for the current user\r\n\r\n\\param p_0 OpenWeightedOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetOwnCurrency", help: "<b>Void SetOwnCurrency(String p_0)<\/b>\n\nDefault currency for the current user\r\n\r\n\\param p_0 OwnCurrency: String\r\n\\return String"},
{text: "NSSaleSummary.SetPreviousOverdue", help: "<b>Void SetPreviousOverdue(Integer p_0)<\/b>\n\nNumber of all open sales with date before this period\r\n\r\n\\param p_0 PreviousOverdue: Integer\r\n\\return Integer"},
{text: "NSSaleSummary.SetPreviousOverdueTotalBaseCurrency", help: "<b>Void SetPreviousOverdueTotalBaseCurrency(Float p_0)<\/b>\n\nSummed amount for all open sales with date before this period in default currency for the installation\r\n\r\n\\param p_0 PreviousOverdueTotalBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetPreviousOverdueTotalOwnCurrency", help: "<b>Void SetPreviousOverdueTotalOwnCurrency(Float p_0)<\/b>\n\nSummed amount for all open sales with date before this period in default currency for the current user\r\n\r\n\\param p_0 PreviousOverdueTotalOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetPreviousOverdueWeightedBaseCurrency", help: "<b>Void SetPreviousOverdueWeightedBaseCurrency(Float p_0)<\/b>\n\nWeighted sum for all open sales with date before this period in default currency for the installation\r\n\r\n\\param p_0 PreviousOverdueWeightedBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetPreviousOverdueWeightedOwnCurrency", help: "<b>Void SetPreviousOverdueWeightedOwnCurrency(Float p_0)<\/b>\n\nWeighted sum for all open sales with date before this period in default currency for the current user\r\n\r\n\\param p_0 PreviousOverdueWeightedOwnCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetSold", help: "<b>Void SetSold(Integer p_0)<\/b>\n\nNumber of all sold within the period\r\n\r\n\\param p_0 Sold: Integer\r\n\\return Integer"},
{text: "NSSaleSummary.SetSoldTotalBaseCurrency", help: "<b>Void SetSoldTotalBaseCurrency(Float p_0)<\/b>\n\nSummed amount for all sold within the period in default currency for the installation\r\n\r\n\\param p_0 SoldTotalBaseCurrency: Float\r\n\\return Float"},
{text: "NSSaleSummary.SetSoldTotalOwnCurrency", help: "<b>Void SetSoldTotalOwnCurrency(Float p_0)<\/b>\n\nSummed amount for all sold within the period in default currency for the current user\r\n\r\n\\param p_0 SoldTotalOwnCurrency: Float\r\n\\return Float"},
{text: "Void.NSSaleType", help: "<b>NSSaleType<\/b>\n\n"},
{text: "NSSaleType.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSSaleType.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSSaleType.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSSaleType.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSSaleType.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSSaleType.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSSaleTypeEntity", help: "<b>NSSaleTypeEntity<\/b>\n\n"},
{text: "NSSaleTypeEntity.GetAllowQuoteAlternatives", help: "<b>Bool GetAllowQuoteAlternatives()<\/b>\n\nCan quotes linked to sales of this type, have multiple Alternatives\r\n\r\n\\return Bool"},
{text: "NSSaleTypeEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\return Bool"},
{text: "NSSaleTypeEntity.GetHasGuide", help: "<b>Bool GetHasGuide()<\/b>\n\nDoes this sale type have a guide attached\r\n\r\n\\return Bool"},
{text: "NSSaleTypeEntity.GetHasStakeholders", help: "<b>Bool GetHasStakeholders()<\/b>\n\nDoes this sale type have stakeholders\r\n\r\n\\return Bool"},
{text: "NSSaleTypeEntity.GetIsAutoAdvance", help: "<b>Bool GetIsAutoAdvance()<\/b>\n\nDoes the sale stage advance automatically, when the last guided activity in a stage is completed?\r\n\r\n\\return Bool"},
{text: "NSSaleTypeEntity.GetMaxDiscountPercentSet", help: "<b>Bool GetMaxDiscountPercentSet()<\/b>\n\nIs there a limit, in percent, to the total discount on quotes linked to sales of this type\r\n\r\n\\return Bool"},
{text: "NSSaleTypeEntity.GetMinEarningPercentSet", help: "<b>Bool GetMinEarningPercentSet()<\/b>\n\nIs there a limit, in earning as percent of total, on quotes linked to sales of this type\r\n\r\n\\return Bool"},
{text: "NSSaleTypeEntity.GetConfirmationLinesTemplate", help: "<b>Integer GetConfirmationLinesTemplate()<\/b>\n\nThe template that this sale type should use when producing the order confirmation lines document; the template must have DocTmplQuoteType=ConfirmationLines\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetDefaultQuoteValidity", help: "<b>Integer GetDefaultQuoteValidity()<\/b>\n\nDefault valid days for quotes linked to sales of this type (valid from quote transmission)\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetDurationUnit", help: "<b>Integer GetDurationUnit()<\/b>\n\n"},
{text: "NSSaleTypeEntity.GetGroupQuoteLinesBy", help: "<b>Integer GetGroupQuoteLinesBy()<\/b>\n\nGroup quote lines by this field\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetMaxDiscountPercent", help: "<b>Integer GetMaxDiscountPercent()<\/b>\n\nThe maximum discount in percent of total, if set, on quotes linked to sales of this type\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetMinEarningPercent", help: "<b>Integer GetMinEarningPercent()<\/b>\n\nThe minimum earning in percent of total, if set, on quotes linked to sales of this type\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetQuoteLinesTemplate", help: "<b>Integer GetQuoteLinesTemplate()<\/b>\n\nThe template that this sale type should use when producing the product lines offer document; the template must have DocTmplQuoteType=QuoteLines\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetSaleDuration", help: "<b>Integer GetSaleDuration()<\/b>\n\nExpected number of dales from initiation to close of sale\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetSaleTypeCatId", help: "<b>Integer GetSaleTypeCatId()<\/b>\n\nCategory of sale type, copied to sale\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetSaleTypeId", help: "<b>Integer GetSaleTypeId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetSortGroupLinesBy", help: "<b>Integer GetSortGroupLinesBy()<\/b>\n\nSort group lines by this field\r\n\r\n\\return Integer"},
{text: "NSSaleTypeEntity.GetDurationUnit", help: "<b>NSDurationUnit GetDurationUnit()<\/b>\n\nUnits for the duration (day, week, whatever)\r\n\r\n\\return DurationUnit"},
{text: "NSSaleTypeEntity.GetStages", help: "<b>NSSelectableMDOListItem[] GetStages()<\/b>\n\nStages, those associated with this SaleType are selected.\r\n\r\n\\return SelectableMDOListItemArray"},
{text: "NSSaleTypeEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSSaleTypeEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSSaleTypeEntity.SetAllowQuoteAlternatives", help: "<b>Void SetAllowQuoteAlternatives(Bool p_0)<\/b>\n\nCan quotes linked to sales of this type, have multiple Alternatives\r\n\r\n\\param p_0 AllowQuoteAlternatives: Bool\r\n\\return Bool"},
{text: "NSSaleTypeEntity.SetConfirmationLinesTemplate", help: "<b>Void SetConfirmationLinesTemplate(Integer p_0)<\/b>\n\nThe template that this sale type should use when producing the order confirmation lines document; the template must have DocTmplQuoteType=ConfirmationLines\r\n\r\n\\param p_0 ConfirmationLinesTemplate: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetDefaultQuoteValidity", help: "<b>Void SetDefaultQuoteValidity(Integer p_0)<\/b>\n\nDefault valid days for quotes linked to sales of this type (valid from quote transmission)\r\n\r\n\\param p_0 DefaultQuoteValidity: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSSaleTypeEntity.SetDurationUnit", help: "<b>Void SetDurationUnit(Integer p_0)<\/b>\n\n"},
{text: "NSSaleTypeEntity.SetDurationUnit", help: "<b>Void SetDurationUnit(NSDurationUnit p_0)<\/b>\n\nUnits for the duration (day, week, whatever)\r\n\r\n\\param p_0 DurationUnit: DurationUnit\r\n\\return DurationUnit"},
{text: "NSSaleTypeEntity.SetGroupQuoteLinesBy", help: "<b>Void SetGroupQuoteLinesBy(Integer p_0)<\/b>\n\nGroup quote lines by this field\r\n\r\n\\param p_0 GroupQuoteLinesBy: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetHasGuide", help: "<b>Void SetHasGuide(Bool p_0)<\/b>\n\nDoes this sale type have a guide attached\r\n\r\n\\param p_0 HasGuide: Bool\r\n\\return Bool"},
{text: "NSSaleTypeEntity.SetHasStakeholders", help: "<b>Void SetHasStakeholders(Bool p_0)<\/b>\n\nDoes this sale type have stakeholders\r\n\r\n\\param p_0 HasStakeholders: Bool\r\n\\return Bool"},
{text: "NSSaleTypeEntity.SetIsAutoAdvance", help: "<b>Void SetIsAutoAdvance(Bool p_0)<\/b>\n\nDoes the sale stage advance automatically, when the last guided activity in a stage is completed?\r\n\r\n\\param p_0 IsAutoAdvance: Bool\r\n\\return Bool"},
{text: "NSSaleTypeEntity.SetMaxDiscountPercent", help: "<b>Void SetMaxDiscountPercent(Integer p_0)<\/b>\n\nThe maximum discount in percent of total, if set, on quotes linked to sales of this type\r\n\r\n\\param p_0 MaxDiscountPercent: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetMaxDiscountPercentSet", help: "<b>Void SetMaxDiscountPercentSet(Bool p_0)<\/b>\n\nIs there a limit, in percent, to the total discount on quotes linked to sales of this type\r\n\r\n\\param p_0 MaxDiscountPercentSet: Bool\r\n\\return Bool"},
{text: "NSSaleTypeEntity.SetMinEarningPercent", help: "<b>Void SetMinEarningPercent(Integer p_0)<\/b>\n\nThe minimum earning in percent of total, if set, on quotes linked to sales of this type\r\n\r\n\\param p_0 MinEarningPercent: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetMinEarningPercentSet", help: "<b>Void SetMinEarningPercentSet(Bool p_0)<\/b>\n\nIs there a limit, in earning as percent of total, on quotes linked to sales of this type\r\n\r\n\\param p_0 MinEarningPercentSet: Bool\r\n\\return Bool"},
{text: "NSSaleTypeEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSSaleTypeEntity.SetQuoteLinesTemplate", help: "<b>Void SetQuoteLinesTemplate(Integer p_0)<\/b>\n\nThe template that this sale type should use when producing the product lines offer document; the template must have DocTmplQuoteType=QuoteLines\r\n\r\n\\param p_0 QuoteLinesTemplate: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetSaleDuration", help: "<b>Void SetSaleDuration(Integer p_0)<\/b>\n\nExpected number of dales from initiation to close of sale\r\n\r\n\\param p_0 SaleDuration: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetSaleTypeCatId", help: "<b>Void SetSaleTypeCatId(Integer p_0)<\/b>\n\nCategory of sale type, copied to sale\r\n\r\n\\param p_0 SaleTypeCatId: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetSaleTypeId", help: "<b>Void SetSaleTypeId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SaleTypeId: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetSortGroupLinesBy", help: "<b>Void SetSortGroupLinesBy(Integer p_0)<\/b>\n\nSort group lines by this field\r\n\r\n\\param p_0 SortGroupLinesBy: Integer\r\n\\return Integer"},
{text: "NSSaleTypeEntity.SetStages", help: "<b>Void SetStages(NSSelectableMDOListItem[] p_0)<\/b>\n\nStages, those associated with this SaleType are selected.\r\n\r\n\\param p_0 Stages: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSSaleTypeEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSSaleTypeStageLink", help: "<b>NSSaleTypeStageLink<\/b>\n\n"},
{text: "NSSaleTypeStageLink.GetProbability", help: "<b>Integer GetProbability()<\/b>\n\n"},
{text: "NSSaleTypeStageLink.GetProbId", help: "<b>Integer GetProbId()<\/b>\n\n"},
{text: "NSSaleTypeStageLink.GetSaleTypeId", help: "<b>Integer GetSaleTypeId()<\/b>\n\n"},
{text: "NSSaleTypeStageLink.GetSaleTypeStageLinkId", help: "<b>Integer GetSaleTypeStageLinkId()<\/b>\n\n"},
{text: "NSSaleTypeStageLink.GetProbName", help: "<b>String GetProbName()<\/b>\n\n"},
{text: "NSSaleTypeStageLink.GetProbTooltip", help: "<b>String GetProbTooltip()<\/b>\n\n"},
{text: "NSSaleTypeStageLink.GetSaleTypeName", help: "<b>String GetSaleTypeName()<\/b>\n\n"},
{text: "NSSaleTypeStageLink.GetSaleTypeTooltip", help: "<b>String GetSaleTypeTooltip()<\/b>\n\n"},
{text: "NSSaleTypeStageLink.SetProbability", help: "<b>Void SetProbability(Integer p_0)<\/b>\n\n"},
{text: "NSSaleTypeStageLink.SetProbId", help: "<b>Void SetProbId(Integer p_0)<\/b>\n\n"},
{text: "NSSaleTypeStageLink.SetProbName", help: "<b>Void SetProbName(String p_0)<\/b>\n\n"},
{text: "NSSaleTypeStageLink.SetProbTooltip", help: "<b>Void SetProbTooltip(String p_0)<\/b>\n\n"},
{text: "NSSaleTypeStageLink.SetSaleTypeId", help: "<b>Void SetSaleTypeId(Integer p_0)<\/b>\n\n"},
{text: "NSSaleTypeStageLink.SetSaleTypeName", help: "<b>Void SetSaleTypeName(String p_0)<\/b>\n\n"},
{text: "NSSaleTypeStageLink.SetSaleTypeStageLinkId", help: "<b>Void SetSaleTypeStageLinkId(Integer p_0)<\/b>\n\n"},
{text: "NSSaleTypeStageLink.SetSaleTypeTooltip", help: "<b>Void SetSaleTypeTooltip(String p_0)<\/b>\n\n"},
{text: "Void.NSSatellite", help: "<b>NSSatellite<\/b>\n\n"},
{text: "NSSatellite.GetCreated", help: "<b>DateTime GetCreated()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSSatellite.GetUpdated", help: "<b>DateTime GetUpdated()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSSatellite.GetSatelliteId", help: "<b>Integer GetSatelliteId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSatellite.GetArea", help: "<b>NSArea GetArea()<\/b>\n\n\\return Area"},
{text: "NSSatellite.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\n\\return Associate"},
{text: "NSSatellite.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\n\\return Associate"},
{text: "NSSatellite.GetContact", help: "<b>NSContact GetContact()<\/b>\n\n\\return Contact"},
{text: "NSSatellite.GetLicenseOwners", help: "<b>NSLicenseOwner[] GetLicenseOwners()<\/b>\n\nThe restricted and unrestricted module licenses grouped by license owner. These module licenses are either assigned or unassigned to this user\r\n\r\n\\return LicenseOwnerArray"},
{text: "NSSatellite.SetArea", help: "<b>Void SetArea(NSArea p_0)<\/b>\n\n\\param p_0 Area: Area\r\n\\return Area"},
{text: "NSSatellite.SetContact", help: "<b>Void SetContact(NSContact p_0)<\/b>\n\n\\param p_0 Contact: Contact\r\n\\return Contact"},
{text: "NSSatellite.SetCreated", help: "<b>Void SetCreated(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 Created: DateTime\r\n\\return DateTime"},
{text: "NSSatellite.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSSatellite.SetLicenseOwners", help: "<b>Void SetLicenseOwners(NSLicenseOwner[] p_0)<\/b>\n\nThe restricted and unrestricted module licenses grouped by license owner. These module licenses are either assigned or unassigned to this user\r\n\r\n\\param p_0 LicenseOwners: LicenseOwnerArray\r\n\\return LicenseOwnerArray"},
{text: "NSSatellite.SetSatelliteId", help: "<b>Void SetSatelliteId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SatelliteId: Integer\r\n\\return Integer"},
{text: "NSSatellite.SetUpdated", help: "<b>Void SetUpdated(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 Updated: DateTime\r\n\\return DateTime"},
{text: "NSSatellite.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "Void.NSSelectableMDOListItem", help: "<b>NSSelectableMDOListItem<\/b>\n\n"},
{text: "NSSelectableMDOListItem.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nThe deleted status of the ListItem\r\n\r\n\\return Bool"},
{text: "NSSelectableMDOListItem.GetHidden", help: "<b>Bool GetHidden()<\/b>\n\nTrue if the ListItem is hidden\r\n\r\n\\return Bool"},
{text: "NSSelectableMDOListItem.GetSelected", help: "<b>Bool GetSelected()<\/b>\n\nTrue if the ListItem is selected\r\n\r\n\\return Bool"},
{text: "NSSelectableMDOListItem.GetLastChanged", help: "<b>DateTime GetLastChanged()<\/b>\n\nTime of last change.\r\n\r\n\\return DateTime"},
{text: "NSSelectableMDOListItem.GetColorBlock", help: "<b>Integer GetColorBlock()<\/b>\n\nThe color indicator of the ListItem color block\r\n\r\n\\return Integer"},
{text: "NSSelectableMDOListItem.GetId", help: "<b>Integer GetId()<\/b>\n\nThe Id of the ListItem\r\n\r\n\\return Integer"},
{text: "NSSelectableMDOListItem.GetRank", help: "<b>Integer GetRank()<\/b>\n\nThe rank of the ListItem\r\n\r\n\\return Integer"},
{text: "NSSelectableMDOListItem.GetChildItems", help: "<b>NSSelectableMDOListItem[] GetChildItems()<\/b>\n\nThe child items of the SelectableMDOListItem\r\n\r\n\\return SelectableMDOListItemArray"},
{text: "NSSelectableMDOListItem.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\nExtra information added to the ListItem. Could be information such as sort order etc or other meta data. Custom field.\r\n\r\n\\return String"},
{text: "NSSelectableMDOListItem.GetIconHint", help: "<b>String GetIconHint()<\/b>\n\nThe Icon hint of the ListItem. Custom field.\r\n\r\n\\return String"},
{text: "NSSelectableMDOListItem.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the ListItem\r\n\r\n\\return String"},
{text: "NSSelectableMDOListItem.GetStyleHint", help: "<b>String GetStyleHint()<\/b>\n\nStyle hint indicating, information such as background color etc. Custom field.\r\n\r\n\\return String"},
{text: "NSSelectableMDOListItem.GetToolTip", help: "<b>String GetToolTip()<\/b>\n\nThe tooltip of the ListItem\r\n\r\n\\return String"},
{text: "NSSelectableMDOListItem.GetType", help: "<b>String GetType()<\/b>\n\nThe type of the ListItem. Custom field.\r\n\r\n\\return String"},
{text: "NSSelectableMDOListItem.SetChildItems", help: "<b>Void SetChildItems(NSSelectableMDOListItem[] p_0)<\/b>\n\nThe child items of the SelectableMDOListItem\r\n\r\n\\param p_0 ChildItems: SelectableMDOListItemArray\r\n\\return SelectableMDOListItemArray"},
{text: "NSSelectableMDOListItem.SetColorBlock", help: "<b>Void SetColorBlock(Integer p_0)<\/b>\n\nThe color indicator of the ListItem color block\r\n\r\n\\param p_0 ColorBlock: Integer\r\n\\return Integer"},
{text: "NSSelectableMDOListItem.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nThe deleted status of the ListItem\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSSelectableMDOListItem.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\nExtra information added to the ListItem. Could be information such as sort order etc or other meta data. Custom field.\r\n\r\n\\param p_0 ExtraInfo: String\r\n\\return String"},
{text: "NSSelectableMDOListItem.SetHidden", help: "<b>Void SetHidden(Bool p_0)<\/b>\n\nTrue if the ListItem is hidden\r\n\r\n\\param p_0 Hidden: Bool\r\n\\return Bool"},
{text: "NSSelectableMDOListItem.SetIconHint", help: "<b>Void SetIconHint(String p_0)<\/b>\n\nThe Icon hint of the ListItem. Custom field.\r\n\r\n\\param p_0 IconHint: String\r\n\\return String"},
{text: "NSSelectableMDOListItem.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nThe Id of the ListItem\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSSelectableMDOListItem.SetLastChanged", help: "<b>Void SetLastChanged(DateTime p_0)<\/b>\n\nTime of last change.\r\n\r\n\\param p_0 LastChanged: DateTime\r\n\\return DateTime"},
{text: "NSSelectableMDOListItem.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the ListItem\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSSelectableMDOListItem.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nThe rank of the ListItem\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSSelectableMDOListItem.SetSelected", help: "<b>Void SetSelected(Bool p_0)<\/b>\n\nTrue if the ListItem is selected\r\n\r\n\\param p_0 Selected: Bool\r\n\\return Bool"},
{text: "NSSelectableMDOListItem.SetStyleHint", help: "<b>Void SetStyleHint(String p_0)<\/b>\n\nStyle hint indicating, information such as background color etc. Custom field.\r\n\r\n\\param p_0 StyleHint: String\r\n\\return String"},
{text: "NSSelectableMDOListItem.SetToolTip", help: "<b>Void SetToolTip(String p_0)<\/b>\n\nThe tooltip of the ListItem\r\n\r\n\\param p_0 ToolTip: String\r\n\\return String"},
{text: "NSSelectableMDOListItem.SetType", help: "<b>Void SetType(String p_0)<\/b>\n\nThe type of the ListItem. Custom field.\r\n\r\n\\param p_0 Type: String\r\n\\return String"},
{text: "Void.NSSelectionAgent", help: "<b>NSSelectionAgent<\/b>\n\n"},
{text: "NSSelectionAgent.ExportSelectionMembers", help: "<b>Byte[] ExportSelectionMembers(Integer p_0, String p_1, Bool p_2)<\/b>\n\nExportSelectionMembers will generate a string that is the result of substituting the template variables with values from selectionmembers.\r\n\r\n\\param p_0 selectionId: The id of the selection to generate the exported file.\r\n\\param p_1 templateName: The templateName parameter is the relative path of a .sxf file template. The .sxf files can be found in \\template or in the user folder of the so archive.\r\n\\param p_2 useContacts: If the selection contains other members than contacts, setting this to true will export the contact archive of the selection.\r\n\\return Returns a unicode byte array with the file to export to the user."},
{text: "NSSelectionAgent.AddContactSelectionMembersFromSearch", help: "<b>Integer AddContactSelectionMembersFromSearch(Integer p_0, String p_1)<\/b>\n\nAdds members to the selection from the search result.\r\n\r\n\\param p_0 selectionId: The id of the selection to add members\r\n\\param p_1 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\return Number of members added\r\n"},
{text: "NSSelectionAgent.AddSelectionMembers", help: "<b>Integer AddSelectionMembers(Integer p_0, Integer[] p_1)<\/b>\n\nAdd selection members to a static selection of type others than contacts.\r\n\r\n\\param p_0 selectionId: The selection id to add the members to.\r\n\\param p_1 ids: Collection of ids to add to the selection.\r\n\\return Returns number of members added to the selection.\r\n"},
{text: "NSSelectionAgent.AddSelectionMembersFromSearch", help: "<b>Integer AddSelectionMembersFromSearch(Integer p_0, String p_1)<\/b>\n\nRemoves members from the selection using the search result.\r\n\r\n\\param p_0 selectionId: The id of the selection to add members\r\n\\param p_1 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search\r\n\\return Number of members added.\r\n"},
{text: "NSSelectionAgent.CreateNewEntry", help: "<b>Integer CreateNewEntry(NSDuplicateEntry p_0)<\/b>\n\nCreates a new selection based on external duplicate\r\n\r\n\\param p_0 duplicate: The duplicate to create a new entry based upon\r\n\\return The database identity of the newly created entry\r\n"},
{text: "NSSelectionAgent.RemoveContactSelectionMembersFromSearch", help: "<b>Integer RemoveContactSelectionMembersFromSearch(Integer p_0, String p_1)<\/b>\n\nRemoves members from the selection using the search result.\r\n\r\n\\param p_0 selectionId: The id of the selection to remove members.\r\n\\param p_1 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search.\r\n\\return Number of members removed\r\n"},
{text: "NSSelectionAgent.RemoveSelectionMembersFromSearch", help: "<b>Integer RemoveSelectionMembersFromSearch(Integer p_0, String p_1)<\/b>\n\nRemoves members from the selection using the search result.\r\n\r\n\\param p_0 selectionId: The id of the selection to remove members.\r\n\\param p_1 storageKey: Storage key to be interpreted by the restriction storage provider, when it fetches criteria for the search.\r\n\\return Number of members removed\r\n"},
{text: "NSSelectionAgent.GetParentCombinedSelections", help: "<b>Integer[] GetParentCombinedSelections(Integer p_0)<\/b>\n\nGet a list of all selection ids where the given selection is used to create a combined selection.\r\n\r\n\\param p_0 selectionId: The selectionId to query for.\r\n\\return Array of selectionIds.\r\n"},
{text: "NSSelectionAgent.GetDuplicates", help: "<b>NSDuplicateEntry[] GetDuplicates(String p_0)<\/b>\n\nGet duplicates(exact or similar in the database) based on the name\r\n\r\n\\param p_0 name: Name used for lookup\r\n\\return Any records matching the specified name\r\n"},
{text: "NSSelectionAgent.GetDuplicateRules", help: "<b>NSDuplicateRule[] GetDuplicateRules()<\/b>\n\nRetrieve all available duplicate rules for selection\r\n\r\n\\return All available duplicate rules\r\n"},
{text: "NSSelectionAgent.CreateDefaultMailMergeSettings", help: "<b>NSMailMergeSettings CreateDefaultMailMergeSettings()<\/b>\n\nLoading default values into a new MailMergeSettings.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New MailMergeSettings with default values\r\n"},
{text: "NSSelectionAgent.CreateDefaultMailMergeTask", help: "<b>NSMailMergeTask CreateDefaultMailMergeTask()<\/b>\n\nLoading default values into a new MailMergeTask.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New MailMergeTask with default values\r\n"},
{text: "NSSelectionAgent.GetRecipientStatistics", help: "<b>NSRecipientStatistics GetRecipientStatistics(Integer p_0)<\/b>\n\nReturns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses.\r\n\r\n\\param p_0 selectionId: The id of the selection to get the statistics for.\r\n\\return Returns a RecipientStatistics object.\r\n"},
{text: "NSSelectionAgent.GetRecipientStatisticsFromContactPersonIds", help: "<b>NSRecipientStatistics GetRecipientStatisticsFromContactPersonIds(NSContactPersonId[] p_0)<\/b>\n\nReturns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses based on contact and persons in a collection of ContactPersonId.\r\n\r\n\\param p_0 contactPersonIds: A collection of ContactPersonId to get the statistics for.\r\n\\return Returns a RecipientStatistics object.\r\n"},
{text: "NSSelectionAgent.GetRecipientStatisticsFromProjectMembers", help: "<b>NSRecipientStatistics GetRecipientStatisticsFromProjectMembers(Integer p_0)<\/b>\n\nReturns a RecipientStatistics object with a count of addresses, emailaddresses and emailaddresses based on members in a project.\r\n\r\n\\param p_0 projectId: The id of the project to get the member statistics for.\r\n\\return Returns a RecipientStatistics object.\r\n"},
{text: "NSSelectionAgent.CreateContactSelectionFromSelection", help: "<b>NSSelectionEntity CreateContactSelectionFromSelection(Integer p_0, String p_1, Integer p_2, Bool p_3)<\/b>\n\nCreates a new selection based on selection members from an existing selection.\r\n\r\n\\param p_0 selectionId: The id of the selection to copy members from.\r\n\\param p_1 name: The name of the new selection.\r\n\\param p_2 targetSelectionType: The type of ContactSelection to create. The type can be static or dynamic. If the original selection to copy from is static, the SelectionType can only be static. If the original selection is dynamic, both a static and dynamic selection can be created.\r\n\\param p_3 copyMembers: If true, the members from the original selection will be added to the newly created selection.\r\n\\return Returns the newly created SelectionEntity.\r\n"},
{text: "NSSelectionAgent.CreateContactSelectionFromShadowSelection", help: "<b>NSSelectionEntity CreateContactSelectionFromShadowSelection(Integer p_0, String p_1)<\/b>\n\nCreates a new contact selection based on contact selection members from an existing shadow sale, appointment, project or document selection. The new selection will always be static even if the original selection is dynamic.\r\n\r\n\\param p_0 selectionId: The id of the selection to copy members from.\r\n\\param p_1 name: The name of the new selection.\r\n\\return Returns the newly created SelectionEntity.\r\n"},
{text: "NSSelectionAgent.CreateDefaultSelectionEntity", help: "<b>NSSelectionEntity CreateDefaultSelectionEntity()<\/b>\n\nLoading default values into a new SelectionEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New SelectionEntity with default values\r\n"},
{text: "NSSelectionAgent.CreateSelectionFromSelection", help: "<b>NSSelectionEntity CreateSelectionFromSelection(Integer p_0, String p_1, Integer p_2, Bool p_3)<\/b>\n\nCreates a new selection based on selection members from an existing selection.\r\n\r\n\\param p_0 selectionId: The id of the selection to copy members from.\r\n\\param p_1 name: The name of the new selection.\r\n\\param p_2 targetSelectionType: The type of Selection to create. The type can be static or dynamic. If the original selection to copy from is static, the SelectionType can only be static. If the original selection is dynamic, both a static and dynamic selection can be created.\r\n\\param p_3 copyMembers: If true, the members from the original selection will be added to the newly created selection.\r\n\\return Returns the newly created SelectionEntity.\r\n"},
{text: "NSSelectionAgent.CreateTemporaryContactSelection", help: "<b>NSSelectionEntity CreateTemporaryContactSelection()<\/b>\n\nCreates a temporary selection.\r\n\r\n\\return Returns the newly created SelectionEntity.\r\n"},
{text: "NSSelectionAgent.CreateTemporaryContactSelectionFromContactPersonIds", help: "<b>NSSelectionEntity CreateTemporaryContactSelectionFromContactPersonIds(NSContactPersonId[] p_0)<\/b>\n\nCreates a temporary selection with members from a collection of ContactPerson id's.\r\n\r\n\\param p_0 contactPersonIds: A collection of ContactPersonId to copy into the temporary contact selection as members.\r\n\\return Returns the newly created SelectionEntity.\r\n"},
{text: "NSSelectionAgent.CreateTemporaryContactSelectionFromProjectMembers", help: "<b>NSSelectionEntity CreateTemporaryContactSelectionFromProjectMembers(Integer p_0)<\/b>\n\nCreates a temporary selection with members from an existing project.\r\n\r\n\\param p_0 projectId: The id of the project to add members from.\r\n\\return Returns the newly created SelectionEntity.\r\n"},
{text: "NSSelectionAgent.CreateTemporaryContactSelectionFromSelectionMemberIds", help: "<b>NSSelectionEntity CreateTemporaryContactSelectionFromSelectionMemberIds(Integer p_0, Integer[] p_1)<\/b>\n\nCreates a temporary selection with members from a collection of selectionmember id's.\r\n\r\n\\param p_0 selectionId: The selectionId the selectionmembers is a part of.\r\n\\param p_1 selectionMemberIds: A collection of int ids to copy into the temporary contact selection as members.\r\n\\return Returns the newly created SelectionEntity.\r\n"},
{text: "NSSelectionAgent.CreateTemporarySelectionFromIds", help: "<b>NSSelectionEntity CreateTemporarySelectionFromIds(Integer[] p_0, Integer p_1)<\/b>\n\nCreates a temporary selection with members from a collection of entity id's.\r\n\r\n\\param p_0 ids: A collection of Ids to copy into the temporary selection as members. The ids are primary keys of entities defined by the targetTableNumber parameter.\r\n\\param p_1 targetTableNumber: The type of selection to create.\r\n\\return Returns the newly created SelectionEntity.\r\n"},
{text: "NSSelectionAgent.GetSelectionEntity", help: "<b>NSSelectionEntity GetSelectionEntity(Integer p_0)<\/b>\n\nGets a SelectionEntity object.\r\n\r\n\\param p_0 selectionEntityId: The identifier of the SelectionEntity object\r\n\\return SelectionEntity\r\n"},
{text: "NSSelectionAgent.SaveSelectionEntity", help: "<b>NSSelectionEntity SaveSelectionEntity(NSSelectionEntity p_0)<\/b>\n\nUpdates the existing SelectionEntity or creates a new SelectionEntity if the id parameter is empty\r\n\r\n\\param p_0 selectionEntity: The SelectionEntity that is saved\r\n\\return New or updated SelectionEntity"},
{text: "NSSelectionAgent.AddContactSelectionMembers", help: "<b>Void AddContactSelectionMembers(Integer p_0, NSContactPersonId[] p_1)<\/b>\n\nAdds members to the selection as  specified in the collection of ContactPersonId.\r\n\r\n\\param p_0 selectionId: The id of the selection where to members will be added to.\r\n\\param p_1 contactPersonIds: A collection of ContactPersonId to add to the selection.\r\n"},
{text: "NSSelectionAgent.AddRemoveContactSelectionMemberInterests", help: "<b>Void AddRemoveContactSelectionMemberInterests(Integer p_0, Integer[] p_1, Integer[] p_2, Integer[] p_3, Integer[] p_4)<\/b>\n\nAdds or removes interests on companies and persons in a selection.\r\n\r\n\\param p_0 selectionId: The id of the selection to add or remove interests members from.\r\n\\param p_1 addCompanyInterests: Array of int containing the id's of the interests to add to the company.\r\n\\param p_2 removeCompanyInterests: Array of int containing the id's of the interests to remove from the company.\r\n\\param p_3 addContactInterests: Array of int containing the id's of the interests to add to the contact.\r\n\\param p_4 removeContactInterests: Array of int containing the id's of the interests to remove from the contact.\r\n"},
{text: "NSSelectionAgent.CopyContactSelectionMembers", help: "<b>Void CopyContactSelectionMembers(Integer p_0, Integer p_1)<\/b>\n\nCopy contact selection members from selection into an existing selection.\r\n\r\n\\param p_0 fromSelectionId: The id of the selection to copy members from.\r\n\\param p_1 toSelectionId: The id of the selection to copy members to.\r\n"},
{text: "NSSelectionAgent.CopySelectionMembers", help: "<b>Void CopySelectionMembers(Integer p_0, Integer p_1)<\/b>\n\nCopy selection members from selection into an existing selection.\r\n\r\n\\param p_0 fromSelectionId: The id of the selection to copy members from.\r\n\\param p_1 toSelectionId: The id of the selection to copy members to.\r\n"},
{text: "NSSelectionAgent.DeleteContacts", help: "<b>Void DeleteContacts(Integer p_0)<\/b>\n\nDeletes all contacts from a selection. If a contact does not have delete rights, it will be skipped.\r\n\r\n\\param p_0 selectionId: Id of the selection the delete operation will be performed.\r\n"},
{text: "NSSelectionAgent.DeleteEntities", help: "<b>Void DeleteEntities(Integer p_0)<\/b>\n\nDeletes all entities from a selection. If an entity does not have delete rights, it will be skipped.\r\n\r\n\\param p_0 selectionId: Id of the selection the delete operation will be performed.\r\n"},
{text: "NSSelectionAgent.DeleteSelectionEntity", help: "<b>Void DeleteSelectionEntity(Integer p_0)<\/b>\n\nDeletes the SelectionEntity\r\n\r\n\\param p_0 selectionEntityId: The identity of the SelectionEntity\r\n"},
{text: "NSSelectionAgent.EditContactSelectionMemberDetails", help: "<b>Void EditContactSelectionMemberDetails(Integer p_0, NSSelectionMemberEditValues p_1)<\/b>\n\nEdit company and contact details in a selection based on contents in selectionMemberEditValues.\r\n\r\n\\param p_0 selectionId: The id of the selection to edit members from.\r\n\\param p_1 selectionMemberEditValues: An object of <see cref=\"SelectionMemberEditValues\"\/> describing what should be changed for companys and contacts.\r\n"},
{text: "NSSelectionAgent.GenerateFollowUps", help: "<b>Void GenerateFollowUps(Integer p_0, NSAppointmentEntity p_1, Integer p_2, Bool p_3, Bool p_4)<\/b>\n\nGenerate follow-ups for members in the selection.\r\n\r\n\\param p_0 selectionId: The id of the selection to generate the follow-ups for.\r\n\\param p_1 appointmentEntity: The AppointmentEntity with information about the appointment.\r\n\\param p_2 associateId: The associate to save the appointments on. If saveOnContactOwner is true, this id will be ignored. Appointments wil be saved on current user if associateId = 0.\r\n\\param p_3 saveOnContactOwner: If true, the appointments will be saved on contact owner (Our contact). This parameter will override associateId if true.\r\n\\param p_4 uniqueContact: If true, only one appointment will be created for each contact.\r\n"},
{text: "NSSelectionAgent.RemoveContactSelectionMembers", help: "<b>Void RemoveContactSelectionMembers(Integer p_0, NSContactPersonId[] p_1)<\/b>\n\nRemoves members from the selection as  specified in the collection of ContactPersonId.\r\n\r\n\\param p_0 selectionId: The id of the selection where to members will be removed.\r\n\\param p_1 contactPersonIds: A collection of ContactPersonId to remove from the selection.\r\n"},
{text: "NSSelectionAgent.RemoveContactSelectionMembersFromIds", help: "<b>Void RemoveContactSelectionMembersFromIds(Integer p_0, Integer[] p_1)<\/b>\n\nRemoves members from the selection using a collection a selectionmember id's. Members can only be removed from single selection.\r\n\r\n\\param p_0 selectionId: The id of the selection where to members will be removed.\r\n\\param p_1 selectionMembersIds: An array of selectionmember id's to remove from the selection.\r\n"},
{text: "NSSelectionAgent.RemoveSelectionMembers", help: "<b>Void RemoveSelectionMembers(Integer p_0, Integer[] p_1)<\/b>\n\nRemoves members from the selection as  specified in the collection of entity ids. The ids can be a collection of sale ids, or other supported types.\r\n\r\n\\param p_0 selectionId: The id of the selection where to members will be removed.\r\n\\param p_1 ids: A collection of ids to remove from the selection. The ids can be a collection of sale ids, or other supported types.\r\n"},
{text: "NSSelectionAgent.SaveSelectionEntity", help: "<b>Void SaveSelectionEntity(NSSelectionEntity p_0)<\/b>\n\nUpdates the existing SelectionEntity or creates a new SelectionEntity if the id parameter is empty\r\n\r\n\\param p_0 selectionEntity: The SelectionEntity that is saved.\r\n\\return New or updated SelectionEntity\r\n"},
{text: "NSSelectionAgent.SetDuplicateRulesStatus", help: "<b>Void SetDuplicateRulesStatus(NSDuplicateRule[] p_0)<\/b>\n\nSet which duplicate rules should be active or not\r\n\r\n\\param p_0 rules: Duplicate rules to update active status for\r\n"},
{text: "NSSelectionAgent.StartMailMerge", help: "<b>Void StartMailMerge(NSMailMergeSettings p_0)<\/b>\n\nStart a mailmerge operation with specified settings.\r\n\r\n\\param p_0 settings: All settings needed to perform the mailmerge operation.\r\n"},
{text: "Void.NSSelectionCategory", help: "<b>NSSelectionCategory<\/b>\n\n"},
{text: "NSSelectionCategory.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSSelectionCategory.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSSelectionCategory.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSSelectionCategory.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSSelectionCategory.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSSelectionCategory.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSSelectionEntity", help: "<b>NSSelectionEntity<\/b>\n\n"},
{text: "NSSelectionEntity.GetCompanyUnique", help: "<b>Bool GetCompanyUnique()<\/b>\n\nOnly one person from a company may be selected as a member\r\n\r\n\\return Bool"},
{text: "NSSelectionEntity.GetCompleted", help: "<b>Bool GetCompleted()<\/b>\n\nThe Completed state.\r\n\r\n\\return Bool"},
{text: "NSSelectionEntity.GetCreatedDate", help: "<b>DateTime GetCreatedDate()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSSelectionEntity.GetUpdatedDate", help: "<b>DateTime GetUpdatedDate()<\/b>\n\nLast updated when\r\n\r\n\\return DateTime"},
{text: "NSSelectionEntity.GetGroupIdx", help: "<b>Integer GetGroupIdx()<\/b>\n\nOriginal primary user group of associate\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetIncludePerson", help: "<b>Integer GetIncludePerson()<\/b>\n\n0 = Include first person, 1 = Include all persons, 2 = Include no persons\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetLeftSelectionId", help: "<b>Integer GetLeftSelectionId()<\/b>\n\nLeftSelectionId is used in combination with RightSelectionId and CombinationType to define an union of two selections.\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetMemberCount", help: "<b>Integer GetMemberCount()<\/b>\n\nHow many selectionmembers (for progress bar)\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetPostitTextId", help: "<b>Integer GetPostitTextId()<\/b>\n\nPostit text\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetRightSelectionId", help: "<b>Integer GetRightSelectionId()<\/b>\n\nRightSelectionId  is used in combination with LeftSelectionId and CombinationType to define an union of two selections.\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetSelectionId", help: "<b>Integer GetSelectionId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetSelectionType", help: "<b>Integer GetSelectionType()<\/b>\n\n1 = static selection, 2 = temp selection\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetSelectionUnionType", help: "<b>Integer GetSelectionUnionType()<\/b>\n\n\\return Integer"},
{text: "NSSelectionEntity.GetSource", help: "<b>Integer GetSource()<\/b>\n\nHow did we get this selection? For future integration needs\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetTargetTableNumber", help: "<b>Integer GetTargetTableNumber()<\/b>\n\nTargetTableNumber defines the type of selection members this selection contains.\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetTextId", help: "<b>Integer GetTextId()<\/b>\n\nDescription text\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetUpdatedCount", help: "<b>Integer GetUpdatedCount()<\/b>\n\nNumber of updates made to this record\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetVisibility", help: "<b>Integer GetVisibility()<\/b>\n\nObsolete, but still maintained denormalization of visiblefor\r\n\r\n\\return Integer"},
{text: "NSSelectionEntity.GetAssociate", help: "<b>NSAssociate GetAssociate()<\/b>\n\n\\return Associate"},
{text: "NSSelectionEntity.GetCreatedBy", help: "<b>NSAssociate GetCreatedBy()<\/b>\n\n\\return Associate"},
{text: "NSSelectionEntity.GetUpdatedBy", help: "<b>NSAssociate GetUpdatedBy()<\/b>\n\n\\return Associate"},
{text: "NSSelectionEntity.GetSelectionCategory", help: "<b>NSSelectionCategory GetSelectionCategory()<\/b>\n\n\\return SelectionCategory"},
{text: "NSSelectionEntity.GetDescription", help: "<b>String GetDescription()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSSelectionEntity.GetName", help: "<b>String GetName()<\/b>\n\nName, freetext indexed\r\n\r\n\\return String"},
{text: "NSSelectionEntity.GetPostit", help: "<b>String GetPostit()<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\return String"},
{text: "NSSelectionEntity.GetSoundEx", help: "<b>String GetSoundEx()<\/b>\n\nWhat the name sounds like, for duplicate detection\r\n\r\n\\return String"},
{text: "NSSelectionEntity.GetTargetTableName", help: "<b>String GetTargetTableName()<\/b>\n\nTargetTableName contains the name of the table in lowercase.\r\n\r\n\\return String"},
{text: "NSSelectionEntity.GetVisibleFor", help: "<b>VisibleFor[] GetVisibleFor()<\/b>\n\n\\return VisibleForArray"},
{text: "NSSelectionEntity.SetAssociate", help: "<b>Void SetAssociate(NSAssociate p_0)<\/b>\n\n\\param p_0 Associate: Associate\r\n\\return Associate"},
{text: "NSSelectionEntity.SetCompanyUnique", help: "<b>Void SetCompanyUnique(Bool p_0)<\/b>\n\nOnly one person from a company may be selected as a member\r\n\r\n\\param p_0 CompanyUnique: Bool\r\n\\return Bool"},
{text: "NSSelectionEntity.SetCompleted", help: "<b>Void SetCompleted(Bool p_0)<\/b>\n\nThe Completed state.\r\n\r\n\\param p_0 Completed: Bool\r\n\\return Bool"},
{text: "NSSelectionEntity.SetCreatedBy", help: "<b>Void SetCreatedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 CreatedBy: Associate\r\n\\return Associate"},
{text: "NSSelectionEntity.SetCreatedDate", help: "<b>Void SetCreatedDate(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 CreatedDate: DateTime\r\n\\return DateTime"},
{text: "NSSelectionEntity.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSSelectionEntity.SetGroupIdx", help: "<b>Void SetGroupIdx(Integer p_0)<\/b>\n\nOriginal primary user group of associate\r\n\r\n\\param p_0 GroupIdx: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetIncludePerson", help: "<b>Void SetIncludePerson(Integer p_0)<\/b>\n\n0 = Include first person, 1 = Include all persons, 2 = Include no persons\r\n\r\n\\param p_0 IncludePerson: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetLeftSelectionId", help: "<b>Void SetLeftSelectionId(Integer p_0)<\/b>\n\nLeftSelectionId is used in combination with RightSelectionId and CombinationType to define an union of two selections.\r\n\r\n\\param p_0 LeftSelectionId: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetMemberCount", help: "<b>Void SetMemberCount(Integer p_0)<\/b>\n\nHow many selectionmembers (for progress bar)\r\n\r\n\\param p_0 MemberCount: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName, freetext indexed\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSSelectionEntity.SetPostit", help: "<b>Void SetPostit(String p_0)<\/b>\n\nThe actual text, max 2047 significant characters even though it is stored as a larger data type on some databases\r\n\r\n\\param p_0 Postit: String\r\n\\return String"},
{text: "NSSelectionEntity.SetPostitTextId", help: "<b>Void SetPostitTextId(Integer p_0)<\/b>\n\nPostit text\r\n\r\n\\param p_0 PostitTextId: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetRightSelectionId", help: "<b>Void SetRightSelectionId(Integer p_0)<\/b>\n\nRightSelectionId  is used in combination with LeftSelectionId and CombinationType to define an union of two selections.\r\n\r\n\\param p_0 RightSelectionId: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetSelectionCategory", help: "<b>Void SetSelectionCategory(NSSelectionCategory p_0)<\/b>\n\n\\param p_0 SelectionCategory: SelectionCategory\r\n\\return SelectionCategory"},
{text: "NSSelectionEntity.SetSelectionId", help: "<b>Void SetSelectionId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SelectionId: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetSelectionType", help: "<b>Void SetSelectionType(Integer p_0)<\/b>\n\n1 = static selection, 2 = temp selection\r\n\r\n\\param p_0 SelectionType: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetSelectionUnionType", help: "<b>Void SetSelectionUnionType(Integer p_0)<\/b>\n\n\\param p_0 SelectionUnionType: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetSoundEx", help: "<b>Void SetSoundEx(String p_0)<\/b>\n\nWhat the name sounds like, for duplicate detection\r\n\r\n\\param p_0 SoundEx: String\r\n\\return String"},
{text: "NSSelectionEntity.SetSource", help: "<b>Void SetSource(Integer p_0)<\/b>\n\nHow did we get this selection? For future integration needs\r\n\r\n\\param p_0 Source: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetTargetTableName", help: "<b>Void SetTargetTableName(String p_0)<\/b>\n\nTargetTableName contains the name of the table in lowercase.\r\n\r\n\\param p_0 TargetTableName: String\r\n\\return String"},
{text: "NSSelectionEntity.SetTargetTableNumber", help: "<b>Void SetTargetTableNumber(Integer p_0)<\/b>\n\nTargetTableNumber defines the type of selection members this selection contains.\r\n\r\n\\param p_0 TargetTableNumber: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetTextId", help: "<b>Void SetTextId(Integer p_0)<\/b>\n\nDescription text\r\n\r\n\\param p_0 TextId: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetUpdatedBy", help: "<b>Void SetUpdatedBy(NSAssociate p_0)<\/b>\n\n\\param p_0 UpdatedBy: Associate\r\n\\return Associate"},
{text: "NSSelectionEntity.SetUpdatedCount", help: "<b>Void SetUpdatedCount(Integer p_0)<\/b>\n\nNumber of updates made to this record\r\n\r\n\\param p_0 UpdatedCount: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetUpdatedDate", help: "<b>Void SetUpdatedDate(DateTime p_0)<\/b>\n\nLast updated when\r\n\r\n\\param p_0 UpdatedDate: DateTime\r\n\\return DateTime"},
{text: "NSSelectionEntity.SetVisibility", help: "<b>Void SetVisibility(Integer p_0)<\/b>\n\nObsolete, but still maintained denormalization of visiblefor\r\n\r\n\\param p_0 Visibility: Integer\r\n\\return Integer"},
{text: "NSSelectionEntity.SetVisibleFor", help: "<b>Void SetVisibleFor(VisibleFor[] p_0)<\/b>\n\n\\param p_0 fields: VisibleForArray\r\n\\return Void"},
{text: "Void.NSSelectionMemberEditValues", help: "<b>NSSelectionMemberEditValues<\/b>\n\nCarrier object for SelectionMemberEditValues.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyBusiness", help: "<b>Bool GetChangeCompanyBusiness()<\/b>\n\nIf true, the business of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyCategory", help: "<b>Bool GetChangeCompanyCategory()<\/b>\n\nIf true, the category of the company will be changed.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyCode", help: "<b>Bool GetChangeCompanyCode()<\/b>\n\nIf true, the code of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyCountry", help: "<b>Bool GetChangeCompanyCountry()<\/b>\n\nIf true, the country of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyDepartment", help: "<b>Bool GetChangeCompanyDepartment()<\/b>\n\nIf true, the department of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyName", help: "<b>Bool GetChangeCompanyName()<\/b>\n\nIf true, the name of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyNumber", help: "<b>Bool GetChangeCompanyNumber()<\/b>\n\nIf true, the number of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyOrgNr", help: "<b>Bool GetChangeCompanyOrgNr()<\/b>\n\nIf true, the VAT number  of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeCompanyOurContact", help: "<b>Bool GetChangeCompanyOurContact()<\/b>\n\nIf true, the our contact of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeContactJobTitle", help: "<b>Bool GetChangeContactJobTitle()<\/b>\n\nIf true, the VAT number  of the contact will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetChangeContactPosition", help: "<b>Bool GetChangeContactPosition()<\/b>\n\nIf true, the position of the contact will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyBusiness", help: "<b>Integer GetCompanyBusiness()<\/b>\n\nContains new value for company business.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyCategory", help: "<b>Integer GetCompanyCategory()<\/b>\n\nContains new value for the company category.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyCountry", help: "<b>Integer GetCompanyCountry()<\/b>\n\nContains new value for the company country.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyOurContact", help: "<b>Integer GetCompanyOurContact()<\/b>\n\nContains new value for company, our contact.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetContactPosition", help: "<b>Integer GetContactPosition()<\/b>\n\nContains new value for the contact position.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyCode", help: "<b>String GetCompanyCode()<\/b>\n\nContains new value for the company code.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyDepartment", help: "<b>String GetCompanyDepartment()<\/b>\n\nContains new value for the company department.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyName", help: "<b>String GetCompanyName()<\/b>\n\nContains new value for company name.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyNumber", help: "<b>String GetCompanyNumber()<\/b>\n\nContains new value for the company number.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetCompanyOrgNr", help: "<b>String GetCompanyOrgNr()<\/b>\n\nContains new value for the company VAT number.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.GetContactJobTitle", help: "<b>String GetContactJobTitle()<\/b>\n\nContains new value for the contact VAT number.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyBusiness", help: "<b>Void SetChangeCompanyBusiness(Bool p_0)<\/b>\n\nIf true, the business of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyCategory", help: "<b>Void SetChangeCompanyCategory(Bool p_0)<\/b>\n\nIf true, the category of the company will be changed.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyCode", help: "<b>Void SetChangeCompanyCode(Bool p_0)<\/b>\n\nIf true, the code of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyCountry", help: "<b>Void SetChangeCompanyCountry(Bool p_0)<\/b>\n\nIf true, the country of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyDepartment", help: "<b>Void SetChangeCompanyDepartment(Bool p_0)<\/b>\n\nIf true, the department of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyName", help: "<b>Void SetChangeCompanyName(Bool p_0)<\/b>\n\nIf true, the name of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyNumber", help: "<b>Void SetChangeCompanyNumber(Bool p_0)<\/b>\n\nIf true, the number of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyOrgNr", help: "<b>Void SetChangeCompanyOrgNr(Bool p_0)<\/b>\n\nIf true, the VAT number  of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeCompanyOurContact", help: "<b>Void SetChangeCompanyOurContact(Bool p_0)<\/b>\n\nIf true, the our contact of the company will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeContactJobTitle", help: "<b>Void SetChangeContactJobTitle(Bool p_0)<\/b>\n\nIf true, the VAT number  of the contact will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetChangeContactPosition", help: "<b>Void SetChangeContactPosition(Bool p_0)<\/b>\n\nIf true, the position of the contact will change.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyBusiness", help: "<b>Void SetCompanyBusiness(Integer p_0)<\/b>\n\nContains new value for company business.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyCategory", help: "<b>Void SetCompanyCategory(Integer p_0)<\/b>\n\nContains new value for the company category.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyCode", help: "<b>Void SetCompanyCode(String p_0)<\/b>\n\nContains new value for the company code.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyCountry", help: "<b>Void SetCompanyCountry(Integer p_0)<\/b>\n\nContains new value for the company country.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyDepartment", help: "<b>Void SetCompanyDepartment(String p_0)<\/b>\n\nContains new value for the company department.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyName", help: "<b>Void SetCompanyName(String p_0)<\/b>\n\nContains new value for company name.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyNumber", help: "<b>Void SetCompanyNumber(String p_0)<\/b>\n\nContains new value for the company number.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyOrgNr", help: "<b>Void SetCompanyOrgNr(String p_0)<\/b>\n\nContains new value for the company VAT number.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetCompanyOurContact", help: "<b>Void SetCompanyOurContact(Integer p_0)<\/b>\n\nContains new value for company, our contact.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetContactJobTitle", help: "<b>Void SetContactJobTitle(String p_0)<\/b>\n\nContains new value for the contact VAT number.\r\n\r\n"},
{text: "NSSelectionMemberEditValues.SetContactPosition", help: "<b>Void SetContactPosition(Integer p_0)<\/b>\n\nContains new value for the contact position.\r\n\r\n"},
{text: "Void.NSSentryAgent", help: "<b>NSSentryAgent<\/b>\n\n"},
{text: "NSSentryAgent.CanCreateAppointmentInAllDiaries", help: "<b>Bool CanCreateAppointmentInAllDiaries()<\/b>\n\nCanCreateAppointmentInAllDiaries will check if the current associate can create appointments in diaries belonging all other associates. CanCreateAppointmentInAssociateDiaries will only check against associates that are diary owners.\r\n\r\n\\return Returns true if the current associate can create appointments in the diary of all the other associates, otherwise false.\r\n"},
{text: "NSSentryAgent.CanCreateAppointmentInAssociateDiaries", help: "<b>Bool CanCreateAppointmentInAssociateDiaries(Integer[] p_0)<\/b>\n\nCanCreateAppointmentInAssociateDiaries will check if the current associate can create appointments in diaries belonging to the associates listed in associateIds. CanCreateAppointmentInAssociateDiaries will only check against associates that are diary owners. If none of the associates listed in the associateIds parameter is a diary owner, the method will return true.\r\n\r\n\\param p_0 associateIds: Array of associate ids to check.\r\n\\return Returns true if the current associate can create appointments in the diary of all the other associates, otherwise false.\r\n"},
{text: "NSSentryAgent.HasFunctionRight", help: "<b>Bool HasFunctionRight(String p_0)<\/b>\n\nGet a boolean value indicating if the current user has the functional right.\r\n\r\n\\param p_0 functionRight: Function right to check.\r\n"},
{text: "NSSentryAgent.GetNewTableRight", help: "<b>NSTableRight GetNewTableRight(String p_0)<\/b>\n\nReturns a TableRight for a new row based on tableName parameter.\r\n\r\n\\param p_0 tableName: Name of the table to get the TableRights from\r\n\\return The TableRight\r\n"},
{text: "NSSentryAgent.GetTableRightByOwnership", help: "<b>NSTableRight GetTableRightByOwnership(String p_0, Integer p_1, Integer p_2)<\/b>\n\nReturn the TableRight from the relationship between the current user and the given user and group.\r\n\r\n\\param p_0 tableName: Name of the table to get the TableRights from.\r\n\\param p_1 contactGroupId: The user-group that the associate id is part of.\r\n\\param p_2 contactAssociateId: The associate id of the owner of the record\r\n\\return The TableRight\r\n"},
{text: "NSSentryAgent.GetFunctionRights", help: "<b>String[] GetFunctionRights()<\/b>\n\nGet a string array of all functions rights for the role of the current associate.\r\n\r\n\\return String array.\n\t\/\/\/"},
{text: "Void.NSSignedPublicKey", help: "<b>NSSignedPublicKey<\/b>\n\nRepresents all licenses for this owner at this site."},
{text: "NSSignedPublicKey.GetExpiryDate", help: "<b>DateTime GetExpiryDate()<\/b>\n\nDate when the signature expires. No Timezone.\r\n\r\n\\return DateTime"},
{text: "NSSignedPublicKey.GetSignDate", help: "<b>DateTime GetSignDate()<\/b>\n\nDate when the the public key was signed. No Timezone.\r\n\r\n\\return DateTime"},
{text: "NSSignedPublicKey.GetKey", help: "<b>NSDSAParameters GetKey()<\/b>\n\nPublic key held by module owner.\r\n\r\n\\return DSAParameters"},
{text: "NSSignedPublicKey.GetOwnerName", help: "<b>String GetOwnerName()<\/b>\n\nThe name of the module owner, not visible in GUI but used in the code. OwnerName SUPEROFFICE is reserved and may NEVER be used by partners. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\r\n\r\n\\return String"},
{text: "NSSignedPublicKey.GetSignature", help: "<b>String GetSignature()<\/b>\n\nSignature - Base64 encoded value\r\n\r\n\\return String"},
{text: "NSSignedPublicKey.SetExpiryDate", help: "<b>Void SetExpiryDate(DateTime p_0)<\/b>\n\nDate when the signature expires. No Timezone.\r\n\r\n\\param p_0 ExpiryDate: DateTime\r\n\\return DateTime"},
{text: "NSSignedPublicKey.SetKey", help: "<b>Void SetKey(NSDSAParameters p_0)<\/b>\n\nPublic key held by module owner.\r\n\r\n\\param p_0 Key: DSAParameters\r\n\\return DSAParameters"},
{text: "NSSignedPublicKey.SetOwnerName", help: "<b>Void SetOwnerName(String p_0)<\/b>\n\nThe name of the module owner, not visible in GUI but used in the code. OwnerName SUPEROFFICE is reserved and may NEVER be used by partners. This must be in UPPER CASE and only contain A-Z and 0-9. NO EXTENDED CHARACTERS please.\r\n\r\n\\param p_0 OwnerName: String\r\n\\return String"},
{text: "NSSignedPublicKey.SetSignature", help: "<b>Void SetSignature(String p_0)<\/b>\n\nSignature - Base64 encoded value\r\n\r\n\\param p_0 Signature: String\r\n\\return String"},
{text: "NSSignedPublicKey.SetSignDate", help: "<b>Void SetSignDate(DateTime p_0)<\/b>\n\nDate when the the public key was signed. No Timezone.\r\n\r\n\\param p_0 SignDate: DateTime\r\n\\return DateTime"},
{text: "Void.NSSoPrincipalCarrier", help: "<b>NSSoPrincipalCarrier<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetIsPerson", help: "<b>Bool GetIsPerson()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetBusinessId", help: "<b>Integer GetBusinessId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetCategoryId", help: "<b>Integer GetCategoryId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetContactOwner", help: "<b>Integer GetContactOwner()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetCountryId", help: "<b>Integer GetCountryId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetEjAccessLevel", help: "<b>Integer GetEjAccessLevel()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetEjUserId", help: "<b>Integer GetEjUserId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetEjUserStatus", help: "<b>Integer GetEjUserStatus()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetGroupId", help: "<b>Integer GetGroupId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetHomeCountryId", help: "<b>Integer GetHomeCountryId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetRoleId", help: "<b>Integer GetRoleId()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetRoleType", help: "<b>Integer GetRoleType()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetUserType", help: "<b>Integer GetUserType()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetSecondaryGroups", help: "<b>Integer[] GetSecondaryGroups()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetLicenses", help: "<b>NSGrantedModuleLicense[] GetLicenses()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetProvidedCredentials", help: "<b>NSProvidedCredential[] GetProvidedCredentials()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetAssociate", help: "<b>String GetAssociate()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetDatabaseContextIdentifier", help: "<b>String GetDatabaseContextIdentifier()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetEMailAddress", help: "<b>String GetEMailAddress()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetFullName", help: "<b>String GetFullName()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetRoleDescription", help: "<b>String GetRoleDescription()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetRoleName", help: "<b>String GetRoleName()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.GetFunctionRights", help: "<b>String[] GetFunctionRights()<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetAssociate", help: "<b>Void SetAssociate(String p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetBusinessId", help: "<b>Void SetBusinessId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetCategoryId", help: "<b>Void SetCategoryId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetContactOwner", help: "<b>Void SetContactOwner(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetCountryId", help: "<b>Void SetCountryId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetDatabaseContextIdentifier", help: "<b>Void SetDatabaseContextIdentifier(String p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetEjAccessLevel", help: "<b>Void SetEjAccessLevel(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetEjUserId", help: "<b>Void SetEjUserId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetEjUserStatus", help: "<b>Void SetEjUserStatus(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetEMailAddress", help: "<b>Void SetEMailAddress(String p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetFullName", help: "<b>Void SetFullName(String p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetFunctionRights", help: "<b>Void SetFunctionRights(String[] p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetGroupId", help: "<b>Void SetGroupId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetHomeCountryId", help: "<b>Void SetHomeCountryId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetIsPerson", help: "<b>Void SetIsPerson(Bool p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetLicenses", help: "<b>Void SetLicenses(NSGrantedModuleLicense[] p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetProvidedCredentials", help: "<b>Void SetProvidedCredentials(NSProvidedCredential[] p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetRoleDescription", help: "<b>Void SetRoleDescription(String p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetRoleId", help: "<b>Void SetRoleId(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetRoleName", help: "<b>Void SetRoleName(String p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetRoleType", help: "<b>Void SetRoleType(Integer p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetSecondaryGroups", help: "<b>Void SetSecondaryGroups(Integer[] p_0)<\/b>\n\n"},
{text: "NSSoPrincipalCarrier.SetUserType", help: "<b>Void SetUserType(Integer p_0)<\/b>\n\n"},
{text: "Void.NSSoSystemInfoCarrier", help: "<b>NSSoSystemInfoCarrier<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetIsOnTravel", help: "<b>Bool GetIsOnTravel()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetIsSatellite", help: "<b>Bool GetIsSatellite()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetIsUnicode", help: "<b>Bool GetIsUnicode()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetAccumulatedNextCheckDate", help: "<b>DateTime GetAccumulatedNextCheckDate()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetBuildType", help: "<b>Integer GetBuildType()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetCompanyId", help: "<b>Integer GetCompanyId()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetDatabaseVersion", help: "<b>Integer GetDatabaseVersion()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetDaysUntilNetServerExpiry", help: "<b>Integer GetDaysUntilNetServerExpiry()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetLicense", help: "<b>NSLicenseInfo GetLicense()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetAssemblyVersion", help: "<b>String GetAssemblyVersion()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetBranchName", help: "<b>String GetBranchName()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetBuildLabel", help: "<b>String GetBuildLabel()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetCompanyName", help: "<b>String GetCompanyName()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetDatabaseMinor", help: "<b>String GetDatabaseMinor()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetDatabaseName", help: "<b>String GetDatabaseName()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetDatabaseType", help: "<b>String GetDatabaseType()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetDescription", help: "<b>String GetDescription()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetFileVersion", help: "<b>String GetFileVersion()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetWarningEnglish", help: "<b>String GetWarningEnglish()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.GetWarningResource", help: "<b>String GetWarningResource()<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetAccumulatedNextCheckDate", help: "<b>Void SetAccumulatedNextCheckDate(DateTime p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetAssemblyVersion", help: "<b>Void SetAssemblyVersion(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetBranchName", help: "<b>Void SetBranchName(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetBuildLabel", help: "<b>Void SetBuildLabel(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetBuildType", help: "<b>Void SetBuildType(Integer p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetCompanyId", help: "<b>Void SetCompanyId(Integer p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetCompanyName", help: "<b>Void SetCompanyName(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetDatabaseMinor", help: "<b>Void SetDatabaseMinor(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetDatabaseName", help: "<b>Void SetDatabaseName(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetDatabaseType", help: "<b>Void SetDatabaseType(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetDatabaseVersion", help: "<b>Void SetDatabaseVersion(Integer p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetDaysUntilNetServerExpiry", help: "<b>Void SetDaysUntilNetServerExpiry(Integer p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetFileVersion", help: "<b>Void SetFileVersion(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetIsOnTravel", help: "<b>Void SetIsOnTravel(Bool p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetIsSatellite", help: "<b>Void SetIsSatellite(Bool p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetIsUnicode", help: "<b>Void SetIsUnicode(Bool p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetLicense", help: "<b>Void SetLicense(NSLicenseInfo p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetWarningEnglish", help: "<b>Void SetWarningEnglish(String p_0)<\/b>\n\n"},
{text: "NSSoSystemInfoCarrier.SetWarningResource", help: "<b>Void SetWarningResource(String p_0)<\/b>\n\n"},
{text: "Void.NSSource", help: "<b>NSSource<\/b>\n\nSource of a sale"},
{text: "NSSource.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSSource.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSSource.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSSource.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSSource.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSSource.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSStatisticsDataSet", help: "<b>NSStatisticsDataSet<\/b>\n\n"},
{text: "NSStatisticsDataSet.GetValues", help: "<b>NSStatisticsDataValue[] GetValues()<\/b>\n\nValues in this set\r\n\r\n\\return StatisticsDataValueArray"},
{text: "NSStatisticsDataSet.GetDescription", help: "<b>String GetDescription()<\/b>\n\nTooltip for data value\r\n\r\n\\return String"},
{text: "NSStatisticsDataSet.GetLabel", help: "<b>String GetLabel()<\/b>\n\nThe label for the data set\r\n\r\n\\return String"},
{text: "NSStatisticsDataSet.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nTooltip for data value\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSStatisticsDataSet.SetLabel", help: "<b>Void SetLabel(String p_0)<\/b>\n\nThe label for the data set\r\n\r\n\\param p_0 Label: String\r\n\\return String"},
{text: "NSStatisticsDataSet.SetValues", help: "<b>Void SetValues(NSStatisticsDataValue[] p_0)<\/b>\n\nValues in this set\r\n\r\n\\param p_0 Values: StatisticsDataValueArray\r\n\\return StatisticsDataValueArray"},
{text: "Void.NSStatisticsDataValue", help: "<b>NSStatisticsDataValue<\/b>\n\nThis class contains a single data value in a data set, used by CS for Status Screen reports"},
{text: "NSStatisticsDataValue.GetValue", help: "<b>Float GetValue()<\/b>\n\nThe value for the data value\r\n\r\n\\return Float"},
{text: "NSStatisticsDataValue.GetDescription", help: "<b>String GetDescription()<\/b>\n\nTooltip for data value\r\n\r\n\\return String"},
{text: "NSStatisticsDataValue.GetLabel", help: "<b>String GetLabel()<\/b>\n\nThe label for the data value\r\n\r\n\\return String"},
{text: "NSStatisticsDataValue.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nTooltip for data value\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSStatisticsDataValue.SetLabel", help: "<b>Void SetLabel(String p_0)<\/b>\n\nThe label for the data value\r\n\r\n\\param p_0 Label: String\r\n\\return String"},
{text: "NSStatisticsDataValue.SetValue", help: "<b>Void SetValue(Float p_0)<\/b>\n\nThe value for the data value\r\n\r\n\\param p_0 Value: Float\r\n\\return Float"},
{text: "Void.NSStatusMonitor", help: "<b>NSStatusMonitor<\/b>\n\nDefinition of all properties for a status monitor"},
{text: "NSStatusMonitor.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nDeleted flag, 1 if this record is deleted (never from the database)\r\n\r\n\\return Bool"},
{text: "NSStatusMonitor.GetIsVisual", help: "<b>Bool GetIsVisual()<\/b>\n\nShould the status be visualized (active) in the client\r\n\r\n\\return Bool"},
{text: "NSStatusMonitor.GetNeedsUpdate", help: "<b>Bool GetNeedsUpdate()<\/b>\n\nIs the definition dirty, ie., ALL values are invalid until a recalculation; this flag is set when the status DEFINITION is changed, as opposed to the flag on StatusValue\r\n\r\n\\return Bool"},
{text: "NSStatusMonitor.GetLastGenerated", help: "<b>DateTime GetLastGenerated()<\/b>\n\nWhen was this status last generated (i.e., statusValue rows created)\r\n\r\n\\return DateTime"},
{text: "NSStatusMonitor.GetDefaultTask", help: "<b>Integer GetDefaultTask()<\/b>\n\n\"Default task type for this status; the default task text is in the text table (since it can be long), and may contain template variables\"\r\n\r\n\\return Integer"},
{text: "NSStatusMonitor.GetNumMatches", help: "<b>Integer GetNumMatches()<\/b>\n\nNumber of targets that have this status, this should be the number of rows in StatusValue pointing to this definition, and that have isSignalled set to 1\r\n\r\n\\return Integer"},
{text: "NSStatusMonitor.GetNumNeedUpdate", help: "<b>Integer GetNumNeedUpdate()<\/b>\n\nNumber of targets that had this status, but have their needsUpdate bit set due to some change\r\n\r\n\\return Integer"},
{text: "NSStatusMonitor.GetOwnerTable", help: "<b>Integer GetOwnerTable()<\/b>\n\nId of table that owns the status monitor\r\n\r\n\\return Integer"},
{text: "NSStatusMonitor.GetPictureId", help: "<b>Integer GetPictureId()<\/b>\n\nId of BinaryObject row that contains image for status monitor\r\n\r\n\\return Integer"},
{text: "NSStatusMonitor.GetRank", help: "<b>Integer GetRank()<\/b>\n\nPriority rank, in case more than one status is signalled. Lowest wins\r\n\r\n\\return Integer"},
{text: "NSStatusMonitor.GetStatusMonitorId", help: "<b>Integer GetStatusMonitorId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSStatusMonitor.GetDefaultTaskText", help: "<b>String GetDefaultTaskText()<\/b>\n\nDefault task text for this status\r\n\r\n\\return String"},
{text: "NSStatusMonitor.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDescription of the status monitor\r\n\r\n\\return String"},
{text: "NSStatusMonitor.GetName", help: "<b>String GetName()<\/b>\n\nName of status monitor\r\n\r\n\\return String"},
{text: "NSStatusMonitor.SetDefaultTask", help: "<b>Void SetDefaultTask(Integer p_0)<\/b>\n\n\"Default task type for this status; the default task text is in the text table (since it can be long), and may contain template variables\"\r\n\r\n\\param p_0 DefaultTask: Integer\r\n\\return Integer"},
{text: "NSStatusMonitor.SetDefaultTaskText", help: "<b>Void SetDefaultTaskText(String p_0)<\/b>\n\nDefault task text for this status\r\n\r\n\\param p_0 DefaultTaskText: String\r\n\\return String"},
{text: "NSStatusMonitor.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nDeleted flag, 1 if this record is deleted (never from the database)\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSStatusMonitor.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDescription of the status monitor\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSStatusMonitor.SetIsVisual", help: "<b>Void SetIsVisual(Bool p_0)<\/b>\n\nShould the status be visualized (active) in the client\r\n\r\n\\param p_0 IsVisual: Bool\r\n\\return Bool"},
{text: "NSStatusMonitor.SetLastGenerated", help: "<b>Void SetLastGenerated(DateTime p_0)<\/b>\n\nWhen was this status last generated (i.e., statusValue rows created)\r\n\r\n\\param p_0 LastGenerated: DateTime\r\n\\return DateTime"},
{text: "NSStatusMonitor.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of status monitor\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSStatusMonitor.SetNeedsUpdate", help: "<b>Void SetNeedsUpdate(Bool p_0)<\/b>\n\nIs the definition dirty, ie., ALL values are invalid until a recalculation; this flag is set when the status DEFINITION is changed, as opposed to the flag on StatusValue\r\n\r\n\\param p_0 NeedsUpdate: Bool\r\n\\return Bool"},
{text: "NSStatusMonitor.SetNumMatches", help: "<b>Void SetNumMatches(Integer p_0)<\/b>\n\nNumber of targets that have this status, this should be the number of rows in StatusValue pointing to this definition, and that have isSignalled set to 1\r\n\r\n\\param p_0 NumMatches: Integer\r\n\\return Integer"},
{text: "NSStatusMonitor.SetNumNeedUpdate", help: "<b>Void SetNumNeedUpdate(Integer p_0)<\/b>\n\nNumber of targets that had this status, but have their needsUpdate bit set due to some change\r\n\r\n\\param p_0 NumNeedUpdate: Integer\r\n\\return Integer"},
{text: "NSStatusMonitor.SetOwnerTable", help: "<b>Void SetOwnerTable(Integer p_0)<\/b>\n\nId of table that owns the status monitor\r\n\r\n\\param p_0 OwnerTable: Integer\r\n\\return Integer"},
{text: "NSStatusMonitor.SetPictureId", help: "<b>Void SetPictureId(Integer p_0)<\/b>\n\nId of BinaryObject row that contains image for status monitor\r\n\r\n\\param p_0 PictureId: Integer\r\n\\return Integer"},
{text: "NSStatusMonitor.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nPriority rank, in case more than one status is signalled. Lowest wins\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSStatusMonitor.SetStatusMonitorId", help: "<b>Void SetStatusMonitorId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 StatusMonitorId: Integer\r\n\\return Integer"},
{text: "Void.NSStatusMonitorPeriods", help: "<b>NSStatusMonitorPeriods<\/b>\n\nDefinition of the three perionds for status monitors"},
{text: "NSStatusMonitorPeriods.GetPeriod1", help: "<b>Integer GetPeriod1()<\/b>\n\nDays in the first period\r\n\r\n\\return Integer"},
{text: "NSStatusMonitorPeriods.GetPeriod2", help: "<b>Integer GetPeriod2()<\/b>\n\nDays in the second period\r\n\r\n\\return Integer"},
{text: "NSStatusMonitorPeriods.GetPeriod3", help: "<b>Integer GetPeriod3()<\/b>\n\nDays in the third period\r\n\r\n\\return Integer"},
{text: "NSStatusMonitorPeriods.SetPeriod1", help: "<b>Void SetPeriod1(Integer p_0)<\/b>\n\nDays in the first period\r\n\r\n\\param p_0 Period1: Integer\r\n\\return Integer"},
{text: "NSStatusMonitorPeriods.SetPeriod2", help: "<b>Void SetPeriod2(Integer p_0)<\/b>\n\nDays in the second period\r\n\r\n\\param p_0 Period2: Integer\r\n\\return Integer"},
{text: "NSStatusMonitorPeriods.SetPeriod3", help: "<b>Void SetPeriod3(Integer p_0)<\/b>\n\nDays in the third period\r\n\r\n\\param p_0 Period3: Integer\r\n\\return Integer"},
{text: "Void.NSSTream", help: "<b>NSSTream<\/b>\n\n"},
{text: "Void.NSStream", help: "<b>NSStream<\/b>\n\n"},
{text: "NSSTream.GetStream", help: "<b>Byte[] GetStream()<\/b>\n\n"},
{text: "NSStream.GetStream", help: "<b>Byte[] GetStream()<\/b>\n\n"},
{text: "NSStream.SetStream", help: "<b>Void SetStream(Byte[] p_0)<\/b>\n\n"},
{text: "Void.NSSuggestedAppointment", help: "<b>NSSuggestedAppointment<\/b>\n\n"},
{text: "NSSuggestedAppointment.GetAutoSuggest", help: "<b>Integer GetAutoSuggest()<\/b>\n\nShould this appointment be auto-suggested\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetDaysFuture", help: "<b>Integer GetDaysFuture()<\/b>\n\nHow many days into the future the appointment should be scheduled\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetDeleted", help: "<b>Integer GetDeleted()<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetDuration", help: "<b>Integer GetDuration()<\/b>\n\nDuration in minutes of suggested appointment\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetProjectTypeStatusLinkId", help: "<b>Integer GetProjectTypeStatusLinkId()<\/b>\n\nLink to projectTypeStatusLink, the anchor for project guide items. Either this OR saleAnchorId should be set, not both at the same time.\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank, controls rank of non-instantiated items in Guide\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetRegisteredAssociateId", help: "<b>Integer GetRegisteredAssociateId()<\/b>\n\nRegistered by whom\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetSaleTypeStageLinkId", help: "<b>Integer GetSaleTypeStageLinkId()<\/b>\n\nLink to saleTypeStageLink, the anchor for sale guide items. Either this OR projectAnchorId should be set, not both at the same time.\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetSuggestedAppointmentId", help: "<b>Integer GetSuggestedAppointmentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetTaskId", help: "<b>Integer GetTaskId()<\/b>\n\nType of the suggested appointment\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointment.GetAssociate", help: "<b>NSAssociate GetAssociate()<\/b>\n\nThe owner of the suggested activity. Always the same as the sales owner.\r\n\r\n\\return Associate"},
{text: "NSSuggestedAppointment.GetName", help: "<b>String GetName()<\/b>\n\nItem name, visible in Guide\r\n\r\n\\return String"},
{text: "NSSuggestedAppointment.GetText", help: "<b>String GetText()<\/b>\n\nThe suggested text of the new appointment\r\n\r\n\\return String"},
{text: "NSSuggestedAppointment.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip \/ description\r\n\r\n\\return String"},
{text: "NSSuggestedAppointment.SetAssociate", help: "<b>Void SetAssociate(NSAssociate p_0)<\/b>\n\nThe owner of the suggested activity. Always the same as the sales owner.\r\n\r\n\\param p_0 Associate: Associate\r\n\\return Associate"},
{text: "NSSuggestedAppointment.SetAutoSuggest", help: "<b>Void SetAutoSuggest(Integer p_0)<\/b>\n\nShould this appointment be auto-suggested\r\n\r\n\\param p_0 AutoSuggest: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetDaysFuture", help: "<b>Void SetDaysFuture(Integer p_0)<\/b>\n\nHow many days into the future the appointment should be scheduled\r\n\r\n\\param p_0 DaysFuture: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetDeleted", help: "<b>Void SetDeleted(Integer p_0)<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\param p_0 Deleted: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetDuration", help: "<b>Void SetDuration(Integer p_0)<\/b>\n\nDuration in minutes of suggested appointment\r\n\r\n\\param p_0 Duration: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nItem name, visible in Guide\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSSuggestedAppointment.SetProjectTypeStatusLinkId", help: "<b>Void SetProjectTypeStatusLinkId(Integer p_0)<\/b>\n\nLink to projectTypeStatusLink, the anchor for project guide items. Either this OR saleAnchorId should be set, not both at the same time.\r\n\r\n\\param p_0 ProjectTypeStatusLinkId: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank, controls rank of non-instantiated items in Guide\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetRegisteredAssociateId", help: "<b>Void SetRegisteredAssociateId(Integer p_0)<\/b>\n\nRegistered by whom\r\n\r\n\\param p_0 RegisteredAssociateId: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetSaleTypeStageLinkId", help: "<b>Void SetSaleTypeStageLinkId(Integer p_0)<\/b>\n\nLink to saleTypeStageLink, the anchor for sale guide items. Either this OR projectAnchorId should be set, not both at the same time.\r\n\r\n\\param p_0 SaleTypeStageLinkId: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetSuggestedAppointmentId", help: "<b>Void SetSuggestedAppointmentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SuggestedAppointmentId: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetTaskId", help: "<b>Void SetTaskId(Integer p_0)<\/b>\n\nType of the suggested appointment\r\n\r\n\\param p_0 TaskId: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointment.SetText", help: "<b>Void SetText(String p_0)<\/b>\n\nThe suggested text of the new appointment\r\n\r\n\\param p_0 Text: String\r\n\\return String"},
{text: "NSSuggestedAppointment.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip \/ description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSSuggestedAppointmentEntity", help: "<b>NSSuggestedAppointmentEntity<\/b>\n\n"},
{text: "NSSuggestedAppointmentEntity.GetAssignToMember", help: "<b>Bool GetAssignToMember()<\/b>\n\nShould this appointment be assigned to project member\r\n\r\n\\return Bool"},
{text: "NSSuggestedAppointmentEntity.GetAutoSuggest", help: "<b>Bool GetAutoSuggest()<\/b>\n\nShould this appointment be auto-suggested\r\n\r\n\\return Bool"},
{text: "NSSuggestedAppointmentEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\return Bool"},
{text: "NSSuggestedAppointmentEntity.GetIsMilestone", help: "<b>Bool GetIsMilestone()<\/b>\n\nIs this a milestone activity\r\n\r\n\\return Bool"},
{text: "NSSuggestedAppointmentEntity.GetDaysFuture", help: "<b>Integer GetDaysFuture()<\/b>\n\nHow many days into the future the appointment should be scheduled\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointmentEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank, controls rank of non-instantiated items in Guide\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointmentEntity.GetSuggestedAppointmentId", help: "<b>Integer GetSuggestedAppointmentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSuggestedAppointmentEntity.GetProjectTypeStatusLink", help: "<b>NSProjectTypeStatusLink GetProjectTypeStatusLink()<\/b>\n\nProject type and project status link info\r\n\r\n\\return ProjectTypeStatusLink"},
{text: "NSSuggestedAppointmentEntity.GetSaleTypeStageLink", help: "<b>NSSaleTypeStageLink GetSaleTypeStageLink()<\/b>\n\nSale type and stage link info\r\n\r\n\\return SaleTypeStageLink"},
{text: "NSSuggestedAppointmentEntity.GetType", help: "<b>NSTask GetType()<\/b>\n\nType of the suggested appointment\r\n\r\n\\return Task"},
{text: "NSSuggestedAppointmentEntity.GetName", help: "<b>String GetName()<\/b>\n\nItem name, visible in Guide\r\n\r\n\\return String"},
{text: "NSSuggestedAppointmentEntity.GetText", help: "<b>String GetText()<\/b>\n\nThe suggested text of the new appointment\r\n\r\n\\return String"},
{text: "NSSuggestedAppointmentEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip \/ description\r\n\r\n\\return String"},
{text: "NSSuggestedAppointmentEntity.GetDuration", help: "<b>TimeSpan GetDuration()<\/b>\n\nDuration in minutes of suggested appointment\r\n\r\n\\return TimeSpan"},
{text: "NSSuggestedAppointmentEntity.SetAssignToMember", help: "<b>Void SetAssignToMember(Bool p_0)<\/b>\n\nShould this appointment be assigned to project member\r\n\r\n\\param p_0 AssignToMember: Bool\r\n\\return Bool"},
{text: "NSSuggestedAppointmentEntity.SetAutoSuggest", help: "<b>Void SetAutoSuggest(Bool p_0)<\/b>\n\nShould this appointment be auto-suggested\r\n\r\n\\param p_0 AutoSuggest: Bool\r\n\\return Bool"},
{text: "NSSuggestedAppointmentEntity.SetDaysFuture", help: "<b>Void SetDaysFuture(Integer p_0)<\/b>\n\nHow many days into the future the appointment should be scheduled\r\n\r\n\\param p_0 DaysFuture: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointmentEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSSuggestedAppointmentEntity.SetDuration", help: "<b>Void SetDuration(TimeSpan p_0)<\/b>\n\nDuration in minutes of suggested appointment\r\n\r\n\\param p_0 Duration: TimeSpan\r\n\\return TimeSpan"},
{text: "NSSuggestedAppointmentEntity.SetIsMilestone", help: "<b>Void SetIsMilestone(Bool p_0)<\/b>\n\nIs this a milestone activity\r\n\r\n\\param p_0 IsMilestone: Bool\r\n\\return Bool"},
{text: "NSSuggestedAppointmentEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nItem name, visible in Guide\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSSuggestedAppointmentEntity.SetProjectTypeStatusLink", help: "<b>Void SetProjectTypeStatusLink(NSProjectTypeStatusLink p_0)<\/b>\n\nProject type and project status link info\r\n\r\n\\param p_0 ProjectTypeStatusLink: ProjectTypeStatusLink\r\n\\return ProjectTypeStatusLink"},
{text: "NSSuggestedAppointmentEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank, controls rank of non-instantiated items in Guide\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointmentEntity.SetSaleTypeStageLink", help: "<b>Void SetSaleTypeStageLink(NSSaleTypeStageLink p_0)<\/b>\n\nSale type and stage link info\r\n\r\n\\param p_0 SaleTypeStageLink: SaleTypeStageLink\r\n\\return SaleTypeStageLink"},
{text: "NSSuggestedAppointmentEntity.SetSuggestedAppointmentId", help: "<b>Void SetSuggestedAppointmentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SuggestedAppointmentId: Integer\r\n\\return Integer"},
{text: "NSSuggestedAppointmentEntity.SetText", help: "<b>Void SetText(String p_0)<\/b>\n\nThe suggested text of the new appointment\r\n\r\n\\param p_0 Text: String\r\n\\return String"},
{text: "NSSuggestedAppointmentEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip \/ description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSSuggestedAppointmentEntity.SetType", help: "<b>Void SetType(NSTask p_0)<\/b>\n\nType of the suggested appointment\r\n\r\n\\param p_0 Type: Task\r\n\\return Task"},
{text: "Void.NSSuggestedDocumentEntity", help: "<b>NSSuggestedDocumentEntity<\/b>\n\n"},
{text: "NSSuggestedDocumentEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\return Bool"},
{text: "NSSuggestedDocumentEntity.GetDoctmplId", help: "<b>Integer GetDoctmplId()<\/b>\n\nType of the suggested document\r\n\r\n\\return Integer"},
{text: "NSSuggestedDocumentEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank, controls rank of non-instantiated items in Guide\r\n\r\n\\return Integer"},
{text: "NSSuggestedDocumentEntity.GetSuggestedDocumentId", help: "<b>Integer GetSuggestedDocumentId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSuggestedDocumentEntity.GetDocTmpl", help: "<b>NSDocumentTemplate GetDocTmpl()<\/b>\n\nDocument template\r\n\r\n\\return DocumentTemplate"},
{text: "NSSuggestedDocumentEntity.GetProjectTypeStatusLink", help: "<b>NSProjectTypeStatusLink GetProjectTypeStatusLink()<\/b>\n\nProject type and project status link info\r\n\r\n\\return ProjectTypeStatusLink"},
{text: "NSSuggestedDocumentEntity.GetSaleTypeStageLink", help: "<b>NSSaleTypeStageLink GetSaleTypeStageLink()<\/b>\n\nSale type and stage link info.\r\n\r\n\\return SaleTypeStageLink"},
{text: "NSSuggestedDocumentEntity.GetHeader", help: "<b>String GetHeader()<\/b>\n\nSuggested 'header'\r\n\r\n\\return String"},
{text: "NSSuggestedDocumentEntity.GetName", help: "<b>String GetName()<\/b>\n\nItem name, visible in Guide\r\n\r\n\\return String"},
{text: "NSSuggestedDocumentEntity.GetOurRef", help: "<b>String GetOurRef()<\/b>\n\nSuggested 'our reference'\r\n\r\n\\return String"},
{text: "NSSuggestedDocumentEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip \/ description\r\n\r\n\\return String"},
{text: "NSSuggestedDocumentEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\n0 -> record is active 1 -> record is 'deleted' and should not be shown in lists\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSSuggestedDocumentEntity.SetDocTmpl", help: "<b>Void SetDocTmpl(NSDocumentTemplate p_0)<\/b>\n\nDocument template\r\n\r\n\\param p_0 DocTmpl: DocumentTemplate\r\n\\return DocumentTemplate"},
{text: "NSSuggestedDocumentEntity.SetDoctmplId", help: "<b>Void SetDoctmplId(Integer p_0)<\/b>\n\nType of the suggested document\r\n\r\n\\param p_0 DoctmplId: Integer\r\n\\return Integer"},
{text: "NSSuggestedDocumentEntity.SetHeader", help: "<b>Void SetHeader(String p_0)<\/b>\n\nSuggested 'header'\r\n\r\n\\param p_0 Header: String\r\n\\return String"},
{text: "NSSuggestedDocumentEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nItem name, visible in Guide\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSSuggestedDocumentEntity.SetOurRef", help: "<b>Void SetOurRef(String p_0)<\/b>\n\nSuggested 'our reference'\r\n\r\n\\param p_0 OurRef: String\r\n\\return String"},
{text: "NSSuggestedDocumentEntity.SetProjectTypeStatusLink", help: "<b>Void SetProjectTypeStatusLink(NSProjectTypeStatusLink p_0)<\/b>\n\nProject type and project status link info\r\n\r\n\\param p_0 ProjectTypeStatusLink: ProjectTypeStatusLink\r\n\\return ProjectTypeStatusLink"},
{text: "NSSuggestedDocumentEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank, controls rank of non-instantiated items in Guide\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSSuggestedDocumentEntity.SetSaleTypeStageLink", help: "<b>Void SetSaleTypeStageLink(NSSaleTypeStageLink p_0)<\/b>\n\nSale type and stage link info.\r\n\r\n\\param p_0 SaleTypeStageLink: SaleTypeStageLink\r\n\\return SaleTypeStageLink"},
{text: "NSSuggestedDocumentEntity.SetSuggestedDocumentId", help: "<b>Void SetSuggestedDocumentId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SuggestedDocumentId: Integer\r\n\\return Integer"},
{text: "NSSuggestedDocumentEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip \/ description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "Void.NSSystemEventEntity", help: "<b>NSSystemEventEntity<\/b>\n\nEntity for system events"},
{text: "NSSystemEventEntity.GetEta", help: "<b>DateTime GetEta()<\/b>\n\nEstimated Time of Arrival, i.e., when will this event finish?\r\n\r\n\\return DateTime"},
{text: "NSSystemEventEntity.GetRegistered", help: "<b>DateTime GetRegistered()<\/b>\n\nRegistered when\r\n\r\n\\return DateTime"},
{text: "NSSystemEventEntity.GetExtraInfo", help: "<b>Integer GetExtraInfo()<\/b>\n\nExtra information (area id for prototype rebuild, etc)\r\n\r\n\\return Integer"},
{text: "NSSystemEventEntity.GetOwner", help: "<b>Integer GetOwner()<\/b>\n\n0, 0, group_id, assoc id (see over)\r\n\r\n\\return Integer"},
{text: "NSSystemEventEntity.GetScope", help: "<b>Integer GetScope()<\/b>\n\n1 = system-wide, 2= database, 3 = group, 4 = user\r\n\r\n\\return Integer"},
{text: "NSSystemEventEntity.GetSystemEventId", help: "<b>Integer GetSystemEventId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSSystemEventEntity.GetUpdatedCount", help: "<b>Integer GetUpdatedCount()<\/b>\n\nNumber of updates made to this record\r\n\r\n\\return Integer"},
{text: "NSSystemEventEntity.GetActivatedBy", help: "<b>NSAssociate GetActivatedBy()<\/b>\n\nThe associate that first created the SystemEvent.\r\n\r\n\\return Associate"},
{text: "NSSystemEventEntity.GetEventkey", help: "<b>String GetEventkey()<\/b>\n\nEvent key, predefined in code\r\n\r\n\\return String"},
{text: "NSSystemEventEntity.GetEventmess", help: "<b>String GetEventmess()<\/b>\n\nMessage to be shown, entered by administrator\r\n\r\n\\return String"},
{text: "NSSystemEventEntity.SetActivatedBy", help: "<b>Void SetActivatedBy(NSAssociate p_0)<\/b>\n\nThe associate that first created the SystemEvent.\r\n\r\n\\param p_0 ActivatedBy: Associate\r\n\\return Associate"},
{text: "NSSystemEventEntity.SetEta", help: "<b>Void SetEta(DateTime p_0)<\/b>\n\nEstimated Time of Arrival, i.e., when will this event finish?\r\n\r\n\\param p_0 Eta: DateTime\r\n\\return DateTime"},
{text: "NSSystemEventEntity.SetEventkey", help: "<b>Void SetEventkey(String p_0)<\/b>\n\nEvent key, predefined in code\r\n\r\n\\param p_0 Eventkey: String\r\n\\return String"},
{text: "NSSystemEventEntity.SetEventmess", help: "<b>Void SetEventmess(String p_0)<\/b>\n\nMessage to be shown, entered by administrator\r\n\r\n\\param p_0 Eventmess: String\r\n\\return String"},
{text: "NSSystemEventEntity.SetExtraInfo", help: "<b>Void SetExtraInfo(Integer p_0)<\/b>\n\nExtra information (area id for prototype rebuild, etc)\r\n\r\n\\param p_0 ExtraInfo: Integer\r\n\\return Integer"},
{text: "NSSystemEventEntity.SetOwner", help: "<b>Void SetOwner(Integer p_0)<\/b>\n\n0, 0, group_id, assoc id (see over)\r\n\r\n\\param p_0 Owner: Integer\r\n\\return Integer"},
{text: "NSSystemEventEntity.SetRegistered", help: "<b>Void SetRegistered(DateTime p_0)<\/b>\n\nRegistered when\r\n\r\n\\param p_0 Registered: DateTime\r\n\\return DateTime"},
{text: "NSSystemEventEntity.SetScope", help: "<b>Void SetScope(Integer p_0)<\/b>\n\n1 = system-wide, 2= database, 3 = group, 4 = user\r\n\r\n\\param p_0 Scope: Integer\r\n\\return Integer"},
{text: "NSSystemEventEntity.SetSystemEventId", help: "<b>Void SetSystemEventId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SystemEventId: Integer\r\n\\return Integer"},
{text: "NSSystemEventEntity.SetUpdatedCount", help: "<b>Void SetUpdatedCount(Integer p_0)<\/b>\n\nNumber of updates made to this record\r\n\r\n\\param p_0 UpdatedCount: Integer\r\n\\return Integer"},
{text: "Void.NSTableRight", help: "<b>NSTableRight<\/b>\n\n"},
{text: "NSTableRight.GetMask", help: "<b>Integer GetMask()<\/b>\n\n"},
{text: "NSTableRight.GetTableRight", help: "<b>Integer GetTableRight()<\/b>\n\n"},
{text: "NSTableRight.GetReason", help: "<b>String GetReason()<\/b>\n\n"},
{text: "NSTableRight.SetMask", help: "<b>Void SetMask(Integer p_0)<\/b>\n\n"},
{text: "NSTableRight.SetReason", help: "<b>Void SetReason(String p_0)<\/b>\n\n"},
{text: "NSTableRight.SetTableRight", help: "<b>Void SetTableRight(Integer p_0)<\/b>\n\n"},
{text: "Void.NSTabOrder", help: "<b>NSTabOrder<\/b>\n\n"},
{text: "NSTabOrder.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nAssociate who owns this tab order\r\n\r\n\\return Integer"},
{text: "NSTabOrder.GetTabOrderId", help: "<b>Integer GetTabOrderId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSTabOrder.GetOrder", help: "<b>String GetOrder()<\/b>\n\nThe actual tab order\r\n\r\n\\return String"},
{text: "NSTabOrder.GetTabName", help: "<b>String GetTabName()<\/b>\n\nName of tab control\r\n\r\n\\return String"},
{text: "NSTabOrder.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nAssociate who owns this tab order\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSTabOrder.SetOrder", help: "<b>Void SetOrder(String p_0)<\/b>\n\nThe actual tab order\r\n\r\n\\param p_0 Order: String\r\n\\return String"},
{text: "NSTabOrder.SetTabName", help: "<b>Void SetTabName(String p_0)<\/b>\n\nName of tab control\r\n\r\n\\param p_0 TabName: String\r\n\\return String"},
{text: "NSTabOrder.SetTabOrderId", help: "<b>Void SetTabOrderId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 TabOrderId: Integer\r\n\\return Integer"},
{text: "Void.NSTask", help: "<b>NSTask<\/b>\n\nType of an appointment"},
{text: "NSTask.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSTask.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSTask.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSTask.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSTask.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSTask.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSTaskListItem", help: "<b>NSTaskListItem<\/b>\n\n"},
{text: "NSTaskListItem.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIf true, the Task list item is deleted\r\n\r\n\\return Bool"},
{text: "NSTaskListItem.GetIsDefaultAlldayEvent", help: "<b>Bool GetIsDefaultAlldayEvent()<\/b>\n\nTrue if all day event\r\n\r\n\\return Bool"},
{text: "NSTaskListItem.GetIsDefaultFree", help: "<b>Bool GetIsDefaultFree()<\/b>\n\nTrue if free, false if busy\r\n\r\n\\return Bool"},
{text: "NSTaskListItem.GetIsDefaultPublished", help: "<b>Bool GetIsDefaultPublished()<\/b>\n\nPublished to external persons\r\n\r\n\\return Bool"},
{text: "NSTaskListItem.GetColorIndex", help: "<b>Integer GetColorIndex()<\/b>\n\nJAP\r\n\r\n\\return Integer"},
{text: "NSTaskListItem.GetDirection", help: "<b>Integer GetDirection()<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n"},
{text: "NSTaskListItem.GetIntentId", help: "<b>Integer GetIntentId()<\/b>\n\nLink to the intention of this kind of task (used by SAINT)\r\n\r\n\\return Integer"},
{text: "NSTaskListItem.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSTaskListItem.GetTaskListItemId", help: "<b>Integer GetTaskListItemId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSTaskListItem.GetType", help: "<b>Integer GetType()<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n"},
{text: "NSTaskListItem.GetDirection", help: "<b>NSTaskDirection GetDirection()<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n\\return TaskDirection"},
{text: "NSTaskListItem.GetType", help: "<b>NSTaskType GetType()<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n\\return TaskType"},
{text: "NSTaskListItem.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSTaskListItem.GetValue", help: "<b>String GetValue()<\/b>\n\nThe list item\r\n\r\n\\return String"},
{text: "NSTaskListItem.SetColorIndex", help: "<b>Void SetColorIndex(Integer p_0)<\/b>\n\nJAP\r\n\r\n\\param p_0 ColorIndex: Integer\r\n\\return Integer"},
{text: "NSTaskListItem.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIf true, the Task list item is deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSTaskListItem.SetDirection", help: "<b>Void SetDirection(Integer p_0)<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n"},
{text: "NSTaskListItem.SetDirection", help: "<b>Void SetDirection(NSTaskDirection p_0)<\/b>\n\n1 = incoming, 2 = outgoing, see EAppntDirection\r\n\r\n\\param p_0 Direction: TaskDirection\r\n\\return TaskDirection"},
{text: "NSTaskListItem.SetIntentId", help: "<b>Void SetIntentId(Integer p_0)<\/b>\n\nLink to the intention of this kind of task (used by SAINT)\r\n\r\n\\param p_0 IntentId: Integer\r\n\\return Integer"},
{text: "NSTaskListItem.SetIsDefaultAlldayEvent", help: "<b>Void SetIsDefaultAlldayEvent(Bool p_0)<\/b>\n\nTrue if all day event\r\n\r\n\\param p_0 IsDefaultAlldayEvent: Bool\r\n\\return Bool"},
{text: "NSTaskListItem.SetIsDefaultFree", help: "<b>Void SetIsDefaultFree(Bool p_0)<\/b>\n\nTrue if free, false if busy\r\n\r\n\\param p_0 IsDefaultFree: Bool\r\n\\return Bool"},
{text: "NSTaskListItem.SetIsDefaultPublished", help: "<b>Void SetIsDefaultPublished(Bool p_0)<\/b>\n\nPublished to external persons\r\n\r\n\\param p_0 IsDefaultPublished: Bool\r\n\\return Bool"},
{text: "NSTaskListItem.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSTaskListItem.SetTaskListItemId", help: "<b>Void SetTaskListItemId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 TaskListItemId: Integer\r\n\\return Integer"},
{text: "NSTaskListItem.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSTaskListItem.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n"},
{text: "NSTaskListItem.SetType", help: "<b>Void SetType(NSTaskType p_0)<\/b>\n\n1 = app, 2 = doc, 3 = email, 4 = fax, 5 = phone, 6 = todo - see EAppntRecordTypes\r\n\r\n\\param p_0 Type: TaskType\r\n\\return TaskType"},
{text: "NSTaskListItem.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nThe list item\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSTemplateInfo", help: "<b>NSTemplateInfo<\/b>\n\nInformation about a document template, i.e., a document that generally contains unresolved merge tags and that is used as the source for creating new documents"},
{text: "NSTemplateInfo.GetPluginId", help: "<b>Integer GetPluginId()<\/b>\n\nID of plugin that stores this template, so it can be retrieved\r\n\r\n\\return Integer"},
{text: "NSTemplateInfo.GetDescription", help: "<b>String GetDescription()<\/b>\n\nDocument description, shown as a tooltip or in some extended description area\r\n\r\n\\return String"},
{text: "NSTemplateInfo.GetExternalReference", help: "<b>String GetExternalReference()<\/b>\n\nUnique key that identifies the document so it can be retrieved\r\n\r\n\\return String"},
{text: "NSTemplateInfo.GetName", help: "<b>String GetName()<\/b>\n\nName of the document, shown in lists etc to the user\r\n\r\n\\return String"},
{text: "NSTemplateInfo.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nDocument description, shown as a tooltip or in some extended description area\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSTemplateInfo.SetExternalReference", help: "<b>Void SetExternalReference(String p_0)<\/b>\n\nUnique key that identifies the document so it can be retrieved\r\n\r\n\\param p_0 ExternalReference: String\r\n\\return String"},
{text: "NSTemplateInfo.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName of the document, shown in lists etc to the user\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSTemplateInfo.SetPluginId", help: "<b>Void SetPluginId(Integer p_0)<\/b>\n\nID of plugin that stores this template, so it can be retrieved\r\n\r\n\\param p_0 PluginId: Integer\r\n\\return Integer"},
{text: "Void.NSTemplateVariablesParameters", help: "<b>NSTemplateVariablesParameters<\/b>\n\nParameters specifying source and properties for template variable substitution."},
{text: "NSTemplateVariablesParameters.GetAppointmentId", help: "<b>Integer GetAppointmentId()<\/b>\n\nIdentifier for an appointment\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetContactId", help: "<b>Integer GetContactId()<\/b>\n\nIdentifier for a contact\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nIdentifier for a document\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetEncoding", help: "<b>Integer GetEncoding()<\/b>\n\nEncoding of source string. Non-text formats such as MsWord or Excel should be Base64 encoded in the source string.\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nIdentifier for a person\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetProjectId", help: "<b>Integer GetProjectId()<\/b>\n\nIdentifier for a project\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetQuoteAlternativeId", help: "<b>Integer GetQuoteAlternativeId()<\/b>\n\nQuote alternative id\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetQuoteLineId", help: "<b>Integer GetQuoteLineId()<\/b>\n\nQuote line id\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nIdentifier for a sale\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetSelectionId", help: "<b>Integer GetSelectionId()<\/b>\n\nIdentifier for a selection\r\n\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.GetDocumentEntity", help: "<b>NSDocumentEntity GetDocumentEntity()<\/b>\n\nCustom document entity to use for data retrieval. Useful for unsaved data.  DocumentEntity.DocumentId need to match the DocumentId specified in separate property.\r\n\r\n\\return DocumentEntity"},
{text: "NSTemplateVariablesParameters.GetCultureName", help: "<b>String GetCultureName()<\/b>\n\nName of culture to be used for culture-sensitive data, such as dates or multi-language texts. Use a blank string to accept current culture that is set on the server.\r\n\r\n\\return String"},
{text: "NSTemplateVariablesParameters.GetProductKey", help: "<b>String GetProductKey()<\/b>\n\nProduct key\r\n\r\n\\return String"},
{text: "NSTemplateVariablesParameters.GetSourceInput", help: "<b>String GetSourceInput()<\/b>\n\nSource string to parse for template variables. Such variables must have delimiters corresponding to the standard for the given generator encoding.Non-text source data (such as the binary content of a .doc file) should be passed in as Base64.\r\n\r\n\\return String"},
{text: "NSTemplateVariablesParameters.GetCustomTags", help: "<b>String[][] GetCustomTags()<\/b>\n\nArray with custom tags and values. Array may be of unlimited height, but need to be exactly 2 in width.\r\n\r\n\\return StringArrayArray"},
{text: "NSTemplateVariablesParameters.SetAppointmentId", help: "<b>Void SetAppointmentId(Integer p_0)<\/b>\n\nIdentifier for an appointment\r\n\r\n\\param p_0 AppointmentId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetContactId", help: "<b>Void SetContactId(Integer p_0)<\/b>\n\nIdentifier for a contact\r\n\r\n\\param p_0 ContactId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetCultureName", help: "<b>Void SetCultureName(String p_0)<\/b>\n\nName of culture to be used for culture-sensitive data, such as dates or multi-language texts. Use a blank string to accept current culture that is set on the server.\r\n\r\n\\param p_0 CultureName: String\r\n\\return String"},
{text: "NSTemplateVariablesParameters.SetCustomTags", help: "<b>Void SetCustomTags(String[][] p_0)<\/b>\n\nArray with custom tags and values. Array may be of unlimited height, but need to be exactly 2 in width.\r\n\r\n\\param p_0 CustomTags: StringArrayArray\r\n\\return StringArrayArray"},
{text: "NSTemplateVariablesParameters.SetDocumentEntity", help: "<b>Void SetDocumentEntity(NSDocumentEntity p_0)<\/b>\n\nCustom document entity to use for data retrieval. Useful for unsaved data.  DocumentEntity.DocumentId need to match the DocumentId specified in separate property.\r\n\r\n\\param p_0 DocumentEntity: DocumentEntity\r\n\\return DocumentEntity"},
{text: "NSTemplateVariablesParameters.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nIdentifier for a document\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetEncoding", help: "<b>Void SetEncoding(Integer p_0)<\/b>\n\nEncoding of source string. Non-text formats such as MsWord or Excel should be Base64 encoded in the source string.\r\n\r\n\\param p_0 Encoding: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nIdentifier for a person\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetProductKey", help: "<b>Void SetProductKey(String p_0)<\/b>\n\nProduct key\r\n\r\n\\param p_0 ProductKey: String\r\n\\return String"},
{text: "NSTemplateVariablesParameters.SetProjectId", help: "<b>Void SetProjectId(Integer p_0)<\/b>\n\nIdentifier for a project\r\n\r\n\\param p_0 ProjectId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetQuoteAlternativeId", help: "<b>Void SetQuoteAlternativeId(Integer p_0)<\/b>\n\nQuote alternative id\r\n\r\n\\param p_0 QuoteAlternativeId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetQuoteLineId", help: "<b>Void SetQuoteLineId(Integer p_0)<\/b>\n\nQuote line id\r\n\r\n\\param p_0 QuoteLineId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nIdentifier for a sale\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetSelectionId", help: "<b>Void SetSelectionId(Integer p_0)<\/b>\n\nIdentifier for a selection\r\n\r\n\\param p_0 SelectionId: Integer\r\n\\return Integer"},
{text: "NSTemplateVariablesParameters.SetSourceInput", help: "<b>Void SetSourceInput(String p_0)<\/b>\n\nSource string to parse for template variables. Such variables must have delimiters corresponding to the standard for the given generator encoding.Non-text source data (such as the binary content of a .doc file) should be passed in as Base64.\r\n\r\n\\param p_0 SourceInput: String\r\n\\return String"},
{text: "Void.NSTicketPriority", help: "<b>NSTicketPriority<\/b>\n\n"},
{text: "NSTicketPriority.GetId", help: "<b>Integer GetId()<\/b>\n\n\\return Integer"},
{text: "NSTicketPriority.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\n\\return String"},
{text: "NSTicketPriority.GetValue", help: "<b>String GetValue()<\/b>\n\n\\return String"},
{text: "NSTicketPriority.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\n\\param p_0 id: Integer\r\n\\return Void"},
{text: "NSTicketPriority.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\n\\param p_0 tooltip: String\r\n\\return Void"},
{text: "NSTicketPriority.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\n\\param p_0 value: String\r\n\\return Void"},
{text: "Void.NSTileData", help: "<b>NSTileData<\/b>\n\nClass representing data to be visualized in a dashboard tile."},
{text: "NSTileData.GetColumns", help: "<b>NSArchiveColumnInfo[] GetColumns()<\/b>\n\nColumn information\r\n\r\n\\return ArchiveColumnInfoArray"},
{text: "NSTileData.GetResult", help: "<b>NSArchiveListResult GetResult()<\/b>\n\nThe result set\r\n\r\n\\return ArchiveListResult"},
{text: "NSTileData.SetColumns", help: "<b>Void SetColumns(NSArchiveColumnInfo[] p_0)<\/b>\n\nColumn information\r\n\r\n\\param p_0 Columns: ArchiveColumnInfoArray\r\n\\return ArchiveColumnInfoArray"},
{text: "NSTileData.SetResult", help: "<b>Void SetResult(NSArchiveListResult p_0)<\/b>\n\nThe result set\r\n\r\n\\param p_0 Result: ArchiveListResult\r\n\\return ArchiveListResult"},
{text: "Void.NSTimeSpan", help: "<b>NSTimeSpan<\/b>\n\n"},
{text: "NSTimeSpan.GetTimeSpan", help: "<b>String GetTimeSpan()<\/b>\n\n"},
{text: "NSTimeSpan.SetTimeSpan", help: "<b>Void SetTimeSpan(String p_0)<\/b>\n\n"},
{text: "Void.NSTimeZoneAgent", help: "<b>NSTimeZoneAgent<\/b>\n\n"},
{text: "NSTimeZoneAgent.CheckNewTimeZoneDataAvailable", help: "<b>Bool CheckNewTimeZoneDataAvailable()<\/b>\n\nCheck to see if new timezone data is available\r\n\r\n\\return Returns true if new timezone info is found available, false otherwise"},
{text: "NSTimeZoneAgent.SetBaseTimeZoneId", help: "<b>Bool SetBaseTimeZoneId(Integer p_0)<\/b>\n\nSet the base timezone id.\r\n\r\n\\param p_0 timezoneId: The timezone id to save\r\n\\return Returns true if setting of base timezone was done"},
{text: "NSTimeZoneAgent.UpdateTimeZoneData", help: "<b>Bool UpdateTimeZoneData()<\/b>\n\nRetrieve time zone data from the SuperOffice server and update TimeZone data in the database\r\n\r\n\\return Returns true if the operation succeeded"},
{text: "NSTimeZoneAgent.TimeOfLastTimeZoneUpdate", help: "<b>DateTime TimeOfLastTimeZoneUpdate()<\/b>\n\nGet the time time zone data was last updated\r\n\r\n\\return Time of last update"},
{text: "NSTimeZoneAgent.GetBaseTimeZoneId", help: "<b>Integer GetBaseTimeZoneId()<\/b>\n\nGet the base timezone id.\r\n\r\n\\return Returns the base timezone id. Returns 0 if not set.\r\n"},
{text: "NSTimeZoneAgent.GetDefaultTimeZonePreference", help: "<b>Integer GetDefaultTimeZonePreference()<\/b>\n\nReturns the id of the default timezone preference with deflevel system wide\r\n\r\n\\return The id of the system wide default timezone preference"},
{text: "NSTimeZoneAgent.InitializeTimeZoneData", help: "<b>NSTimeZoneData[] InitializeTimeZoneData()<\/b>\n\nInitalizes the TimeZoneData\r\n\r\n"},
{text: "NSTimeZoneAgent.DeleteTimeZones", help: "<b>Void DeleteTimeZones()<\/b>\n\nDeletes all time zone data (locations and rules) from the database"},
{text: "NSTimeZoneAgent.SetActiveTimeZoneRow", help: "<b>Void SetActiveTimeZoneRow(Integer p_0, Bool p_1)<\/b>\n\nSet active state of singe row in the TZLocation table\r\n\r\n\\param p_0 id: Id of row to set active state on\r\n\\param p_1 active: Set active to true or false"},
{text: "NSTimeZoneAgent.SetActiveTimeZonesByFilter", help: "<b>Void SetActiveTimeZonesByFilter(String p_0, Bool p_1)<\/b>\n\nToggles active state of a single row in the TZLocation table\r\n\r\n\\param p_0 filter: Filter timezones\r\n\\param p_1 active: Set active to true or false"},
{text: "NSTimeZoneAgent.ToggleActiveTimeZoneRow", help: "<b>Void ToggleActiveTimeZoneRow(Integer p_0)<\/b>\n\nToggles active state of a single row in the TZLocation table\r\n\r\n\\param p_0 id: Id of row to toggle active state on"},
{text: "Void.NSTimeZoneData", help: "<b>NSTimeZoneData<\/b>\n\nInformation about a TimeZone"},
{text: "NSTimeZoneData.GetIsoNumber", help: "<b>Integer GetIsoNumber()<\/b>\n\n\\return Integer"},
{text: "NSTimeZoneData.GetTZLocationID", help: "<b>Integer GetTZLocationID()<\/b>\n\nTimezone location ID\r\n\r\n\\return Integer"},
{text: "NSTimeZoneData.GetTimeZoneDSTRules", help: "<b>NSTimeZoneRuleDictionary GetTimeZoneDSTRules()<\/b>\n\nRules for daylight savings time\r\n\r\n\\return TimeZoneRuleDictionary"},
{text: "NSTimeZoneData.GetTimeZoneSTDRules", help: "<b>NSTimeZoneRuleDictionary GetTimeZoneSTDRules()<\/b>\n\nRules for standard time\r\n\r\n\\return TimeZoneRuleDictionary"},
{text: "NSTimeZoneData.GetName", help: "<b>String GetName()<\/b>\n\nName associated with the location\r\n\r\n\\return String"},
{text: "NSTimeZoneData.GetTZLocationCities", help: "<b>String GetTZLocationCities()<\/b>\n\nCities associated with location\r\n\r\n\\return String"},
{text: "NSTimeZoneData.GetTZLocationCode", help: "<b>String GetTZLocationCode()<\/b>\n\nCode associated with location\r\n\r\n\\return String"},
{text: "NSTimeZoneData.SetIsoNumber", help: "<b>Void SetIsoNumber(Integer p_0)<\/b>\n\n\\param p_0 IsoNumber: Integer\r\n\\return Integer"},
{text: "NSTimeZoneData.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nName associated with the location\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSTimeZoneData.SetTimeZoneDSTRules", help: "<b>Void SetTimeZoneDSTRules(NSTimeZoneRuleDictionary p_0)<\/b>\n\nRules for daylight savings time\r\n\r\n\\param p_0 TimeZoneDSTRules: TimeZoneRuleDictionary\r\n\\return TimeZoneRuleDictionary"},
{text: "NSTimeZoneData.SetTimeZoneSTDRules", help: "<b>Void SetTimeZoneSTDRules(NSTimeZoneRuleDictionary p_0)<\/b>\n\nRules for standard time\r\n\r\n\\param p_0 TimeZoneSTDRules: TimeZoneRuleDictionary\r\n\\return TimeZoneRuleDictionary"},
{text: "NSTimeZoneData.SetTZLocationCities", help: "<b>Void SetTZLocationCities(String p_0)<\/b>\n\nCities associated with location\r\n\r\n\\param p_0 TZLocationCities: String\r\n\\return String"},
{text: "NSTimeZoneData.SetTZLocationCode", help: "<b>Void SetTZLocationCode(String p_0)<\/b>\n\nCode associated with location\r\n\r\n\\param p_0 TZLocationCode: String\r\n\\return String"},
{text: "NSTimeZoneData.SetTZLocationID", help: "<b>Void SetTZLocationID(Integer p_0)<\/b>\n\nTimezone location ID\r\n\r\n\\param p_0 TZLocationID: Integer\r\n\\return Integer"},
{text: "Void.NSTimeZoneRule", help: "<b>NSTimeZoneRule<\/b>\n\nInformation about a rule for a TimeZone"},
{text: "NSTimeZoneRule.GetEndDay", help: "<b>Integer GetEndDay()<\/b>\n\nCustom DST end day, if 0 then parse startRule\r\n\r\n\\return Integer"},
{text: "NSTimeZoneRule.GetEndMonth", help: "<b>Integer GetEndMonth()<\/b>\n\nCustom DST end month, if 0 then parse startRule\r\n\r\n\\return Integer"},
{text: "NSTimeZoneRule.GetStartDay", help: "<b>Integer GetStartDay()<\/b>\n\nCustom DST start day, if 0 then parse startRule\r\n\r\n\\return Integer"},
{text: "NSTimeZoneRule.GetStartMonth", help: "<b>Integer GetStartMonth()<\/b>\n\nCustom DST start month, if 0 then parse startRule\r\n\r\n\\return Integer"},
{text: "NSTimeZoneRule.GetTZOffset", help: "<b>Integer GetTZOffset()<\/b>\n\nNumber of minutes bias relative to UTC time\r\n\r\n\\return Integer"},
{text: "NSTimeZoneRule.GetEndRulePattern", help: "<b>String GetEndRulePattern()<\/b>\n\nDST end rule, such as 2300 LST-SAT-OCT; limited to rules that we have parse code for; use dayOfMonth etc for custom rules\r\n\r\n\\return String"},
{text: "NSTimeZoneRule.GetStartRulePattern", help: "<b>String GetStartRulePattern()<\/b>\n\nDST start rule, such as 0200 1ST-SUN-APR; limited to rules that we have parse code for; use dayOfMonth etc for custom rules\r\n\r\n\\return String"},
{text: "NSTimeZoneRule.SetEndDay", help: "<b>Void SetEndDay(Integer p_0)<\/b>\n\nCustom DST end day, if 0 then parse startRule\r\n\r\n\\param p_0 EndDay: Integer\r\n\\return Integer"},
{text: "NSTimeZoneRule.SetEndMonth", help: "<b>Void SetEndMonth(Integer p_0)<\/b>\n\nCustom DST end month, if 0 then parse startRule\r\n\r\n\\param p_0 EndMonth: Integer\r\n\\return Integer"},
{text: "NSTimeZoneRule.SetEndRulePattern", help: "<b>Void SetEndRulePattern(String p_0)<\/b>\n\nDST end rule, such as 2300 LST-SAT-OCT; limited to rules that we have parse code for; use dayOfMonth etc for custom rules\r\n\r\n\\param p_0 EndRulePattern: String\r\n\\return String"},
{text: "NSTimeZoneRule.SetStartDay", help: "<b>Void SetStartDay(Integer p_0)<\/b>\n\nCustom DST start day, if 0 then parse startRule\r\n\r\n\\param p_0 StartDay: Integer\r\n\\return Integer"},
{text: "NSTimeZoneRule.SetStartMonth", help: "<b>Void SetStartMonth(Integer p_0)<\/b>\n\nCustom DST start month, if 0 then parse startRule\r\n\r\n\\param p_0 StartMonth: Integer\r\n\\return Integer"},
{text: "NSTimeZoneRule.SetStartRulePattern", help: "<b>Void SetStartRulePattern(String p_0)<\/b>\n\nDST start rule, such as 0200 1ST-SUN-APR; limited to rules that we have parse code for; use dayOfMonth etc for custom rules\r\n\r\n\\param p_0 StartRulePattern: String\r\n\\return String"},
{text: "NSTimeZoneRule.SetTZOffset", help: "<b>Void SetTZOffset(Integer p_0)<\/b>\n\nNumber of minutes bias relative to UTC time\r\n\r\n\\param p_0 TZOffset: Integer\r\n\\return Integer"},
{text: "Void.NSTooltipsAgent", help: "<b>NSTooltipsAgent<\/b>\n\n"},
{text: "NSTooltipsAgent.GetTooltip", help: "<b>String GetTooltip(String p_0)<\/b>\n\nParse a tooltip hint and return a tooltip. The returned tooltip string may contain resource string identifiers (in square brackets), to be processed by the resource manager.<para \/>The tooltip hint is either a literal text, representing itself, or a set of key\/value pairs enclosed in curly braces. Each key is separated from its value by an equals sign, and each pair from the next by an ampersand, according to usual conventions.<para \/>A typical tooltip hint could be {contact_id=123} or {appointment_id=222&amp;mode=simple}\r\n\r\n\\param p_0 tooltipHint\r\n"},
{text: "Void.NSTrayAppAgent", help: "<b>NSTrayAppAgent<\/b>\n\nInterface for the TrayApp Agent\r\n\r\n\r\n"},
{text: "NSTrayAppAgent.GetTaskRequest", help: "<b>NSXmlDocument GetTaskRequest(String p_0)<\/b>\n\nGetTaskRequest will load a servermodule depending on the parameters in the parameter collection. It will use parameter collection key; 'module' and 'version' to load the server-side module.<p\/>The parameter is a query-string like representation of a name-value collection.\r\n\r\n\\param p_0 parameters: A collection of parameters. Key 'module' and 'version' must exist in the collection.<p\/>The format key=value&amp;key2=value2 etc is used for the parameter.\r\n\\return Returns a XML document with the data from the invoked servermodule.\r\n"},
{text: "NSTrayAppAgent.BeginReadStream", help: "<b>String BeginReadStream(String p_0, String p_1, String p_2, String p_3, String p_4, String p_5, String p_6)<\/b>\n\nInitiate a stream reading operation.\r\n\r\n\\param p_0 taskId: Unique identifier of the current task.\r\n\\param p_1 parentModuleName: Module name of the client module that initiated the request.\r\n\\param p_2 parentModuleVersion: Module version of the client module that initiated the request.\r\n\\param p_3 parentModuleData: Serialized data from the client module that initiated this request through the communication module.\r\n\\param p_4 communicationModuleName: Module name of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_5 communicationModuleVersion: Module version of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_6 communicationModuleData: Serialized data from the communiction client module that initiated this operation.\r\n\\return Returns a StreamData object serialized to a string.\r\n"},
{text: "NSTrayAppAgent.BeginWriteStream", help: "<b>String BeginWriteStream(String p_0, String p_1, String p_2, String p_3)<\/b>\n\nInitiate a stream writing operation.\r\n\r\n\\param p_0 taskId: Unique identifier of the current task.\r\n\\param p_1 communicationModuleName: Module name of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_2 communicationModuleVersion: Module version of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_3 communicationModuleData: Serialized data from the communiction client module that initiated this operation.\r\n\\return Returns a StreamData object serialized to a string. StreamData for this method contains a streamId that will be used on writepart and endwrite.\r\n"},
{text: "NSTrayAppAgent.EndReadStream", help: "<b>String EndReadStream(String p_0, String p_1, String p_2, String p_3)<\/b>\n\nCalled when finisheded reading a stream.\r\n\r\n\\param p_0 streamId: Unique identifier of the stream.\r\n\\param p_1 communicationModuleName: Module name of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_2 communicationModuleVersion: Module version of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_3 communicationModuleData: Serialized data from the communiction client module that initiated this operation.\r\n\\return Return an empty string, or a error message if something went wrong.\r\n"},
{text: "NSTrayAppAgent.EndWriteStream", help: "<b>String EndWriteStream(String p_0, String p_1, String p_2, String p_3, String p_4, String p_5, String p_6)<\/b>\n\nCalled when finished writing a stream.\r\n\r\n\\param p_0 streamId: Unique identifier of the stream.\r\n\\param p_1 parentModuleName: Module name of the client module that initiated the request.\r\n\\param p_2 parentModuleVersion: Module version of the client module that initiated the request.\r\n\\param p_3 parentModuleData: Serialized data from the client module that initiated this request through the communication module.\r\n\\param p_4 communicationModuleName: Module name of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_5 communicationModuleVersion: Module version of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_6 communicationModuleData: Serialized data from the communiction client module that initiated this operation.\r\n\\return Return an empty string, or a error message if something went wrong.\r\n"},
{text: "NSTrayAppAgent.ExecuteRequest", help: "<b>String ExecuteRequest(String p_0, String p_1, String p_2, String p_3, String p_4, String p_5, String p_6)<\/b>\n\nExecute a request that gives an immediate, reasonably sized response. Use the Stream operations for large responses.\r\n\r\n\\param p_0 taskId: Unique identifier of the current task.\r\n\\param p_1 parentModuleName: Module name of the client module that initiated the request.\r\n\\param p_2 parentModuleVersion: Module version of the client module that initiated the request.\r\n\\param p_3 parentModuleData\r\n\\param p_4 communicationModuleName: Module name of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_5 communicationModuleVersion: Module version of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_6 communicationModuleData: Serialized data from the communiction client module that initiated this operation.\r\n\\return Returns a RequestResponseData object serialized to a string\r\n"},
{text: "NSTrayAppAgent.ReadStreamPart", help: "<b>String ReadStreamPart(String p_0, String p_1, String p_2, String p_3, Integer p_4)<\/b>\n\nRead and return a part of a stream.\r\n\r\n\\param p_0 streamId: Unique identifier of the stream.\r\n\\param p_1 communicationModuleName: Module name of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_2 communicationModuleVersion: Module version of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_3 communicationModuleData: Serialized data from the communiction client module that initiated this operation.\r\n\\param p_4 offset: The position in the file to start reading.\r\n\\return Returns a StreamData object serialized to a string.\r\n"},
{text: "NSTrayAppAgent.WriteStreamPart", help: "<b>String WriteStreamPart(String p_0, String p_1, String p_2, String p_3, String p_4)<\/b>\n\nWrite a part of a stream.\r\n\r\n\\param p_0 streamId: Unique identifier of the stream.\r\n\\param p_1 communicationModuleName: Module name of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_2 communicationModuleVersion: Module version of the client communication module that initiated the request. This is sent to make sure the correct version of the communication server module is loaded.\r\n\\param p_3 communicationModuleData: Serialized data from the communiction client module that initiated this operation.\r\n\\param p_4 streamData: Serialized StreamData object containing data to write to the stream.\r\n\\return Return an empty string, or a error message if something went wrong.\r\n"},
{text: "Void.NSUntrustedCredentials", help: "<b>NSUntrustedCredentials<\/b>\n\nCredentials for external authentication."},
{text: "NSUntrustedCredentials.GetIsActive", help: "<b>Bool GetIsActive()<\/b>\n\nIs this credentials currently active.\r\n\r\n\\return Bool"},
{text: "NSUntrustedCredentials.GetValidFrom", help: "<b>DateTime GetValidFrom()<\/b>\n\nCredentials are valid from this date.\r\n\r\n\\return DateTime"},
{text: "NSUntrustedCredentials.GetValidTo", help: "<b>DateTime GetValidTo()<\/b>\n\nCredentials are valid to this date.\r\n\r\n\\return DateTime"},
{text: "NSUntrustedCredentials.GetComment", help: "<b>String GetComment()<\/b>\n\nDescription of credentials. Max 255 characters.\r\n\r\n\\return String"},
{text: "NSUntrustedCredentials.GetPublicValue", help: "<b>String GetPublicValue()<\/b>\n\nData stored unencrypted in the db.  Typically server and or username. Max 238 characters.\r\n\r\n\\return String"},
{text: "NSUntrustedCredentials.GetSecretValue", help: "<b>String GetSecretValue()<\/b>\n\nData stored encrypted in the db. Typically a password. Max 70 characters.\r\n\r\n\\return String"},
{text: "NSUntrustedCredentials.SetComment", help: "<b>Void SetComment(String p_0)<\/b>\n\nDescription of credentials. Max 255 characters.\r\n\r\n\\param p_0 Comment: String\r\n\\return String"},
{text: "NSUntrustedCredentials.SetIsActive", help: "<b>Void SetIsActive(Bool p_0)<\/b>\n\nIs this credentials currently active.\r\n\r\n\\param p_0 IsActive: Bool\r\n\\return Bool"},
{text: "NSUntrustedCredentials.SetPublicValue", help: "<b>Void SetPublicValue(String p_0)<\/b>\n\nData stored unencrypted in the db.  Typically server and or username. Max 238 characters.\r\n\r\n\\param p_0 PublicValue: String\r\n\\return String"},
{text: "NSUntrustedCredentials.SetSecretValue", help: "<b>Void SetSecretValue(String p_0)<\/b>\n\nData stored encrypted in the db. Typically a password. Max 70 characters.\r\n\r\n\\param p_0 SecretValue: String\r\n\\return String"},
{text: "NSUntrustedCredentials.SetValidFrom", help: "<b>Void SetValidFrom(DateTime p_0)<\/b>\n\nCredentials are valid from this date.\r\n\r\n\\param p_0 ValidFrom: DateTime\r\n\\return DateTime"},
{text: "NSUntrustedCredentials.SetValidTo", help: "<b>Void SetValidTo(DateTime p_0)<\/b>\n\nCredentials are valid to this date.\r\n\r\n\\param p_0 ValidTo: DateTime\r\n\\return DateTime"},
{text: "Void.NSUser", help: "<b>NSUser<\/b>\n\nSuperOffice User, with login credentials and an associated person."},
{text: "NSUser.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIf true, the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\return Bool"},
{text: "NSUser.GetIsOnTravel", help: "<b>Bool GetIsOnTravel()<\/b>\n\n\\return Bool"},
{text: "NSUser.GetIsPersonRetired", help: "<b>Bool GetIsPersonRetired()<\/b>\n\nTrue if the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\return Bool"},
{text: "NSUser.GetLastlogin", help: "<b>DateTime GetLastlogin()<\/b>\n\nLast login date\r\n\r\n\\return DateTime"},
{text: "NSUser.GetLastlogout", help: "<b>DateTime GetLastlogout()<\/b>\n\nLast logout date\r\n\r\n\\return DateTime"},
{text: "NSUser.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSUser.GetEjUserId", help: "<b>Integer GetEjUserId()<\/b>\n\nID of the ej user record corresponding to this associate; 0 for associates that are not ej users\r\n\r\n\\return Integer"},
{text: "NSUser.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSUser.GetType", help: "<b>Integer GetType()<\/b>\n\n\\return Integer"},
{text: "NSUser.GetCredentials", help: "<b>NSCredential[] GetCredentials()<\/b>\n\n\\return CredentialArray"},
{text: "NSUser.GetLicenseOwners", help: "<b>NSLicenseOwner[] GetLicenseOwners()<\/b>\n\nThe restricted and unrestricted module licenses grouped by license owner. These module licenses are either assigned or unassigned to this user\r\n\r\n\\return LicenseOwnerArray"},
{text: "NSUser.GetPerson", help: "<b>NSPerson GetPerson()<\/b>\n\nThe person associated with this user. Detailed information about the user\r\n\r\n\\return Person"},
{text: "NSUser.GetRole", help: "<b>NSRole GetRole()<\/b>\n\nUsers role for role-based security\r\n\r\n\\return Role"},
{text: "NSUser.GetUserGroup", help: "<b>NSUserGroup GetUserGroup()<\/b>\n\nThe main user group that this user belongs to\r\n\r\n\\return UserGroup"},
{text: "NSUser.GetOtherGroups", help: "<b>NSUserGroup[] GetOtherGroups()<\/b>\n\nThe other groups this user is a member of, apart from the main user group\r\n\r\n\\return UserGroupArray"},
{text: "NSUser.GetName", help: "<b>String GetName()<\/b>\n\nInitials, also login name, possibly database user name\r\n\r\n\\return String"},
{text: "NSUser.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSUser.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSUser.SetCredentials", help: "<b>Void SetCredentials(NSCredential[] p_0)<\/b>\n\n\\param p_0 Credentials: CredentialArray\r\n\\return CredentialArray"},
{text: "NSUser.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIf true, the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSUser.SetEjUserId", help: "<b>Void SetEjUserId(Integer p_0)<\/b>\n\nID of the ej user record corresponding to this associate; 0 for associates that are not ej users\r\n\r\n\\param p_0 EjUserId: Integer\r\n\\return Integer"},
{text: "NSUser.SetIsOnTravel", help: "<b>Void SetIsOnTravel(Bool p_0)<\/b>\n\n\\param p_0 IsOnTravel: Bool\r\n\\return Bool"},
{text: "NSUser.SetIsPersonRetired", help: "<b>Void SetIsPersonRetired(Bool p_0)<\/b>\n\nTrue if the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\param p_0 IsPersonRetired: Bool\r\n\\return Bool"},
{text: "NSUser.SetLastlogin", help: "<b>Void SetLastlogin(DateTime p_0)<\/b>\n\nLast login date\r\n\r\n\\param p_0 Lastlogin: DateTime\r\n\\return DateTime"},
{text: "NSUser.SetLastlogout", help: "<b>Void SetLastlogout(DateTime p_0)<\/b>\n\nLast logout date\r\n\r\n\\param p_0 Lastlogout: DateTime\r\n\\return DateTime"},
{text: "NSUser.SetLicenseOwners", help: "<b>Void SetLicenseOwners(NSLicenseOwner[] p_0)<\/b>\n\nThe restricted and unrestricted module licenses grouped by license owner. These module licenses are either assigned or unassigned to this user\r\n\r\n\\param p_0 LicenseOwners: LicenseOwnerArray\r\n\\return LicenseOwnerArray"},
{text: "NSUser.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nInitials, also login name, possibly database user name\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSUser.SetOtherGroups", help: "<b>Void SetOtherGroups(NSUserGroup[] p_0)<\/b>\n\nThe other groups this user is a member of, apart from the main user group\r\n\r\n\\param p_0 OtherGroups: UserGroupArray\r\n\\return UserGroupArray"},
{text: "NSUser.SetPerson", help: "<b>Void SetPerson(NSPerson p_0)<\/b>\n\nThe person associated with this user. Detailed information about the user\r\n\r\n\\param p_0 Person: Person\r\n\\return Person"},
{text: "NSUser.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSUser.SetRole", help: "<b>Void SetRole(NSRole p_0)<\/b>\n\nUsers role for role-based security\r\n\r\n\\param p_0 Role: Role\r\n\\return Role"},
{text: "NSUser.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSUser.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSUser.SetUserGroup", help: "<b>Void SetUserGroup(NSUserGroup p_0)<\/b>\n\nThe main user group that this user belongs to\r\n\r\n\\param p_0 UserGroup: UserGroup\r\n\\return UserGroup"},
{text: "Void.NSUserAgent", help: "<b>NSUserAgent<\/b>\n\n"},
{text: "NSUserAgent.ChangeOwnPassword", help: "<b>Bool ChangeOwnPassword(String p_0, String p_1)<\/b>\n\nChange password for a user.\r\n\r\n\\param p_0 oldPassword: The current password of the user.  Administrators can leave this blank to force a new password upon a user.\r\n\\param p_1 newPassword: The new password for the user\r\n\\return True if the password was successfully changed.\r\n"},
{text: "NSUserAgent.ChangePassword", help: "<b>Bool ChangePassword(Integer p_0, String p_1, String p_2)<\/b>\n\nChange password for a user.\r\n\r\n\\param p_0 associateId: AssociateId of the user to change password for.\r\n\\param p_1 oldPassword: The current password of the user.  Administrators can leave this blank to force a new password upon a user.\r\n\\param p_2 newPassword: The new password for the user\r\n\\return True if the password was successfully changed.\r\n"},
{text: "NSUserAgent.ChangePasswordFromName", help: "<b>Bool ChangePasswordFromName(String p_0, String p_1, String p_2)<\/b>\n\nChange password for a user.\r\n\r\n\\param p_0 associateName: AssociateId of the user to change password for.\r\n\\param p_1 oldPassword: The current password of the user.  Administrators can leave this blank to force a new password upon a user.\r\n\\param p_2 newPassword: The new password for the user\r\n\\return True if the password was successfully changed.\r\n"},
{text: "NSUserAgent.DeleteCredential", help: "<b>Bool DeleteCredential(Integer p_0, String p_1)<\/b>\n\nRemove credential of a specific type for a user\r\n\r\n\\param p_0 userId: Primary key of the user (i.e. associate)\r\n\\param p_1 credentialType: Type of credentials, corresponding to name of plugin and type in the credentials table\r\n\\return True if credential was sucessfully removed.\r\n"},
{text: "NSUserAgent.IsPasswordValid", help: "<b>Bool IsPasswordValid(Integer p_0, Integer p_1, Integer p_2, String p_3)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n\\param p_1 type\r\n\\param p_2 personId\r\n\\param p_3 password\r\n"},
{text: "NSUserAgent.IsUserNameValid", help: "<b>Bool IsUserNameValid(Integer p_0, Integer p_1, Integer p_2, String p_3)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n\\param p_1 type\r\n\\param p_2 personId\r\n\\param p_3 userName\r\n"},
{text: "NSUserAgent.SaveCredential", help: "<b>Bool SaveCredential(Integer p_0, NSCredential p_1)<\/b>\n\nSave (adds\/replaces) current credential of the same type for the user.\r\n\r\n\\param p_0 userId: Primary key of the user (i.e. associate)\r\n\\param p_1 credential: Credentials supported for authentication\r\n\\return True if the credential was successfully saved.\r\n"},
{text: "NSUserAgent.SetPassword", help: "<b>Bool SetPassword(Integer p_0, String p_1)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n\\param p_1 password\r\n"},
{text: "NSUserAgent.SetPasswordFromName", help: "<b>Bool SetPasswordFromName(String p_0, String p_1)<\/b>\n\n\r\n\r\n\\param p_0 associateName\r\n\\param p_1 password\r\n"},
{text: "NSUserAgent.CreateExternalUser", help: "<b>Integer CreateExternalUser(Integer p_0, String p_1, String p_2, Integer p_3, Bool p_4)<\/b>\n\nCreates an associate of type external user.\r\n\r\n\\param p_0 personId: The personId to create an external user for.\r\n\\param p_1 userName: Login username.\r\n\\param p_2 password: Login password.\r\n\\param p_3 roleId: Id of role for the external user. The role must be a role of type external users.\r\n\\param p_4 isActive: Set isActive to true to enable the external user to log in.\r\n\\return Returns the created associateId.\r\n"},
{text: "NSUserAgent.FindRolesWithFunctionalRights", help: "<b>Integer[] FindRolesWithFunctionalRights(String[] p_0)<\/b>\n\nThis method will find all roles with a given set of functional rights for the given role. The roles matched must contain one or more of the specified functional rights.\r\n\r\n\\param p_0 functionalRightNames: An array of functional rights names to search for\r\n\\return Role ids that contains your functional rights"},
{text: "NSUserAgent.FindRolesWithoutFunctionalRights", help: "<b>Integer[] FindRolesWithoutFunctionalRights(String[] p_0)<\/b>\n\nThis method will find all roles without a given set of functional rights for the given role. The roles matched must not contain any of the specified functional rights.\r\n\r\n\\param p_0 functionalRightNames: An array of functional rights names to search for\r\n\\return Role ids that without your functional rights"},
{text: "NSUserAgent.FindCredentialsGroups", help: "<b>NSCredentialsGroup[] FindCredentialsGroups(String p_0, String p_1)<\/b>\n\nGet user groups holding users filtered by the searchString.  This method is only relevant if the CredentialType control is of type link.  There will allways be at least one groups even if the underlying provider does not support groups.\r\n\r\n\\param p_0 type: Type of credentials, corresponding to name of plugin and type in the credentials table.\r\n\\param p_1 searchString: Partly name of domain group."},
{text: "NSUserAgent.GetCredentialsGroups", help: "<b>NSCredentialsGroup[] GetCredentialsGroups(String p_0)<\/b>\n\nGet user groups holding users.  This method is only relevant if the CredentialType control is of type link.  There will allways be at least one groups even if the underlying provider does not support groups.\r\n\r\n\\param p_0 type: Type of credentials, corresponding to name of plugin and type in the credentials table.\r\n"},
{text: "NSUserAgent.FindCredentialUsers", help: "<b>NSCredentialsGroupUsers FindCredentialUsers(String p_0, String p_1)<\/b>\n\nFind users matching the partial name.\r\n\r\n\\param p_0 type: Type of credentials, corresponding to name of plugin and type in the credentials table.\r\n\\param p_1 searchString: Partly name of the user group"},
{text: "NSUserAgent.GetCredentialUsers", help: "<b>NSCredentialsGroupUsers GetCredentialUsers(String p_0, String p_1)<\/b>\n\nGet credential users within a user group\r\n\r\n\\param p_0 type: Type of credentials, corresponding to name of plugin and type in the credentials table.\r\n\\param p_1 groupName: Name of user group needed to discover the users.\r\n"},
{text: "NSUserAgent.GetCredentialUsersInGroup", help: "<b>NSCredentialsGroupUsers GetCredentialUsersInGroup(String p_0, String p_1)<\/b>\n\nGet credential users within a user group\r\n\r\n\\param p_0 type: Type of credentials, corresponding to name of plugin and type in the credentials table.\r\n\\param p_1 groupName: Name of user group needed to discover the users."},
{text: "NSUserAgent.GetCredentialTypes", help: "<b>NSCredentialType[] GetCredentialTypes()<\/b>\n\nGet available credential types that can be used for authentication\r\n\r\n\\return Credential types that can be used for authentication\r\n"},
{text: "NSUserAgent.ResolveUserFromInfo", help: "<b>NSResolvedUser ResolveUserFromInfo(Integer p_0, String p_1, String[] p_2, String[] p_3, Integer p_4, NSCredential p_5)<\/b>\n\nGet a user from the provided information. If the user or associated person does not exist, it will be created on demand.\r\n\r\n\\param p_0 contactId: The contact Id of the contact which the person belongs to. Cannot be 0.\r\n\\param p_1 personName: The full name of the person to be resolved. Optional.\r\n\\param p_2 phoneNumbers: Phone numbers registered on the person. Optional.\r\n\\param p_3 emails: Email-addresses registered on the person. Optional.\r\n\\param p_4 userType: The type of user to look up or create.\r\n\\param p_5 credential: The credentials to be used for the user. Required.\r\n\\return The results of the resolve-operation."},
{text: "NSUserAgent.GetRole", help: "<b>NSRole GetRole(Integer p_0)<\/b>\n\nGets a Role object.\r\n\r\n\\param p_0 roleId: The identifier of the Role object\r\n\\return Role"},
{text: "NSUserAgent.CreateDefaultRoleEntity", help: "<b>NSRoleEntity CreateDefaultRoleEntity()<\/b>\n\nLoading default values into a new RoleEntity.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New RoleEntity with default values"},
{text: "NSUserAgent.CreateDefaultRoleEntityFromType", help: "<b>NSRoleEntity CreateDefaultRoleEntityFromType(Integer p_0)<\/b>\n\nThis method will create a new role entity of the specified role type. The role type cannot be changed after the entity is created.\r\n\r\n\\param p_0 type: Type of role (Employee\/External\/Anonymous\/System)"},
{text: "NSUserAgent.GetRoleEntity", help: "<b>NSRoleEntity GetRoleEntity(Integer p_0)<\/b>\n\nGets a RoleEntity object.\r\n\r\n\\param p_0 roleEntityId: The identifier of the RoleEntity object\r\n\\return RoleEntity"},
{text: "NSUserAgent.SaveRoleEntity", help: "<b>NSRoleEntity SaveRoleEntity(NSRoleEntity p_0)<\/b>\n\nUpdates the existing RoleEntity or creates a new RoleEntity if the id parameter is empty\r\n\r\n\\param p_0 roleEntity: The RoleEntity that is saved\r\n\\return New or updated RoleEntity"},
{text: "NSUserAgent.GetAllFunctionalRights", help: "<b>NSSelectableMDOListItem[] GetAllFunctionalRights(Integer p_0)<\/b>\n\nGet a list of all functional rights for the given type of role. MDO List name = 'FunctionRights', extra='roleType=0'\r\n\r\n\\param p_0 roleType: Type of role (Employee\/External\/Anonymous\/System)\r\n\\return FunctionRight items with name and description. Code name for function right is in the extra-info property."},
{text: "NSUserAgent.GetAllRoles", help: "<b>NSSelectableMDOListItem[] GetAllRoles(Integer p_0)<\/b>\n\nGet a list of all roles for the given type of role. MDO List name = 'Roles', extra='0' (roleType)\r\n\r\n\\param p_0 roleType: Type of role (Employee\/External\/Anonymous\/System)\r\n\\return FunctionRight items with name and description. Code name for function right is in the extra-info property."},
{text: "NSUserAgent.GetFunctionalRights", help: "<b>NSSelectableMDOListItem[] GetFunctionalRights(Integer p_0)<\/b>\n\nGet all functional rights for the given role. Functional rights not set on the role are not included. MDO List name = 'FunctionRights', extra='role=123'\r\n\r\n\\param p_0 roleId: The role id to get the functional rights for.\r\n\\return FunctionRight items with name and description. Code name for function right is in the extra-info property."},
{text: "NSUserAgent.CreateDefaultUntrustedCredentials", help: "<b>NSUntrustedCredentials CreateDefaultUntrustedCredentials()<\/b>\n\nLoading default values into a new UntrustedCredentials.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New UntrustedCredentials with default values\r\n"},
{text: "NSUserAgent.GetUntrustedCredentials", help: "<b>NSUntrustedCredentials[] GetUntrustedCredentials(String p_0)<\/b>\n\nGet a set of credentials of a specified type for authenticated user.\r\n\r\n\\param p_0 type: Type of credential(Ex: \"imap\", \"smtp\").\r\n\\return Array of credentials of the specified type.\r\n"},
{text: "NSUserAgent.GetUntrustedCredentialsForAssociate", help: "<b>NSUntrustedCredentials[] GetUntrustedCredentialsForAssociate(Integer p_0, String p_1)<\/b>\n\nGet a set of credentials of a specified type for a specified user. SecretValue is only populated for authenticated user, and system users.\r\n\r\n\\param p_0 associateId: Id of user to retrieve credentials for.\r\n\\param p_1 type: Type of credential(Ex: \"imap\", \"smtp\").\r\n\\return Array of credentials of the specified type.\r\n"},
{text: "NSUserAgent.ChangeUserType", help: "<b>NSUser ChangeUserType(NSUser p_0, Integer p_1)<\/b>\n\nGet a user from the user name.\r\n\r\n\\param p_0 user: User name of the user to get.\r\n\\param p_1 userType\r\n\\return User retrieved by name\r\n"},
{text: "NSUserAgent.CreateDefaultUser", help: "<b>NSUser CreateDefaultUser()<\/b>\n\nLoading default values into a new User.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New User with default values\r\n"},
{text: "NSUserAgent.CreateDefaultUserFromUserType", help: "<b>NSUser CreateDefaultUserFromUserType(Integer p_0)<\/b>\n\nCreate default User providing the user type.  Only System and Anonymous users can be created without an exsisting person.  Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.\r\n\r\n\\param p_0 userType: Type of associate for the user.  This can only be System or Anonymous. Use CreateDefaultUserFromUserTypeAndPersonId to create internal (i.e. Employee) or external users.\r\n\\return New user object with defalt values set.\r\n"},
{text: "NSUserAgent.CreateDefaultUserFromUserTypeAndCredential", help: "<b>NSUser CreateDefaultUserFromUserTypeAndCredential(Integer p_0, Integer p_1, String p_2, String p_3, String p_4)<\/b>\n\nCreates a PersonEntity with default values based on the contactId and credentials.\r\n\r\n\\param p_0 userType: Type of associate for the user\r\n\\param p_1 contactId: Contact id of the person\r\n\\param p_2 credentialType: Type of credentials, corresponding to name of plugin and type in the credentials table.\r\n\\param p_3 credentialValue: This is the actuall value of the credentials.  This will typically be the password or teh users SID in active directory\r\n\\param p_4 credentialDisplayValue: The value displayed to the user. this will typically be the users login name in active directory.\r\n"},
{text: "NSUserAgent.CreateDefaultUserFromUserTypeAndPersonId", help: "<b>NSUser CreateDefaultUserFromUserTypeAndPersonId(Integer p_0, Integer p_1)<\/b>\n\nCreate default User providing the associate type and person id.  System and Anonymous users can be created without an exsisting person and permitts person id to be 0.\r\n\r\n\\param p_0 userType: Type of associate for the user\r\n\\param p_1 personId: Primary key of the person to become a user.\r\n\\return New user object with defalt values set.\r\n"},
{text: "NSUserAgent.GetUser", help: "<b>NSUser GetUser(Integer p_0)<\/b>\n\nGets a User object.\r\n\r\n\\param p_0 userId: The identifier of the User object\r\n\\return User\r\n"},
{text: "NSUserAgent.GetUserFromName", help: "<b>NSUser GetUserFromName(String p_0)<\/b>\n\nGet a user from the user name.\r\n\r\n\\param p_0 userName: User name of the user to get.\r\n\\return User retrieved by name\r\n"},
{text: "NSUserAgent.SaveUser", help: "<b>NSUser SaveUser(NSUser p_0)<\/b>\n\nUpdates the existing User or creates a new User if the id parameter is empty\r\n\r\n\\param p_0 user: The User that is saved\r\n\\return New or updated User"},
{text: "NSUserAgent.GetUserFromEjUserId", help: "<b>NSUser[] GetUserFromEjUserId(Integer p_0)<\/b>\n\nGet user from ejUserId - used for eJournal Legacy Support.\r\n\r\n\\param p_0 ejUserId: ejUserId -\r\n"},
{text: "NSUserAgent.GetUserFromPersonId", help: "<b>NSUser[] GetUserFromPersonId(Integer p_0)<\/b>\n\nReturns the user associated with the supplied person id\r\n\r\n\\param p_0 personId\r\n"},
{text: "NSUserAgent.CreateUserGroup", help: "<b>NSUserGroup CreateUserGroup()<\/b>\n\nCreate UserGroup (Rank is assigned to the highest rank)\r\n\r\n"},
{text: "NSUserAgent.GetUserGroup", help: "<b>NSUserGroup GetUserGroup(Integer p_0)<\/b>\n\nGets a UserGroup object.\r\n\r\n\\param p_0 userGroupId: The identifier of the UserGroup object\r\n\\return UserGroup\r\n"},
{text: "NSUserAgent.SaveUserGroup", help: "<b>NSUserGroup SaveUserGroup(NSUserGroup p_0)<\/b>\n\nSave a user group.  Set UserGroup.Deleted to mark a user group as deleted and invisible in the user interface.\r\n\r\n\\param p_0 userGroup: UserGroup to save\r\n\\return UserGroup as saved to the database\r\n"},
{text: "NSUserAgent.GetAllUserGroups", help: "<b>NSUserGroup[] GetAllUserGroups(Bool p_0)<\/b>\n\nGet all user groups\r\n\r\n\\param p_0 includeDeleted: Include user groups with Deleted set to true\r\n\\return All user groups\r\n"},
{text: "NSUserAgent.GetUserGroupList", help: "<b>NSUserGroup[] GetUserGroupList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSUserAgent.GetUserGroupList", help: "<b>NSUserGroupList[] GetUserGroupList(Integer[] p_0)<\/b>\n\nGets an array of UserGroup objects.\r\n\r\n\\param p_0 userGroupIds: The identifiers of the UserGroup object\r\n\\return Array of UserGroup objects\r\n"},
{text: "NSUserAgent.GetUserInfo", help: "<b>NSUserInfo GetUserInfo(Integer p_0)<\/b>\n\nGets a UserInfo object.\r\n\r\n\\param p_0 userInfoId: The identifier of the UserInfo object\r\n\\return UserInfo\r\n"},
{text: "NSUserAgent.GetUserInfoList", help: "<b>NSUserInfo[] GetUserInfoList(Integer[] p_0)<\/b>\n\n\\return IntegerArray"},
{text: "NSUserAgent.GetUserInfoList", help: "<b>NSUserInfoList[] GetUserInfoList(Integer[] p_0)<\/b>\n\nGets an array of UserInfo objects.\r\n\r\n\\param p_0 userInfoIds: The identifiers of the UserInfo object\r\n\\return Array of UserInfo objects\r\n"},
{text: "NSUserAgent.IsPasswordValidWithReason", help: "<b>NSUserValidationResult IsPasswordValidWithReason(Integer p_0, Integer p_1, Integer p_2, String p_3)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n\\param p_1 type\r\n\\param p_2 personId\r\n\\param p_3 password\r\n"},
{text: "NSUserAgent.IsUserNameValidWithReason", help: "<b>NSUserValidationResult IsUserNameValidWithReason(Integer p_0, Integer p_1, Integer p_2, String p_3)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n\\param p_1 type\r\n\\param p_2 personId\r\n\\param p_3 userName\r\n"},
{text: "NSUserAgent.GenerateNewPasswordForExternalUser", help: "<b>String GenerateNewPasswordForExternalUser(String p_0)<\/b>\n\nGenerates a new password for an external user.\r\n\r\n\\param p_0 associateName: The name of the associate to change the password for.\r\n\\return Returns the generated password.\r\n"},
{text: "NSUserAgent.GetValidUserName", help: "<b>String GetValidUserName(Integer p_0, Integer p_1, Integer p_2, String p_3)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n\\param p_1 type\r\n\\param p_2 personId\r\n\\param p_3 userName\r\n"},
{text: "NSUserAgent.SetGeneratedPassword", help: "<b>String SetGeneratedPassword(Integer p_0)<\/b>\n\n\r\n\r\n\\param p_0 associateId\r\n"},
{text: "NSUserAgent.SetGeneratedPasswordFromName", help: "<b>String SetGeneratedPasswordFromName(String p_0)<\/b>\n\n\r\n\r\n\\param p_0 associateName\r\n"},
{text: "NSUserAgent.AddOwnerContact", help: "<b>Void AddOwnerContact(Integer p_0)<\/b>\n\n\\param p_0 contactId: Id of the contact to add as a owner contact"},
{text: "NSUserAgent.DeleteExternalUser", help: "<b>Void DeleteExternalUser(Integer p_0)<\/b>\n\nDeletes an associate of type external user.\r\n\r\n\\param p_0 associateId: The associateId to delete the associate entry for.\r\n"},
{text: "NSUserAgent.DeleteRole", help: "<b>Void DeleteRole(Integer p_0, Integer p_1)<\/b>\n\nThis method will delete the specified role and move all users associated with the role to the replacingRoleId\r\n\r\n\\param p_0 roleIdToDelete: The roleId to delete\r\n\\param p_1 replacingRoleId: The roleId which all associated users will be moved to."},
{text: "NSUserAgent.DeleteUser", help: "<b>Void DeleteUser(Integer p_0)<\/b>\n\nDeletes the User\r\n\r\n\\param p_0 userId: The identity of the User\r\n"},
{text: "NSUserAgent.DeleteUserGroup", help: "<b>Void DeleteUserGroup(Integer p_0, Integer p_1)<\/b>\n\nDelete a usergroup and move its members to another usergroup\r\n\r\n\\param p_0 userGroupToDelete: The id of the userGroup to delete\r\n\\param p_1 userGroupToMoveTo: The id of the userGroup to move the members to"},
{text: "NSUserAgent.MakeRetired", help: "<b>Void MakeRetired(Integer p_0, Bool p_1)<\/b>\n\nRetiring a user means to remove all licenses, setting person.retired=1 and associate.deleted=1. Unretiering a user means setting  person.retired=0 and associate.deleted=0\r\n\r\n\\param p_0 associateId\r\n\\param p_1 retired"},
{text: "NSUserAgent.RemoveLicenses", help: "<b>Void RemoveLicenses(Integer p_0)<\/b>\n\nRemove all user licenses.\r\n\r\n\\param p_0 associateId"},
{text: "NSUserAgent.RemoveOwnerContact", help: "<b>Void RemoveOwnerContact(Integer p_0)<\/b>\n\nRemove a contact from the ownercontactlink table\r\n\r\n\\param p_0 contactId: The id of the contact to remove"},
{text: "NSUserAgent.RemoveUntrustedCredentials", help: "<b>Void RemoveUntrustedCredentials(String p_0, String p_1)<\/b>\n\nRemove a credentials entry for authenticated user.\r\n\r\n\\param p_0 type: Type of credential(Ex: \"imap\", \"smtp\")\r\n\\param p_1 publicValue: PublicValue field of credentials to remove.\r\n"},
{text: "NSUserAgent.RemoveUntrustedCredentialsForAssociate", help: "<b>Void RemoveUntrustedCredentialsForAssociate(Integer p_0, String p_1, String p_2)<\/b>\n\nRemove a credentials entry for a specified user.\r\n\r\n\\param p_0 associateId: Id of user to remove credentials for.\r\n\\param p_1 type: Type of credential(Ex: \"imap\", \"smtp\")\r\n\\param p_2 publicValue: PublicValue field of credentials to remove.\r\n"},
{text: "NSUserAgent.SaveUntrustedCredentials", help: "<b>Void SaveUntrustedCredentials(String p_0, NSUntrustedCredentials p_1)<\/b>\n\nSave credentials for authenticated user.\r\n\r\n\\param p_0 type: Type of credential(Ex: \"imap\", \"smtp\")\r\n\\param p_1 credentials: Credentials to save.\r\n"},
{text: "NSUserAgent.SaveUntrustedCredentialsForAssociate", help: "<b>Void SaveUntrustedCredentialsForAssociate(Integer p_0, String p_1, NSUntrustedCredentials p_2)<\/b>\n\nSave credentials for a specified user.\r\n\r\n\\param p_0 associateId: Id of user to save credentials for.\r\n\\param p_1 type: Type of credential(Ex: \"imap\", \"smtp\")\r\n\\param p_2 credentials: Credentials to save.\r\n"},
{text: "NSUserAgent.SaveUser", help: "<b>Void SaveUser(NSUser p_0)<\/b>\n\nUpdates the existing User or creates a new User if the id parameter is empty\r\n\r\n\\param p_0 user: The User that is saved.\r\n\\return New or updated User\r\n"},
{text: "NSUserAgent.SetDataRight", help: "<b>Void SetDataRight(Integer p_0, String p_1, Integer p_2, String p_3)<\/b>\n\nThis method will set one specific data right at the given position. An exception will be thrown if non existing position is specified.\r\n\r\n\\param p_0 roleId: The role id to set the data right for\r\n\\param p_1 tableName: The name of the entity\/table\r\n\\param p_2 relationToOwner: The id of the relation to owner\r\n\\param p_3 dataRightValue: The data right value to set at the specified position (CRUD)"},
{text: "NSUserAgent.SetExternalUserInfo", help: "<b>Void SetExternalUserInfo(Integer p_0, String p_1, String p_2, Bool p_3, Integer p_4, Integer p_5)<\/b>\n\nModifies an external user. Changes external users information according to the flags set in  externalUserInfoModification.\r\n\r\n\\param p_0 associateId: The associateId to alter.\r\n\\param p_1 userName: Login username.\r\n\\param p_2 password: Login password.\r\n\\param p_3 isActive: Set isActive to true to enable the external user to log in.\r\n\\param p_4 roleId: Id of role for the external user. The role must be a role of type external users.\r\n\\param p_5 externalUserInfoModification: externalUserInfoModification is a flag describing what to change. <see cref=\"SuperOffice.CRM.Services.Util.ExternalUserInfoModification\"\/>.\r\n"},
{text: "NSUserAgent.SetFunctionalRights", help: "<b>Void SetFunctionalRights(Integer p_0, Integer[] p_1)<\/b>\n\nThis method will set all functional rights for the given role. Functional rights not specified here will be removed from the role.\r\n\r\n\\param p_0 roleId: The role id to set the functional rights for\r\n\\param p_1 functionalRightIds: An array of functional rights ids to set for this role. Rights not included here are removed from the role."},
{text: "Void.NSUserDefinedFieldInfo", help: "<b>NSUserDefinedFieldInfo<\/b>\n\nReturn information about the user defined fields. The information can be used to mirror the layout of the user-defined fields in the user interface."},
{text: "NSUserDefinedFieldInfo.GetHasBeenPublished", help: "<b>Bool GetHasBeenPublished()<\/b>\n\nHas the udef field been published?\r\n\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.GetHideLabel", help: "<b>Bool GetHideLabel()<\/b>\n\nHide the label if 1\r\n\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.GetIsIndexed", help: "<b>Bool GetIsIndexed()<\/b>\n\nIs this field indexed? 0 if no, index no. if yes\r\n\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.GetIsMandatory", help: "<b>Bool GetIsMandatory()<\/b>\n\n0 = no, 1 = yes (field must be filled out)\r\n\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.GetIsReadOnly", help: "<b>Bool GetIsReadOnly()<\/b>\n\n0 = read\/write, 1 = readonly (don't combine with mandatory  8-) )\r\n\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.GetColumnId", help: "<b>Integer GetColumnId()<\/b>\n\nThe ID of the database column this field corresponds to\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetFieldHeight", help: "<b>Integer GetFieldHeight()<\/b>\n\nfield height in pixels, 0 = 'enough' (from font)\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetFieldLeft", help: "<b>Integer GetFieldLeft()<\/b>\n\nX pixel coordinate of field\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetFieldTop", help: "<b>Integer GetFieldTop()<\/b>\n\nY pixel coordinate of field\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetFieldType", help: "<b>Integer GetFieldType()<\/b>\n\nField type: 0 = leadtext only, 1 = Edit, 2 = CheckBox, 3 = dropdown, 4 = listbox\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetFieldWidth", help: "<b>Integer GetFieldWidth()<\/b>\n\nfield width in pixels, 0 = 'enough' (from font)\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetJustification", help: "<b>Integer GetJustification()<\/b>\n\n"},
{text: "NSUserDefinedFieldInfo.GetLabelHeight", help: "<b>Integer GetLabelHeight()<\/b>\n\nlabel height in pixels, 0 = 'enough' (from font)\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetLabelLeft", help: "<b>Integer GetLabelLeft()<\/b>\n\nX pixel coordinate of label\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetLabelTop", help: "<b>Integer GetLabelTop()<\/b>\n\nY pixel coordinate of label\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetLabelWidth", help: "<b>Integer GetLabelWidth()<\/b>\n\nlabel width in pixels, 0 = 'enough' (from font)\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetLastVersionId", help: "<b>Integer GetLastVersionId()<\/b>\n\nUDefFieldId this field had in the previous version, 0 = field is new in this version\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetListTableId", help: "<b>Integer GetListTableId()<\/b>\n\nThe table ID of the source table for lists: kTableAssoc, kTableContInt or whatever\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetOwnerTableId", help: "<b>Integer GetOwnerTableId()<\/b>\n\nID of owning table (contact, person, project)\r\n\r\n"},
{text: "NSUserDefinedFieldInfo.GetPage1LineNo", help: "<b>Integer GetPage1LineNo()<\/b>\n\nLine no on View Page 1, used if MDO flags are OFF. 0 = this field is not visible on page 1\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetTabOrder", help: "<b>Integer GetTabOrder()<\/b>\n\nTab order value, sets the field processing sequence\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetTextLength", help: "<b>Integer GetTextLength()<\/b>\n\nLength (in characters) of a text field, 0 for other types\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetType", help: "<b>Integer GetType()<\/b>\n\nID of owning table (contact, person, project)\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetUDefFieldId", help: "<b>Integer GetUDefFieldId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetUdefIdentity", help: "<b>Integer GetUdefIdentity()<\/b>\n\nUnique number used to track field identity across layout changes\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetUDListDefinitionId", help: "<b>Integer GetUDListDefinitionId()<\/b>\n\nList to use for populating dropdown or listbox\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetVersion", help: "<b>Integer GetVersion()<\/b>\n\nDefinition version number; ALL fields get new version whenever layout is updated.\r\n\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.GetJustification", help: "<b>NSUdefJustification GetJustification()<\/b>\n\nJustification - 0 = default, left, right, center\r\n\r\n\\return UdefJustification"},
{text: "NSUserDefinedFieldInfo.GetFieldDefault", help: "<b>String GetFieldDefault()<\/b>\n\nOptional default value for String fields\r\n\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.GetFieldLabel", help: "<b>String GetFieldLabel()<\/b>\n\nThe label (lead text)\r\n\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.GetFormatMask", help: "<b>String GetFormatMask()<\/b>\n\nFormatting mask, can be whatever the controls understand (currently nothing :-))\r\n\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.GetProgId", help: "<b>String GetProgId()<\/b>\n\nProgrammatic ID, for use by software that needs to find a particular field. Carried over like udefIdentity across generations. Use a Company.Product.Field format to avoid naming conflicts; the Company name SuperOffice is reserved.\r\n\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.GetShortLabel", help: "<b>String GetShortLabel()<\/b>\n\nShort name to be used in Archive headings and on page 1. If blank, the fieldLabel will be used everywhere.\r\n\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.GetTemplateVariableName", help: "<b>String GetTemplateVariableName()<\/b>\n\nTemplate variable name\r\n\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nOptional tooltip text for this field\r\n\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.SetColumnId", help: "<b>Void SetColumnId(Integer p_0)<\/b>\n\nThe ID of the database column this field corresponds to\r\n\r\n\\param p_0 ColumnId: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetFieldDefault", help: "<b>Void SetFieldDefault(String p_0)<\/b>\n\nOptional default value for String fields\r\n\r\n\\param p_0 FieldDefault: String\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.SetFieldHeight", help: "<b>Void SetFieldHeight(Integer p_0)<\/b>\n\nfield height in pixels, 0 = 'enough' (from font)\r\n\r\n\\param p_0 FieldHeight: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetFieldLabel", help: "<b>Void SetFieldLabel(String p_0)<\/b>\n\nThe label (lead text)\r\n\r\n\\param p_0 FieldLabel: String\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.SetFieldLeft", help: "<b>Void SetFieldLeft(Integer p_0)<\/b>\n\nX pixel coordinate of field\r\n\r\n\\param p_0 FieldLeft: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetFieldTop", help: "<b>Void SetFieldTop(Integer p_0)<\/b>\n\nY pixel coordinate of field\r\n\r\n\\param p_0 FieldTop: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetFieldType", help: "<b>Void SetFieldType(Integer p_0)<\/b>\n\nField type: 0 = leadtext only, 1 = Edit, 2 = CheckBox, 3 = dropdown, 4 = listbox\r\n\r\n\\param p_0 FieldType: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetFieldWidth", help: "<b>Void SetFieldWidth(Integer p_0)<\/b>\n\nfield width in pixels, 0 = 'enough' (from font)\r\n\r\n\\param p_0 FieldWidth: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetFormatMask", help: "<b>Void SetFormatMask(String p_0)<\/b>\n\nFormatting mask, can be whatever the controls understand (currently nothing :-))\r\n\r\n\\param p_0 FormatMask: String\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.SetHasBeenPublished", help: "<b>Void SetHasBeenPublished(Bool p_0)<\/b>\n\nHas the udef field been published?\r\n\r\n\\param p_0 HasBeenPublished: Bool\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.SetHideLabel", help: "<b>Void SetHideLabel(Bool p_0)<\/b>\n\nHide the label if 1\r\n\r\n\\param p_0 HideLabel: Bool\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.SetIsIndexed", help: "<b>Void SetIsIndexed(Bool p_0)<\/b>\n\nIs this field indexed? 0 if no, index no. if yes\r\n\r\n\\param p_0 IsIndexed: Bool\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.SetIsMandatory", help: "<b>Void SetIsMandatory(Bool p_0)<\/b>\n\n0 = no, 1 = yes (field must be filled out)\r\n\r\n\\param p_0 IsMandatory: Bool\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.SetIsReadOnly", help: "<b>Void SetIsReadOnly(Bool p_0)<\/b>\n\n0 = read\/write, 1 = readonly (don't combine with mandatory  8-) )\r\n\r\n\\param p_0 IsReadOnly: Bool\r\n\\return Bool"},
{text: "NSUserDefinedFieldInfo.SetJustification", help: "<b>Void SetJustification(Integer p_0)<\/b>\n\n"},
{text: "NSUserDefinedFieldInfo.SetJustification", help: "<b>Void SetJustification(NSUdefJustification p_0)<\/b>\n\nJustification - 0 = default, left, right, center\r\n\r\n\\param p_0 Justification: UdefJustification\r\n\\return UdefJustification"},
{text: "NSUserDefinedFieldInfo.SetLabelHeight", help: "<b>Void SetLabelHeight(Integer p_0)<\/b>\n\nlabel height in pixels, 0 = 'enough' (from font)\r\n\r\n\\param p_0 LabelHeight: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetLabelLeft", help: "<b>Void SetLabelLeft(Integer p_0)<\/b>\n\nX pixel coordinate of label\r\n\r\n\\param p_0 LabelLeft: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetLabelTop", help: "<b>Void SetLabelTop(Integer p_0)<\/b>\n\nY pixel coordinate of label\r\n\r\n\\param p_0 LabelTop: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetLabelWidth", help: "<b>Void SetLabelWidth(Integer p_0)<\/b>\n\nlabel width in pixels, 0 = 'enough' (from font)\r\n\r\n\\param p_0 LabelWidth: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetLastVersionId", help: "<b>Void SetLastVersionId(Integer p_0)<\/b>\n\nUDefFieldId this field had in the previous version, 0 = field is new in this version\r\n\r\n\\param p_0 LastVersionId: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetListTableId", help: "<b>Void SetListTableId(Integer p_0)<\/b>\n\nThe table ID of the source table for lists: kTableAssoc, kTableContInt or whatever\r\n\r\n\\param p_0 ListTableId: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetOwnerTableId", help: "<b>Void SetOwnerTableId(Integer p_0)<\/b>\n\nID of owning table (contact, person, project)\r\n\r\n"},
{text: "NSUserDefinedFieldInfo.SetPage1LineNo", help: "<b>Void SetPage1LineNo(Integer p_0)<\/b>\n\nLine no on View Page 1, used if MDO flags are OFF. 0 = this field is not visible on page 1\r\n\r\n\\param p_0 Page1LineNo: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetProgId", help: "<b>Void SetProgId(String p_0)<\/b>\n\nProgrammatic ID, for use by software that needs to find a particular field. Carried over like udefIdentity across generations. Use a Company.Product.Field format to avoid naming conflicts; the Company name SuperOffice is reserved.\r\n\r\n\\param p_0 ProgId: String\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.SetShortLabel", help: "<b>Void SetShortLabel(String p_0)<\/b>\n\nShort name to be used in Archive headings and on page 1. If blank, the fieldLabel will be used everywhere.\r\n\r\n\\param p_0 ShortLabel: String\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.SetTabOrder", help: "<b>Void SetTabOrder(Integer p_0)<\/b>\n\nTab order value, sets the field processing sequence\r\n\r\n\\param p_0 TabOrder: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetTemplateVariableName", help: "<b>Void SetTemplateVariableName(String p_0)<\/b>\n\nTemplate variable name\r\n\r\n\\param p_0 TemplateVariableName: String\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.SetTextLength", help: "<b>Void SetTextLength(Integer p_0)<\/b>\n\nLength (in characters) of a text field, 0 for other types\r\n\r\n\\param p_0 TextLength: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nOptional tooltip text for this field\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSUserDefinedFieldInfo.SetType", help: "<b>Void SetType(Integer p_0)<\/b>\n\nID of owning table (contact, person, project)\r\n\r\n\\param p_0 Type: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetUDefFieldId", help: "<b>Void SetUDefFieldId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 UDefFieldId: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetUdefIdentity", help: "<b>Void SetUdefIdentity(Integer p_0)<\/b>\n\nUnique number used to track field identity across layout changes\r\n\r\n\\param p_0 UdefIdentity: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetUDListDefinitionId", help: "<b>Void SetUDListDefinitionId(Integer p_0)<\/b>\n\nList to use for populating dropdown or listbox\r\n\r\n\\param p_0 UDListDefinitionId: Integer\r\n\\return Integer"},
{text: "NSUserDefinedFieldInfo.SetVersion", help: "<b>Void SetVersion(Integer p_0)<\/b>\n\nDefinition version number; ALL fields get new version whenever layout is updated.\r\n\r\n\\param p_0 Version: Integer\r\n\\return Integer"},
{text: "Void.NSUserDefinedFieldInfoAgent", help: "<b>NSUserDefinedFieldInfoAgent<\/b>\n\nReturns information about user-defined fields, like field type, field size, field label text, default value. Does not return the actual values in the user-defined fields. The values are returned on the entity objects."},
{text: "NSUserDefinedFieldInfoAgent.DetectColumnIdChanges", help: "<b>Bool DetectColumnIdChanges(Integer p_0)<\/b>\n\nDetect columnid changes to the admin version (for determining publish warning)\r\n\r\n\\param p_0 ownerType: The owner type\r\n\\return Returns true if columnid changes where found"},
{text: "NSUserDefinedFieldInfoAgent.DetectUnpublishedChanges", help: "<b>Bool DetectUnpublishedChanges(Integer p_0)<\/b>\n\nDetect changes to the admin version (unpublished)\r\n\r\n\\param p_0 ownerType: The owner type\r\n\\return Returns true if changes where found"},
{text: "NSUserDefinedFieldInfoAgent.IsAnyPublishEventActive", help: "<b>Bool IsAnyPublishEventActive()<\/b>\n\nCheck if any publish events are active"},
{text: "NSUserDefinedFieldInfoAgent.IsPublishEventActive", help: "<b>Bool IsPublishEventActive(Integer p_0)<\/b>\n\nCheck if the publish event is active for the given type\r\n\r\n\\param p_0 type"},
{text: "NSUserDefinedFieldInfoAgent.GetChangedPageOneFields", help: "<b>Boolean[] GetChangedPageOneFields(Integer p_0, Integer p_1)<\/b>\n\n"},
{text: "NSUserDefinedFieldInfoAgent.FigureOutListIdFromListTableIdAndUDListDefinitionId", help: "<b>Integer FigureOutListIdFromListTableIdAndUDListDefinitionId(NSUserDefinedFieldInfo p_0)<\/b>\n\nKind of the reverse of SetListTableIdAndUDListDefinitionIdFromSelectedListId\r\n\r\n\\param p_0 info"},
{text: "NSUserDefinedFieldInfoAgent.GetChangedPageOneFields", help: "<b>NSBoolean[] GetChangedPageOneFields(Integer p_0, Integer p_1)<\/b>\n\nGets which page one fields have changed from the current version\r\n\r\n\\param p_0 ownerType: The user-defined field owner-entity.\r\n\\param p_1 userGroupId: Id of UserGroup"},
{text: "NSUserDefinedFieldInfoAgent.ChangeFieldType", help: "<b>NSUserDefinedFieldInfo ChangeFieldType(NSUserDefinedFieldInfo p_0, Integer p_1, Bool p_2)<\/b>\n\nCreate a UserDefinedFieldInfo based on a owner-entity id\r\n\r\n\\param p_0 info: The user-defined field info carrier to want to modify\r\n\\param p_1 fieldType: The new field type you want\r\n\\param p_2 isIndexed: The new indexed status you want\r\n\\return Returns the user-defined field info carrier"},
{text: "NSUserDefinedFieldInfoAgent.CreateDefaultUserDefinedFieldInfo", help: "<b>NSUserDefinedFieldInfo CreateDefaultUserDefinedFieldInfo()<\/b>\n\nLoading default values into a new UserDefinedFieldInfo.\r\n\t\t  NetServer calculates default values (e.g. Country) on the entity, which is required when creating\/storing a new instance\r\n\r\n\\return New UserDefinedFieldInfo with default values"},
{text: "NSUserDefinedFieldInfoAgent.CreateUserDefinedFieldInfo", help: "<b>NSUserDefinedFieldInfo CreateUserDefinedFieldInfo(Integer p_0, Integer p_1)<\/b>\n\nCreate a UserDefinedFieldInfo based on a owner-entity id\r\n\r\n\\param p_0 ownerType: The user-defined field owner-entity id.\r\n\\param p_1 fieldType: The field type of the new field\r\n\\return Returns the user-defined field info carrier"},
{text: "NSUserDefinedFieldInfoAgent.GetUserDefinedFieldFromFieldLabel", help: "<b>NSUserDefinedFieldInfo GetUserDefinedFieldFromFieldLabel(String p_0, Integer p_1)<\/b>\n\nReturn information about the given user defined field identified by the owner and the field label. Note that field labels are fuzzy. Leading and trailing spaces and punctuation are ignored.\r\n\r\n\\param p_0 fieldLabel: The field label - the text label shown in the user interface. Trailing spaces and punctuation (\":\" and \".\") are ignored when searching.\r\n\\param p_1 ownerType: The user-defined field owner-entity id.\r\n\\return Returns the user-defined field info carrier, or null if no matching field is found."},
{text: "NSUserDefinedFieldInfoAgent.GetUserDefinedFieldFromProgId", help: "<b>NSUserDefinedFieldInfo GetUserDefinedFieldFromProgId(String p_0, Integer p_1)<\/b>\n\nReturn information about the given user defined field identified by the owner and the prog-id. The prog-id is used as the key in the entity carriers.\r\n\r\n\\param p_0 progId: The prog.id is a hidden name that uniquely identifies the field.\r\n\\param p_1 ownerType: The user-defined field owner-entity id.\r\n\\return Returns the user-defined field info carrier, or null if no matching field is found."},
{text: "NSUserDefinedFieldInfoAgent.GetUserDefinedFieldInfo", help: "<b>NSUserDefinedFieldInfo GetUserDefinedFieldInfo(Integer p_0)<\/b>\n\nGets a UserDefinedFieldInfo object.\r\n\r\n\\param p_0 userDefinedFieldInfoId: The identifier of the UserDefinedFieldInfo object\r\n\\return UserDefinedFieldInfo"},
{text: "NSUserDefinedFieldInfoAgent.SaveUserDefinedFieldInfo", help: "<b>NSUserDefinedFieldInfo SaveUserDefinedFieldInfo(NSUserDefinedFieldInfo p_0)<\/b>\n\nUpdates the existing UserDefinedFieldInfo or creates a new UserDefinedFieldInfo if the id parameter is empty\r\n\r\n\\param p_0 userDefinedFieldInfo: The UserDefinedFieldInfo that is saved\r\n\\return New or updated UserDefinedFieldInfo"},
{text: "NSUserDefinedFieldInfoAgent.SetListTableIdAndUDListDefinitionIdFromSelectedListId", help: "<b>NSUserDefinedFieldInfo SetListTableIdAndUDListDefinitionIdFromSelectedListId(NSUserDefinedFieldInfo p_0, Integer p_1)<\/b>\n\nMake stuff similar to what happens in the win client\r\n\r\n\\param p_0 info\r\n\\param p_1 selectedListId"},
{text: "NSUserDefinedFieldInfoAgent.GetUserDefinedFieldFromIds", help: "<b>NSUserDefinedFieldInfo[] GetUserDefinedFieldFromIds(Integer[] p_0)<\/b>\n\nReturn an given array of user defined field identified by the ids.\r\n\r\n\\param p_0 ids: Array of user defined field ids\r\n\\return Returns an array of user-defined field info carriers"},
{text: "NSUserDefinedFieldInfoAgent.GetUserDefinedFieldFromProgIds", help: "<b>NSUserDefinedFieldInfo[] GetUserDefinedFieldFromProgIds(String[] p_0, Integer p_1)<\/b>\n\nReturn an given array user defined field identified by the owner and the prog-ids. The prog-id is used as the key in the entity carriers.\r\n\r\n\\param p_0 progIds: The prog.id is a hidden name that uniquely identifies the field.\r\n\\param p_1 ownerType: The user-defined field owner-entity id.\r\n\\return Returns an array of user-defined field info carriers"},
{text: "NSUserDefinedFieldInfoAgent.GetUserDefinedFieldList", help: "<b>NSUserDefinedFieldInfo[] GetUserDefinedFieldList(Integer p_0)<\/b>\n\nReturn information about all the user defined fields on a particular owner type (project, contact, person, etc).\r\n\r\n\\param p_0 ownerType: The user-defined field owner-entity id.\r\n\\return Returns an array of user-defined field info carriers."},
{text: "NSUserDefinedFieldInfoAgent.GetUserDefinedPageOneFields", help: "<b>NSUserDefinedFieldInfo[] GetUserDefinedPageOneFields(Integer p_0, Integer p_1)<\/b>\n\nGet a list of page one fields for given Udef type and current user group\r\n\r\n\\param p_0 ownerType: The user-defined field owner-entity.\r\n\\param p_1 userGroupId: Id of UserGroup\r\n\\return Returns an array of page one user-defined field info carriers."},
{text: "NSUserDefinedFieldInfoAgent.DeleteUserDefinedFieldInfo", help: "<b>Void DeleteUserDefinedFieldInfo(Integer p_0)<\/b>\n\nDeletes the UserDefinedFieldInfo\r\n\r\n\\param p_0 userDefinedFieldInfoId: The identity of the UserDefinedFieldInfo"},
{text: "NSUserDefinedFieldInfoAgent.Publish", help: "<b>Void Publish(Integer p_0)<\/b>\n\nPublish changed Udef fields for the given owner type\r\n\r\n\\param p_0 ownerType: The owner type to publish for"},
{text: "NSUserDefinedFieldInfoAgent.Revert", help: "<b>Void Revert(Integer p_0)<\/b>\n\nRevert changed Udef fields for the given owner type - all unpublished changes will be lost\r\n\r\n\\param p_0 ownerType: The owner type to revert fields for"},
{text: "NSUserDefinedFieldInfoAgent.SaveUserDefinedFieldInfos", help: "<b>Void SaveUserDefinedFieldInfos(NSUserDefinedFieldInfo[] p_0)<\/b>\n\nSave an array of user defined fields\r\n\r\n\\param p_0 infos: An array of user defined fields"},
{text: "NSUserDefinedFieldInfoAgent.SetPageOneFieldGrouping", help: "<b>Void SetPageOneFieldGrouping(Integer p_0, Bool p_1)<\/b>\n\nSets the Page One Field grouping for a specific entity\r\n\r\n\\param p_0 ownerType: The user-defined field owner-entity.\r\n\\param p_1 active: If true, use grouping"},
{text: "NSUserDefinedFieldInfoAgent.SetPublishStartSystemEvent", help: "<b>Void SetPublishStartSystemEvent(Integer p_0)<\/b>\n\n\\param p_0 ownerType"},
{text: "NSUserDefinedFieldInfoAgent.SetRankOnFields", help: "<b>Void SetRankOnFields(Integer p_0, Integer[] p_1)<\/b>\n\nChange rank of user defined fields\r\n\r\n\\param p_0 ownerType: The user-defined field owner-entity.\r\n\\param p_1 rankedFieldsIds: All IDs of this owner-entity in desired rank order"},
{text: "NSUserDefinedFieldInfoAgent.SetUserDefinedPageOneField", help: "<b>Void SetUserDefinedPageOneField(Integer p_0, Integer p_1, Integer p_2, Integer p_3)<\/b>\n\nSets a user defined fields as page one field.\r\n\r\n\\param p_0 ownerType: The user-defined field owner entity\r\n\\param p_1 udefFieldId: The id of the udeffield to set as page one field\r\n\\param p_2 userGroupId: The usergroup id to associate the page one field with.\r\n\\param p_3 fieldLineNo: Page one line number"},
{text: "Void.NSUserGroup", help: "<b>NSUserGroup<\/b>\n\nThe main user group that this user belongs to"},
{text: "NSUserGroup.GetDeleted", help: "<b>Integer GetDeleted()<\/b>\n\nDeleted equal to true means that this is a user group that no longer can be selected by the user.  It is not permitted to delete a UserGroup.\r\n\r\n\\return Integer"},
{text: "NSUserGroup.GetId", help: "<b>Integer GetId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSUserGroup.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSUserGroup.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSUserGroup.GetValue", help: "<b>String GetValue()<\/b>\n\nUserGroup name\r\n\r\n\\return String"},
{text: "NSUserGroup.SetDeleted", help: "<b>Void SetDeleted(Integer p_0)<\/b>\n\nDeleted equal to true means that this is a user group that no longer can be selected by the user.  It is not permitted to delete a UserGroup.\r\n\r\n\\param p_0 Deleted: Integer\r\n\\return Integer"},
{text: "NSUserGroup.SetId", help: "<b>Void SetId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 Id: Integer\r\n\\return Integer"},
{text: "NSUserGroup.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSUserGroup.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSUserGroup.SetValue", help: "<b>Void SetValue(String p_0)<\/b>\n\nUserGroup name\r\n\r\n\\param p_0 Value: String\r\n\\return String"},
{text: "Void.NSUserInfo", help: "<b>NSUserInfo<\/b>\n\n"},
{text: "NSUserInfo.GetCanLogon", help: "<b>Bool GetCanLogon()<\/b>\n\n\\return Bool"},
{text: "NSUserInfo.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nIf true, the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\return Bool"},
{text: "NSUserInfo.GetEjUserId", help: "<b>Integer GetEjUserId()<\/b>\n\nID of the ej user record corresponding to this associate; 0 for associates that are not ej users\r\n\r\n\\return Integer"},
{text: "NSUserInfo.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nOwning person record\r\n\r\n\\return Integer"},
{text: "NSUserInfo.GetRank", help: "<b>Integer GetRank()<\/b>\n\nRank order\r\n\r\n\\return Integer"},
{text: "NSUserInfo.GetUserGroupId", help: "<b>Integer GetUserGroupId()<\/b>\n\nPrimary group membership, see UserGroupLink for secondary memberships\r\n\r\n\\return Integer"},
{text: "NSUserInfo.GetUserInfoId", help: "<b>Integer GetUserInfoId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSUserInfo.GetUserType", help: "<b>Integer GetUserType()<\/b>\n\n\\return Integer"},
{text: "NSUserInfo.GetRoleName", help: "<b>String GetRoleName()<\/b>\n\n\\return String"},
{text: "NSUserInfo.GetRoleTooltip", help: "<b>String GetRoleTooltip()<\/b>\n\n\\return String"},
{text: "NSUserInfo.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nTooltip or other description\r\n\r\n\\return String"},
{text: "NSUserInfo.GetUserGroupName", help: "<b>String GetUserGroupName()<\/b>\n\n\\return String"},
{text: "NSUserInfo.GetUserGroupTooltip", help: "<b>String GetUserGroupTooltip()<\/b>\n\n\\return String"},
{text: "NSUserInfo.GetUserName", help: "<b>String GetUserName()<\/b>\n\nInitials, also login name, possibly database user name\r\n\r\n\\return String"},
{text: "NSUserInfo.GetGrantedLicenses", help: "<b>String[] GetGrantedLicenses()<\/b>\n\n\\return StringArray"},
{text: "NSUserInfo.SetCanLogon", help: "<b>Void SetCanLogon(Bool p_0)<\/b>\n\n\\param p_0 CanLogon: Bool\r\n\\return Bool"},
{text: "NSUserInfo.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nIf true, the user is retired and should have no rights, not appear in lists, etc.\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSUserInfo.SetEjUserId", help: "<b>Void SetEjUserId(Integer p_0)<\/b>\n\nID of the ej user record corresponding to this associate; 0 for associates that are not ej users\r\n\r\n\\param p_0 EjUserId: Integer\r\n\\return Integer"},
{text: "NSUserInfo.SetGrantedLicenses", help: "<b>Void SetGrantedLicenses(String[] p_0)<\/b>\n\n\\param p_0 GrantedLicenses: StringArray\r\n\\return StringArray"},
{text: "NSUserInfo.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nOwning person record\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSUserInfo.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nRank order\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSUserInfo.SetRoleName", help: "<b>Void SetRoleName(String p_0)<\/b>\n\n\\param p_0 RoleName: String\r\n\\return String"},
{text: "NSUserInfo.SetRoleTooltip", help: "<b>Void SetRoleTooltip(String p_0)<\/b>\n\n\\param p_0 RoleTooltip: String\r\n\\return String"},
{text: "NSUserInfo.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nTooltip or other description\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSUserInfo.SetUserGroupId", help: "<b>Void SetUserGroupId(Integer p_0)<\/b>\n\nPrimary group membership, see UserGroupLink for secondary memberships\r\n\r\n\\param p_0 UserGroupId: Integer\r\n\\return Integer"},
{text: "NSUserInfo.SetUserGroupName", help: "<b>Void SetUserGroupName(String p_0)<\/b>\n\n\\param p_0 UserGroupName: String\r\n\\return String"},
{text: "NSUserInfo.SetUserGroupTooltip", help: "<b>Void SetUserGroupTooltip(String p_0)<\/b>\n\n\\param p_0 UserGroupTooltip: String\r\n\\return String"},
{text: "NSUserInfo.SetUserInfoId", help: "<b>Void SetUserInfoId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 UserInfoId: Integer\r\n\\return Integer"},
{text: "NSUserInfo.SetUserName", help: "<b>Void SetUserName(String p_0)<\/b>\n\nInitials, also login name, possibly database user name\r\n\r\n\\param p_0 UserName: String\r\n\\return String"},
{text: "NSUserInfo.SetUserType", help: "<b>Void SetUserType(Integer p_0)<\/b>\n\n\\param p_0 UserType: Integer\r\n\\return Integer"},
{text: "Void.NSUserValidationResult", help: "<b>NSUserValidationResult<\/b>\n\n"},
{text: "NSUserValidationResult.GetResult", help: "<b>Bool GetResult()<\/b>\n\n\\return Bool"},
{text: "NSUserValidationResult.GetReason", help: "<b>String GetReason()<\/b>\n\n\\return String"},
{text: "NSUserValidationResult.SetReason", help: "<b>Void SetReason(String p_0)<\/b>\n\n\\param p_0 Reason: String\r\n\\return String"},
{text: "NSUserValidationResult.SetResult", help: "<b>Void SetResult(Bool p_0)<\/b>\n\n\\param p_0 Result: Bool\r\n\\return Bool"},
{text: "Void.NSVersionInfo", help: "<b>NSVersionInfo<\/b>\n\nAn instance of this class represents information about one version of one document"},
{text: "NSVersionInfo.GetCheckedInDate", help: "<b>DateTime GetCheckedInDate()<\/b>\n\nThe date that this version was checked in and became official\r\n\r\n\\return DateTime"},
{text: "NSVersionInfo.GetCheckedInByAssociateId", help: "<b>Integer GetCheckedInByAssociateId()<\/b>\n\nAssociate id of the user who performed the checkin\r\n\r\n\\return Integer"},
{text: "NSVersionInfo.GetDocumentId", help: "<b>Integer GetDocumentId()<\/b>\n\nThe document Id that uniquely identifies the document within the SuperOffice database\r\n\r\n\\return Integer"},
{text: "NSVersionInfo.GetCheckedInByName", help: "<b>String GetCheckedInByName()<\/b>\n\nName (nicely formatted) of the user\/person who performed the checkin\r\n\r\n\\return String"},
{text: "NSVersionInfo.GetCheckedInDate", help: "<b>String GetCheckedInDate()<\/b>\n\n"},
{text: "NSVersionInfo.GetDescription", help: "<b>String GetDescription()<\/b>\n\nArbitrary description string\r\n\r\n\\return String"},
{text: "NSVersionInfo.GetDisplayText", help: "<b>String GetDisplayText()<\/b>\n\nA short description, suitable for display in a popup menu or dropdown list of versions.\r\n\r\n\\return String"},
{text: "NSVersionInfo.GetExternalReference", help: "<b>String GetExternalReference()<\/b>\n\nThe document plugin's key that uniquely identifies a document; stored in the externalReference field of the document table\r\n\r\n\\return String"},
{text: "NSVersionInfo.GetVersionId", help: "<b>String GetVersionId()<\/b>\n\nThe document plugin's version id that uniquely identifies one version of a document. If versioning is not supported, this will be blank. When versioning is supported, blank values imply the latest checked-in version.\r\n\r\n\\return String"},
{text: "NSVersionInfo.GetExtraFields", help: "<b>String[] GetExtraFields()<\/b>\n\nPrivate metadata, owned by the document plugin. This set of metadata is related directly to the version that  this VersioNinfo structure describes; metadata related to the document as a whole is retrieved using the SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData method.  The string should be formatted like a query string, i.e., name1=value1&amp;name2=value2... - this format, instead of a string\/string dictionary avoids serialization problems, even though it is somewhat less efficient\r\n\r\n\\return StringArray"},
{text: "NSVersionInfo.SetCheckedInByAssociateId", help: "<b>Void SetCheckedInByAssociateId(Integer p_0)<\/b>\n\nAssociate id of the user who performed the checkin\r\n\r\n\\param p_0 CheckedInByAssociateId: Integer\r\n\\return Integer"},
{text: "NSVersionInfo.SetCheckedInByName", help: "<b>Void SetCheckedInByName(String p_0)<\/b>\n\nName (nicely formatted) of the user\/person who performed the checkin\r\n\r\n\\param p_0 CheckedInByName: String\r\n\\return String"},
{text: "NSVersionInfo.SetCheckedInDate", help: "<b>Void SetCheckedInDate(DateTime p_0)<\/b>\n\nThe date that this version was checked in and became official\r\n\r\n\\param p_0 CheckedInDate: DateTime\r\n\\return DateTime"},
{text: "NSVersionInfo.SetCheckedInDate", help: "<b>Void SetCheckedInDate(String p_0)<\/b>\n\n"},
{text: "NSVersionInfo.SetDescription", help: "<b>Void SetDescription(String p_0)<\/b>\n\nArbitrary description string\r\n\r\n\\param p_0 Description: String\r\n\\return String"},
{text: "NSVersionInfo.SetDisplayText", help: "<b>Void SetDisplayText(String p_0)<\/b>\n\nA short description, suitable for display in a popup menu or dropdown list of versions.\r\n\r\n\\param p_0 DisplayText: String\r\n\\return String"},
{text: "NSVersionInfo.SetDocumentId", help: "<b>Void SetDocumentId(Integer p_0)<\/b>\n\nThe document Id that uniquely identifies the document within the SuperOffice database\r\n\r\n\\param p_0 DocumentId: Integer\r\n\\return Integer"},
{text: "NSVersionInfo.SetExternalReference", help: "<b>Void SetExternalReference(String p_0)<\/b>\n\nThe document plugin's key that uniquely identifies a document; stored in the externalReference field of the document table\r\n\r\n\\param p_0 ExternalReference: String\r\n\\return String"},
{text: "NSVersionInfo.SetExtraFields", help: "<b>Void SetExtraFields(String[] p_0)<\/b>\n\nPrivate metadata, owned by the document plugin. This set of metadata is related directly to the version that  this VersioNinfo structure describes; metadata related to the document as a whole is retrieved using the SuperOffice.CRM.Documents.IDocumentPlugin2.LoadMetaData method.  The string should be formatted like a query string, i.e., name1=value1&amp;name2=value2... - this format, instead of a string\/string dictionary avoids serialization problems, even though it is somewhat less efficient\r\n\r\n\\param p_0 ExtraFields: StringArray\r\n\\return StringArray"},
{text: "NSVersionInfo.SetVersionId", help: "<b>Void SetVersionId(String p_0)<\/b>\n\nThe document plugin's version id that uniquely identifies one version of a document. If versioning is not supported, this will be blank. When versioning is supported, blank values imply the latest checked-in version.\r\n\r\n\\param p_0 VersionId: String\r\n\\return String"},
{text: "Void.NSViewStateAgent", help: "<b>NSViewStateAgent<\/b>\n\n"},
{text: "NSViewStateAgent.GetHistoryLengthPrefValue", help: "<b>Integer GetHistoryLengthPrefValue()<\/b>\n\nGet the logged on user's preferred history list length. Will return the system preference if no user preferences are available.\r\n\r\n\\return The history list lenght\r\n"},
{text: "NSViewStateAgent.GetCurrent", help: "<b>NSHistory GetCurrent(String p_0)<\/b>\n\nGet the current (most recent) value of the history list. This is the item with rank = 1. If no item exists a default value is returned. This is usually the first item in the table representing the history list.\r\n\r\n\\param p_0 historyName: Name of the history list, e.g. contact, project\r\n\\return The current (most recent) history item\r\n"},
{text: "NSViewStateAgent.GetHistory", help: "<b>NSHistory GetHistory(Integer p_0)<\/b>\n\nGets a History object.\r\n\r\n\\param p_0 historyId: The identifier of the History object\r\n\\return History\r\n"},
{text: "NSViewStateAgent.GetNextCurrent", help: "<b>NSHistory GetNextCurrent(String p_0, Integer p_1)<\/b>\n\nReturns the next current item. If no item exists a default value is returned. This is usually the first item in the table representing the history list.\r\n\r\n\\param p_0 historyName: Name of the history list, e.g. contact, project\r\n\\param p_1 id: Id of the history element, e.g. Contact id\r\n\\return The current value.\r\n"},
{text: "NSViewStateAgent.GetPreviousCurrent", help: "<b>NSHistory GetPreviousCurrent(String p_0, Integer p_1)<\/b>\n\nReturns the previous current item. If no item exists a default value is returned. This is usually the first item in the table representing the history list.\r\n\r\n\\param p_0 historyName: Name of the history list, e.g. contact, project\r\n\\param p_1 id: Id of the history element, e.g. Contact id\r\n\\return The current value.\r\n"},
{text: "NSViewStateAgent.SaveCurrent", help: "<b>NSHistory SaveCurrent(NSHistory p_0)<\/b>\n\nSaving the current history item. This history item is saved with Rank = 1, and all the remaining elements rank values are shifted one down. The list is maintained with the max lenght of the History list length preference.\r\n\r\n\\param p_0 current: The new current history element.\r\n\\return The current (most recent) history item\r\n"},
{text: "NSViewStateAgent.GetHistories", help: "<b>NSHistory[] GetHistories()<\/b>\n\nReturns all history items that belong to the currently logged in user\r\n\r\n\\return Array of History items\r\n"},
{text: "NSViewStateAgent.GetHistoriesByName", help: "<b>NSHistory[] GetHistoriesByName(String p_0)<\/b>\n\nReturns the named history list that belong to the currently logged in user\r\n\r\n\\param p_0 historyName: Name of the history list\r\n\\return Array of History items\r\n"},
{text: "NSViewStateAgent.GetHistoriesByNames", help: "<b>NSHistory[] GetHistoriesByNames(String[] p_0)<\/b>\n\nReturns the named history lists that belong to the currently logged in user\r\n\r\n\\param p_0 historyNames: String array of list names\r\n\\return Array of History items\r\n"},
{text: "NSViewStateAgent.GetHistoriesByNamesAndIds", help: "<b>NSHistory[] GetHistoriesByNamesAndIds(NSHistoryRequest[] p_0)<\/b>\n\nReturns history data for the named entities and the given ids - which may not directly correspond to the current history records in the database.<para\/>Use this method if you know exactly which items you need, regardless of whether they are in the current history or not.<para\/>The history in the database is not changed or even looked at by this method.\r\n\r\n\\param p_0 requests: Array of request objects that define what entities we are requesting history information for\r\n\\return On history item for each history name\/id pair specified, in exactly the same order as specified.<para\/>If a specified item cannot be found in the database, its Id will be 0 and its name will be blank in the return array.\r\n"},
{text: "NSViewStateAgent.SaveCurrents", help: "<b>NSHistory[] SaveCurrents(NSHistory[] p_0)<\/b>\n\nSaves the history elements as the current value for their respective lists. If more than one item is submitted for the same list, they are added sequently, meaning that the last one is the most current.\r\n\r\n\\param p_0 currents: Array of new history items to save.\r\n\\return Array of the saved History items\r\n"},
{text: "NSViewStateAgent.SaveHistories", help: "<b>NSHistory[] SaveHistories(String p_0, NSHistory[] p_1)<\/b>\n\nReplaces the existing history-list for the currently logged in user. All elements must belong to the same history list. If not they are ignored.\r\n\r\n\\param p_0 historyName\r\n\\param p_1 history: Array of new history items to save.\r\n\\return Array of the saved History items\r\n"},
{text: "NSViewStateAgent.DeleteHistory", help: "<b>Void DeleteHistory(String p_0, Integer p_1)<\/b>\n\nDeletes the history element\r\n\r\n\\param p_0 historyName: Name of the history list, e.g. contact, project\r\n\\param p_1 id: Id of the history element, e.g. Contact id\r\n"},
{text: "NSViewStateAgent.SetHistoryLengthPrefValue", help: "<b>Void SetHistoryLengthPrefValue(Integer p_0)<\/b>\n\nSet the logged on user's preferred history list length.\r\n\r\n\\param p_0 length: The new history list lenght\r\n"},
{text: "Void.NSVisibleFor", help: "<b>NSVisibleFor<\/b>\n\n"},
{text: "NSVisibleFor.GetVisibility", help: "<b>Integer GetVisibility()<\/b>\n\n\\return Integer"},
{text: "NSVisibleFor.GetVisibleId", help: "<b>Integer GetVisibleId()<\/b>\n\n\\return Integer"},
{text: "NSVisibleFor.GetVisibility", help: "<b>NSVisibility GetVisibility()<\/b>\n\n\r\n\r\n"},
{text: "NSVisibleFor.GetDisplayValue", help: "<b>String GetDisplayValue()<\/b>\n\n\\return String"},
{text: "NSVisibleFor.SetDisplayValue", help: "<b>Void SetDisplayValue(String p_0)<\/b>\n\n\\param p_0 DisplayValue: String\r\n\\return String"},
{text: "NSVisibleFor.SetVisibility", help: "<b>Void SetVisibility(Integer p_0)<\/b>\n\n\\param p_0 Visibility: Integer\r\n\\return Integer"},
{text: "NSVisibleFor.SetVisibility", help: "<b>Void SetVisibility(NSVisibility p_0)<\/b>\n\n\r\n\r\n"},
{text: "NSVisibleFor.SetVisibleId", help: "<b>Void SetVisibleId(Integer p_0)<\/b>\n\n\\param p_0 VisibleId: Integer\r\n\\return Integer"},
{text: "Void.NSWebAppUsage", help: "<b>NSWebAppUsage<\/b>\n\n"},
{text: "NSWebAppUsage.GetTimestamp", help: "<b>DateTime GetTimestamp()<\/b>\n\nPrimary Key\r\n\r\n\\return DateTime"},
{text: "NSWebAppUsage.GetAggregateBin", help: "<b>Integer GetAggregateBin()<\/b>\n\n??\r\n\r\n\\return Integer"},
{text: "NSWebAppUsage.GetAggregateCount", help: "<b>Integer GetAggregateCount()<\/b>\n\nNumber of times the specific soprotocol is accessed\r\n\r\n\\return Integer"},
{text: "NSWebAppUsage.GetAssocId", help: "<b>Integer GetAssocId()<\/b>\n\nAssociate Id\r\n\r\n\\return Integer"},
{text: "NSWebAppUsage.GetVersion", help: "<b>Integer GetVersion()<\/b>\n\n??\r\n\r\n\\return Integer"},
{text: "NSWebAppUsage.GetWebAppUsageId", help: "<b>Integer GetWebAppUsageId()<\/b>\n\nPrimary Key\r\n\r\n\\return Integer"},
{text: "NSWebAppUsage.GetViewState", help: "<b>String GetViewState()<\/b>\n\nThe SoProtocol(ViewState)\r\n\r\n\\return String"},
{text: "NSWebAppUsage.SetAggregateBin", help: "<b>Void SetAggregateBin(Integer p_0)<\/b>\n\n??\r\n\r\n\\param p_0 AggregateBin: Integer\r\n\\return Integer"},
{text: "NSWebAppUsage.SetAggregateCount", help: "<b>Void SetAggregateCount(Integer p_0)<\/b>\n\nNumber of times the specific soprotocol is accessed\r\n\r\n\\param p_0 AggregateCount: Integer\r\n\\return Integer"},
{text: "NSWebAppUsage.SetAssocId", help: "<b>Void SetAssocId(Integer p_0)<\/b>\n\nAssociate Id\r\n\r\n\\param p_0 AssocId: Integer\r\n\\return Integer"},
{text: "NSWebAppUsage.SetTimestamp", help: "<b>Void SetTimestamp(DateTime p_0)<\/b>\n\nPrimary Key\r\n\r\n\\param p_0 Timestamp: DateTime\r\n\\return DateTime"},
{text: "NSWebAppUsage.SetVersion", help: "<b>Void SetVersion(Integer p_0)<\/b>\n\n??\r\n\r\n\\param p_0 Version: Integer\r\n\\return Integer"},
{text: "NSWebAppUsage.SetViewState", help: "<b>Void SetViewState(String p_0)<\/b>\n\nThe SoProtocol(ViewState)\r\n\r\n\\param p_0 ViewState: String\r\n\\return String"},
{text: "NSWebAppUsage.SetWebAppUsageId", help: "<b>Void SetWebAppUsageId(Integer p_0)<\/b>\n\nPrimary Key\r\n\r\n\\param p_0 WebAppUsageId: Integer\r\n\\return Integer"},
{text: "Void.NSWebPanelEntity", help: "<b>NSWebPanelEntity<\/b>\n\nThe web panel entity contains information on a web panel"},
{text: "NSWebPanelEntity.GetDeleted", help: "<b>Bool GetDeleted()<\/b>\n\nTrue if the web panel is marked as deleted\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetOnCentral", help: "<b>Bool GetOnCentral()<\/b>\n\nIs the webpanel visible when user is on central database\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetOnSalesMarketingPocket", help: "<b>Bool GetOnSalesMarketingPocket()<\/b>\n\nIs the webpanel visible when user is on pocket client\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetOnSalesMarketingWeb", help: "<b>Bool GetOnSalesMarketingWeb()<\/b>\n\nIs the webpanel visible when user is on web client\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetOnSatellite", help: "<b>Bool GetOnSatellite()<\/b>\n\nIs the webpanel visible when user is on a satellite\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetOnSattelite", help: "<b>Bool GetOnSattelite()<\/b>\n\n"},
{text: "NSWebPanelEntity.GetOnTravel", help: "<b>Bool GetOnTravel()<\/b>\n\nIs the webpanel visible when user is on travel\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetShowInAddressBar", help: "<b>Bool GetShowInAddressBar()<\/b>\n\nDoes the webpanel have an address bar\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetShowInMenuBar", help: "<b>Bool GetShowInMenuBar()<\/b>\n\nDoes the webpanel have a menu bar\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetShowInStatusBar", help: "<b>Bool GetShowInStatusBar()<\/b>\n\nDoes the webpanel have a status bar\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetShowInToolBar", help: "<b>Bool GetShowInToolBar()<\/b>\n\nDoes the webpanel have a toolbar\r\n\r\n\\return Bool"},
{text: "NSWebPanelEntity.GetIcon", help: "<b>Integer GetIcon()<\/b>\n\nThe icon of the webpanel\r\n\r\n\\return Integer"},
{text: "NSWebPanelEntity.GetRank", help: "<b>Integer GetRank()<\/b>\n\nThe rank of the web panel\r\n\r\n\\return Integer"},
{text: "NSWebPanelEntity.GetUrlEncoding", help: "<b>Integer GetUrlEncoding()<\/b>\n\nThe encoding of the URL\r\n\r\n\\return Integer"},
{text: "NSWebPanelEntity.GetVisibleIn", help: "<b>Integer GetVisibleIn()<\/b>\n\nThe webpanel is visible in\r\n\r\n\\return Integer"},
{text: "NSWebPanelEntity.GetWebPanelId", help: "<b>Integer GetWebPanelId()<\/b>\n\nThe identity of the web panel\r\n\r\n\\return Integer"},
{text: "NSWebPanelEntity.GetName", help: "<b>String GetName()<\/b>\n\nThe name of the web panel\r\n\r\n\\return String"},
{text: "NSWebPanelEntity.GetProgId", help: "<b>String GetProgId()<\/b>\n\nString key that can be used to uniquely retrieve the panel; particularly useful for partners and others who do not wish to store database ID's\r\n\r\n\\return String"},
{text: "NSWebPanelEntity.GetTooltip", help: "<b>String GetTooltip()<\/b>\n\nThe tooltip of the web panel\r\n\r\n\\return String"},
{text: "NSWebPanelEntity.GetUrl", help: "<b>String GetUrl()<\/b>\n\nThe url\r\n\r\n\\return String"},
{text: "NSWebPanelEntity.GetWindowName", help: "<b>String GetWindowName()<\/b>\n\nThe window which the URL address is to open in (webpanel only)\r\n\r\n\\return String"},
{text: "NSWebPanelEntity.SetDeleted", help: "<b>Void SetDeleted(Bool p_0)<\/b>\n\nTrue if the web panel is marked as deleted\r\n\r\n\\param p_0 Deleted: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetIcon", help: "<b>Void SetIcon(Integer p_0)<\/b>\n\nThe icon of the webpanel\r\n\r\n\\param p_0 Icon: Integer\r\n\\return Integer"},
{text: "NSWebPanelEntity.SetName", help: "<b>Void SetName(String p_0)<\/b>\n\nThe name of the web panel\r\n\r\n\\param p_0 Name: String\r\n\\return String"},
{text: "NSWebPanelEntity.SetOnCentral", help: "<b>Void SetOnCentral(Bool p_0)<\/b>\n\nIs the webpanel visible when user is on central database\r\n\r\n\\param p_0 OnCentral: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetOnSalesMarketingPocket", help: "<b>Void SetOnSalesMarketingPocket(Bool p_0)<\/b>\n\nIs the webpanel visible when user is on pocket client\r\n\r\n\\param p_0 OnSalesMarketingPocket: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetOnSalesMarketingWeb", help: "<b>Void SetOnSalesMarketingWeb(Bool p_0)<\/b>\n\nIs the webpanel visible when user is on web client\r\n\r\n\\param p_0 OnSalesMarketingWeb: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetOnSatellite", help: "<b>Void SetOnSatellite(Bool p_0)<\/b>\n\nIs the webpanel visible when user is on a satellite\r\n\r\n\\param p_0 OnSatellite: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetOnSattelite", help: "<b>Void SetOnSattelite(Bool p_0)<\/b>\n\n"},
{text: "NSWebPanelEntity.SetOnTravel", help: "<b>Void SetOnTravel(Bool p_0)<\/b>\n\nIs the webpanel visible when user is on travel\r\n\r\n\\param p_0 OnTravel: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetProgId", help: "<b>Void SetProgId(String p_0)<\/b>\n\nString key that can be used to uniquely retrieve the panel; particularly useful for partners and others who do not wish to store database ID's\r\n\r\n\\param p_0 ProgId: String\r\n\\return String"},
{text: "NSWebPanelEntity.SetRank", help: "<b>Void SetRank(Integer p_0)<\/b>\n\nThe rank of the web panel\r\n\r\n\\param p_0 Rank: Integer\r\n\\return Integer"},
{text: "NSWebPanelEntity.SetShowInAddressBar", help: "<b>Void SetShowInAddressBar(Bool p_0)<\/b>\n\nDoes the webpanel have an address bar\r\n\r\n\\param p_0 ShowInAddressBar: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetShowInMenuBar", help: "<b>Void SetShowInMenuBar(Bool p_0)<\/b>\n\nDoes the webpanel have a menu bar\r\n\r\n\\param p_0 ShowInMenuBar: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetShowInStatusBar", help: "<b>Void SetShowInStatusBar(Bool p_0)<\/b>\n\nDoes the webpanel have a status bar\r\n\r\n\\param p_0 ShowInStatusBar: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetShowInToolBar", help: "<b>Void SetShowInToolBar(Bool p_0)<\/b>\n\nDoes the webpanel have a toolbar\r\n\r\n\\param p_0 ShowInToolBar: Bool\r\n\\return Bool"},
{text: "NSWebPanelEntity.SetTooltip", help: "<b>Void SetTooltip(String p_0)<\/b>\n\nThe tooltip of the web panel\r\n\r\n\\param p_0 Tooltip: String\r\n\\return String"},
{text: "NSWebPanelEntity.SetUrl", help: "<b>Void SetUrl(String p_0)<\/b>\n\nThe url\r\n\r\n\\param p_0 Url: String\r\n\\return String"},
{text: "NSWebPanelEntity.SetUrlEncoding", help: "<b>Void SetUrlEncoding(Integer p_0)<\/b>\n\nThe encoding of the URL\r\n\r\n\\param p_0 UrlEncoding: Integer\r\n\\return Integer"},
{text: "NSWebPanelEntity.SetVisibleIn", help: "<b>Void SetVisibleIn(Integer p_0)<\/b>\n\nThe webpanel is visible in\r\n\r\n\\param p_0 VisibleIn: Integer\r\n\\return Integer"},
{text: "NSWebPanelEntity.SetWebPanelId", help: "<b>Void SetWebPanelId(Integer p_0)<\/b>\n\nThe identity of the web panel\r\n\r\n\\param p_0 WebPanelId: Integer\r\n\\return Integer"},
{text: "NSWebPanelEntity.SetWindowName", help: "<b>Void SetWindowName(String p_0)<\/b>\n\nThe window which the URL address is to open in (webpanel only)\r\n\r\n\\param p_0 WindowName: String\r\n\\return String"},
{text: "Void.NSWindowPosSize", help: "<b>NSWindowPosSize<\/b>\n\nWindow and dialog position and size settings"},
{text: "NSWindowPosSize.GetAssociateId", help: "<b>Integer GetAssociateId()<\/b>\n\nAssociate id of the Associate\/Person owning this window setting\r\n\r\n\\return Integer"},
{text: "NSWindowPosSize.GetExtraId", help: "<b>Integer GetExtraId()<\/b>\n\nSpare ID, not yet in use\r\n\r\n\\return Integer"},
{text: "NSWindowPosSize.GetHeight", help: "<b>Integer GetHeight()<\/b>\n\nThe height of the widget\r\n\r\n\\return Integer"},
{text: "NSWindowPosSize.GetLeftX", help: "<b>Integer GetLeftX()<\/b>\n\nX of origin, left edge of widget\r\n\r\n\\return Integer"},
{text: "NSWindowPosSize.GetPersonId", help: "<b>Integer GetPersonId()<\/b>\n\nPerson id of the associate owning this window setting\r\n\r\n\\return Integer"},
{text: "NSWindowPosSize.GetState", help: "<b>Integer GetState()<\/b>\n\nNormal = 0, Maximized = 1, Minimized = 2\r\n\r\n"},
{text: "NSWindowPosSize.GetUpperY", help: "<b>Integer GetUpperY()<\/b>\n\nY of origin, upper edge of widget\r\n\r\n\\return Integer"},
{text: "NSWindowPosSize.GetWidth", help: "<b>Integer GetWidth()<\/b>\n\nThe width of the widget\r\n\r\n\\return Integer"},
{text: "NSWindowPosSize.GetWindowPosSizeId", help: "<b>Integer GetWindowPosSizeId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSWindowPosSize.GetState", help: "<b>NSShowWindowState GetState()<\/b>\n\nNormal = 0, Maximized = 1, Minimized = 2\r\n\r\n\\return ShowWindowState"},
{text: "NSWindowPosSize.GetExtraInfo", help: "<b>String GetExtraInfo()<\/b>\n\nExtra information - show state, or whatever is required\r\n\r\n\\return String"},
{text: "NSWindowPosSize.GetOwnerWindow", help: "<b>String GetOwnerWindow()<\/b>\n\nThe dialog, panel or whatever that owns this record\r\n\r\n\\return String"},
{text: "NSWindowPosSize.SetAssociateId", help: "<b>Void SetAssociateId(Integer p_0)<\/b>\n\nAssociate id of the Associate\/Person owning this window setting\r\n\r\n\\param p_0 AssociateId: Integer\r\n\\return Integer"},
{text: "NSWindowPosSize.SetExtraId", help: "<b>Void SetExtraId(Integer p_0)<\/b>\n\nSpare ID, not yet in use\r\n\r\n\\param p_0 ExtraId: Integer\r\n\\return Integer"},
{text: "NSWindowPosSize.SetExtraInfo", help: "<b>Void SetExtraInfo(String p_0)<\/b>\n\nExtra information - show state, or whatever is required\r\n\r\n\\param p_0 ExtraInfo: String\r\n\\return String"},
{text: "NSWindowPosSize.SetHeight", help: "<b>Void SetHeight(Integer p_0)<\/b>\n\nThe height of the widget\r\n\r\n\\param p_0 Height: Integer\r\n\\return Integer"},
{text: "NSWindowPosSize.SetLeftX", help: "<b>Void SetLeftX(Integer p_0)<\/b>\n\nX of origin, left edge of widget\r\n\r\n\\param p_0 LeftX: Integer\r\n\\return Integer"},
{text: "NSWindowPosSize.SetOwnerWindow", help: "<b>Void SetOwnerWindow(String p_0)<\/b>\n\nThe dialog, panel or whatever that owns this record\r\n\r\n\\param p_0 OwnerWindow: String\r\n\\return String"},
{text: "NSWindowPosSize.SetPersonId", help: "<b>Void SetPersonId(Integer p_0)<\/b>\n\nPerson id of the associate owning this window setting\r\n\r\n\\param p_0 PersonId: Integer\r\n\\return Integer"},
{text: "NSWindowPosSize.SetState", help: "<b>Void SetState(Integer p_0)<\/b>\n\nNormal = 0, Maximized = 1, Minimized = 2\r\n\r\n"},
{text: "NSWindowPosSize.SetState", help: "<b>Void SetState(NSShowWindowState p_0)<\/b>\n\nNormal = 0, Maximized = 1, Minimized = 2\r\n\r\n\\param p_0 State: ShowWindowState\r\n\\return ShowWindowState"},
{text: "NSWindowPosSize.SetUpperY", help: "<b>Void SetUpperY(Integer p_0)<\/b>\n\nY of origin, upper edge of widget\r\n\r\n\\param p_0 UpperY: Integer\r\n\\return Integer"},
{text: "NSWindowPosSize.SetWidth", help: "<b>Void SetWidth(Integer p_0)<\/b>\n\nThe width of the widget\r\n\r\n\\param p_0 Width: Integer\r\n\\return Integer"},
{text: "NSWindowPosSize.SetWindowPosSizeId", help: "<b>Void SetWindowPosSizeId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 WindowPosSizeId: Integer\r\n\\return Integer"},
{text: "Void.NSAAAMockAgent", help: "<b>NSAAAMockAgent<\/b>\n\n"},
{text: "NSAAAMockAgent.GetBool", help: "<b>Bool GetBool()<\/b>\n\nGets some bool value\r\n\r\n\\return Some bool value"},
{text: "NSAAAMockAgent.GetArrayOfBytes", help: "<b>Byte[] GetArrayOfBytes()<\/b>\n\nGets some bytes\r\n\r\n\\return Some bytes"},
{text: "NSAAAMockAgent.GetDate", help: "<b>DateTime GetDate()<\/b>\n\nGets some date\r\n\r\n\\return Some date"},
{text: "NSAAAMockAgent.GetDictionaryOfFieldMetadata", help: "<b>FieldMetadataDictionary GetDictionaryOfFieldMetadata()<\/b>\n\n"},
{text: "NSAAAMockAgent.GetDouble", help: "<b>Float GetDouble()<\/b>\n\nGets some double number.\r\n\r\n\\return Some double number"},
{text: "NSAAAMockAgent.GetArrayOfDoubles", help: "<b>Float[] GetArrayOfDoubles()<\/b>\n\nGets some doubles\r\n\r\n\\return Some doubles"},
{text: "NSAAAMockAgent.GetInteger", help: "<b>Integer GetInteger()<\/b>\n\nGets some number. C# int -> C++ long\r\n\r\n\\return Some number"},
{text: "NSAAAMockAgent.GetSomeId", help: "<b>Integer GetSomeId()<\/b>\n\nGets some id. C# int when the name ends with 'Id' -> C++ longid\r\n\r\n\\return Some id"},
{text: "NSAAAMockAgent.GetArrayOfIntegers", help: "<b>Integer[] GetArrayOfIntegers()<\/b>\n\nGets some ints\r\n\r\n\\return Some ints"},
{text: "NSAAAMockAgent.GetDictionaryOfFieldMetadata", help: "<b>NSFieldMetadataDictionary GetDictionaryOfFieldMetadata()<\/b>\n\nGets some FieldMetadatas\r\n\r\n\\return Some FieldMetadatas"},
{text: "NSAAAMockAgent.GetQuoteLine", help: "<b>NSQuoteLine GetQuoteLine()<\/b>\n\nGets some QuoteLine\r\n\r\n\\return Some QuoteLine"},
{text: "NSAAAMockAgent.GetArrayOfQuoteLines", help: "<b>NSQuoteLine[] GetArrayOfQuoteLines()<\/b>\n\nGets some QuoteLines\r\n\r\n\\return Some QuoteLines"},
{text: "NSAAAMockAgent.GetAAATestClassForModeling", help: "<b>NSAAATestClassForModeling GetAAATestClassForModeling(Integer p_0)<\/b>\n\nGets a AAATestClassForModeling object.\r\n\r\n\\param p_0 aAATestClassForModelingId: The identifier of the AAATestClassForModeling object\r\n\\return AAATestClassForModeling"},
{text: "NSAAAMockAgent.GetString", help: "<b>String GetString()<\/b>\n\nGets some string\r\n\r\n\\return Some string"},
{text: "NSAAAMockAgent.GetArrayOfStrings", help: "<b>String[] GetArrayOfStrings()<\/b>\n\nGets some strings\r\n\r\n\\return Some strings"},
{text: "NSAAAMockAgent.ArrayBoolInput", help: "<b>Void ArrayBoolInput(Boolean[] p_0)<\/b>\n\n"},
{text: "NSAAAMockAgent.ArrayBoolInput", help: "<b>Void ArrayBoolInput(NSBoolean[] p_0)<\/b>\n\nTest bool Array input\r\n\r\n\\param p_0 boolArrayArgument: Some bool Array argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.ArrayIdInput", help: "<b>Void ArrayIdInput(Integer[] p_0)<\/b>\n\nTest id Array input\r\n\r\n\\param p_0 intArrayArgumentIds: Some id Array argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.ArrayIntInput", help: "<b>Void ArrayIntInput(Integer[] p_0)<\/b>\n\nTest int Array input\r\n\r\n\\param p_0 intArrayArgument: Some int Array argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.ArrayQuoteLineInput", help: "<b>Void ArrayQuoteLineInput(NSQuoteLine[] p_0)<\/b>\n\nTest QuoteLine Array input\r\n\r\n\\param p_0 quoteLineArrayArgument: Some QuoteLine Array argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.BoolInput", help: "<b>Void BoolInput(Bool p_0)<\/b>\n\nTest bool input\r\n\r\n\\param p_0 boolArgument: Some bool argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.DateInput", help: "<b>Void DateInput(DateTime p_0)<\/b>\n\nTest date input\r\n\r\n\\param p_0 dateArgument: Some date argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.DictionarFieldMetadataInput", help: "<b>Void DictionarFieldMetadataInput(FieldMetadataDictionary p_0)<\/b>\n\n"},
{text: "NSAAAMockAgent.DictionarFieldMetadataInput", help: "<b>Void DictionarFieldMetadataInput(NSFieldMetadataDictionary p_0)<\/b>\n\nTest FieldMetadata Dictionary input\r\n\r\n\\param p_0 fieldMetadataDictionaryArgument: Some FieldMetadata Dictionary argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.DoNada", help: "<b>Void DoNada()<\/b>\n\nTest void return\r\n\r\n\\return A void return"},
{text: "NSAAAMockAgent.EnumInput", help: "<b>Void EnumInput(Integer p_0)<\/b>\n\nTest enum input\r\n\r\n\\param p_0 enumArgument: Some enum argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.InputId", help: "<b>Void InputId(Integer p_0)<\/b>\n\nTest input of an int with name that ends with 'Id'. Should generate a longid argument in C++.\r\n\r\n\\param p_0 argumentId: Some id argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.IntInput", help: "<b>Void IntInput(Integer p_0)<\/b>\n\nTest int input\r\n\r\n\\param p_0 intArgument: Some int argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.LotsAStandardParameters", help: "<b>Void LotsAStandardParameters(Bool p_0, Integer p_1, DateTime p_2, String p_3)<\/b>\n\nSending various parameters\r\n\r\n\\param p_0 boolArgument: Some bool argument\r\n\\param p_1 integerArgument: Some integer argument\r\n\\param p_2 dateTimeArgument: Some DateTime argument\r\n\\param p_3 stringArgument: Some string argument"},
{text: "NSAAAMockAgent.QuoteLineInput", help: "<b>Void QuoteLineInput(NSQuoteLine p_0)<\/b>\n\nTest QuoteLine input\r\n\r\n\\param p_0 quoteLineArgument: Some QuoteLine argument\r\n\\return A void return"},
{text: "NSAAAMockAgent.StringInput", help: "<b>Void StringInput(String p_0)<\/b>\n\nTest string input\r\n\r\n\\param p_0 stringArgument: Some string argument\r\n\\return A void return"},
{text: "Void.NSAAATestClassForModeling", help: "<b>NSAAATestClassForModeling<\/b>\n\nJust a test class to check if the carrier and agent generation works correctly."},
{text: "NSAAATestClassForModeling.GetStandardBool", help: "<b>Bool GetStandardBool()<\/b>\n\nbool is a special case, it is normally saved as ushort\r\n\r\n\\return Bool"},
{text: "NSAAATestClassForModeling.GetSaleDate", help: "<b>DateTime GetSaleDate()<\/b>\n\n(expected | lost | won) sales date\r\n\r\n\\return DateTime"},
{text: "NSAAATestClassForModeling.GetStandardDate", help: "<b>DateTime GetStandardDate()<\/b>\n\n\\return DateTime"},
{text: "NSAAATestClassForModeling.GetDoubleAmount", help: "<b>Float GetDoubleAmount()<\/b>\n\nTotal sale amount\r\n\r\n\\return Float"},
{text: "NSAAATestClassForModeling.GetStandardDouble", help: "<b>Float GetStandardDouble()<\/b>\n\n\\return Float"},
{text: "NSAAATestClassForModeling.GetDatabaseEnum", help: "<b>Integer GetDatabaseEnum()<\/b>\n\n\\return Integer"},
{text: "NSAAATestClassForModeling.GetSaleId", help: "<b>Integer GetSaleId()<\/b>\n\nPrimary key\r\n\r\n\\return Integer"},
{text: "NSAAATestClassForModeling.GetSomeEnum", help: "<b>Integer GetSomeEnum()<\/b>\n\n\\return Integer"},
{text: "NSAAATestClassForModeling.GetStandardId", help: "<b>Integer GetStandardId()<\/b>\n\n\\return Integer"},
{text: "NSAAATestClassForModeling.GetStandardInt", help: "<b>Integer GetStandardInt()<\/b>\n\n\\return Integer"},
{text: "NSAAATestClassForModeling.GetUshortProbability", help: "<b>Integer GetUshortProbability()<\/b>\n\nActual probability, may differ from the one in the list\r\n\r\n\\return Integer"},
{text: "NSAAATestClassForModeling.GetArrayOfIds", help: "<b>Integer[] GetArrayOfIds()<\/b>\n\n\\return IntegerArray"},
{text: "NSAAATestClassForModeling.GetQuoteLine", help: "<b>NSQuoteLine GetQuoteLine()<\/b>\n\nA quoteline object\r\n\r\n\\return QuoteLine"},
{text: "NSAAATestClassForModeling.GetArrayOfQuoteLines", help: "<b>NSQuoteLine[] GetArrayOfQuoteLines()<\/b>\n\nThe QuoteLines this alternative consists of.\r\n\r\n\\return QuoteLineArray"},
{text: "NSAAATestClassForModeling.GetStandardString", help: "<b>String GetStandardString()<\/b>\n\n\\return String"},
{text: "NSAAATestClassForModeling.GetStringCurrencyName", help: "<b>String GetStringCurrencyName()<\/b>\n\nCurrency the sale was made in.\r\n\r\n\\return String"},
{text: "NSAAATestClassForModeling.GetStringDescription", help: "<b>String GetStringDescription()<\/b>\n\nThe sales description\r\n\r\n\\return String"},
{text: "NSAAATestClassForModeling.GetStringTitle", help: "<b>String GetStringTitle()<\/b>\n\nSale heading (short description?)\r\n\r\n\\return String"},
{text: "NSAAATestClassForModeling.GetArrayOfStrings", help: "<b>String[] GetArrayOfStrings()<\/b>\n\n\\return StringArray"},
{text: "NSAAATestClassForModeling.SetArrayOfIds", help: "<b>Void SetArrayOfIds(Integer[] p_0)<\/b>\n\n\\param p_0 ArrayOfIds: IntegerArray\r\n\\return IntegerArray"},
{text: "NSAAATestClassForModeling.SetArrayOfQuoteLines", help: "<b>Void SetArrayOfQuoteLines(NSQuoteLine[] p_0)<\/b>\n\nThe QuoteLines this alternative consists of.\r\n\r\n\\param p_0 ArrayOfQuoteLines: QuoteLineArray\r\n\\return QuoteLineArray"},
{text: "NSAAATestClassForModeling.SetArrayOfStrings", help: "<b>Void SetArrayOfStrings(String[] p_0)<\/b>\n\n\\param p_0 ArrayOfStrings: StringArray\r\n\\return StringArray"},
{text: "NSAAATestClassForModeling.SetDatabaseEnum", help: "<b>Void SetDatabaseEnum(Integer p_0)<\/b>\n\n\\param p_0 DatabaseEnum: Integer\r\n\\return Integer"},
{text: "NSAAATestClassForModeling.SetDoubleAmount", help: "<b>Void SetDoubleAmount(Float p_0)<\/b>\n\nTotal sale amount\r\n\r\n\\param p_0 DoubleAmount: Float\r\n\\return Float"},
{text: "NSAAATestClassForModeling.SetQuoteLine", help: "<b>Void SetQuoteLine(NSQuoteLine p_0)<\/b>\n\nA quoteline object\r\n\r\n\\param p_0 QuoteLine: QuoteLine\r\n\\return QuoteLine"},
{text: "NSAAATestClassForModeling.SetSaleDate", help: "<b>Void SetSaleDate(DateTime p_0)<\/b>\n\n(expected | lost | won) sales date\r\n\r\n\\param p_0 SaleDate: DateTime\r\n\\return DateTime"},
{text: "NSAAATestClassForModeling.SetSaleId", help: "<b>Void SetSaleId(Integer p_0)<\/b>\n\nPrimary key\r\n\r\n\\param p_0 SaleId: Integer\r\n\\return Integer"},
{text: "NSAAATestClassForModeling.SetSomeEnum", help: "<b>Void SetSomeEnum(Integer p_0)<\/b>\n\n\\param p_0 SomeEnum: Integer\r\n\\return Integer"},
{text: "NSAAATestClassForModeling.SetStandardBool", help: "<b>Void SetStandardBool(Bool p_0)<\/b>\n\nbool is a special case, it is normally saved as ushort\r\n\r\n\\param p_0 StandardBool: Bool\r\n\\return Bool"},
{text: "NSAAATestClassForModeling.SetStandardDate", help: "<b>Void SetStandardDate(DateTime p_0)<\/b>\n\n\\param p_0 StandardDate: DateTime\r\n\\return DateTime"},
{text: "NSAAATestClassForModeling.SetStandardDouble", help: "<b>Void SetStandardDouble(Float p_0)<\/b>\n\n\\param p_0 StandardDouble: Float\r\n\\return Float"},
{text: "NSAAATestClassForModeling.SetStandardId", help: "<b>Void SetStandardId(Integer p_0)<\/b>\n\n\\param p_0 StandardId: Integer\r\n\\return Integer"},
{text: "NSAAATestClassForModeling.SetStandardInt", help: "<b>Void SetStandardInt(Integer p_0)<\/b>\n\n\\param p_0 StandardInt: Integer\r\n\\return Integer"},
{text: "NSAAATestClassForModeling.SetStandardString", help: "<b>Void SetStandardString(String p_0)<\/b>\n\n\\param p_0 StandardString: String\r\n\\return String"},
{text: "NSAAATestClassForModeling.SetStringCurrencyName", help: "<b>Void SetStringCurrencyName(String p_0)<\/b>\n\nCurrency the sale was made in.\r\n\r\n\\param p_0 StringCurrencyName: String\r\n\\return String"},
{text: "NSAAATestClassForModeling.SetStringDescription", help: "<b>Void SetStringDescription(String p_0)<\/b>\n\nThe sales description\r\n\r\n\\param p_0 StringDescription: String\r\n\\return String"},
{text: "NSAAATestClassForModeling.SetStringTitle", help: "<b>Void SetStringTitle(String p_0)<\/b>\n\nSale heading (short description?)\r\n\r\n\\param p_0 StringTitle: String\r\n\\return String"},
{text: "NSAAATestClassForModeling.SetUshortProbability", help: "<b>Void SetUshortProbability(Integer p_0)<\/b>\n\nActual probability, may differ from the one in the list\r\n\r\n\\param p_0 UshortProbability: Integer\r\n\\return Integer"},
{text: "Void.Parser", help: "<b>Parser<\/b>\n\nClass for representing a Parser object, and using it to parse text."},
{text: "Parser.getVariableCount", help: "<b>Integer getVariableCount(String name)<\/b>\n\nReturn the number of values for the given variable in the Parser instance.\n\nParameter:\n - name The name of the variable.\n\nReturns the number of values of the given variable."},
{text: "Parser.evaluateString", help: "<b>String evaluateString(String stringToParse)<\/b>\n\nParse a text, and return the evaluated result from a RETURN statement inside the text.\n\nParameter:\n - stringToParse The string to parse.\n\nReturns any string set by a RETURN statement inside stringToParse."},
{text: "Parser.getVariable", help: "<b>String getVariable(String name, Integer row)<\/b>\n\nReturn the value at the given index with the given name from the Parser instance.\n\nParameters:\n - name: The name of the variable to return.\n - row: The zero-based index of the value to return."},
{text: "Parser.parseString", help: "<b>String parseString(String stringToParse)<\/b>\n\nParse a text and return the result.\n\nParameter:\n - stringToParse The string containing the text to parse.\n\nReturns the parsed result."},
{text: "Parser.addVariable", help: "<b>Void addVariable(String field, String value)<\/b>\n\nThis function adds a variable and its value to the parser\n\nParameters:\n - field: the field to add\n - value: the value of the field"},
{text: "Parser.setVariable", help: "<b>Void setVariable(String name, String value)<\/b>\n\nSet the variable with the given name to the given value in the Parser instance.  Existing value(s) will be overwritten with this new value.\n\nParameters:\n - name: The name of the variable to set.\n - value: The value to set."},
{text: "Parser.toParser", help: "<b>Void toParser(Parser parser)<\/b>\n\nThis function copies all values in the input parser to the original parser.\n\nParameter:\n - Parser: parser, the parset to copy the values from."},
{text: "Void.Priority", help: "<b>Priority<\/b>\n\nThis class contains methods which is used to handle priorities."},
{text: "Priority.checkEscalating", help: "<b>Void checkEscalating(Integer ticketId, Integer action)<\/b>\n\nThis method will check if the ticket should change its alert level based on the priority and action. If it is to change, the alert level and alert timeout for the ticket will be updated.\nThis method is usefull if you want to change the state of a ticket that is monitored by the its priority. It will take care of all the escalation routines so you do not have to do this manually.\n\n\\param ticketId The id of the ticket to check\n\\param action The action that triggered this escalation. Possible values are:\nTicket changed owner = 0\nTicket change owner = 1\nTicket recieved new information = 2\nTicket closed = 3\nTicket changed priority = 4\nNew ticket = 5"},
{text: "Void.Profile", help: "<b>Profile<\/b>\n\nThis class contains methods for fetching info about a users profile.\n\nThis class has been deprecated from version 7."},
{text: "Profile.getListTicketsFields", help: "<b>String[] getListTicketsFields(Integer p_user)<\/b>\n\nString[] getListTicketsFields(Integer p_user)\n\nThis function is deprecated from version 7.\n\nThis function returns a String[] containing information about a user's profile for\nthe list-tickets tables.\nThe fields are returned in a SearchEngine- and DataTable-friendly way.\n\n\nThe returned array is on the following form:\nheaderField, databaseField, chop, headerField, databaseField, chop, ....\n\nExample for use in the constuction script for the Screen Element DataTable:\n\nMap config = getScreenElementConfig(screenElementIndex);\nProfile p;\nString[] fields = p.getListTicketsFields(getVariable(\"activeUser\").toInteger());\nInteger c = 0;\nfor (Integer i = 0; i < (fields.length() - 2); i = i+3)\n{\n  config.insert(\"fields.\" + c.toString() + \".label\", fields[i]);\n  config.insert(\"fields.\" + c.toString() + \".field\", fields[i+1]);\n  config.insert(\"fields.\" + c.toString() + \".chop\", fields[i+2]);\n  if (fields[i+1] == \"ticket.status\" || fields[i+1] == \"ticket.ticket_status\")\n  {\n    config.insert(\"showTicketStatus\", \"true\");\n  }\n  c++;\n}\nconfig.insert(\"fields.length\", c.toString());\n\nWhen using this function with a DataTable, it is important to add a criteria for which language the user has:\n\nconfig.insert(\"criteria.0.field\", \"ticket.ticket_status.(ticket_status_lang->ticket_status).language\");\nconfig.insert(\"criteria.0.operator\", \"OperatorEquals\");\nconfig.insert(\"criteria.0.value\", getVariable(\"userLang\"));\nconfig.insert(\"criteria.length\", \"1\");"},
{text: "Void.ReplyTemplate", help: "<b>ReplyTemplate<\/b>\n\nThis class represents a reply template.\n\nExample code:\n\nReplyTemplate rt;\n\nrt.load(2); \/\/ Loads a reply template with id = 2\n\nParser p;\n\nString parsedString = p.parseString(rt.getBody(0)); \/\/ Parses the body of the template through a parser object"},
{text: "ReplyTemplate.load", help: "<b>Bool load(Integer id)<\/b>\n\nThis function loads a reply template to the object.\n\nParameter:\n - Reply Template ID\n\nReturns true if Reply Template with given ID loaded successfully\n\nLanguages:\n---\nNorwegian = 0,\nEnglish = 1,\nGerman = 2,\nSwedish = 3,\nDanish = 4,\nDutch = 5,"},
{text: "ReplyTemplate.getAttachments", help: "<b>Integer[] getAttachments(Integer p_lang)<\/b>\n\nGet all attachment id's belonging to a reply template."},
{text: "ReplyTemplate.getHtmlBody", help: "<b>String getHtmlBody(Integer language)<\/b>\n\nReturns the Reply template html body, in the language given by language\n\nParameter:\n - language as an integer, see below\n\nLanguages:\n---\nNorwegian = 0,\nEnglish = 1,\nGerman = 2,\nSwedish = 3,\nDanish = 4,\nDutch = 5,"},
{text: "ReplyTemplate.getName", help: "<b>String getName()<\/b>\n\nReturns the name of the Reply Template"},
{text: "ReplyTemplate.getPlainBody", help: "<b>String getPlainBody(Integer language)<\/b>\n\nReturns the Reply template plain text body, in the language given by language\n\nParameter:\n - language as an integer, see below\n\nLanguages:\n---\nNorwegian = 0,\nEnglish = 1,\nGerman = 2,\nSwedish = 3,\nDanish = 4,\nDutch = 5,"},
{text: "ReplyTemplate.getSmsBody", help: "<b>String getSmsBody(Integer language)<\/b>\n\nReturns the Reply template SMS body, in the language given by language id.\n\nParameter:\n - language as an integer"},
{text: "ReplyTemplate.getSubject", help: "<b>String getSubject(Integer language)<\/b>\n\nReturns the Reply template subject, in the language given by language. The reply template subject is in plain text only.\n\nParameter:\n - language as an integer, see below\n\nLanguages:\n---\nNorwegian = 0,\nEnglish = 1,\nGerman = 2,\nSwedish = 3,\nDanish = 4,\nDutch = 5,"},
{text: "Void.SearchEngine", help: "<b>SearchEngine<\/b>\n\nThe searchEngine is originally made for searching and fetching data from the eJournal database. Thereby its name.\nHas later been extended with features for inserting and updating rows.\nThe searchEngine is a tool for building up sql-queries, by adding fields, criterias and data.\nThe fields must be given on the following form:\nstarttablename.fieldname, for example \"ticket.title\"\nFor tables that have foreign keys to other tables, you can reach them with the following notation:\nstarttablename.fieldname.fieldname\nFor example the firstname of the primary customer of a ticket is:\n\"ticket.cust_id.firstname\".\nThe company name of the primary customer of a ticket is:\n\"ticket.cust_id.company.name\".\n\nMake sure that all fields you use start with the same table, for example ticket, or else you will recieve a big join that you probably do not want.\n\nFor many-to-many relations there is a special notation:\ntable1.(table2->field2a).field2b Where field2a is field in table2 that has a foreign key to table1.\nAn example:\n\"ticket.(ticket_customers->ticket_id).cust_id\"\n\nFrom CS version 7, the aggregate functions are no longer supported, since the query is sent to NetServer instead of directly to the database.\nIt is possible to circumvent this by setting the reg_id 235 to 1 and explicitly use bypassNetserver(true) in the searchengine. Be aware of any security implications this might cause."},
{text: "SearchEngine.eof", help: "<b>Bool eof()<\/b>\n\nReturns true if the end of the resultset is reached, else false\n\n\\return true if the end of the resultset is reached, else false"},
{text: "SearchEngine.first", help: "<b>Bool first()<\/b>\n\nSet the rowpointer to the first item of the resultset\n\n\\return false if the resultset is empty, else false"},
{text: "SearchEngine.next", help: "<b>Bool next()<\/b>\n\nIf not the end of the resultset is reached. the resultpointer is set to the next line.\n\n\\return false if the end of resultset is reached, else false."},
{text: "SearchEngine.countColumns", help: "<b>Integer countColumns()<\/b>\n\n\\return Integer, the count of columns (selected fields) in the SearchEngine query"},
{text: "SearchEngine.countRows", help: "<b>Integer countRows()<\/b>\n\nReturns the number of rows in the resultset\n\n\\return the number of rows in the resultset"},
{text: "SearchEngine.execute", help: "<b>Integer execute()<\/b>\n\nThis function executes the query.\nMust be called to get the results."},
{text: "SearchEngine.executeNS", help: "<b>Integer executeNS()<\/b>\n\nThis function executes the query against NetServer instead of the SQL database.\nMust be called to get the results."},
{text: "SearchEngine.insert", help: "<b>Integer insert()<\/b>\n\nAfter adding the values of the fields, call this function to actually do the insert in the database. Returns the resulting id of the insert.\n\n\\return The id of the newly added item"},
{text: "SearchEngine.select", help: "<b>Integer select()<\/b>\n\nDo the select-query and returns the size of the resultset as an Integer\n\n\\return The number of items in the resultset"},
{text: "SearchEngine.buildSql", help: "<b>String buildSql()<\/b>\n\nReturns the SQL query generated by the SearchEngine. The query is built by addCriteria(), addComparison(), addData() etc.\n\nNote that when running version versions from 7.0, the statement returned will be an estimate of the SQL, since the query is sent to NetServer instead."},
{text: "SearchEngine.buildSql", help: "<b>String buildSql(String p_0)<\/b>\n\nReturns the SQL query generated by the SearchEngine. The query is built by addCriteria(), addComparison(), addData() etc.\n\nNote that when running version versions from 7.0, the statement returned will be an estimate of the SQL, since the query is sent to NetServer instead."},
{text: "SearchEngine.executeJSON", help: "<b>String executeJSON()<\/b>\n\n"},
{text: "SearchEngine.getField", help: "<b>String getField(Integer num)<\/b>\n\nReturns the value as a String of the field number num.\n\n\n\\param num The number of the field. Starting at 0\n\\return The value of the field."},
{text: "SearchEngine.getField", help: "<b>String getField(String field, String function)<\/b>\n\nReturns the result of the field after been used on the function\n\n\\param field The name of the field\n\\param function The function to use on the field\n   Possible values:\n  FuncCount, FuncAvg, FuncSum, FuncMax, FuncMin, FuncHour,\n  FuncWDay, FuncUpper, FuncLower\n\\return The result of the funciton used on the field"},
{text: "SearchEngine.getField", help: "<b>String getField(String name)<\/b>\n\nReturns the value of the field name as a String\n\n\\param name The name of the field. On the form table.fieldname\n\\return the value of the field"},
{text: "SearchEngine.getFieldsJSON", help: "<b>String getFieldsJSON()<\/b>\n\n"},
{text: "SearchEngine.findAlternativeFields", help: "<b>String[] findAlternativeFields(String fieldBeginsWith)<\/b>\n\nFinds all alternative fields given a start field.\n\nThese fields can be used in addField() or simular functions.\n\n\\param fieldBeginsWith Fields that begins with..."},
{text: "SearchEngine.findRelations", help: "<b>String[] findRelations(String p_0, Bool p_1)<\/b>\n\n"},
{text: "SearchEngine.addComparison", help: "<b>Void addComparison(String field1, String compOperator, String field2, String rowOperator, Integer priority)<\/b>\n\nAdds a criteria between two database-fields to the database query\n\n\n\\param field1 The field to compare with field2\n\\param compOperator Comparison operator. Possible values:\nOperatorEquals, OperatorNotEquals, OperatorLt, OperatorLte, OperatorGt,\nOperatorGte, OperatorLike, OperatorNotLike, OperatorContains,\nOperatorBeginsWith, OperatorEndsWith, OperatorIn, OperatorNotIn,\nOperatorIs, OperatorOracleLeftJoin, OperatorIsNot\n\\param field2 The field to compare with field1\n\\param rowOperator Operator for composing this criteria with a following\ncriteria\nPossible values\nOperatorAnd, OperatorOr, OperatorNotAnd, OperatorNotOr\n\\param priority A number. All criterias with the same number will be placed\ninside\nthe same brackets"},
{text: "SearchEngine.addComparison", help: "<b>Void addComparison(String field1, String func1, String compOperator, String field2, String func2, String rowOperator, Integer priority)<\/b>\n\nSets a criteria that is a comparison between to fields in the database\n\n\n\\param field1 The field to make compare with field2\n\\param func1 The function to use on field1\n  Possible values:\n  FuncCount, FuncAvg, FuncSum, FuncMax, FuncMin, FuncHour,\n  FuncWDay, FuncUpper, FuncLower\n\\param compOperator Comparison operator. Possible values:\n  OperatorEquals, OperatorNotEquals, OperatorLt, OperatorLte, OperatorGt,\n  OperatorGte, OperatorLike, OperatorNotLike, OperatorContains,\n  OperatorBeginsWith, OperatorEndsWith, OperatorIn, OperatorNotIn,\n  OperatorIs, OperatorOracleLeftJoin, OperatorIsNot\n\\param field2 The field to compare with field1\n\\param func2 The function to use on field2\n  Possible values:\n  FuncCount, FuncAvg, FuncSum, FuncMax, FuncMin, FuncHour,\n  FuncWDay, FuncUpper, FuncLower\n\\param rowOperator Operator for composing this criteria with a following\n  criteria\n  Possible values\n  OperatorAnd, OperatorOr, OperatorNotAnd, OperatorNotOr\n\\param priority A number. All criterias with the same number will be placed\n  inside the same brackets"},
{text: "SearchEngine.addCriteria", help: "<b>Void addCriteria(String field, String compOperator, String value, String rowOperator, Integer priority)<\/b>\n\nAdds a criteria on a database-field to the database query\n\n\\param field The field to make a restiction on\n\\param compOperator  Comparison operator. Possible values:\n  OperatorEquals, OperatorNotEquals, OperatorLt, OperatorLte, OperatorGt,\n  OperatorGte, OperatorLike, OperatorNotLike, OperatorContains,\n  OperatorBeginsWith,  OperatorEndsWith,  OperatorIn, OperatorNotIn,\n  OperatorIs,  OperatorOracleLeftJoin, OperatorIsNot\n\\param value The value to be compared with the field\n\\param rowOperator Operator for composing this criteria with a following criteria\n  Possible values\n  OperatorAnd, OperatorOr, OperatorNotAnd, OperatorNotOr\n\\param priority A number. All criterias with the same number will be placed inside\n   the same brackets"},
{text: "SearchEngine.addCriteria", help: "<b>Void addCriteria(String field, String function, String compOperator, String value, String rowOperator, Integer priority)<\/b>\n\nAdds a criteria on a function of a database-field to the database query\n\n\n\\param field The field to make a restiction on\n\\param field The function to use on the field. Possible values:\n    FuncCount, FuncAvg, FuncSum, FuncMax, FuncMin, FuncHour,\n    FuncWDay, FuncUpper, FuncLower\n\\param compOperator  Comparison operator. Possible values:\n  OperatorEquals, OperatorNotEquals, OperatorLt, OperatorLte, OperatorGt,\n  OperatorGte, OperatorLike, OperatorNotLike, OperatorContains,\n  OperatorBeginsWith,  OperatorEndsWith,  OperatorIn, OperatorNotIn,\n  OperatorIs,  OperatorOracleLeftJoin, OperatorIsNot\n\\param value The value to be compared with the field\n\\param rowOperator Operator for composing this criteria with a following criteria\n  Possible values\n  OperatorAnd, OperatorOr, OperatorNotAnd, OperatorNotOr\n\\param priority A number. All criterias with the same number will be placed inside\n   the same brackets"},
{text: "SearchEngine.addCriteria", help: "<b>Void addCriteria(String p_0, String p_1, String p_2)<\/b>\n\nAdds a criteria on a function of a database-field to the database query.\n\nParameters:\n - p_0: field, The field to make a restiction on\n - p_1: fieldOperator. Possible values:\n  OperatorEquals, OperatorNotEquals, OperatorLt, OperatorLte, OperatorGt,\n  OperatorGte, OperatorLike, OperatorNotLike, OperatorContains,\n  OperatorBeginsWith,  OperatorEndsWith,  OperatorIn, OperatorNotIn,\n  OperatorIs,  OperatorOracleLeftJoin, OperatorIsNot\n - p_fieldValue: The value to be compared with the field"},
{text: "SearchEngine.addData", help: "<b>Void addData(String field, String value)<\/b>\n\nAdds data for use in an update or insert query\n\n\\param field The field to set\n\\param value The value to set on the field"},
{text: "SearchEngine.addDataField", help: "<b>Void addDataField(String field1, String field2)<\/b>\n\nAdd a data field the SearchEngine. A data field is a field assigned to another field instead of a value.\n\nFor example.\n\nse.addDataField(\"customer.phone\", \"customer.cellphone\");\n\nMeans that we are going to assign the cellphone to the phone field.\n\nCan only be used in update() queries.\n\n\\param field1 Field to assign to.\n\\param field2 Field where the value is found."},
{text: "SearchEngine.addDataField", help: "<b>Void addDataField(String field1, String field2, String func)<\/b>\n\nAdd a data field the SearchEngine. A data field is a field assigned to another field instead of a value.\n\nFor example.\n\nse.addDataField(\"customer.phone\", \"customer.cellphone\");\n\nMeans that we are going to assign the cellphone to the phone field.\n\nCan only be used in update() queries.\n\nThe func parameter can have one of the following values: count, avg, sum, max, min, hour, wday, upper, lower, castToVarchar, date, time.\n\n\\param field1 Field to assign to.\n\\param field2 Field where the value is found.\n\\param func Agregate function to use for field2."},
{text: "SearchEngine.addField", help: "<b>Void addField(String field)<\/b>\n\nAdds a field to the select-part of the database-query\n\n\\param field The field to select"},
{text: "SearchEngine.addField", help: "<b>Void addField(String field, String func)<\/b>\n\nAdds a field and a function to use on the field to the select in the query\n\n\\param field The field to select\n\\param function A function to use on the field. Possible values:\n    \"count\", \"avg\", \"sum\", \"max\", \"min\", \"hour\", \"wday\",\n    \"upper\", \"lower\""},
{text: "SearchEngine.addHaving", help: "<b>Void addHaving(String field, String compOperator, String value, String rowOperator, Integer priority)<\/b>\n\nAdds a having-clause to the database-query\n\n\\param field The field to make a restiction on (must also be in group-clause)\n\\param compOperator Comparison operator. Possible values:\nOperatorEquals, OperatorNotEquals, OperatorLt, OperatorLte, OperatorGt,\nOperatorGte, OperatorLike, OperatorNotLike, OperatorContains,\nOperatorBeginsWith, OperatorEndsWith, OperatorIn, OperatorNotIn,\nOperatorIs, OperatorOracleLeftJoin, OperatorIsNot\n\\param value The value to be compared with the field\n\\param rowOperator Operator for composing this criteria with a following\ncriteria\nPossible values\nOperatorAnd, OperatorOr, OperatorNotAnd, OperatorNotOr\n\\param priority A number. All criterias with the same number will be placed\ninside\nthe same brackets"},
{text: "SearchEngine.addHaving", help: "<b>Void addHaving(String field, String func, String compOperator, String value, String rowOperator, Integer priority)<\/b>\n\nAdds a having-clause to the database-query\n\n\\param field The field to make a restiction on\n\\param function The function to use on the field Possible values:\n FuncCount, FuncAvg, FuncSum, FuncMax, FuncMin, FuncHour,\n FuncWDay, FuncUpper, FuncLower\n\\param compOperator Comparison operator. Possible values:\n OperatorEquals, OperatorNotEquals, OperatorLt, OperatorLte, OperatorGt,\n OperatorGte, OperatorLike, OperatorNotLike, OperatorContains,\n OperatorBeginsWith, OperatorEndsWith, OperatorIn, OperatorNotIn,\n OperatorIs, OperatorOracleLeftJoin, OperatorIsNot\n\\param value The value to be compared with the field\n\\param rowOperator Operator for composing this criteria with a following\ncriteria\nPossible values:\n OperatorAnd, OperatorOr, OperatorNotAnd, OperatorNotOr\n\\param priority A number. All criterias with the same number will be placed\ninside\nthe same brackets"},
{text: "SearchEngine.addJoinCriteria", help: "<b>Void addJoinCriteria(String p_0, String p_1, String p_2, String p_3, Integer p_4)<\/b>\n\nThis method doesn't work with NetServer.\n\nYou need to bypass NetServer (see the method bypassNetServer) if you need to use this."},
{text: "SearchEngine.addOrder", help: "<b>Void addOrder(String field, Bool ascending)<\/b>\n\nAdds a restriction to the order on the listing of the database-result\n\n\\param field The field that will be sorted\n\\param ascending The direction for the sort, true if ascending, false if descending"},
{text: "SearchEngine.addOrder", help: "<b>Void addOrder(String field, String function, Bool ascending)<\/b>\n\nAdds an order to the result of the function of the field\n\n\\param field The field to be selected\n\\param function The function to use on the field\n Count, Avg, Sum, Max, Min, Hour, WDay, Upper, Lower\n\\param ascending true if the result will be sorted ascending, else descending"},
{text: "SearchEngine.bypassNetServer", help: "<b>Void bypassNetServer(Bool p_0)<\/b>\n\nFrom version 7 all the queries are sent to NetServer instead of directly to the database.\n\nThis function will allow you to send the queries directly to the database instead.\nThe function has no effect if the registry value (reg_id = 235) is set to 0.\n\nBe aware of any security implications by circumventing the NetServer."},
{text: "SearchEngine.delete", help: "<b>Void delete()<\/b>\n\nAfter adding criterias, call this to delete the items that was selected by the query"},
{text: "SearchEngine.executeInto", help: "<b>Void executeInto(StringMatrix matrix)<\/b>\n\nExecute the query and returns the result in the matrix.\n\n\\param matrix The matrix to fill with the resultset"},
{text: "SearchEngine.setCallBack", help: "<b>Void setCallBack(String functionName)<\/b>\n\nSet an ejscript function as a callback that will be used to convert the values before they are displayed in the grid.\n\n\\param functionName Name of ejscript function."},
{text: "SearchEngine.setDBDistinct", help: "<b>Void setDBDistinct(Bool p_0)<\/b>\n\nForce SearchEngine to use a distinct in the query."},
{text: "SearchEngine.setDistinct", help: "<b>Void setDistinct(String field)<\/b>\n\nThis function makes the entries distinct so that equal tickets will not be listed.\n\nse.setDistinct(\"ticked.id\"); There will only be one entry with the same ticket id, very useful with many to many relations."},
{text: "SearchEngine.setGroup", help: "<b>Void setGroup(Bool set)<\/b>\n\nSet or remove  a group-clause to all of the fields in the query (added by the addField()-function).\n\n\\param set true if you want to set the groupby-clause, false to remove a groupBy-clause"},
{text: "SearchEngine.setLimit", help: "<b>Void setLimit(Integer number)<\/b>\n\nSet the limit of number of rows to recieve in the resultset\n\n\\param number The limit of the rows to recieve in the resultset"},
{text: "SearchEngine.update", help: "<b>Void update()<\/b>\n\nUse this function after addData() which sets the values that will be modified, and addCriteria() which do a restriction on the items to modify."},
{text: "Void.SpmCustomerList", help: "<b>SpmCustomerList<\/b>\n\n"},
{text: "SpmCustomerList.delete", help: "<b>Bool delete()<\/b>\n\nThis method will delete the current recipients list. It is not possible to delete a list that currently is in use.\n\n\\return true if the list was deleted. False if the list does not exist or it currently is in use"},
{text: "SpmCustomerList.load", help: "<b>Bool load(Integer id)<\/b>\n\nLoad an existing customer list.\n\n\\param id Id of the list to load\n\\return true if successfull, false otherwise"},
{text: "SpmCustomerList.save", help: "<b>Integer save()<\/b>\n\nThis method will save the current list. If the list does not already exist in the database, it will be created.\n\n\\return id of the list. -1 if the list could not be saved."},
{text: "SpmCustomerList.addRecipient", help: "<b>Void addRecipient(Integer customerId)<\/b>\n\nThis method will add an recipient to the list. Be aware that the recipient must exist as a customer in the database.\n\n\\param customerId The id of the customer to add."},
{text: "SpmCustomerList.removeRecipients", help: "<b>Void removeRecipients()<\/b>\n\nIf you have loaded a valid customer list, this method will remove all recipients both from the database and any you may have added using \"addRecipient\". Be aware that even if you do not save the list, the recipients will still be removed from the database."},
{text: "SpmCustomerList.setFolderId", help: "<b>Void setFolderId(Integer folderId)<\/b>\n\nSets the folder for this list.\n\n\\param folderId Id of the folder where you want the list"},
{text: "SpmCustomerList.setName", help: "<b>Void setName(String name)<\/b>\n\nSet the name of the list. This is only used in the GUI when viewing the lists.\n\n\\param name The name of the list"},
{text: "Void.SpmMessage", help: "<b>SpmMessage<\/b>\n\nThis class represent a message in the eMarketeer module. You can create or modify such objects, which later is used by the SpmShipment class to send such messages."},
{text: "SpmMessage.save", help: "<b>Integer save()<\/b>\n\nSaves a SpmMessage object. If this is a new SpmMessage object (no id set), a new one will be created.\n\n\\return Integer the id of the SpmMessage object"},
{text: "SpmMessage.setBody", help: "<b>Void setBody(String body)<\/b>\n\nSet the body version of the SpmMessage object (will correspond to the text\/plain version in the outgoing email).\n\n\\param body The plain text version of the body"},
{text: "SpmMessage.setBodyHtml", help: "<b>Void setBodyHtml(String htmlBody)<\/b>\n\nSet the html body version of the SpmMessage object (will correspond to the text\/html version in the outgoing email).\n\n\\param htmlBody The html version of the body"},
{text: "SpmMessage.setDescription", help: "<b>Void setDescription(String description)<\/b>\n\nThis method will set the descriptive text of the SpmMessage. It is not used in the outgoing email, but will be visible when listed in eJournal.\n\n\\param description a text which describes this message"},
{text: "SpmMessage.setFolderId", help: "<b>Void setFolderId(Integer folderId)<\/b>\n\nSets the folder which this SpmMessage will be stored in. If you specify a folder id which do not exist, the message will not be visible through eJournal.\nA value of -1 indicates that it should be stored in the root folder.\n\n\\param folderId the id of the folder this message will be stored in"},
{text: "SpmMessage.setHeader", help: "<b>Void setHeader(String header)<\/b>\n\nIf you need to include additional email headers, they should be added here. You have to format these yourself.\n\nExample:\nHeader1: Value1\nHeader2: Value2\n\n\\param header the the information"},
{text: "SpmMessage.setSubject", help: "<b>Void setSubject(String subject)<\/b>\n\nHere you set the subject of the SpmMessage object which will corespond to the subject in the outgoing email.\n\n\\param subject the subject of the SpmMessage object"},
{text: "Void.SpmShipment", help: "<b>SpmShipment<\/b>\n\nThis class denotes a shipment in the eMarketeer module. A SpmShipment object will be responsible for the actual shipment. This object needs a SpmStaticList and a SpmMessage object as input."},
{text: "SpmShipment.save", help: "<b>Integer save()<\/b>\n\nThis method will save the SpmShipment object.\nWarning: this will activate the shipment and it will be executed at the indicated start date.\n\n\\return The id of the SpmShipment object"},
{text: "SpmShipment.addList", help: "<b>Void addList(Integer list)<\/b>\n\nUse this method to add a list of recipients to the shipment. You can add more than one list. If two or more of these lists contains the same address, only one email will be sent to this recipient.\nThe lists can be of either dynamic or static types.\n\n\\param list The id of the list to add"},
{text: "SpmShipment.addListCRMProject", help: "<b>Void addListCRMProject(Integer p_0)<\/b>\n\nAdds a CRM list of project members to shipment.\n\nParameters:\n - p_0: id, id of list to add"},
{text: "SpmShipment.addListCRMSelection", help: "<b>Void addListCRMSelection(Integer p_0)<\/b>\n\nAdds a CRM selection to shipment.\n\nParameters:\n - p_0: id, id of selection to add"},
{text: "SpmShipment.addListSelection", help: "<b>Void addListSelection(Integer p_0)<\/b>\n\nAdds a selection list to shipment.\n\nParameters:\n - p_0: id, id of selection list to add"},
{text: "SpmShipment.addListTicketSelection", help: "<b>Void addListTicketSelection(Integer p_0)<\/b>\n\nAdds a ticket selection list to shipment.\n\nParameters:\n - p_0: id, id of list to add"},
{text: "SpmShipment.setDescription", help: "<b>Void setDescription(String description)<\/b>\n\nThis method will set the descriptive text of the SpmShipment. It is not used in\nthe outgoing email, but will be visible when listed in eJournal.\n\n\\param description A text which describes this shipment"},
{text: "SpmShipment.setFolderId", help: "<b>Void setFolderId(Integer folderId)<\/b>\n\nSets the folder which this SpmShipment will be stored in. If you specify a\nfolder id which does not exist, the shipment will not be visible through eJournal.\nA value of -1 indicates that it should be stored in the root folder.\n\n\\param folderId the id of the folder which this shipment will be stored in"},
{text: "SpmShipment.setFrom", help: "<b>Void setFrom(String from)<\/b>\n\nThis method sets the from address of the outgoing email. This should be an email address which is imported by eJournal unless you have other reasons to do so.\n\n\\param from A string denoting the from address"},
{text: "SpmShipment.setMessage", help: "<b>Void setMessage(Integer messageId)<\/b>\n\nThis method sets the id of the SpmMessage object that will be used for the shipment. You have to specify this for a shipment to be valid.\n\n\\param messageId The id of a valid SpmMessage object"},
{text: "SpmShipment.setSendRate", help: "<b>Void setSendRate(Integer sendRate)<\/b>\n\nSets the rate of outgoing emails pr. minute for this shipment. This is required for a shipment. If you specify a value larger than eJournal actually can handle, it will send at full speed.\nWarning: this can lower performance of both eJournal and your mail server if set too high.\n\n\\param sendRate The number of emails pr. minute sent from eJournal"},
{text: "SpmShipment.setStartDate", help: "<b>Void setStartDate(DateTime start)<\/b>\n\nSets the date and time when the shipment will be started. If you specify a past date the shipment will be started imediately.\n\n\\param start the start date and time for this shipment"},
{text: "Void.SpmStaticList", help: "<b>SpmStaticList<\/b>\n\nWith this class you can create and edit static lists in the eMarketeer. A static list consist of one or more email addresses (and possible a matching name) which will be used when creating a shipment."},
{text: "SpmStaticList.delete", help: "<b>Bool delete()<\/b>\n\nThis method will delete a static list. If the list is in use by a shipment, the list will not be deleted.\n\n\\return Indicates if the list was actually deleted or not"},
{text: "SpmStaticList.load", help: "<b>Bool load(Integer id)<\/b>\n\nWill load an existing static list.\n\n\\param id The id of the static list\n\\return Returns false if the list was not found"},
{text: "SpmStaticList.save", help: "<b>Integer save()<\/b>\n\nThis method will save the list and the recipients.\n\n\\return The id of the SpmStaticList object"},
{text: "SpmStaticList.getRecipients", help: "<b>Map getRecipients()<\/b>\n\nGet a map of all the recipients in this list. The first element will be the email address and the second element the name of the recipient.\n\n\\return A map containing all the recipients"},
{text: "SpmStaticList.addRecipient", help: "<b>Void addRecipient(String address, String name)<\/b>\n\nAdd a recipient to the static list. You have to specify the email address of the recipient (the first parameter) and optional you can specify the name of the recipient.\n\n\\param address the email address of the recipient\n\\param name the name of the recipient"},
{text: "SpmStaticList.removeRecipient", help: "<b>Void removeRecipient(String address)<\/b>\n\nRemoves a recipient from the list identified by the email address.\n\n\\param address The email address of the recipient to be removed"},
{text: "SpmStaticList.setFolderId", help: "<b>Void setFolderId(Integer folderId)<\/b>\n\nThis method will set folder id for a static list.\n\n\\param folderId The id of the folder for this list"},
{text: "SpmStaticList.setName", help: "<b>Void setName(String name)<\/b>\n\nSets the name of this list. This is only a descriptive text which will be shown in eJournal.\n\n\\param name The name of the list"},
{text: "Void.StatLib", help: "<b>StatLib<\/b>\n\nClass for using the eJournal statistics library."},
{text: "StatLib.addAggregate", help: "<b>Void addAggregate(Integer groupColumn, Integer column, String name, String type, Integer decimals)<\/b>\n\nAdd an aggregate function to the specified group. An aggregate function is a function which is calculated for all values for a given column in a group. This could for instance be the average response time for each category. The functions can be:\n\nCount Count the number of entries.\nSum Summarize the value.\nAvg Calculate the average value.\nMax Calculate the maximum value.\nMin Calculate the minimum value.\nCountNotEmpty Count the number of entries which are not empty (NULL).\n\n\\param groupColumn The column used for grouping.\n\\param column The column used for the calculation.\n\\param name The name of the calculated variable in the Parser or StatResult\n\\param type The type of function.\n\\param decimals The number of decimals to use in the calculated value"},
{text: "StatLib.addAggregate", help: "<b>Void addAggregate(Integer groupColumn, Integer column, String name, String type, Integer decimals, Integer uniqueColumn)<\/b>\n\nAdd an aggregate function to the specified group. An aggregate function is a function which is calculated for all values for a given column in a group. This could for instance be the average response time for each category. The functions can be:\n\nCount Count the number of entries.\nSum Summarize the value.\nAvg Calculate the average value.\nMax Calculate the maximum value.\nMin Calculate the minimum value.\nCountNotEmpty Count the number of entries which are not empty (NULL).\n\n\\param groupColumn The column used for grouping.\n\\param column The column used for the calculation.\n\\param name The name of the calculated variable in the Parser or StatResult\n\\param type The type of function.\n\\param decimals The number of decimals to use in the calculated value\n\\param uniqueColumn The value is only calculated for the rows which have a unique value in this column."},
{text: "StatLib.addCallback", help: "<b>Void addCallback(Integer column, String script)<\/b>\n\nAdd a callback. A callback is a PARSER-snippet which will be executed for the given column for each row. This is an old method. Use StatResult and iterate instead.\n\n\\param group The column for which this callback should be executed.\n\\param script The Parser code to execute."},
{text: "StatLib.addGroup", help: "<b>Void addGroup(Integer column, Bool desc)<\/b>\n\nAdd a group to the StatLib instance. A group is a subset of the results which has a common value for a given column. Aggregate values can be calculated for groups (i.e. avergage response time pr. category).\n\n\\param column The column to use as the group identifier (i.e. the field which will identify the groups).\n\\param desc If True, then we'll sort this group descending, otherwise ascending."},
{text: "StatLib.addGroup", help: "<b>Void addGroup(Integer p_0, Bool p_1, Bool compareAsNumber)<\/b>\n\n\\param column The column to use as the group identifier (i.e. the field which will identify the groups).\n\\param desc If True, then we'll sort this group descending, otherwise ascending.\n\\param compareAsNumber True if the value is a number and you want numeric sorting\/grouping\n\nAdd a group to the StatLib instance. A group is a subset of the results which\nhas a common value for a given column. Aggregate values can be calculated for\ngroups (i.e. avergage response time pr. category)."},
{text: "StatLib.dropOrder", help: "<b>Void dropOrder()<\/b>\n\nCalling this function will make the StatLib instance skip sorting the results in the groups."},
{text: "StatLib.execute", help: "<b>Void execute(Parser p)<\/b>\n\nExecute the query and aggregation, and store the results in the Parser.\n\n\\param p The parser to store the results in."},
{text: "StatLib.execute", help: "<b>Void execute(StatResult sr)<\/b>\n\nExecute the query and aggregations and store the results in the StatResult.\n\n\\param sr The StatResult instance to store the results in."},
{text: "StatLib.setGenericSearch", help: "<b>Void setGenericSearch(GenericSearch gs)<\/b>\n\nUse the given GenericSearch entry as query (instead of SQL string).\n\n\\param gs The GenericSearch entry to use."},
{text: "StatLib.setName", help: "<b>Void setName(String name)<\/b>\n\nSets the name for the instance. The name is used to prefix the result in the Parser.\n\n\\param name The name for the instance."},
{text: "StatLib.setSearchEngine", help: "<b>Void setSearchEngine(SearchEngine se)<\/b>\n\nUse the given SearchEngine entry as query (instead of SQL string).\n\n\\param gs The SearchEngine entry to use."},
{text: "StatLib.setSql", help: "<b>Void setSql(String sqlStatement)<\/b>\n\nSets the query for the instance.\n\n\\param sqlStatement The SQL query to execute for the instance."},
{text: "StatLib.setStringMatrix", help: "<b>Void setStringMatrix(StringMatrix sm)<\/b>\n\nUse the given StringMatrix entry as query (instead of SQL string).\n\n\\param sm The StringMatrix entry to use."},
{text: "Void.StatResult", help: "<b>StatResult<\/b>\n\nA class used for accessing the results of a StatLib execution."},
{text: "StatResult.atGroupBegin", help: "<b>Bool atGroupBegin(Integer column)<\/b>\n\nCheck if the current row is the first row for a given group.\n\n\\param column The column which identifies the group.\n\\return True if we're at the first row for this group, otherwise False."},
{text: "StatResult.atGroupEnd", help: "<b>Bool atGroupEnd(Integer column)<\/b>\n\nCheck if the current row is the last row for a given group.\n\n\\param column The column which identifies the group.\n\\return True if we're at the last row for this group, otherwise False."},
{text: "StatResult.eof", help: "<b>Bool eof()<\/b>\n\n\\return True if the internal iterator is past the last element, otherwise False"},
{text: "StatResult.next", help: "<b>Bool next()<\/b>\n\nMove internal iterator to next element.\n\n\\return eof() after move."},
{text: "StatResult.saveAsResult", help: "<b>Integer saveAsResult(Integer column, Integer ownerId, Integer maxRows)<\/b>\n\n\\param column What column to use as id field\n\\param ownerId Id of the owner of the result set (so it can be deleted at logout time)\n\\param maxRows Maximum number wanted in the result set\n\\return A reference to the result set:\n\nThe result set reference can be used like this to display tickets in the result set (if the result set references tickets):\nsetVariable(\"url\", getProgram(1) + \"&action=listTickets&special=11&resultKey=\" + resKey .toString());"},
{text: "StatResult.dumpParser", help: "<b>String dumpParser()<\/b>\n\n\\return A string with everything in the StatResult parser listed.\n\nMainly used for debugging and development, useful as it will show you every variable in the StatResult parser."},
{text: "StatResult.getField", help: "<b>String getField(Integer column)<\/b>\n\nWill return the field at the given column at the current row.\n\n\\param column Zero-based index of columns.\n\\return The value in the result."},
{text: "StatResult.getField", help: "<b>String getField(String field)<\/b>\n\nReturns the value for the given field at the current row. Normally used to retrieve values from aggregate functions.\n\n\\param field The name of the field to retrieve.\n\\return The value."},
{text: "StatResult.rewind", help: "<b>Void rewind()<\/b>\n\nRewinds the internal iterator."},
{text: "Void.String", help: "<b>String<\/b>\n\nA class for representing strings as objects.\nConstructor can take a string, and returns a string.\n\nExample code:\n\nString s = \"47882255\";\n\nif (s.isDigit() && s.getLength() == 8){\n   print(s + \" is a valid phone number\");\n}"},
{text: "String.beginsWith", help: "<b>Bool beginsWith(String s)<\/b>\n\n\\param s The text the string may begin with\n\\return True if the the string object begins with the string given as parameter,\ntaking case into account."},
{text: "String.caseBeginsWith", help: "<b>Bool caseBeginsWith(String s)<\/b>\n\n\\param s The text the string may begin with\n\\return True if the the string object begins with the string given as parameter,\nregardless of case."},
{text: "String.caseEndsWith", help: "<b>Bool caseEndsWith(String s)<\/b>\n\n\\param s The text the string may end with\n\\return True if the the string object ends with the string given as parameter, regardless of case."},
{text: "String.endsWith", help: "<b>Bool endsWith(String s)<\/b>\n\n\\param s The text the string may end with\n\\return True if the the string object ends with the string given as parameter,\ntaking case into account."},
{text: "String.equals", help: "<b>Bool equals(String p_0)<\/b>\n\nCompare two string a returns true if they are equal.\n\n\\param p_0 The string to compare with.\n\\return true if they are equal"},
{text: "String.equalsIgnoreCase", help: "<b>Bool equalsIgnoreCase(String p_0)<\/b>\n\nCompare two strings and if they are equals return true. This function will ignore differences in upper and lower case.\n\n\\param p_0 The string to compare with.\n\\return true if they are equal"},
{text: "String.isAlpha", help: "<b>Bool isAlpha()<\/b>\n\nDetermine if the string contains only alphabetic characters.\n\n\\return Return true if the string only contains alphabetic characters."},
{text: "String.isAlphanumeric", help: "<b>Bool isAlphanumeric()<\/b>\n\nDetermine if a string contains only alphabetic characters or digits.\n\n\\return Return true if the string only contains alphabetic characters or digits."},
{text: "String.isDigit", help: "<b>Bool isDigit()<\/b>\n\nDetermine if the string contains only numeric characters. [0-9]\n\n\\return Return true if the string only contains numeric characters. [0-9]"},
{text: "String.isEmpty", help: "<b>Bool isEmpty()<\/b>\n\n\\return True if the String is empty (\"\") or NULL\/NUL\/NIL, that is it contains no characters."},
{text: "String.isLower", help: "<b>Bool isLower()<\/b>\n\nDetermine if the string contains only lowercase characters.\n\n\\return Return true if the string only contains lowercase characters."},
{text: "String.isNull", help: "<b>Bool isNull()<\/b>\n\n\\return True if the string is NULL\/NUL\/NIL\n\nA NULL\/NUL\/NIL String is different from an empty string, in that it is conceptually without a value. However, when a null string is used naively, ejScript is usually forgiving and interprets it as empty."},
{text: "String.isNumber", help: "<b>Bool isNumber()<\/b>\n\nTests if this string is a number. If it returns true, it's guaranteed that the string can be converted to an integer\n\n\\return True if string can be converted to an integer, false otherwise."},
{text: "String.isUpper", help: "<b>Bool isUpper()<\/b>\n\nDetermine if the string contains only uppercase characters.\n\n\\return Return true if the string only contains uppercase characters."},
{text: "String.isValidEmail", help: "<b>Bool isValidEmail()<\/b>\n\nChecks if the string is a valid email address.\n\n\\return True if the string is a valid email address."},
{text: "String.toBool", help: "<b>Bool toBool()<\/b>\n\nThis function returns True either if the string is \"1\" or \"True\".\nThe function returns false if the string is \"0\" or \"False\".\n\nExample:\n\nString s = \"1\";\ns.toBool();"},
{text: "String.toByteArray", help: "<b>Byte[] toByteArray()<\/b>\n\n\\return An array of bytes (the string is converted to ISO-8859-1)"},
{text: "String.toDate", help: "<b>Date toDate()<\/b>\n\nReturns a Date object from a string representation of a date.\n\n\\return The date value of a string."},
{text: "String.toDateTime", help: "<b>DateTime toDateTime()<\/b>\n\nReturns an datetime from a string representation of a number.\n\n\\return The datetime value of a string."},
{text: "String.toFloat", help: "<b>Float toFloat()<\/b>\n\nReturns a float from a string representation of a number.\n\n\\return The float value of a string.\n\nExample:\n\nString s = \"150,3\";\ns.toFloat();"},
{text: "String.caseCompare", help: "<b>Integer caseCompare(String p_0)<\/b>\n\nCompare this string with another String, disregarding case.\nReturns <0 if this is lexically smaller than s, 0 if equal, and >0 if this is lexically larger than s\n\n\\param p_0 The string to compare with.\n\\return <0 if this is lexically smaller than s, 0 if equal, and >0 if this is lexically larger than s"},
{text: "String.compare", help: "<b>Integer compare(String p_0)<\/b>\n\nCompare two strings and return <0 if this is lexically smaller than s, 0 if equal, and >0 if this is lexically larger than s\n\n\n\\param p_0 The string to compare with.\n\\return <0 if this is lexically smaller than s, 0 if equal, and >0 if this is lexically larger than s"},
{text: "String.find", help: "<b>Integer find(String subStr)<\/b>\n\nSearch for a substring and returns the index of the begining of the first occurence of the substring.\n\n\\param subStr Search for this substring\n\\return First index of the substring"},
{text: "String.findCase", help: "<b>Integer findCase(String s)<\/b>\n\nFind a substring in this string, case insensitive\n\n\\param s The substring to find\n\\return Index of first instance, or -1 if not found."},
{text: "String.findLast", help: "<b>Integer findLast(String p_0)<\/b>\n\n\\param p_0: The string to match\n\\return The position of the last occurence of the string to match"},
{text: "String.getLength", help: "<b>Integer getLength()<\/b>\n\nReturns the length of the string.\n\n\\return The length of the string in characters."},
{text: "String.toInteger", help: "<b>Integer toInteger()<\/b>\n\nReturns an integer from a string representation of a number.\n\n\\return The integer value of a string."},
{text: "String.after", help: "<b>String after(String s)<\/b>\n\nReturn the part of this String after a certain string\n\nE.g. if this is \"name := value\", then after(\":=\") returns \" value\". If s is not\nfound in this, then an empty string is returned.\n\n\\param s The string to look for.\n\\return What is after s in this."},
{text: "String.afterLast", help: "<b>String afterLast(String p_0)<\/b>\n\nReturns the string after the last matching string.\n\n\\param p_0 String to find\n\\return The last part of the string after last match."},
{text: "String.before", help: "<b>String before(String searchText)<\/b>\n\n\\param searchText The text to search for\n\\return The part of the string preceeding the search text"},
{text: "String.beforeLast", help: "<b>String beforeLast(String needle)<\/b>\n\n\\param p0: The string to find\n\\return A string consisting of all the contents before the last needle."},
{text: "String.escape", help: "<b>String escape(String chars)<\/b>\n\nEscape special characters of a string. Special characters are given as a parameter.\n\n\\param chars Special characters which will be escaped with a backslash\n\\return The escaped coded string"},
{text: "String.extractHtmlBody", help: "<b>String extractHtmlBody(Bool convertBodyToDiv)<\/b>\n\nExtracts the body content of a string containing a html document.\n\nIf the convertBodyToDiv parameter is true, the body tag will be replaced with a div tag."},
{text: "String.extractHtmlHead", help: "<b>String extractHtmlHead(Bool stripTitle)<\/b>\n\nExtracts the head content of a string containing a html document.\n\nIf the stripTitle parameter is true, the title tag will be excluded."},
{text: "String.getLine", help: "<b>String getLine()<\/b>\n\nThis function will return and remove a line from this string. It is normally used\nto process a longer text, stored in a string, in a linewise fashion. The newline is\nreturned as well. If there are not any newlines, then this whole string is returned,\nand this string is set to empty.\n\n\\return The first line of the string."},
{text: "String.getWord", help: "<b>String getWord(Integer num)<\/b>\n\nReturn a numbered word from a string\n\nThis function returnes word number num from the string. Word 0 is the first word\nin the string, even if it's after some leading whitespace.\nE.g. String(\"  this is a test\").getWord(1) yields \"is\".\n\n\\param The number of the word to return, starting at 0\n\\return The word"},
{text: "String.htmlDecode", help: "<b>String htmlDecode()<\/b>\n\nHtml decode the string.\n\n\\return An html decoded version of the String."},
{text: "String.htmlEncode", help: "<b>String htmlEncode()<\/b>\n\nReturns html-encoded version of the string."},
{text: "String.keepChars", help: "<b>String keepChars(String unwantedChars)<\/b>\n\n\\param unwantedChars A string of characters not wanted in the returned string\n\\return A string where all unwanted characters are removed"},
{text: "String.parseSOMultiLanguageString", help: "<b>String parseSOMultiLanguageString(Integer p_0)<\/b>\n\nReturns the string part of the specified culture from the multi language string.\nThese strings are typically used in SuperOffice list and description data.\n\nString example from PrefDesc table:\nUS:\"Location and size\";GE:\"Position und Größe\";NO:\"Posisjon og størrelse\"\n\nParameter:\n - language - the follwoing languages are available:\n   -  NoLang = -1,\n   - Norwegian = 0,\n   - English = 1,\n   - German = 2,\n   - Swedish = 3,\n   - Danish = 4,\n   - Dutch = 5,\n   - Global = 6,"},
{text: "String.prettyChop", help: "<b>String prettyChop(Integer length)<\/b>\n\nThis function will chop the current string after the specified number of characters and return the result. It will also append three dots at the end of the string. It will not change the current string.\n\n\\param length the number of characters to keep\n\\return the chopped version of the string, including three dots at the end"},
{text: "String.stripLeading", help: "<b>String stripLeading(String characters)<\/b>\n\nRemove all characters given by the parameter at the begining of the String.\n\n\\param the characters to strip.\n\\return The string without the leading characters."},
{text: "String.stripLeadingAndTrailing", help: "<b>String stripLeadingAndTrailing(String characters)<\/b>\n\nRemove all characters given by the parameter at the beginning and at the end of the String.\n\n\\param the characters to strip.\n\\return The string without the leading and trailing characters."},
{text: "String.stripTrailing", help: "<b>String stripTrailing(String characters)<\/b>\n\nRemove all characters given by the parameter at the end of the String.\n\n\\param the characters to strip.\n\\return The string without the trailing characters."},
{text: "String.substitute", help: "<b>String substitute(String src, String dest)<\/b>\n\nReplace a substring with a new substring. All occurences will be replaced.\n\n\\param src Substring to search for.\n\\param dest Substring to replace\/substitute with.\n\\return The substituted string"},
{text: "String.subString", help: "<b>String subString(Integer pos, Integer len)<\/b>\n\nCopy a piece of a string.\n\n\\param pos Start position of the substring.\n\\param len Length of the substring\n\\return Return the substring."},
{text: "String.toLower", help: "<b>String toLower()<\/b>\n\n\\return The lower case representation of the string"},
{text: "String.toUpper", help: "<b>String toUpper()<\/b>\n\nConvert the string to upper case.\n\n\\return The string in upper case characters."},
{text: "String.until", help: "<b>String until(String s)<\/b>\n\nThis function will return a substring of this string, starting at index 0, ending before\nthe first instance of s. E.g. if this string is \"name := test\", then until(\":=\") will\nreturn \"name \". If there is no instance of s in this string, then a copy of this string is returned.\n\\param s String at where to terminate result.\n\\return The first part of the string."},
{text: "String.urlDecode", help: "<b>String urlDecode()<\/b>\n\nUrl-decode the string.\n\n\\return An url decoded version of the String."},
{text: "String.urlEncode", help: "<b>String urlEncode()<\/b>\n\nUrl-encode the string.\n\n\\return An url encoded version of the String."},
{text: "String.utf8Decode", help: "<b>String utf8Decode()<\/b>\n\n\\return A UTF-8 decoded string, possibly containing characters outside the character space of ISO-8859-1 (Latin-1).\n\nThe characters in the string are interpreted as UTF-8, and decoded. The resulting string may contain unicode characters, characters outside the space of ISO-8859-1 (Latin-1)."},
{text: "String.utf8Encode", help: "<b>String utf8Encode()<\/b>\n\n\\return The UTF-8 representation of the string\n\nThe characters are coded using the utf-8 format, and the string returned consists of only ascii characters, encoding the unicode characters (outside ASCII\/Latin-1) in utf-8 format."},
{text: "String.xmlDecode", help: "<b>String xmlDecode()<\/b>\n\nXML decode the string\n\n\\return A xml decoded version of the string"},
{text: "String.xmlEncode", help: "<b>String xmlEncode()<\/b>\n\n\\return xml-encoded version of the string"},
{text: "String.parseCSV", help: "<b>String[] parseCSV(String delim)<\/b>\n\nSplits the current line separated with delim (delim must be one character)."},
{text: "String.regexp", help: "<b>String[] regexp(String pattern)<\/b>\n\nUses regexp pattern on the String object. Support for subexpressions are also present.\nThe regexp is caseinsensitiv.\n\nFor instance:\n\nString s;\ns=\"blabla 1234-4567-7890-1111 asdfasdfasdf\";\nString[] res = s.regexp(\"(\\\\d{4})-(\\\\d{4})-(\\\\d{4})-(\\\\d{4})\");\nfor (Integer i=0;i<res.length(); i++)\n{\n  print(\"Result: \" + res[i] + \"\\n\");\n}\n\nInterpretation of the returned array:\nNo matches will result an array with 0 length.\nres[0] will point to the entire matched string.\nres[1 ... n-1] will point to the matches of the subexpressions."},
{text: "String.split", help: "<b>String[] split(String delimiter)<\/b>\n\nSplit a string into an array of strings\n\n\\param delimiter The value used to split the string\n\\return Array of substrings"},
{text: "String.toTime", help: "<b>Time toTime()<\/b>\n\nReturns a time object from a string.\n\n\\return The time value of a string."},
{text: "String.getEmails", help: "<b>Vector getEmails()<\/b>\n\nReturns a vector of the names and email addresses in the String. The string is supposed to contain a list separated with , of \"name\" <emailAddr>\nIf there is a malformed address in the string, the vector returned is empty\n\n\\return Vector of names and emails"},
{text: "String.append", help: "<b>Void append(Byte character)<\/b>\n\n\\param character Appends the ISO-8859-1 (Latin-1) character represented by the byte to the string"},
{text: "String.append", help: "<b>Void append(String appendString)<\/b>\n\n\\param appendString: The string to append\n\nThis will append appendString to the current string.\n\nThis is currently faster than using += on the String object."},
{text: "String.quote", help: "<b>Void quote(String quoteString)<\/b>\n\nThis function will quote the String with the quoteString.  Each line of the String will start with quoteString, after calling quote.\n\n\\params quoteString The String to use as a quote, example >"},
{text: "String.wrap", help: "<b>Void wrap(Integer length, Bool ignoreQuote)<\/b>\n\nThis function will wrap the String in lines of wanted length.\n\n\\param length The number of characters per line after wrapping\n\\param ignoreQuote True if you do not want quoted lines to be wrapped, else false."},
{text: "Void.StringMatrix", help: "<b>StringMatrix<\/b>\n\nTwo-dimensional string array."},
{text: "StringMatrix.getNumColumns", help: "<b>Integer getNumColumns(Integer row)<\/b>\n\n\\param The row to count the cells in\n\\return The numbers of columns (cells) in the given row."},
{text: "StringMatrix.getNumRows", help: "<b>Integer getNumRows()<\/b>\n\n\\return The number of rows in the matrix."},
{text: "StringMatrix.getCell", help: "<b>String getCell(Integer row, Integer column)<\/b>\n\nReturns the value for a given cell.\n\n\\param row The zero-based index of the row.\n\\param column The zero-based index of the column.\n\\return The value of the cell at the specified position."},
{text: "StringMatrix.addCell", help: "<b>Void addCell(String value)<\/b>\n\nAdd a cell to the current row.\n\n\\param value The value to store in the cell."},
{text: "StringMatrix.addRow", help: "<b>Void addRow()<\/b>\n\nAdd a row to the matrix."},
{text: "StringMatrix.clear", help: "<b>Void clear()<\/b>\n\nClear the whole matrix."},
{text: "StringMatrix.deleteRow", help: "<b>Void deleteRow(Integer row)<\/b>\n\nDelete a row from the matrix.\n\n\\param row The zero-based index of the row to delete."},
{text: "StringMatrix.setCell", help: "<b>Void setCell(Integer row, Integer column, String value)<\/b>\n\nSets the value of the specified cell.\n\n\\param row The row\n\\param column The column\n\\param value The value to set in the specified cell."},
{text: "Void.Ticket", help: "<b>Ticket<\/b>\n\nClass for representing an eJournal Ticket.\n\nExample code:\n\nTicket t;\n\nt.load(2); \/\/ Loads the ticket with id = 2\nprint(t.getValue(\"ticketStatus\"));\nt.setValue(\"title\", \"Test\");\nt.setValue(\"status\", \"1\");\nDateTime d; \/\/ Default value for DateTime is now\nt.setValue(\"dbiLastModified\", d.toString());\nprint(t.getOwnerEmail()); \/\/ Prints name and email of owner\nt.save();"},
{text: "Ticket.load", help: "<b>Bool load(Integer id)<\/b>\n\nLoad ticket with given id into this object, return true if successful, false otherwise.\n\n\\param the id of the ticket to load\n\\return true if ticket found and loaded, else false"},
{text: "Ticket.notifyEmail", help: "<b>Bool notifyEmail(Integer replyTemplateId)<\/b>\n\nThis function sends a notify-email (a replyTemplate) to the owner of the ticket.\nTo use for events like new ticket, new message on ticket etc.\n\n\\param replyTemplateId The id of the replyTemplate you want to send.\n\\return true if the email was sent successfully, else false."},
{text: "Ticket.sendMessages", help: "<b>Bool sendMessages(String subject, StringMatrix recipients, Bool fromCust, String messages, Integer msgId, String comment)<\/b>\n\nWill send the given messages just like the forward ticket functionality in the GUI. The forwarded messages are separated by a line, and the comment is placed on top of the mail.\n\n\\param subject The mail subject, maybe ticket.title.\n\\param recipients String matrix with recepients\n\\param fromCust Email address from ticket or customer\n\\param messages Comma separated list of message id's to forward\n\\param msgId Id of added \"forward\" message or \"-1\"\n\\param comment A comment that will be above the forwarded messages.\n\\return True if success\n\nThe recepients string matrix is formatted like this:\n-------------------------------------------\nTo | John Doe <john.doe@john.doe>\nCc | jane Doe <jane.doe@jane.doe>\n-------------------------------------------"},
{text: "Ticket.save", help: "<b>Integer save()<\/b>\n\nSaves the ticket, returns database id of the stored ticket.\n\n\\return the Id of the saved ticket"},
{text: "Ticket.save", help: "<b>Integer save(Bool setReadStatus, Bool doNotCheckEscalating)<\/b>\n\nThis function saves the ticket.\n\\param Bool setReadStatus. True if you want the readstatus to be computed when you save the ticket, otherwise false.\n\\param Bool doNotCheckEscalating. True if you do NOT want the changes done on the ticket to result in a possible escalation, otherwise false\n\\return Integer id"},
{text: "Ticket.save", help: "<b>Integer save(String log, Bool setReadStatus, Bool doNotCheckEscalating)<\/b>\n\nThis function saves the ticket.\n\\param String log. A String that will be saved in the log of the ticket\n\\param Bool setReadStatus. True if you want the readstatus to be computed when you save the ticket, otherwise false.\n\\param Bool doNotCheckEscalating. True if you do NOT want the changes done on the ticket to result in a possible escalation, otherwise false\n\\return Integer id"},
{text: "Ticket.save", help: "<b>Integer save(String p_log)<\/b>\n\nThis function saves the ticket.\n\n\\param String p_log.  A String that will be saved on the ticket's log\n\\return Integer id."},
{text: "Ticket.buildEmailSubject", help: "<b>String buildEmailSubject()<\/b>\n\nreturns a String composed by the eJournal tag, the ticketId and the title of the ticket\n\n\\return a String composed by the eJournal tag, the ticketId and the title of the ticket"},
{text: "Ticket.getInvolvedOnly", help: "<b>String getInvolvedOnly()<\/b>\n\nreturns a comma-separated list of the email-addresses of all customers that is not a connected customer to this ticket, but who has recieved a message on this ticket.\n\n\\return a comma-separated list of email-addresses"},
{text: "Ticket.getMailFrom", help: "<b>String getMailFrom()<\/b>\n\nThis function determines and returns the most appropriate from-address, when sending a mail-message on a ticket.\n\n\\return The most appropriate from-address specified on with address, the ticket has arrived on, the category, etc"},
{text: "Ticket.getOwnerEmail", help: "<b>String getOwnerEmail()<\/b>\n\nThis function returns the owner of the ticket printed as \"Name\" <email-addr>.\n\n\\return the owners name and email-address"},
{text: "Ticket.getOwnerSms", help: "<b>String getOwnerSms()<\/b>\n\nThis function returns the cellphone number of the owner of the ticket\n\n\\return The cellphone number of the owner of the ticket as a String."},
{text: "Ticket.getValue", help: "<b>String getValue(String colName)<\/b>\n\nGet the value of given column name as a String\n\nParameter:\n - colName: The name of the wanted column.\n\nPossible values are the extrafields on the ticket and the following:\n - id\n - title\n - category: the id\n - ownedBy: (owned_by), the id of the user who owns the ticket\n - slevel: the security level of the ticket, 1 is internal, 2 is external\n - priority: the id\n - status: 1 = active, 2 = closed, 3 = postponed, 4 = deleted, 5 = composed\n - ticketStatus\n - custId: the id of the primary customer\n - createdBy: the id of the user who posted the ticket, 1 if the ticket is posted into the system\n - author\n - activate: the datetime when the ticket was activated\n - createdAt: (created_at), the datetime when the ticket was created\n - closedAt: (closed_at), the datetime when the ticket was closed\n - repliedAt: (replied_at), the datetime when the ticket first was replied at\n - origCategory: the original category\n - origPriority: the original priority\n - isInEscalation\n - displayFilter\n - filterId\n - filterAddress\n - readStatus\n - deadline\n - readByOwner\n - firstReadByUser\n - firstReadByOwner\n\nReturns a string representation of the wanted value"},
{text: "Ticket.addSecondaryCustomers", help: "<b>Void addSecondaryCustomers(Vector ids)<\/b>\n\nAdd seconday customers to the ticket.\n\n\\param ids A Vector of Strings containing the customerIds to add as secondary customers on the ticket"},
{text: "Ticket.checkEscalating", help: "<b>Void checkEscalating(Integer action)<\/b>\n\nThis function does a check according to the ticket's pritority and the input action. The effect of calling this function might be that the escalation stops, restarts or continues.\n\n\\param action as an Integer.\nPossible values:\nActionRead = 0,\nActionChangedOwner = 1,\nActionNewInfo = 2,\nActionClosed = 3,\nActionChangedPriority = 4,\nActionNew = 5"},
{text: "Ticket.delegate", help: "<b>Void delegate()<\/b>\n\nDelegates the ticket to a eJournal-user according to the rules on the category of the ticket.\nFor this function to take affect, you have to use the ticket-function save()."},
{text: "Ticket.delegate", help: "<b>Void delegate(Integer notUser)<\/b>\n\nThis function delegates a ticket to a user, according to the rules that are set for this ticket's category. For this function to take affect, you have to call save() on the ticket\n\n\\param notUser, The id of a user you do not want to delagate to."},
{text: "Ticket.log", help: "<b>Void log(String message)<\/b>\n\nThis function will log \"message\" to the ticket log."},
{text: "Ticket.log", help: "<b>Void log(String who, String message)<\/b>\n\nThis a function for logging changes and events on a ticket\n\n\\param who The name of the user that made the change to log\n\\param message The message to log"},
{text: "Ticket.setValue", help: "<b>Void setValue(String colName, String value)<\/b>\n\nSets column colName to the given value.\nObs: For this to actually affect the ticket, you will have to use the function save() after you have set all the values you want.\n\nParameter:\n - colName\n - value: A String representation of the value to set\n\nPossible values are the extrafields on the ticket and the following:\n - title\n - category: the category id\n - ownedBy: (owned_by), the id of the user who owns the ticket\n - slevel: the security level of the ticket, 1 is internal, 2 is external\n - priority: the id\n - status: 1 = active, 2 = closed, 3 = postponed, 4 = deleted, 5 = composed\n - ticketStatus: (ticket_status), the id of the custom status field\n - custId: the id of the primary customer\n - customers: comma separated list of customer ids\n - createdBy: the id of the user who posted the ticket, 1 if the ticket is posted into the system\n - author: a string containing the name of the ticket author\n - activate: the datetime when the ticket was activated\n - createdAt: (created_at), the datetime when the ticket was created\n - repliedAt: (replied_at), the datetime when the ticket first was replied at\n - stopEscalation\n - readStatus (read_status)\n - deadline\n - filterAddress\n - timeToClose\n - realTimeToClose\n - dbiAgentId\n - dbiKey\n - dbiLastModified\n - dbiLastSyncronized"},
{text: "Ticket.toParser", help: "<b>Void toParser(Parser theParser)<\/b>\n\nThis function will fill the variable space of theParser with all values of the ticket.\nAs opposed to the function toParserRaw(), the String variables title and author are in html.\n\n\\param theParser The parser who will be filled with ticket-values"},
{text: "Ticket.toParserRaw", help: "<b>Void toParserRaw(Parser theParser)<\/b>\n\nThis function fills theParser with the values of the ticket.\nAs opposed to the function toParser() who set several of the String-values as html, all these variables will be in plain text.\n\n\\param theParser A parserobject, who will be filled with the values of the ticket"},
{text: "Void.Time", help: "<b>Time<\/b>\n\nA class for representing time as objects.\nConstructor can take a Time, and returns a Time.\nThe default time is now."},
{text: "Time.isNull", help: "<b>Bool isNull()<\/b>\n\n\\return True if the Time is NULL\/NUL\/NIL\n\nA NULL\/NUL\/NIL Time is different from zero, in that it is conceptually\nwithout a value."},
{text: "Time.getHour", help: "<b>Integer getHour()<\/b>\n\nThis function returns the hours of the time as an Integer.\n\nExample:\n\nTime t;\nt.setHour(10);\nt.setMin(15);\nt.setSec(30);\nInteger i = t.getHour();"},
{text: "Time.getMin", help: "<b>Integer getMin()<\/b>\n\nThis function returns the minutes of the time as an Integer.\n\nExample:\n\nTime t;\nt.setHour(10);\nt.setMin(15);\nt.setSec(30);\nInteger i = t.getMin();"},
{text: "Time.getSec", help: "<b>Integer getSec()<\/b>\n\nThis function returns the seconds of the time as an Integer.\n\nExample:\n\nTime t;\nt.setHour(10);\nt.setMin(15);\nt.setSec(30);\nInteger i = t.getSec();"},
{text: "Time.toString", help: "<b>String toString()<\/b>\n\n\\return A string representation of the Time."},
{text: "Time.setHour", help: "<b>Void setHour(Integer hour)<\/b>\n\nThsi function ssets the hour of the time.\n\n\\param Hour to set\n\nExample:\n\nTime t;\nt.setHour(10);\nt.setMin(15);\nt.setSec(30);\n\n10:15:30"},
{text: "Time.setMin", help: "<b>Void setMin(Integer min)<\/b>\n\nThis functipn sets the minutes of the time.\n\n\\param Minutes to set\n\nExample:\n\nTime t;\nt.setHour(10);\nt.setMin(15);\nt.setSec(30);\n\n10:15:30"},
{text: "Time.setSec", help: "<b>Void setSec(Integer sec)<\/b>\n\nThis function sets the seconds of the time.\n\n\\param Seconds to set\n\nExample:\n\nTime t;\nt.setHour(10);\nt.setMin(15);\nt.setSec(30);\n\n10:15:30"},
{text: "Void.Timer", help: "<b>Timer<\/b>\n\nExample:\n\nTimer timer;\ntimer.start();\n\n\/\/ code you want to time\n\n\n\n\ntimer.stop();\nFloat timeTaken = timer.getSeconds();\nprint(\"The code took \" + timeTaken.toString(5) + \" seconds to complete\");"},
{text: "Timer.getHiResTimer", help: "<b>Float getHiResTimer()<\/b>\n\nGet a high resolution timer in seconds."},
{text: "Timer.getSeconds", help: "<b>Float getSeconds()<\/b>\n\nThis function will return the number of seconds between start and stop."},
{text: "Timer.getTimer", help: "<b>Float getTimer()<\/b>\n\nGet a timer value in seconds from the real time system clock. This is normally a low resolution timer."},
{text: "Timer.start", help: "<b>Void start()<\/b>\n\nThis function will start the timer."},
{text: "Timer.stop", help: "<b>Void stop()<\/b>\n\nThis function will stop the timer."},
{text: "Void.TimeSpan", help: "<b>TimeSpan<\/b>\n\nA class for representing a timespan."},
{text: "TimeSpan.isNegative", help: "<b>Bool isNegative()<\/b>\n\nThe return value is true if this is a negative timespan, othewise false."},
{text: "TimeSpan.getDay", help: "<b>Integer getDay()<\/b>\n\nThis function will return the day field of the timespan as an integer."},
{text: "TimeSpan.getHour", help: "<b>Integer getHour()<\/b>\n\nThis function will return the hour field of the timespan as an integer."},
{text: "TimeSpan.getMin", help: "<b>Integer getMin()<\/b>\n\nThis function will return the minute field of the timespan as an integer."},
{text: "TimeSpan.getSec", help: "<b>Integer getSec()<\/b>\n\nThis function will return the seconds field of the timespan as an integer."},
{text: "TimeSpan.getYear", help: "<b>Integer getYear()<\/b>\n\nThis function will return the year field of the timespan as an integer."},
{text: "TimeSpan.toDays", help: "<b>Integer toDays()<\/b>\n\nThis function will return the timespan as a number of days. A one year timespan will return 365."},
{text: "TimeSpan.toHours", help: "<b>Integer toHours()<\/b>\n\nThis function will return the timespan as a number of hours. A one day timespan will return 24."},
{text: "TimeSpan.toMinutes", help: "<b>Integer toMinutes()<\/b>\n\nThis function will return the timespan as a number of minutes. A one hour timespan will return 60."},
{text: "TimeSpan.toSeconds", help: "<b>Integer toSeconds()<\/b>\n\nThis function will return the timespan as a number of seconds. A one minute timespan will return 60."},
{text: "TimeSpan.toString", help: "<b>String toString(Integer mode, Integer lang, Integer maxMode, Bool short)<\/b>\n\n\\param mode Lower unit\n\\param lang Language used for text\n\\param maxMode Upper unit\n\\param short True if you want short version of text (e.g. \"m\" instead of \"minutes\").\n\\return A string representation of the timespan, on the given format and in the given language\n\nModes - These integers can be used for mode and maxMode parameters:\nMode2Year = 0\nMode2Day = 1\nMode2Hour = 2\nMode2Min = 3\nMode2Sec = 4\n\nIf the timespan is set to have ie 0 days, 10 hours, and 5 minutes, then toString(3, 1, 1) will return \"10 hours, 5 minutes\", not \"0 days, 10 hours, 5 minutes\"\n\nLanguage:\nNorwegian = 0\nEnglish = 1"},
{text: "TimeSpan.addDay", help: "<b>Void addDay(Integer num)<\/b>\n\nThis function will add the given number of days to the currently set timespan.\n\nParameter:\n - num: Number of days to add to the timespan"},
{text: "TimeSpan.addHour", help: "<b>Void addHour(Integer num)<\/b>\n\nThis function will add the given number of hours to the currently set timespan.\n\nParameters:\n - num: Number of hours to add to the timespan"},
{text: "TimeSpan.addMin", help: "<b>Void addMin(Integer num)<\/b>\n\nThis function will add the given number of minutes to the currently set timespan.\n\nParameter:\n - num: Number of minutes to add to the timespan"},
{text: "TimeSpan.addSec", help: "<b>Void addSec(Integer num)<\/b>\n\nThis function will add the given number of seconds to the currently set timespan.\n\nParameter:\n- num: Number of seconds to add to the timespan"},
{text: "TimeSpan.addYear", help: "<b>Void addYear(Integer num)<\/b>\n\nThis function will add the given number of years to the currently set timespan.\n\nParameter:\n - num: Number of years to add to the timespan"},
{text: "TimeSpan.set", help: "<b>Void set(Integer years, Integer days, Integer hours, Integer minutes, Integer seconds)<\/b>\n\nThis function is used to initialize a timespan object.\n\nParameters:\n - years: Number of years\n - days: Number of days\n - hours: Number of hours\n - minutes: Number of minutes\n - seconds: Number of seconds"},
{text: "TimeSpan.setNegative", help: "<b>Void setNegative(Bool negative)<\/b>\n\nPositive timespan is default, but if you add a negative number of years\/days\/hours\/minutes\/seconds, you may get a negative timespan.\n\nParameter:\n - negative: This is true if you want to set the timespan to negative, false if the timespan should be positive."},
{text: "Void.TimeZone", help: "<b>TimeZone<\/b>\n\nThis class gives access to timezone info, from a TimeZone object you may retrieve with the global function getLocalTimeZone()."},
{text: "TimeZone.getTimeZoneSecs", help: "<b>Integer getTimeZoneSecs()<\/b>\n\n\\return Difference from GMT in seconds."},
{text: "TimeZone.getTimeZone", help: "<b>String getTimeZone()<\/b>\n\nThis functions will give you the difference from GMT in hours and minutes.\n\n\\return The time zone string on the form \"+0100\", \"-0545\" etc."},
{text: "Void.User", help: "<b>User<\/b>\n\nClass for representing a user.\n\nExample code:\n\nUser u;\n\nu.load(2); \/\/ Loads user with id = 2\nprint(u.getValue(\"username\"));\nu.setValue(\"email\", \"bob@example.com\");\nu.setValue(\"language\", \"en\"); \/\/ \"no\" or \"en\"\nu.setValue(\"status\", \"1\"); \/\/ 1 is Active, 2 is Not Present, 3 is deleted\nprint(u.isLoggedIn(2).toString()); \/\/ 2 = web pages, 1 = soap interface\nu.save();"},
{text: "User.hasTicketAccess", help: "<b>Bool hasTicketAccess(Integer ticketId, Integer accessLevel)<\/b>\n\nReturns true if the user have at least the given access to the given ticket id. accessLevel is 0 for listing tickets, 1 for reading tickets and 2 for editing tickets."},
{text: "User.isAdministrator", help: "<b>Bool isAdministrator()<\/b>\n\nReturns true if the user is an administrator, false if not."},
{text: "User.isLoggedIn", help: "<b>Bool isLoggedIn(Integer origin)<\/b>\n\nCheck if a user is logged in or not.\n\n\\param origin 2 = web pages, 1 = soap interface"},
{text: "User.load", help: "<b>Bool load(Integer p_id)<\/b>\n\nLoads a user from the database\n\n\\param Integer, the user id\n\\return Bool, true if the user is loaded successfully"},
{text: "User.loadFromAgentAndKey", help: "<b>Bool loadFromAgentAndKey(Integer id, String Key)<\/b>\n\nLoads a user from an Agent with userId and the Agent's key.\n\n\\param Integer id of the user\n\\param String key of the agent\n\\return Bool of load result, True if loaded successfully"},
{text: "User.save", help: "<b>Integer save()<\/b>\n\nSaves a user object to the database, returns the id of the user as an Integer.\n\n\\return Integer, user id"},
{text: "User.getValue", help: "<b>String getValue(String colName)<\/b>\n\nGets the value of a given column.\n\nParameter:\n - String with column name\n\nPossible values:\n - id: Integer, The primary key (auto-incremented)\n - loginname: String, The unique loginname for this user.\n - username: String, The unique username for this user.\n - password: String, The encrypted password for this user.\n - firstname: String, The firstname for this user.\n - middlename: String, The middlename for this user.\n - lastname: String, The lastname for this user.\n - email: String, The email address for this user.\n - status: Integer, The status (enum) for this user. 1 is Active, 2 is Not Present, 3 is deleted\n - signature: String, The users signature.\n - language: String, A string indicating the user's language (\"no\" or \"en\").\n - flags: Integer, A bitmask indicating flags for this entry.\n - lastCategory: Integer, The last chosen category for this user when posting tickets. category.id\n - pictureId: Integer, The attachment id of the picture for this user.\n - defaultUser: Integer, The default user to set on new tickets in this category (1=automatically, 2=unasigned, 3=the owner\n - initials: String, Obsolete field, cannot be removed because of not null error on older systems\n - group: Integer, The group id of the primary group which this user belongs to\n - role: Integer, The role id of the role this user belongs to\n - associateId: Integer, The corresponding associate id for this user\n - ownerCompany: Integer, the contact id of the owning company of the users' connected person entity.\n - x_* The extrafield with the given database field name.\n\nReturns a string with value in given column"},
{text: "User.setValue", help: "<b>Void setValue(String column, String Value)<\/b>\n\nSets a value in a given column.\n\nParameters:\n - String with column name\n - String with value to set\n\nPossible values:\n - id: Integer, The primary key (auto-incremented)\n - loginname: String, The unique loginname for this user.\n - username: String, The unique username for this user.\n - password: String, The encrypted password for this user.\n - firstname: String, The firstname for this user.\n - middlename: String, The middlename for this user.\n - lastname: String, The lastname for this user.\n - email: String, The email address for this user.\n - status: Integer, The status (enum) for this user. 1 is Active, 2 is Not Present, 3 is deleted\n - signature: String, The users signature.\n - notifyMask: Integer, A bitmask indicating to which extent the user should recieve pop-up warnings for various events.\n - emailMask: Integer, A bitmask indicated to which extent the user should recieve email warnings for various events.\n - smsMask: Integer, A bitmask indicated to which extent the user should recieve sms warnings for various events.\n - language: String, A string indicating the user's language (\"no\" or \"en\").\n - pageLength: Integer, The user's preferred page length when listing tickets.\n - textareasize: Sttring, Size of textarea for each user, example \"80x40\"\n - flags: Integer, A bitmask indicating flags for this entry.\n - lastCategory: Integer, The last chosen category for this user when posting tickets. category.id\n - profileId: Integer, Reference to the profile connected to this ejuser profile.id\n - hiddenBagBitset: String, Each character represent a bit to set a HtmlBagHideable to default open or closed (1=open 0=closed)\n - defaultListTickets: Integer, The user can choose which criteria_set should be the default. Stored here. criteria_set.id\n - notifyExternalLock: DateTime, A datetime lock to make sure notifications are only displayed by one notifcation system (ejournal or external programs)\n - notifyExternalSource: Integer, A name (id) of the external notifications system (ejournal or external programs)\n - loginAttempts: Integer, The number of times the user has attempted to login with the wrong password\n - lastLoginAttempt: DateTime, The last time the user tried to log in without success\n - idleTime: Integer, Number of seconds the user has been idle. Updated by TrayIcon or simular external programs.\n - defaultUser: Integer, The default user to set on new tickets in this category (1=automatically, 2=unasigned, 3=the owner\n - initials: String, Obsolete field, cannot be removed because of not null error on older systems\n - sms: String, The SMS number for this user\n - pictureId: Integer, The attachment id of the picture for this user.\n - ownerCompany: Integer, the contact id of the owning company of the users' connected person entity.\n - group: Integer, the primary group for this user.\n - role: Integer, the role for this user.\n - x_* The extrafield with the given database field name.\n\nThe different notify masks: (Indicated by bit enums)\nNewTicket                      = 1,\nNewTicketMessage      = 2,\nTicketEscalated             = 3,\nTicketActivated             = 4,\nActiveTickets                 = 5, \/\/ only used as a filter (ejuser)\nTicketTakeOver             = 6,\nHotlist                             = 9,  \/\/ only used as a filter (ejuser)\nCustom                           = 10\n\nThe different access flags:\n    AccessNone                   = 0 (value 0),\n    AccessListOthers             = 0 (bit number 1),\n    AccessReadOthers             = 1,\n    AccessEditOthers             = 2,\n    AccessEditOwnPref            = 3,\n    AccessCategoryAdministration = 4,\n    AccessUserAdministration     = 5,\n    AccessEjournalAdministration = 6,\n    AccessStatistics             = 7,\n    AccessDocuments              = 8,\n    AccessJustCategory           = 9, \/\/ obsolete\n    AccessEditProfile            = 10,\n    AccessListOnlyOwn            = 11,\n    AccessReadOnlyOwn            = 12,\n    AccessEditOnlyOwn            = 13,\n    AccessChat                   = 14,\n    AccessChatAdmin              = 15,\n    AccessSpm                    = 16,\n    AccessEditFaq                = 17,\n    AccessFaqAdmin               = 18,\n    AccessListExtraTablesContent = 19,\n    AccessEditExtraTablesContent = 20,\n    AccessReadSelections         = 21,\n    AccessEditSelections         = 22,\n    AccessPostToFacebook         = 23,\n\n\nThe User flags:\nNone                            = 0,\n    UseLastCategory                 = 1,\n    DefaultTicketClose              = 2,\n    DefaultMessageClose             = 3,\n    SortDesc                        = 4,\n    PreviewImages                   = 5,\n    OnlyOwnCategories               = 6,\n    SmallFonts                      = 7,\n    InsertLastMessage               = 8,\n    ShowQuickSearch                 = 9,\n    Use24HrsClock                   = 10,\n    AddMessageNewWindow             = 11,\n    OnlyShowOpenTicketsInHotlist    = 12,\n    UseLocalClock                   = 13,\n    HighlightActiveScreenElement    = 14,\n    DisplayOwnCategories            = 15,\n    SuppressWarnOnNavigate          = 16,\n    SuppressPreviewWarning          = 17,\n    PlainTextEditor                 = 18,\n    FckEditorSingleLineBreak        = 19,\n    CustomDateFormat                = 20,\n    SundayFirstDayInWeek            = 21,\n    OldScreensOnEditTicket          = 22,\n    KeepFormattingOnPaste           = 23,\n    DisplayCheckboxLeft             = 24,\n    ShowMessagesAsPlainText         = 25,"},
{text: "User.toParser", help: "<b>Void toParser(Parser parser)<\/b>\n\nLoads a user and returns it to a given Parser.\n\n\\param Parser that the user should be loaded to"},
{text: "Void.Vector", help: "<b>Vector<\/b>\n\nThis class represent a Vector, in which you can add object of the type String."},
{text: "Vector.size", help: "<b>Integer size()<\/b>\n\nReturns the size of the vector.\n\n\\return the size of the vector"},
{text: "Vector.buildString", help: "<b>String buildString(String delimiter)<\/b>\n\nThis function will return a string of all the element in the vector, separated by the specified delimiter. This method will not escape any characters which might be equal to the delimiter.\n\n\\param delimiter The delimiter used for separating the elements\n\\return A string with all the elements separated by the delimiter"},
{text: "Vector.get", help: "<b>String get(Integer index)<\/b>\n\nGet an element in the vector at the given position. If you specify an index out of bounds, a RunTimeException will be raised.\n\n\\param index the index (starting at 0) of the element to be retrieved\n\\return the value at the specified index"},
{text: "Vector.toStringArray", help: "<b>String[] toStringArray()<\/b>\n\nConvert a vector to a string array.\n\n\\return Vector as a String[]"},
{text: "Vector.parseString", help: "<b>Void parseString(String text, String delimiter)<\/b>\n\nThis method will parse a text into a vector. The fields in the string is separated by the given delimiter. This method does not support escaped characters.\n\n\\param text The string to be parsed\n\\param delimiter The delimiter for the fields"},
{text: "Vector.pushBack", help: "<b>Void pushBack(String element)<\/b>\n\nThis method will push a string object to the end of the vector.\n\n\\param element The string object to push on the vector"},
{text: "Vector.removeAt", help: "<b>Void removeAt(Integer index)<\/b>\n\nThis method will remove an element at the specified index.\n\n\\param index The index of the element to remove from the vector."},
{text: "Vector.set", help: "<b>Void set(Integer index, String value)<\/b>\n\nSet the value at the specified index. If the index specified is out of bounds, an RunTimeException will be raised.\n\n\\param index the index of the vector to set the value\n\\param value the value to set at the specified index"},
{text: "Void.WeekSchedule", help: "<b>WeekSchedule<\/b>\n\nThis class is used to represent a week schedule - what hours a day are \"active\" for each day, etc."},
{text: "WeekSchedule.addTimeSpan", help: "<b>DateTime addTimeSpan(DateTime start, TimeSpan add)<\/b>\n\nAdds a timespan to the schedule.\n\nParameters:\n - start: Start time for calculation\n - add: The timespan to add (2 days, 1 hours, 5 minutes, 30 seconds...)"},
{text: "WeekSchedule.getNonDates", help: "<b>String getNonDates()<\/b>\n\nThis function returns the dates that are closed, comma separated."},
{text: "WeekSchedule.getFriStart", help: "<b>Time getFriStart()<\/b>\n\nThis function returns the start time (object) of \"active\" mode for Friday."},
{text: "WeekSchedule.getFriStop", help: "<b>Time getFriStop()<\/b>\n\nThis function returns the end time (object) of \"active\" mode for Friday."},
{text: "WeekSchedule.getMonStart", help: "<b>Time getMonStart()<\/b>\n\nThis function returns the start time (object) of \"active\" mode for Monday."},
{text: "WeekSchedule.getMonStop", help: "<b>Time getMonStop()<\/b>\n\nThis function returns the end time (object) of \"active\" mode for Monday."},
{text: "WeekSchedule.getSatStart", help: "<b>Time getSatStart()<\/b>\n\nThis function returns the start time (object) of \"active\" mode for Saturday."},
{text: "WeekSchedule.getSatStop", help: "<b>Time getSatStop()<\/b>\n\nThis function returns the end time (object) of \"active\" mode for Saturday."},
{text: "WeekSchedule.getSunStart", help: "<b>Time getSunStart()<\/b>\n\nThis function returns the start time (object) of \"active\" mode for Sunday."},
{text: "WeekSchedule.getSunStop", help: "<b>Time getSunStop()<\/b>\n\nThis function returns the end time (object) of \"active\" mode for Sunday."},
{text: "WeekSchedule.getThuStart", help: "<b>Time getThuStart()<\/b>\n\nThis function returns the start time (object) of \"active\" mode for Thursday."},
{text: "WeekSchedule.getThuStop", help: "<b>Time getThuStop()<\/b>\n\nThis function returns the end time (object) of \"active\" mode for Thursday."},
{text: "WeekSchedule.getTueStart", help: "<b>Time getTueStart()<\/b>\n\nThis function returns the start time (object) of \"active\" mode for Tuesday."},
{text: "WeekSchedule.getTueStop", help: "<b>Time getTueStop()<\/b>\n\nThis function returns the end time (object) of \"active\" mode for Tuesday."},
{text: "WeekSchedule.getWedStart", help: "<b>Time getWedStart()<\/b>\n\nThis function returns the start time (object) of \"active\" mode for Wednesday."},
{text: "WeekSchedule.getWedStop", help: "<b>Time getWedStop()<\/b>\n\nThis function returns the end time (object) of \"active\" mode for Wednesday."},
{text: "WeekSchedule.getDifference", help: "<b>TimeSpan getDifference(DateTime start, DateTime stop)<\/b>\n\nParameters:\n - start: The start of time to count\n - stop: The stop time for counting"},
{text: "WeekSchedule.loadFromPriority", help: "<b>Void loadFromPriority(Integer p_id)<\/b>\n\nThis method will load a WeekSchedule object using the given priority's week schedule. Be aware that this method will clear all settings you may have on the WeekSchedule object."},
{text: "WeekSchedule.setFriStart", help: "<b>Void setFriStart(Time t)<\/b>\n\nThis function sets the start time (object) of \"active\" mode for Friday.\n\nParameter:\n - time: a time object set to desired start time"},
{text: "WeekSchedule.setFriStop", help: "<b>Void setFriStop(Time t)<\/b>\n\nThis function sets the end time (object) of \"active\" mode for Friday.\n\nParameter:\n - time: a time object set to desired end time"},
{text: "WeekSchedule.setMonStart", help: "<b>Void setMonStart(Time t)<\/b>\n\nThis function sets the start time (object) of \"active\" mode for Monday.\n\nParameter:\n - time: a time object set to desired start time"},
{text: "WeekSchedule.setMonStop", help: "<b>Void setMonStop(Time t)<\/b>\n\nThis function sets the end time (object) of \"active\" mode for Monday.\n\nParameter:\n - time: a time object set to desired end time"},
{text: "WeekSchedule.setNonDates", help: "<b>Void setNonDates(String dates)<\/b>\n\nThis function sets the dates that are inactive.\n\nParameter:\n - dates: A comma separated string of dates that are not \"active\".\n\nExample date string: \"1\/10\/2004,24\/12\".\nIf the year is not specified, the date is inactive every year."},
{text: "WeekSchedule.setSatStart", help: "<b>Void setSatStart(Time p_0)<\/b>\n\nThis function sets the start time (object) of \"active\" mode for Saturday.\n\nParameter:\n - time: a time object set to desired start time"},
{text: "WeekSchedule.setSatStop", help: "<b>Void setSatStop(Time t)<\/b>\n\nThis function sets the end time (object) of \"active\" mode for Saturday.\n\nParameter:\n - time: a time object set to desired end time"},
{text: "WeekSchedule.setSunStart", help: "<b>Void setSunStart(Time t)<\/b>\n\nThis function sets the start time (object) of \"active\" mode for Sunday.\n\nParameter:\n - time: a time object set to desired start time"},
{text: "WeekSchedule.setSunStop", help: "<b>Void setSunStop(Time t)<\/b>\n\nThis function sets the end time (object) of \"active\" mode for Sunday.\n\nParameter:\n - time: a time object set to desired end time"},
{text: "WeekSchedule.setThuStart", help: "<b>Void setThuStart(Time t)<\/b>\n\nThis function sets the start time (object) of \"active\" mode for Thursday.\n\nParameter:\n - time: a time object set to desired start time"},
{text: "WeekSchedule.setThuStop", help: "<b>Void setThuStop(Time t)<\/b>\n\nThis function sets the end time (object) of \"active\" mode for Thursday.\n\nParameter:\n - time: a time object set to desired end time"},
{text: "WeekSchedule.setTueStart", help: "<b>Void setTueStart(Time p_0)<\/b>\n\nThis function sets the start time (object) of \"active\" mode for Tuesday.\n\nParameter:\n - time: a time object set to desired start time"},
{text: "WeekSchedule.setTueStop", help: "<b>Void setTueStop(Time t)<\/b>\n\nThis function sets the end time (object) of \"active\" mode for Tuesday.\n\nParameter:\n - time: a time object set to desired end time"},
{text: "WeekSchedule.setWedStart", help: "<b>Void setWedStart(Time t)<\/b>\n\nThis function sets the start time (object) of \"active\" mode for Wednesday.\n\nParameter:\n - time: a time object set to desired start time"},
{text: "WeekSchedule.setWedStop", help: "<b>Void setWedStop(Time t)<\/b>\n\nThis function sets the end time (object) of \"active\" mode for Wednesday.\n\nParameter:\n - time: a time object set to desired end time"},
{text: "Void.XMLNode", help: "<b>XMLNode<\/b>\n\nThis class represents a XML DOM structure."},
{text: "XMLNode.getName", help: "<b>String getName()<\/b>\n\nGets the name of the xml tag.\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxml.setName(\"Root\");\nxml.setParameter(\"type\", \"object\");\n\nprint(xml.getName());\n\nPrints \"Root\"."},
{text: "XMLNode.getParameter", help: "<b>String getParameter(String name)<\/b>\n\nGet a parameter (attribute) from the node with a given name.\n\nParameter:\n - name: the key to get value of\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxml.setName(\"Root\");\nxml.setParameter(\"type\", \"object\");\n\nprint(xml.getParameter(\"type\"));\n\nPrints \"object\"."},
{text: "XMLNode.getText", help: "<b>String getText()<\/b>\n\nGet the text between two tags. For example <TAG>Returns this text<\/TAG>\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxml.setName(\"Root\");\nxml.setParameter(\"type\", \"object\");\nxml.setText(\"Example text\");\n\nprint(xml.getText());"},
{text: "XMLNode.getValueFromPath", help: "<b>String getValueFromPath(String path)<\/b>\n\nThis function will return the value for the given path. The path should be a dot-separated string containing either names of nodes or indices. E.g. given the following structure: \"{ persons: [{name: \"John\"},{name: \"Peter\"}]}\" , you can get \"Peter\" by asking for \"persons.1.name\". If your path does not lead to a node, you will get an String with a null value back (can be checked with .isNull())."},
{text: "XMLNode.toJSON", help: "<b>String toJSON(Integer indent)<\/b>\n\nCreates a string containing XML nodes formated as a JSON document. Child nodes are also included.\n\n\\param Indent the text with a given number of spaces.\n\\return XMLNodes converted to JSON\n\nThe XMLNode parameter \"type\" is used to describe the datatype of the JSON nodes.\nLegal types are: object, array, string, number, bool and null.\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxMenu.setParameter(\"type\", \"object\");\n\nXMLNode xMenu = XMLNode(\"menu\");\nxMenu.setParameter(\"type\", \"string\");\nxMenu.setText(\"truls\");\nxml.addChild(xMenu);\n\nXMLNode xFoo = XMLNode(\"foo\");\nxFoo.setParameter(\"type\", \"number\");\nxFoo.setText(\"1.23456\");\nxml.addChild(xFoo);\n\nprint(xml.toString(0));\n\nReturns:\n\n{\n  \"menu\": \"truls\",\n  \"foo\": 1.23456\n}"},
{text: "XMLNode.toString", help: "<b>String toString(Integer indent)<\/b>\n\nCreates a string containing the XMLNode as a formated as a string. Child nodes are also included.\n\nParameter:\n - indent: the text with a given number of spaces."},
{text: "XMLNode.addChild", help: "<b>Void addChild(XMLNode node)<\/b>\n\nAdd one node as a child node of the current node.\n\nParameter:\n - node: The node to be added\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxml.setName(\"Root\");\nxml.setParameter(\"type\", \"object\");\nxml.setText(\"Example text\");\n\nXMLNode xMenu = XMLNode(\"menu\");\nxMenu.setParameter(\"type\", \"string\");\nxml.addChild(xMenu);"},
{text: "XMLNode.setChildren", help: "<b>Void setChildren(XMLNode[] children)<\/b>\n\nSet an array of XMLNodes as the children of the current node.\n\nParameter:\n - children: Array of child nodes.\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxml.setName(\"Root\");\nxml.setParameter(\"type\", \"object\");\n\nXMLNode xMenu = XMLNode(\"menu\");\nxMenu.setParameter(\"type\", \"string\");\nxMenu.setText(\"truls\");\n\nXMLNode xFoo = XMLNode(\"foo\");\nxFoo.setParameter(\"type\", \"number\");\nxFoo.setText(\"1.23456\");\n\nXMLNode[2] array;\narray[0] = xMenu;\narray[1] = xFoo;\nxml.setChildren(array);"},
{text: "XMLNode.setName", help: "<b>Void setName(String name)<\/b>\n\nSets the tag name of the node.\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxml.setName(\"Root\");\nxml.setParameter(\"type\", \"object\");\n\nprint(xml.getName());"},
{text: "XMLNode.setParameter", help: "<b>Void setParameter(String name, String value)<\/b>\n\nSets a parameter with name and value. A node can have any number of parameters but all names must be unique.\n\nParameters:\n - name: Parameter name\n - value: Parameter value\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxml.setName(\"Root\");\nxml.setParameter(\"type\", \"object\");\nxml.setParameter(\"type1\", \"object1\");"},
{text: "XMLNode.setText", help: "<b>Void setText(String text)<\/b>\n\nSet the text between two tags.\n\nParameter:\n - text: The text between two tags\n\nExample:\n\nXMLNode xml = XMLNode(\"root\");\nxml.setName(\"Root\");\nxml.setParameter(\"type\", \"object\");\nxml.setText(\"Example text\");\n\nprint(xml.getText());"},
{text: "XMLNode.getNodeFromPath", help: "<b>XMLNode getNodeFromPath(String)<\/b>\n\nThis function will return the XMLNode for the given path. The path should be a dot-separated string containing either names of nodes or indices. E.g. given the following structure: \"{ persons: [{name: \"John\"},{name: \"Peter\"}]}\" , you can get the node containing \"Peter\" by asking for \"persons.1.name\". If your path does not lead to a node, you will get an empty XMLNode back."},
{text: "XMLNode.getChildren", help: "<b>XMLNode[] getChildren()<\/b>\n\nReturns an array of the current node's children."},
{text: "Void.YearSchedule", help: "<b>YearSchedule<\/b>\n\nThis class is used to represent a year schedule. A year can be composed of several WeekSchedules."},
{text: "YearSchedule.addTimeSpan", help: "<b>DateTime addTimeSpan(DateTime dt, TimeSpan sp)<\/b>\n\nThis function adds a timespan to the current year schedule.\n\nParameters:\n - dt: Start Time for calculation\n - sp: Time span to add - may cross different weekschedules."},
{text: "YearSchedule.getDifference", help: "<b>TimeSpan getDifference(DateTime from, DateTime to)<\/b>\n\nGet difference between two given times. The function returns a timespan.\n\nParameters:\n - from: Count from this date\n - to: Count to this date\n\nCounting will skip inactive periodes, defined by the different weekschedules that may be crossed."},
{text: "YearSchedule.addWS", help: "<b>Void addWS(WeekSchedule ws, Integer mStop, Integer dStop)<\/b>\n\nThis function adds a week schedule to the year schedule.\n\nParameters:\n - ws: Add this weekschedule to the yearschedule.\n - mStop: The given weekschedule is active to this month\n - dStop: The given weekschedule is active to this day\n\nThe given weekschedule is active from 1\/1 or from last added WeekSchedule."},
{text: "Void.Bool", help: "<b>Bool Bool(Bool value)<\/b>\n\nBool constructor\n\n\\param value Bool object to copy\n\\return Bool object"},
{text: "Void.cgiWasPost", help: "<b>Bool cgiWasPost()<\/b>\n\n\\return True if the CGI http request was of type POST (not GET or anything else).\n\neJournal uses only GET and POST. POST is used when submitting most forms, a GET request is usually someone clicking a link, first time entering the blogic screen."},
{text: "Void.checkReply", help: "<b>Bool checkReply(String email)<\/b>\n\nThis function will return true if it is ok to send a receipt to the indicated email address, false otherwise.\nEvery time this method is called, it records that an email has been sent to the email address. If this is done too often within a specified time interval (specified in config table), you should not send an email to the email address to prevent swamping."},
{text: "Void.invoiceTypesExists", help: "<b>Bool invoiceTypesExists()<\/b>\n\nChecks if invoice types exists in the database\n\n\\return True if there are invoice types, False if there are no invoice types."},
{text: "Void.isValidPhoneNumber", help: "<b>Bool isValidPhoneNumber(String p_nr, Bool p_isMultiple)<\/b>\n\n\n\\param p_nr Number to check\n\\param p_isMultiple True if more than one phone number (comma separated)\n\\return True if valid phone number, else false."},
{text: "Void.reloadAndSendShipment", help: "<b>Bool reloadAndSendShipment(Integer shipmentId)<\/b>\n\nReload mailings selections and schedule to send again immediately. Used when you have added more people to the selection and want to send to them as well.\n\nParameters:\n- shipmentId\n\nReturns: True if it worked. False if it did not work, because the mailing was in an illegal state for this operation."},
{text: "Void.Byte", help: "<b>Byte Byte(Integer value)<\/b>\n\nByte constructor\n\nA byte can only contain integer values between 0 and 255. Large values will be masked.\n\n\\param value Integer value\n\\return Byte object"},
{text: "Void.decodeBase64", help: "<b>Byte[] decodeBase64(String base64)<\/b>\n\nDecode a base64 encoded string into a byte array.\n\n\\param base64 A base64 encoded string\n\\return Decoded byte array."},
{text: "Void.simpleTwoWay", help: "<b>Byte[] simpleTwoWay(Byte[] data)<\/b>\n\nSimple two-way data encryption.\n\nThe functions works both ways. Data -> Encrypted data -> data\n\n\\param data Byte array to encrypt\/decrypt.\n\\return Byte array with encrypted\/decrypted data."},
{text: "Void.Date", help: "<b>Date Date(Date p_0)<\/b>\n\nDate constructor\n\n\\param date Date object to copy\n\\return Date object"},
{text: "Void.Date", help: "<b>Date Date(String date)<\/b>\n\nParse string and create date object\n\nFormat:\nYYYY-MM-DD\n\n\\param date Date string with format YYYY-MM-DD\n\\return Date object."},
{text: "Void.getCurrentDate", help: "<b>Date getCurrentDate()<\/b>\n\nReturns the current date.\n\nExample:\n\nprint(getCurrentDate().toString());\n\nPrints the date in YYYY-MM-DD format."},
{text: "Void.DateTime", help: "<b>DateTime DateTime(DateTime dt)<\/b>\n\nDateTime constructor\n\n\\param dt DateTime object to copy\n\\return DateTime object"},
{text: "Void.DateTime", help: "<b>DateTime DateTime(Integer p_0, Integer p_1, Integer p_2,Integer p_3,Integer p_4,Integer p_5)<\/b>\n\nConstructor where all elements may be set\n\nThis constructor allows you to specify all elements of a DateTime. It automatically calculates the weekday.\n\n - p_year: The year to set.\n - p_month: The month to set\n - p_mday: The mday to set.\n - p_hour: The hour to set\n - p_min: The minute to set\n - p_sec: The second to set"},
{text: "Void.DateTime", help: "<b>DateTime DateTime(Integer, Integer, Integer, Integer, Integer, Integer)<\/b>\n\nConstructor for DateTime which accepts 6 integer values, representing year, month (1-12), day-of-month (1-31), hour (0-23), minute (0-59) and second (0-59)"},
{text: "Void.DateTime", help: "<b>DateTime DateTime(String p_0)<\/b>\n\nParse string and create datetime object\n\nThis function sets the DateTime based on a string.\n  It accepts the following formats, based on length:\n     1: YYYY-MM-DD HH:MM:SS (19)\n     2: YYYY-MM-DD HH:MM (16)   sec = 0\n     3: YYYYMMDDHHMMSS (14)     mysql.timestamp\n     4: YYYY-MM-DD (10)         p_endOfDay ? (23,59,59) : (0,0,0)\n     5: <empty string>\/\"0\"      no info, sets to jan 1. 1970 00:00:00, and isNull\n     6: YYYY-MM-DD HH:MM:SS:XXX (23)\n\n\\param datetime DateTime string with format HH:MM:SS\n\\return DateTime object."},
{text: "Void.getCurrentDateTime", help: "<b>DateTime getCurrentDateTime()<\/b>\n\nReturns the current date and time.\n\nExample:\n\nprint(getCurrentDateTime().toString());\n\nPrints the date and time in YYYY-MM-DD XX:XX:XX format."},
{text: "Void.getDbiControl", help: "<b>DbiControl getDbiControl()<\/b>\n\nThis function is used to access the global DBI control object, which is used for database integration.\n\n\\return The global dbi control object."},
{text: "Void.getEventData", help: "<b>EventData getEventData()<\/b>\n\nReturns an EventData object connected to current event."},
{text: "Void.getExtraTable", help: "<b>ExtraTable getExtraTable(String name)<\/b>\n\nReturns the ExtraTable instance for the given name. The name is the unique name of the table, such as \"y_102\", \"y_inventory\". This function will throw an exception if the table does not exist.\n\n\\param name The name of the table.\n\\return The ExtraTable."},
{text: "Void.Float", help: "<b>Float Float(Float value)<\/b>\n\nFloat constructor\n\n\\param value Float value to copy\n\\return Float object"},
{text: "Void.Float", help: "<b>Float Float(Integer value)<\/b>\n\nFloat constructor\n\n\\param value Integer value that will be converted to a Float\n\\return Float object"},
{text: "Void.Float", help: "<b>Float Float(String number)<\/b>\n\nParse string and create a Float object\n\n\n\\param number String containing floating point value\n\\return Float object."},
{text: "Void.pow", help: "<b>Float pow(Float base, Float exp)<\/b>\n\nThe pow function returns base raised to the expth power.\n\nIf the base is zero and exp is less than or equal to zero, or the base is negative and exp is not an integer, an invalid float like -1.#IND0 will be returned\n\nIf the result is too large an invalid float like 1.#INF0 will be returned.\n\n\n\\param base The base.\n\\param exp The exponent.\n\\return The base raised to the expth power."},
{text: "Void.addHtmlElement", help: "<b>HtmlElement addHtmlElement(Integer id, String name, Integer type, Map config)<\/b>\n\nAdds an html element to the associated screen, i.e. when this script is excuted as the load script for a screen.\n\nParameters:\n - id: The id of this html element. Normally not relevant.\n - name: The unique name of this html element. Used for accessing it later.\n - type: The type of this element. Types are documented under bLogic.\n - config: The map containing the configuration for the html element.\n\nReturns the element that was added."},
{text: "Void.addHtmlElement", help: "<b>HtmlElement addHtmlElement(Integer id, String name, Integer type, Map config, Integer position)<\/b>\n\nAdds an html element to the associated screen, i.e. when this script is excuted as the load script for a screen.\n\nParamters:\n - id: The id of this html element. Normally not relevant.\n - name: The unique name of this html element. Used for accessing it later.\n - type: The type of this element. Types are documented under bLogic.\n - config: The map containing the configuration for the html element.\n - positition: The zero-based position of the element in the list of elements for the screen.\n\nReturns the element that was added."},
{text: "Void.addHtmlElement", help: "<b>HtmlElement addHtmlElement(Integer id, String name, Integer type, String config)<\/b>\n\nAdds an html element to the associated screen, i.e. when this script is excuted as the load script for a screen.\n\nParameters:\n - id: The id of this html element. Normally not relevant.\n - name: The unique name of this html element. Used for accessing it later.\n - type: The type of this element. Types are documented under bLogic.\n - config: The configuration string for the html element. Line based, same as configuration text for elements in Screen definition.\n\nReturns the element that was added."},
{text: "Void.addHtmlElement", help: "<b>HtmlElement addHtmlElement(Integer id, String name, Integer type, String config, Integer position)<\/b>\n\nAdds an html element to the associated screen.\n\n - id: The id of the element. Normally not relevant.\n - name: The (unique) name of the element. Used for retrieving it later.\n - type: The type of the element. Documented under bLogic.\n - config: The configuration string for the element. Same as used under Screen Definition.\n - positition: The zero-based position of the element in the list of elements for the screen.\n\nReturns the HtmlElement that was added."},
{text: "Void.getHtmlElement", help: "<b>HtmlElement getHtmlElement(String name)<\/b>\n\nReturns a reference to an HtmlElement in the associated screen.\n\n\\param name The name of the element to return.\n\\return The HtmlElement with the given name."},
{text: "Void.addChatMessage", help: "<b>Integer addChatMessage(Integer sessionId, String message, Integer type, String author, Integer specialType, String specialParams)<\/b>\n\nThis function allows you to add a message to a chat session.\n- sessionId: The id of the chat session.\n- message: The text of the message you want to add in HTML format. A few tags, such as <b>, <i>, <ul> are allowed. Other tags and attributes will be removed.\n- type: 1 to indicate the message is to the customer\n- author: The string used as the author of the message, placed above the message bubble.\n- specialType: Mostly internally used. Use the value 0 for no special type. Use the value 16 to indicate the message is from a chatbot.\n- specialParams: Various params based on the specialType. Specifically, for specialType=16, you can add \"showAt=<datetime>\" to specify when the message should show up to create a delay before the botmessage is shown."},
{text: "Void.findReplyTemplateToMerge", help: "<b>Integer findReplyTemplateToMerge(Integer p_categoryId)<\/b>\n\n\\param p_categoryId - The categoryId to locate the replytemplate for.\n\\returns The ID of the replytemplate to use.\n\nIf you have configured any categories to use specified ReplyTemplates, use this method to calculate the ReplyTemplate id."},
{text: "Void.getAgentId", help: "<b>Integer getAgentId(String idString)<\/b>\n\nReturns the id of the agent matching the idString parameter\n\n\\param idString The id string of the agent\n\\return The id of the agent matching the idString parameter. Returns null if no match found"},
{text: "Void.getAgentScheduleId", help: "<b>Integer getAgentScheduleId(String name)<\/b>\n\nReturns the id of the agent schedule with the given name. -1 if no agent schedule was found\n\n\\param name Name of the agent schedule\n\\return The id of the agent schedule"},
{text: "Void.getCategoryIdFromFullname", help: "<b>Integer getCategoryIdFromFullname(String name)<\/b>\n\nFind category id from the categories full name.\n\n\\param name Full name of category\n\\return Id of category"},
{text: "Void.getDocumentId", help: "<b>Integer getDocumentId(String name)<\/b>\n\nReturns the id of the document with the given name. -1 if no agent schedule was found\n\n\\param name Name of the document\n\\return The id of the document"},
{text: "Void.getHtmlElementIndex", help: "<b>Integer getHtmlElementIndex(String p_name)<\/b>\n\nThis function can only be called from a screen definition, it will fail if called from a regular script.\n\nThis method will get the index of the specified html element. This is useful if you want to insert elements after a particular html element, and you do not know the index of it.\n\n\\param p_name the name of the html element you want to retrieve the index of\n\\return the index of the specified element"},
{text: "Void.getNumHtmlElements", help: "<b>Integer getNumHtmlElements()<\/b>\n\n\\return The current number of the HtmlElements in the current screen."},
{text: "Void.getParserParameterCount", help: "<b>Integer getParserParameterCount(String paramName)<\/b>\n\nReturn the number of values for the given parameters in the global Parser object.\n\n\\param paramName The name of the parameter\n\\return The number of values for the parameter the Parser."},
{text: "Void.getParserVariableCount", help: "<b>Integer getParserVariableCount(String varName)<\/b>\n\nReturns the number of values for the specified value in the global Parser instance.\n\n\\param varName The name of the variable.\n\\return The number of values for the variable."},
{text: "Void.getPID", help: "<b>Integer getPID()<\/b>\n\nThis method will return the PID of the executable that the script is running in"},
{text: "Void.getPriorityIdFromName", help: "<b>Integer getPriorityIdFromName(String p_0)<\/b>\n\nReturns the id of the priority with the given name.\n\n\\param name Name of the document\n\\return The id of the priority"},
{text: "Void.getScreenElementId", help: "<b>Integer getScreenElementId(Integer index)<\/b>\n\nThis function can only be called from a screen definition, it will fail if called from a regular script.\n\nIt returns the id of the screen element with the given index in the current screen definition.\n\nThe index can be retrieved with getHtmlElementIndex(elementName).\n\n\\param index The id of the element\n\\return The id of the element"},
{text: "Void.getScreenElementType", help: "<b>Integer getScreenElementType(Integer index)<\/b>\n\nThis function can only be called from a screen definition, it will fail if called from a regular script.\n\nIt returns the type of the screen element with the given index in the current screen definition.\n\nThe index can be retrieved with getHtmlElementIndex(elementName).\n\n\\param index The index of the element\n\\return An integer defining the type of the element\n\nTypes are:\n\n-- Simple elements\nTypeAnchorLine = 1,\nTypeInfoFields = 2,\nTypeGrid = 3,\nTypeHR = 4,\nTypeBR = 5,\nTypeSubHeader = 6,\nTypeParserCode = 7,\nTypeMessages = 8,\nTypeEjScript = 9,\nTypeHtmlGrid = 10,\nTypePlanner = 11,\nTypeStaticGrid = 12,\nTypeDrillDown = 13,\nTypeGenericGrid = 14,\nTypeInfoFields2 = 15,\nTypeExtraTableEntriesGrid = 16,\nTypeDirectedAcyclicGraph = 17,\n\n-- Form elements\nTypeText = 101,\nTypeTextarea = 102,\nTypeSelectCategory = 103,\nTypeSelectCustomer = 104,\nTypeSelectCompany = 105,\nTypeSelectDate = 106,\nTypeSelectDateTime = 107,\nTypeSelectTime = 108,\nTypeButtonRow = 109,\nTypeCheckbox = 110,\nTypeEditor = 111,\nTypeInvoice = 112,\nTypeSelectUser = 113,\nTypeSelectExtraField = 114,\nTypeSelect = 115,\nTypeSendTo = 116,\nTypeSelectReplyTemplate = 117,\nTypeSelectTimeSpan = 118,\nTypeSelectRelation = 119,\nTypeSelectPriority = 120,\nTypeCc = 121,\nTypeAttachment = 122,\nTypeSelectSlevel = 123,\nTypeCustomers = 124,\nTypeSelectFaq = 125,\nTypeSelectDictionaryLang = 126,\nTypeButton = 127,\nTypeSelectMultipleRelations = 128,\nTypeTreeExplorer = 129,\nTypePinEdit = 130,\nTypeContactRecipients = 131,\nTypeTicketStatus = 132,\nTypeSelectMessage = 133,\nTypeCategoryMembership = 134,\nTypeAddressBook = 135,\nTypeRelatedDropdowns = 136,\nTypeSelectTicketStatus = 137,\nTypeSelectTable = 138,\nTypeFckEdit = 139,\nTypeWhere = 140,\nTypeSelectInsertText = 141,\nTypeRadioButtons = 142,\n\n-- Groups\nTypeFieldset = 201,\nTypeLayoutTable = 202,\nTypePanes = 203,\nTypePane = 204,\nTypeVerticalTable = 205,\n\n-- Group end marker\nTypeGroupEnd = 301"},
{text: "Void.getScriptId", help: "<b>Integer getScriptId(String idString)<\/b>\n\nReturns the id of the script matching the idString parameter\n\n\\param idString The id string of the script\n\\return The id of the script matching the idString parameter. Returns null if no match found"},
{text: "Void.getStatusIdFromName", help: "<b>Integer getStatusIdFromName(String p_0)<\/b>\n\nReturns the id of the status with the given name.\n\n\\param name Name of the document\n\\return The id of the status"},
{text: "Void.getSystemFlags", help: "<b>Integer getSystemFlags()<\/b>\n\nGet the system flags. This is the same value as is stored in the database table config.flags.\n\n\\return flags"},
{text: "Void.Integer", help: "<b>Integer Integer(Integer value)<\/b>\n\nInteger constructor\n\n\\param value Integer to copy\n\\return Integer object"},
{text: "Void.Integer", help: "<b>Integer Integer(String value)<\/b>\n\nInteger constructor. Will parse a String value and create an Integer object.\n\n\\param value String value containing an integer value\n\\return Integer object"},
{text: "Void.langToId", help: "<b>Integer langToId(String langCode)<\/b>\n\nReturns the id of the given language code.\n\nIf no match, it returns 0 (which is norwegian)\n\n\\param langVar Language code, ie \"no\", \"en\", etc\n\\return Id of the given language code"},
{text: "Void.modulo", help: "<b>Integer modulo(Integer a, Integer b)<\/b>\n\nReturns a modulo b. This can also be done with the syntax \"a % b\".\n\n\\param a The number to divide.\n\\param b The number to divide by.\n\\result The result of a modulo b"},
{text: "Void.rand", help: "<b>Integer rand(Integer min, Integer max)<\/b>\n\nReturns a random value between min and max. The seed is set by the cgi application when it is invoked.\n\n\\param min The minimum value to return.\n\\param max The maxium value to return.\n\\return A random value min <= r <= max"},
{text: "Void.saveCgiAttachment", help: "<b>Integer saveCgiAttachment(String p_varName)<\/b>\n\nWill save the the attachment in cgi variable with name given in p_varName and return the id of the attachment record in the attachment table.\n\n\\param p_varName The name of cgi variable\n\\return The id of the saved attachment"},
{text: "Void.getSelectionIds", help: "<b>Integer[] getSelectionIds(Integer p_0)<\/b>\n\nReturns the ids of the objects in the selection with given id.\n\n\\param p_0 The id of the selection\n\\return The ids of the objects in the selection"},
{text: "Void.getFavourites", help: "<b>IntegerArray getFavourites(String table)<\/b>\n\nReturns an array containing the ids of all favourites in the given table.\n\nParameter:\n- table: Name of table\n\nReturns: Integer array containing ids of favourites"},
{text: "Void.saveAllCgiAttachments ", help: "<b>IntegerArray saveAllCgiAttachments (String name)<\/b>\n\nSaves all cgi attachments with the given name.\n\n\\param name The name of attachments to be saved.\n\\return An array containing the attachment ids of all the saved attachments."},
{text: "Void.License", help: "<b>License License(String host, String license)<\/b>\n\nDeprecated in 7.1.\n\nLicense constructor.\n\n\\param host Hostname string\n\\param license License key\n\\return License object"},
{text: "Void.MacroParameter", help: "<b>MacroParameter MacroParameter(String p_0, String p_1, Map p_2, String p_3, String p_4, Bool p_5)<\/b>\n\nThis function constructs and returns a macroparameter set with the six parameters passed in.\n\nParameters:\n - p_0: Name, the name of the parameter\n - p_1: Type, the type of the parameter\n - p_2: controlConfig: the control configuration values the type of the parameter allows. Optional\n - p_3: Label. the label of the parameter.\n - p_4: Description, a longer description of the parameter\n - p_5: IsOptional, whether or not the parameter is optional. A boolean"},
{text: "Void.MacroParameter", help: "<b>MacroParameter MacroParameter(String p_0, String p_1, Map p_2, String p_3, String p_4, Bool p_5, String p_6, Bool p_7)<\/b>\n\nThis function constructs and returns a macroparameter set with the six parameters passed in.\n\nParameters:\n - p_0: Name, the name of the parameter\n - p_1: Type, the type of the parameter\n - p_2: controlConfig: the control configuration values the type of the parameter allows. Optional\n - p_3: Label. the label of the parameter.\n - p_4: Description, a longer description of the parameter\n - p_5: IsOptional, whether or not the parameter is optional. A boolean\n - p_6: DefaultValue\n - p_7: DefaultValueIsFixed, whether or not the default value of the parameter is fixed"},
{text: "Void.MacroReturnValue", help: "<b>MacroReturnValue MacroReturnValue(String p_0, String p_1)<\/b>\n\nThis function creates and returns a macro return value.\n\nParameters:\n - p_0: Name, the name of the return value\n - p_1: Description, a longer description og the return value"},
{text: "Void.getMainMenu", help: "<b>MainMenu getMainMenu()<\/b>\n\nReturn a reference to the global MainMenu instance. This class is used for changing the left-hand menu in the system.\n\n\\return The global MainMenu instance."},
{text: "Void.getCgiVariables", help: "<b>Map getCgiVariables()<\/b>\n\nReturns a map of all cgi variables\n\n\\return Map containing all cgi variables"},
{text: "Void.getGlobalStaticMap", help: "<b>Map getGlobalStaticMap()<\/b>\n\nReturns a global and static map. Useful to eliminate the need to fetch the same info several times within one run of the app, blogic events and ticket save especially."},
{text: "Void.getScreenElementConfig", help: "<b>Map getScreenElementConfig(Integer index)<\/b>\n\nThis function can only be called from a screen definition, it will fail if called from a regular script.\n\nIt returns the config of the screen element with the given index in the current screen definition.\n\nThe index can be retrieved with getHtmlElementIndex(elementName).\n\n\\param index The index of the element\n\\return A map containing the config of the element"},
{text: "Void.getSessionVariables", help: "<b>Map getSessionVariables()<\/b>\n\nReturns a map containing all session variables for the current session."},
{text: "Void.getVariables", help: "<b>Map getVariables()<\/b>\n\nReturns a map containing all run time environment variables (available through getVariable())."},
{text: "Void.getWarnings", help: "<b>Map getWarnings()<\/b>\n\nReturn a list of the current system warnings. Warnings are messages intended for system administrators, such as email failure warnings, expired FAQ entries, etc. They are normally listed in the status screen.\n\n\\return Map containing all warnings."},
{text: "Void.Map", help: "<b>Map Map()<\/b>\n\nConstructor for Map which returns an empty map."},
{text: "Void.Map", help: "<b>Map Map(String text)<\/b>\n\nMap constructor.\n\nThis constructor will parse a string of [name] = [value] and insert it into\n  a Map, which will be returned. The string may look something like\n  this:\n\n    Foo = bar\n    helpFile = c:\\winnt\\help.hlp\n    someStirng = This is a test: 2 + 2 = 4\n\nIt also supports multiple-line values, indicated by value starting with whitespace.\n  E.g.\n    Foo = this is a value\n     which spans several lines,\n     and that can be quite\n     convenient.\n\n  The first whitespace of a continuing line is deleted.\n\n\\param text String with names and values\n\\return Map object containing name-value pairs."},
{text: "Void.mapValue", help: "<b>Map mapValue(String value)<\/b>\n\nThis function allocates a new map and maps the given value to the string \"value\".\n\nParameters:\n- value: String\n\nReturns a map containing the value."},
{text: "Void.faqSearch", help: "<b>Parser faqSearch(Integer root, Integer access, String message, Parser p, Integer max)<\/b>\n\nThis method will do a faq search, using the same search engine as the customer pages do. It will fill the parser with the result. The following parser variables are available (sorted, where the top most is the best hit):\n\nCategory parser array:\nfaq.categoryId - the id of the matching category\nfaq.categoryName - the name of the matching category\nfaq.categoryLink - a url to the customer pages to the matching category\nfaq.categoryDescription - the decription of the matching category\nfaq.categoryScore - the score of the matching category, given in percentage with 2 decimals precision\n\nEntry parser array:\nfaq.entryId - the id of the matching entry\nfaq.entryName - the name of the matching entry\nfaq.entryLink - a url to the customer pages to the matching entry\nfaq.entryQuestion - the question part of the matching entry\nfaq.entryScore - the score of the matching entry, given in percentage with 2 decimals precision\n\n\\param Integer root the id of the category folder where you want to search from. -1 for the whole tree\n\\param Integer access indicates what the minimum access one need for this search. See below for access codes\n\\param message String the words to search for. It will search for words containing one or more of these. Better hits gets better score\n\\param p A parser with a script for checking further access. Use an empty parser if you do not want this. The script is in the same format as used in the GUI\n\\param max Integer indicating the max number of hits\n\nAccess codes:\n      AccessPrivate = 1\n      AccessInternal = 2\n      AccessRegisteredCustomers = 3\n      AccessPublic = 4"},
{text: "Void.getParser", help: "<b>Parser getParser()<\/b>\n\nReturn a reference to the global Parser instance.\n\n\\return The reference to the Parser instance."},
{text: "Void.buildUrl", help: "<b>String buildUrl()<\/b>\n\nThis function will return all the POST and GET variables for the current url."},
{text: "Void.combineHtmlStrings", help: "<b>String combineHtmlStrings(Vector htmlStrings)<\/b>\n\nThis function will take several strings, each containing a html document, and combine them into one html string.\n\nThe head contents in each string is combined into the head tag of the output string, except for the title tag. The title tag is taken from the first string in the vector.\n\nThe body content is likewise combined into the body tag of the output string. All strings except for the first will have their body tags converted to div tags.\n\nThe first string of the vector is considered to be the \"main\" html document, which the other ones are appended to."},
{text: "Void.convertStatus", help: "<b>String convertStatus(Integer status)<\/b>\n\nThis method will convert a status given by its integer identifier to its string representation. The method is language dependent."},
{text: "Void.encodeBase64", help: "<b>String encodeBase64(Byte[] data)<\/b>\n\nEncode an array of Byte's to a base 64 string\n\n\\param data Array of bytes to encode\n\\return Base64 encoded string"},
{text: "Void.encodeSHA1", help: "<b>String encodeSHA1(String value)<\/b>\n\nThis function generates and returns a hash from a specified value using the SHA1 encoding algorithm. This can be used to ensure data integrity. (The hash cannot be decrypted back)\n\nExample code:\n\nString s = \"Hello world!\";\n\nprintLine(encodeSHA1(\"Hello there!\")); \/\/ Prints \"6b19cb3790b6da8f7c34b4d8895d78a56d078624\"\nprintLine(encodeSHA1(\"Hello world!\")); \/\/ Prints \"d3486ae9136e7856bc42212385ea797094475802\"\nprintLine(encodeSHA1(s));              \/\/ Prints \"d3486ae9136e7856bc42212385ea797094475802\"\n\n\/\/ Notice that the same value always returns the same hash (formatted as hex)"},
{text: "Void.encodeSHA256", help: "<b>String encodeSHA256(String key, String value)<\/b>\n\nThis function generates and returns a hash from a specified key-value pair using the SHA256 encoding algorithm. This can be used to ensure data integrity. (The hash cannot be decrypted back)\n\nExample code:\n\nString s = \"Hello world!\";\n\nprintLine(encodeSHA256(\"test\", \"Hello there!\")); \/\/ Prints \"39bf407008986fa79eac9cb0b3c8da3fb46acdd6f71721e38e6c4bbf1d14c222\"\nprintLine(encodeSHA256(\"test\", \"Hello world!\")); \/\/ Prints \"1700f488c1e47cf1a8e8337c0a51d176291a5b4a200fe9bab866765a86edc0a4\"\nprintLine(encodeSHA256(\"test\", s));              \/\/ Prints \"1700f488c1e47cf1a8e8337c0a51d176291a5b4a200fe9bab866765a86edc0a4\"\n\n\/\/ Notice that the same key-value pair always returns the same hash (formatted as hex)"},
{text: "Void.executeMacro", help: "<b>String executeMacro(String p_0)<\/b>\n\nThis function is the outermost function for executing a macro.\n\nParameters:\n\n - p_0: input parameters"},
{text: "Void.executeScript", help: "<b>String executeScript(String p_0, Map p_1)<\/b>\n\n"},
{text: "Void.getCgiUrl", help: "<b>String getCgiUrl()<\/b>\n\nReturn the cgiUrl value from the config table. Used for creating urls.\n\n\\return The string stored as the cgiUrl, e.g. \"http:\/\/ejournal.company.com\"."},
{text: "Void.getCgiVariable", help: "<b>String getCgiVariable(String varName)<\/b>\n\nReturn the CGI variable with the given name.\n\n\\param varName The name of the CGI variable to return."},
{text: "Void.getCookie", help: "<b>String getCookie(String name)<\/b>\n\nReturn the CGI cookie with the given name.\n\n\\param name The name of the cookie to return."},
{text: "Void.getCurrent", help: "<b>String getCurrent(String key)<\/b>\n\nGet the value of the given key from the map of values common to all of the SuperOffice web applications running.\n\nParameter:\n- key: string key\n\nReturns: the corresponding value."},
{text: "Void.getCustomerMainEmail", help: "<b>String getCustomerMainEmail(Integer custId)<\/b>\n\nThis method will return the main email of the specified customer. An empty string is returned if the customer does not have an email address or the customer does not exist.\n\n\\param custId The id of the customer or person"},
{text: "Void.getDefaultElementConfig", help: "<b>String getDefaultElementConfig(Integer type, String table, String language)<\/b>\n\nReturns the default config for an element type given a table and language.\n\n\\param type Type of element. Can be 14 (GenericGrid), 15 (InfoField), or 140 (Where)\n\\param table The table for the config (usually ticket, customer, company or the name of an extratable)\n\\param language The language of the config\n\\return The config as a string with name = value lines"},
{text: "Void.getEnvVariable", help: "<b>String getEnvVariable(String name)<\/b>\n\nReturn the OS environment varibale with the given name.\n\n\\param name The name of the variable."},
{text: "Void.getExecutable", help: "<b>String getExecutable()<\/b>\n\nThis method will return the executable with full path which the current script is running in."},
{text: "Void.getGlobalVariable", help: "<b>String getGlobalVariable(String name)<\/b>\n\nGet a value from the global variables (used for communication between the script different scripts).\n\n\\param key The name of the variable to receive."},
{text: "Void.getHtmlElementName", help: "<b>String getHtmlElementName(Integer index)<\/b>\n\nReturns the name of the element with the given index\n\n\\param index Index of the element\n\\return The name of the element"},
{text: "Void.getLanguageVariable", help: "<b>String getLanguageVariable(String langVar)<\/b>\n\nThis function returns the string of the given language variable in the language of the current user\n\nIt will search in the language variables for the current screen in addition to the common language variables\n\n\\param langVar The language variable, ie lang_global_global_okSave\n\\return The string of the language variable in the language of the current user"},
{text: "Void.getLanguageVariable", help: "<b>String getLanguageVariable(String langVar, String langCode)<\/b>\n\nThis function returns the string of the given language variable in the given language.\n\nIt will search in the language variables for the current screen in addition to the common language variables\n\n\\param langVar The language variable, ie lang_global_global_okSave\n\\param langCode The language code. Can be \"no\", \"en\", \"de\", \"se\", \"dk\" or \"nl\"\n\\return The language variable in the language given by langCode"},
{text: "Void.getNtUser", help: "<b>String getNtUser()<\/b>\n\nReturn the username supplied from the web server. Works with Apache and IIS, but required user authentification on the web server.\n\nDerived from UNMAPPED_REMOTE_USER or REMOTE_USER environment variable\n\n\\return nt user name"},
{text: "Void.getParserParameter", help: "<b>String getParserParameter(String name)<\/b>\n\nReturns the value of the given parameter in the global Parser instance.\n\n\\param name The name of th parameter.\n\\return The value of the parameter."},
{text: "Void.getParserParameter", help: "<b>String getParserParameter(String paramName, Integer index)<\/b>\n\nReturns the value at the given index for the given parameter in the global Parser instance.\n\n\\param name The name of the paramter.\n\\param index The zero-based index of the value to return.\n\\return The parameter value for the given name and index."},
{text: "Void.getParserVariable", help: "<b>String getParserVariable(String varName)<\/b>\n\nReturns the first value for the given variable from the global Parser instance.\n\n\\param varName the name of the variable to return.\n\\return The first value for this variable."},
{text: "Void.getParserVariable", help: "<b>String getParserVariable(String varName, Integer row)<\/b>\n\nReturns the parservariable on the specified row of the parser query result set, rows are starting from 0.\n\n\\param varName The name of the variable.\n\\param row The zero-based index of the value to return.\n\\return The value with the given name at the given index."},
{text: "Void.getParserVariableAsCSV", help: "<b>String getParserVariableAsCSV(String paramName, Bool forceQuoting)<\/b>\n\nReturn a variable from the global Parser instance as a comma separated string.\n\n\\param paramName The name of the variable to return.\n\\param forceQuoting If True, then each element will be quoted. If false, only elements which needs to be quoted (i.e. when they contain a comma) will be quoted."},
{text: "Void.getProgram", help: "<b>String getProgram(Integer progId)<\/b>\n\nReturns the url of the program module specified by progId.\nprogId can be:\n------------------------------------------\n    modNull        = 0x00000000,\n    modTicket      = 0x00000001,\n    modAdmin       = 0x00000002,\n    modDocument    = 0x00000004,\n    modHelp        = 0x00000008,\n    modCustomer    = 0x00000010,\n    modKnowledge   = 0x00000020,\n    modPlanner     = 0x00000040,\n    modAds         = 0x00000080,\n    modSchedule    = 0x00000100,\n    modStat        = 0x00000200,\n    modRms         = 0x00000400,\n    modCustLang    = 0x00000800,\n    modExtDb       = 0x00001000,\n    modAdvancedFAQ = 0x00002000,\n    modChat        = 0x00004000,\n    modSpm         = 0x00008000,\n    modSoap        = 0x00010000,\n    modSoapPublic  = 0x00020000,\n    modSms         = 0x00040000,\n    modBlogic      = 0x00080000,\n    modRetail      = 0x00100000\n------------------------------------------\nThese numbers are in hexadecimal notation. Convert to decimal before use.\n\n\\param progId The id of the program to return.\n\\return The url for the given program.\n\nInteger modTicket = 1;\nInteger modAdmin = 2;\nInteger modDocument = 4;\nInteger modHelp = 8;\nInteger modCustomer = 16;\nInteger modKnowledge = 32;\nInteger modPlanner = 64;\nInteger modAds = 128;\nInteger modSchedule = 256;\nInteger modStat = 512;\nInteger modRms = 1024;\nInteger modCustLang = 2048;\nInteger modExtDb = 4096;\nInteger modAdvancedFAQ = 8192;\nInteger modChat = 16384;\nInteger modSpm = 32768;\nInteger modSoap = 65536;\nInteger modSoapPublic = 131072;\nInteger modSms = 262144;\nInteger modBlogic = 524288;\nInteger modRetail = 1048576;"},
{text: "Void.getProgramAdmin", help: "<b>String getProgramAdmin()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramAjax", help: "<b>String getProgramAjax()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramBlogic", help: "<b>String getProgramBlogic()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramChat", help: "<b>String getProgramChat()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramCustomer", help: "<b>String getProgramCustomer()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramDocument", help: "<b>String getProgramDocument()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramHelp", help: "<b>String getProgramHelp()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramKnowledge", help: "<b>String getProgramKnowledge()<\/b>\n\n\\returns The URL of knowledgebase (document.exe)"},
{text: "Void.getProgramRms", help: "<b>String getProgramRms()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramSoap", help: "<b>String getProgramSoap()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramStat", help: "<b>String getProgramStat()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getProgramTicket", help: "<b>String getProgramTicket()<\/b>\n\nReturns the url of the program module specified after getProgram.\n\n\\return The url for the given program."},
{text: "Void.getReplyTemplateBody", help: "<b>String getReplyTemplateBody(Integer id, Bool useHTML, Integer langId)<\/b>\n\nReturns reply template text as specified by the parameters.\n\n\\param id The database id of the template.\n\\param useHTML selects either the HTML or plain text version.\n\\param langId Selects preferred language. -1 specifies default."},
{text: "Void.getReplyTemplateSubject", help: "<b>String getReplyTemplateSubject(Integer id, Integer langId)<\/b>\n\nReturns reply template subject.\n\n\\param id The database id of the template.\n\\param langId Selects preferred language. -1 specifies default."},
{text: "Void.getScreenElementName", help: "<b>String getScreenElementName(Integer index)<\/b>\n\nThis function can only be called from a screen definition, it will fail if called from a regular script.\n\nIt returns the name of the screen element with the given index in the current screen definition.\n\nThe index can be retrieved with getHtmlElementIndex(elementName).\n\n\\param index The index of the element\n\\return An integer defining the type of the element"},
{text: "Void.getSessionVariable", help: "<b>String getSessionVariable(String name)<\/b>\n\nThis function makes it possible to store variables in the database which the web application can use\nas long as a session lives. That is until a user logs out.\n\n\\param name Name of variable to read\n\\return String value if found"},
{text: "Void.getSystemLang", help: "<b>String getSystemLang()<\/b>\n\nThis function returns the active system language."},
{text: "Void.getUserLang", help: "<b>String getUserLang()<\/b>\n\nThis function returns the active user language."},
{text: "Void.getUsername", help: "<b>String getUsername(Integer userId)<\/b>\n\nGet username from user id.\n\n\\param userId The user id.\n\\return Username"},
{text: "Void.getVariable", help: "<b>String getVariable(String name)<\/b>\n\nReturns the value in the global environment (used for communication between the script the calling context).\n\nactiveUser\n\n\\param name The name of the variable.\n\\return The value of the variable."},
{text: "Void.htmlConvToText", help: "<b>String htmlConvToText(String text)<\/b>\n\nConvert the given Html text to plain text.\n\n\\param text A html text.\n\\return A textual version of the Html text."},
{text: "Void.idToLang", help: "<b>String idToLang(Integer langId)<\/b>\n\nReturns the code of the given language id.\n\n\\param langId Language id\n\\return Language code of the given language id"},
{text: "Void.makePassword", help: "<b>String makePassword(Integer p_len)<\/b>\n\nCreate random password of length p, with the given seed characters.\n\n\/param p_len Length of password\n\/return The random string generated password"},
{text: "Void.makePassword", help: "<b>String makePassword(Integer p_len, String p_seed)<\/b>\n\nCreate random password of length p, with the given seed characters.\n\n\/param p_len Length of password\n\/param p_seed Valid characters\n\/return The random string generated password"},
{text: "Void.runProgram", help: "<b>String runProgram(String command, String codepage)<\/b>\n\nExecute the program, return what was sent to stdout. The owner of the process\nrunning the ejScript need permissions to execute the program.\n\n\\param command Command line - path to program and parameters\n\\param codepage Codepage used\n\\return output (stdout) from executing the command line"},
{text: "Void.runProgram", help: "<b>String runProgram(String p_cmd)<\/b>\n\nExecute the program, return what was sent to stdout. The owner of the process running the ejScript need permissions to execute the program.\n\n\\p_cmd Command line - path to program and parameters\n\\return output (stdout) from executing the command line"},
{text: "Void.setSessionVariable", help: "<b>String setSessionVariable(String p_0, String p_1)<\/b>\n\nWrites a SessionObject entry to the database.\n\nParameters:\n - p_name: entry name. May be empty, in which case the id of the first row will be used.\n - p_value: entry value"},
{text: "Void.String", help: "<b>String String(Byte[] byteArray)<\/b>\n\nString constructor, which builds a string from a byte array.\n\nNote. This function does not support Unicode.\n\n\\param byteArray Array of bytes containing a string\n\\return String object"},
{text: "Void.String", help: "<b>String String(Byte[] byteArray, String codepage)<\/b>\n\nString constructor, which builds a string from a byte array.\n\n\\param byteArray Array of bytes containing a string\n\\param codepage Codepage to use\n\\return String object"},
{text: "Void.String", help: "<b>String String(String value)<\/b>\n\nString constructor\n\n\\param value String value to copy\n\\return String object."},
{text: "Void.getCgiVariableArray", help: "<b>String[] getCgiVariableArray(String name)<\/b>\n\nReturns a string array of all cgi variables matching the given name\n\n\\param name of the cgi variables to match\n\\return String array of matching cgi variables"},
{text: "Void.getFunctionList", help: "<b>String[][] getFunctionList()<\/b>\n\nThis functions returns an array with description of all ejscript functions defined in the system.\n\nThe inner array contains the following values:\n\n0 - class name\n1 - return type\n2 - function name\n3 - paramter list\n4 - author\n\n\\return Double String array with description of all ejscript functions."},
{text: "Void.getCurrentTime", help: "<b>Time getCurrentTime()<\/b>\n\nGet the current time.\n\n\\param Current time"},
{text: "Void.Time", help: "<b>Time Time(String time)<\/b>\n\nParse string and create a Time object\n\nFormat:\n    HH:MM:SS\n\n\\param time Time string with format HH:MM:SS\n\\return Time object."},
{text: "Void.Time", help: "<b>Time Time(Time time)<\/b>\n\nTime constructor\n\n\\param time Time object to copy\n\\return Time object"},
{text: "Void.getLocalTimeZone", help: "<b>TimeZone getLocalTimeZone()<\/b>\n\nReturn the local timezone.\n\n\\return The local timezone."},
{text: "Void.getActiveUser", help: "<b>User getActiveUser()<\/b>\n\nThis function returns a reference to the active user instance."},
{text: "Void.Vector", help: "<b>Vector Vector(IntegerArray values)<\/b>\n\nA Vector constructor that converts an IntegerArray into a Vector.\n\nParameter:\n- values: IntegerArray of values to be converted\n\nReturns: Vector object object"},
{text: "Void.addAction", help: "<b>Void addAction(String button, String script, Bool doCheck)<\/b>\n\nAdds an action to the Screen definition associated with this script (i.e. when the script is the load script for a Screen). An action is essentially a connection between a button with a given name, and a script. When a button in the screen is pressed, the list of actions are checked, and the action with the matching button name (e.g. \"ok\", \"cancel\", \"addSomething\") will be found and the script will be executed.\n\n\\param button The name of the associated button, such as \"ok\".\n\\param script The script code to execute for this action.\n\\param doCheck If this parameter is True, then the contents of all input elements will be checked for validity before the action is executed. Normally, this field should be True for buttons which submit the form, and False for buttons which add lines to grids, etc."},
{text: "Void.assert", help: "<b>Void assert(Bool condition)<\/b>\n\nThis method is used primarily with unit testing.\nIt will throw an AssertException if \"condition\" is false. The exception contains the line number where the assert occurred.\n\n\\param condition The bool to test"},
{text: "Void.assertEquals", help: "<b>Void assertEquals(Bool bool1, Bool bool2)<\/b>\n\nThis method is used primarily with unit testing.\nIt will throw an AssertException if bool1!=bool2. The exception contains the line number where the assert occurred.\n\n\\param bool1 The first bool to test\n\\param bool2 The second bool to test"},
{text: "Void.assertEquals", help: "<b>Void assertEquals(Float float1, Float float2)<\/b>\n\nThis method is used primarily with unit testing.\nIt will throw an AssertException if float1!=float2. The exception contains the line number where the assert occurred.\n\n\\param float1 The first float to test\n\\param float2 The second float to test"},
{text: "Void.assertEquals", help: "<b>Void assertEquals(Integer integer1, Integer integer2)<\/b>\n\nThis method is used primarily with unit testing.\nIt will throw an AssertException if integer1!=integer2. The exception contains the line number where the assert occurred.\n\n\\param integer1 The first integer to test\n\\param integer2 The second integer to test"},
{text: "Void.assertEquals", help: "<b>Void assertEquals(String string1, String string2)<\/b>\n\nThis method is used primarily with unit testing.\nIt will throw an AssertException if string1!=string2. The exception contains the line number where the assert occurred.\n\n\\param string1 The first string to test\n\\param string2 The second string to test"},
{text: "Void.debugWait", help: "<b>Void debugWait(String info)<\/b>\n\nPause the script if it is in debug mode (see enableDebug). The info string will be stored in the database entry for the current debug session, so that it can be viewed in the debugger.\n\n\\param info String to display in the debugger."},
{text: "Void.enableDebug", help: "<b>Void enableDebug(String debugId)<\/b>\n\nEnable debugging for the current script, with the given debugId. If the executing environment contains the same debugId, then this script will enter debug mode. To set the debugId in a browser, use the \"?action=debug\" parameter. This functionality is designed to allow for debugging scripts which are operative. I.e. it is possible to debug a script, while it will continue to run as normal for other users.\n\n\\param debugId A string which will be compared with the debugId in the executing environment."},
{text: "Void.executeDbiAgentSchedule", help: "<b>Void executeDbiAgentSchedule(Integer scheduleId, Map values)<\/b>\n\nManually start a DBI agent schedule. Its possible to supply a map of parameter values used by the schedule.\n\n\\param scheduleId The id of the schedule to run\n\\param values Name-value pairs with parameters"},
{text: "Void.executeSQLQuery", help: "<b>Void executeSQLQuery(String sql)<\/b>\n\nThis will execute the specified sql statement. Note that this method does not return anything. In case of an error in the SQL statement, an exeception will be thrown."},
{text: "Void.exitWithMessage", help: "<b>Void exitWithMessage(String p_0)<\/b>\n\nExits running the rest of the script and displays a message with text from the parameter.\n\nUseful for exiting a script when for example detecting that the current user doesn't have access to a ticket."},
{text: "Void.flushCaches", help: "<b>Void flushCaches()<\/b>\n\nThis will flush the caches in NetServer."},
{text: "Void.forwardMail", help: "<b>Void forwardMail(String p_mail, String p_to, Integer p_ticketId)<\/b>\n\nForward preformatted email\n\n\\param   p_mail Preformated mail\n\\param   p_to Preformated mail\n\\param   p_ticketId Tag"},
{text: "Void.log", help: "<b>Void log(String msg)<\/b>\n\nWrites a message to the new log (the one in the database), which can be access with \"rms?action=newLog\".\n\n\\param msg The message to write."},
{text: "Void.logMessage", help: "<b>Void logMessage(String p_0)<\/b>\n\nThis function will write a message to the logfile.\n\nParameters:\n - message: The message to log."},
{text: "Void.print", help: "<b>Void print(String s)<\/b>\n\nPrints the string to the screen. Will only work in certain contexts (i.e. when there is a screen to print to).\n\n\\param s The string to print."},
{text: "Void.printBinary", help: "<b>Void printBinary(Byte[] bytes)<\/b>\n\nOutput the bytes to standard output stream.\n\n\\param bytes The bytes to output"},
{text: "Void.printDebug", help: "<b>Void printDebug(String debug)<\/b>\n\nThis function adds the input debug to the debugstring which will be shown in the debug window.\n\n\\param String debug, the string to print"},
{text: "Void.printLine", help: "<b>Void printLine(String p_line)<\/b>\n\n\\param p_line: The line to print.\n\nUse this method to print lines into standard output without appending \\r\\n in p_line."},
{text: "Void.removeHtmlElement", help: "<b>Void removeHtmlElement(Integer index)<\/b>\n\nThis function can only be called from a screen definition, it will fail if called from a regular script\n\nIt will remove the element with the given index\n\n\\param index The index of the element to remove"},
{text: "Void.setChatStatus", help: "<b>Void setChatStatus(Integer sessionId, Integer status)<\/b>\n\nThis function allows you to change the status of a chat session. The available statuses are:\n    StatusInvalid = 0,\n    StatusPreChatForm = 1,\n    StatusFaq = 2,\n    StatusOfflineForm = 3,\n    StatusInQueue = 4,\n    StatusCustomerLast = 5,\n    StatusUserLast = 6,\n    StatusFinished = 7,\n    StatusDeleted = 8,\n    StatusClosed = 9,\n    StatusRequestPosted = 10,\n    StatusClosedFromQueue = 11"},
{text: "Void.setCookie", help: "<b>Void setCookie(String name, String value, Bool persistent)<\/b>\n\nNB! Doesn't work in the customer centre, use parser variable with _ instead."},
{text: "Void.setCurrent", help: "<b>Void setCurrent(String key, String value)<\/b>\n\nMap the given key and value in the map of the values common for all the SuperOffice web applications running.\n\nParameters:\n- key\n- value"},
{text: "Void.setFromCgi", help: "<b>Void setFromCgi()<\/b>\n\nSet all the elements of the associated screen from the global CGI instance. This is normally done when a screen is loaded\/reloaded, but after the load script. This function allows one to force this element initialization in the script, so that values may be accessed."},
{text: "Void.setGlobalVariable", help: "<b>Void setGlobalVariable(String name, String value)<\/b>\n\nSets the value of a global variable (used for communication between different scripts).\n\n\\param name   The name of the variable.\n\\param value The value of the variable."},
{text: "Void.setHidden", help: "<b>Void setHidden(String name, String value)<\/b>\n\nSet the value of a hidden variable in the associated screen. Hiden variables are values which are carried through a screen, and which can be accessed by the following scripts.\n\n\\param name The name of the variable.\n\\param value The value of the variable."},
{text: "Void.setPageFocusFirstControl", help: "<b>Void setPageFocusFirstControl(Bool p_0)<\/b>\n\n"},
{text: "Void.setPageOnLoad", help: "<b>Void setPageOnLoad(String p_0)<\/b>\n\n"},
{text: "Void.setPageRefresh", help: "<b>Void setPageRefresh(Integer p_seconds)<\/b>\n\nThis method will set the page meta refresh to the specified seconds, thus making the screen refresh. If this method is used in a script that is not connected to a screen, nothing will happen.\n\n\\param p_seconds Number of seconds for refresh"},
{text: "Void.setPageTitle", help: "<b>Void setPageTitle(String title)<\/b>\n\nThis method will alter the page title. You will be able to set the text after the version information."},
{text: "Void.setParserVariable", help: "<b>Void setParserVariable(String name, String value)<\/b>\n\nSet (add) a variable to the global Parser instance.\n\n\\param name The name of the variable.\n\\param value The value of the variable."},
{text: "Void.setSessionVariable", help: "<b>Void setSessionVariable(String name, String value)<\/b>\n\nThis function makes it possible to store variables in the database which the web application can use\nas long as a session lives. That is until a user logs out.\n\n\\param name Name of variable\n\\param value String value to store"},
{text: "Void.setVariable", help: "<b>Void setVariable(String name, String value)<\/b>\n\nSets the value in the global environment (used for communication between the script the calling context).\n\n\\param name The name of the variable.\n\\param value The value of the variable."},
{text: "Void.sleep", help: "<b>Void sleep(Float seconds)<\/b>\n\nSleep (give up cpu) for some time.\nUseful in some cpu intensive loops to maintain a responsive system.\n\nExample:\nsleep(01); \/\/sleeps for about one tenth of a second.\n\n\\param seconds Number of seconds to sleep."},
{text: "Void.parseJSON", help: "<b>XMLNode parseJSON(String jsonDocument)<\/b>\n\nParse an JSON document and generate a tree of XMLNode's.\n\nExample code:\n\nString jsonString = \"{\\\"menu\\\": {\\\"liste\\\": [ \\\"1\\\", \\\"2\\\", \\\"3\\\", true, 123, 1.23 ],\\\"id\\\": \\\"file\\\",\\\"value\\\": \\\"File\\\",\\\"tall\\\": 1.234567,\\\"sant\\\": true,\\\"usant\\\": false,\\\"tom\\\": null,\\\"popup\\\": {\\\"menuitem\\\": [{\\\"value\\\": \\\"New\\\", \\\"onclick\\\": \\\"CreateNewDoc()\\\"},{\\\"value\\\": \\\"Open\\\", \\\"onclick\\\": \\\"OpenDoc()\\\"},{\\\"value\\\": \\\"Close\\\", \\\"onclick\\\": \\\"CloseDoc()\\\"}]}}}\";\n\nXMLNode xmlObject = parseJSON(jsonString); \/\/ Converts jsonString to XML\nprintLine(xmlObject.toJSON(0)); \/\/ Prints out the actual JSON content\n\n\/*\nFor example the following JSON document:\n\n{\"menu\": {\n  \"liste\": [ \"1\", \"2\", \"3\", true, 123, 1.23 ],\n  \"id\": \"file\",\n  \"value\": \"File\",\n  \"tall\": 1.234567,\n  \"sant\": true,\n  \"usant\": false,\n  \"tom\": null,\n  \"popup\": {\n    \"menuitem\": [\n      {\"value\": \"New\", \"onclick\": \"CreateNewDoc()\"},\n      {\"value\": \"Open\", \"onclick\": \"OpenDoc()\"},\n      {\"value\": \"Close\", \"onclick\": \"CloseDoc()\"}\n    ]\n  }\n}}\n\nIs converted to:\n\n<root type=\"object\">\n  <menu type=\"object\">\n    <liste type=\"array\">\n      <item type=\"string\">1<\/item>\n      <item type=\"string\">2<\/item>\n      <item type=\"string\">3<\/item>\n      <item type=\"bool\">true<\/item>\n      <item type=\"number\">123<\/item>\n      <item type=\"number\">1.23<\/item>\n    <\/liste>\n    <id type=\"string\">file<\/id>\n    <value type=\"string\">File<\/value>\n    <tall type=\"number\">1.234567<\/tall>\n    <sant type=\"bool\">true<\/sant>\n    <usant type=\"bool\">false<\/usant>\n    <tom type=\"null\">null<\/tom>\n    <popup type=\"object\">\n      <menuitem type=\"array\">\n        <item type=\"object\">\n          <value type=\"string\">New<\/value>\n          <onclick type=\"string\">CreateNewDoc()<\/onclick>\n        <\/item>\n        <item type=\"object\">\n          <value type=\"string\">Open<\/value>\n          <onclick type=\"string\">OpenDoc()<\/onclick>\n        <\/item>\n        <item type=\"object\">\n          <value type=\"string\">Close<\/value>\n          <onclick type=\"string\">CloseDoc()<\/onclick>\n        <\/item>\n      <\/menuitem>\n    <\/popup>\n  <\/menu>\n<\/root>\n*\/"},
{text: "Void.parseXML", help: "<b>XMLNode parseXML(String xmlDocument)<\/b>\n\nParse an XML document and generate a tree of XMLNode's.\n\n\\param xmlDocument The XML document\n\\return The root XMLNode."},
{text: "Void.XMLNode", help: "<b>XMLNode XMLNode(String p_0)<\/b>\n\nXMLNode constructor. Will parse a String value and create an XMLNode object.\n\n\\param value String value containing an XMLNode value\n\\return XMLNode object"},
{text: "Void.XMLNode", help: "<b>XMLNode XMLNode(XMLNode node)<\/b>\n\nXMLNode constructor\n\n\\param node Node to copy\n\\return XMLNode"}
];
